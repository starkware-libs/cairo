//! > u128 lt

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(i: usize, c: Array<u32>) -> u32 {
    *c[i]
}

//! > casm
[ap + 0] = [fp + -4] + [fp + -5], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 200})

//! > sierra_code
type Array<u32> = Array<u32> [storable: true, drop: true, dup: false, zero_sized: false];
type Box<u32> = Box<u32> [storable: true, drop: true, dup: true, zero_sized: false];
type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type Snapshot<Array<u32>> = Snapshot<Array<u32>> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc snapshot_take<Array<u32>> = snapshot_take<Array<u32>>;
libfunc drop<Array<u32>> = drop<Array<u32>>;
libfunc array_get<u32> = array_get<u32>;
libfunc store_temp<Box<u32>> = store_temp<Box<u32>>;
libfunc unbox<u32> = unbox<u32>;
libfunc rename<u32> = rename<u32>;
libfunc store_temp<u32> = store_temp<u32>;

snapshot_take<Array<u32>>([1]) -> ([2], [3]); // 0
drop<Array<u32>>([2]) -> (); // 1
array_get<u32>([3], [0]) -> ([4]); // 2
store_temp<Box<u32>>([4]) -> ([4]); // 3
unbox<u32>([4]) -> ([5]); // 4
rename<u32>([5]) -> ([6]); // 5
store_temp<u32>([6]) -> ([6]); // 6
return([6]); // 7

test::foo@0([0]: u32, [1]: Array<u32>) -> (u32);

//! > ==========================================================================

//! > u32 lt libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u32, b: u32) -> bool {
    a < b
}

//! > casm
[fp + -4] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 10;
[ap + -1] = [[fp + -5] + 0];
ap += 1;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 770})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::bool = Enum<ut@core::bool, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u32_overflowing_sub = u32_overflowing_sub;
libfunc branch_align = branch_align;
libfunc drop<u32> = drop<u32>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;

u32_overflowing_sub([0], [1], [2]) { fallthrough([3], [4]) 8([5], [6]) }; // 0
branch_align() -> (); // 1
drop<u32>([4]) -> (); // 2
struct_construct<Unit>() -> ([7]); // 3
enum_init<core::bool, 0>([7]) -> ([8]); // 4
store_temp<RangeCheck>([3]) -> ([3]); // 5
store_temp<core::bool>([8]) -> ([8]); // 6
return([3], [8]); // 7
branch_align() -> (); // 8
drop<u32>([6]) -> (); // 9
struct_construct<Unit>() -> ([9]); // 10
enum_init<core::bool, 1>([9]) -> ([10]); // 11
store_temp<RangeCheck>([5]) -> ([5]); // 12
store_temp<core::bool>([10]) -> ([10]); // 13
return([5], [10]); // 14

test::foo@0([0]: RangeCheck, [1]: u32, [2]: u32) -> (RangeCheck, core::bool);

//! > ==========================================================================

//! > u128_le libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u128, b: u128) -> bool {
    a <= b
}

//! > casm
[fp + -3] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 10;
[ap + -1] = [[fp + -5] + 0];
ap += 1;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 770})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::bool = Enum<ut@core::bool, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u128_overflowing_sub = u128_overflowing_sub;
libfunc branch_align = branch_align;
libfunc drop<u128> = drop<u128>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;

u128_overflowing_sub([0], [2], [1]) { fallthrough([3], [4]) 8([5], [6]) }; // 0
branch_align() -> (); // 1
drop<u128>([4]) -> (); // 2
struct_construct<Unit>() -> ([7]); // 3
enum_init<core::bool, 1>([7]) -> ([8]); // 4
store_temp<RangeCheck>([3]) -> ([3]); // 5
store_temp<core::bool>([8]) -> ([8]); // 6
return([3], [8]); // 7
branch_align() -> (); // 8
drop<u128>([6]) -> (); // 9
struct_construct<Unit>() -> ([9]); // 10
enum_init<core::bool, 0>([9]) -> ([10]); // 11
store_temp<RangeCheck>([5]) -> ([5]); // 12
store_temp<core::bool>([10]) -> ([10]); // 13
return([5], [10]); // 14

test::foo@0([0]: RangeCheck, [1]: u128, [2]: u128) -> (RangeCheck, core::bool);

//! > ==========================================================================

//! > u32_le libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(i: usize, c: Array<u32>) -> u32 {
    *c[i]
}

//! > casm
[ap + 0] = [fp + -4] + [fp + -5], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 200})

//! > sierra_code
type Array<u32> = Array<u32> [storable: true, drop: true, dup: false, zero_sized: false];
type Box<u32> = Box<u32> [storable: true, drop: true, dup: true, zero_sized: false];
type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type Snapshot<Array<u32>> = Snapshot<Array<u32>> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc snapshot_take<Array<u32>> = snapshot_take<Array<u32>>;
libfunc drop<Array<u32>> = drop<Array<u32>>;
libfunc array_get<u32> = array_get<u32>;
libfunc store_temp<Box<u32>> = store_temp<Box<u32>>;
libfunc unbox<u32> = unbox<u32>;
libfunc rename<u32> = rename<u32>;
libfunc store_temp<u32> = store_temp<u32>;

snapshot_take<Array<u32>>([1]) -> ([2], [3]); // 0
drop<Array<u32>>([2]) -> (); // 1
array_get<u32>([3], [0]) -> ([4]); // 2
store_temp<Box<u32>>([4]) -> ([4]); // 3
unbox<u32>([4]) -> ([5]); // 4
rename<u32>([5]) -> ([6]); // 5
store_temp<u32>([6]) -> ([6]); // 6
return([6]); // 7

test::foo@0([0]: u32, [1]: Array<u32>) -> (u32);
