//! > branch_align values are pushed to the end

//! > test_runner_name
SmallE2ETestRunnerCostComputation

//! > cairo
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    // The branch_align of the external if statements should have zero value, since the value should
    // be pushed to the inner if statement.
    if x == 0 {
        if x == 1 {
            if x == 2 {
                bar();
            } else {
                bar();
            }
        } else {
            bar();
            bar();
        }
    } else {
        bar();
        bar();
        bar();
    }
}

#[inline(never)]
fn bar() {
    redeposit_gas()
}

//! > enforced_costs
test::bar 10000

//! > gas_solution
#2: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 9780})
#8: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 9680})
#13: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#19: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 100})
#27: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#38: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#51: OrderedHashMap({Const: 9900})

test::foo: OrderedHashMap({Const: 30800})
test::bar: OrderedHashMap({Const: 10000})

//! > gas_solution_no_solver
#2: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#8: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#13: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 19460})
#19: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 19560})
#27: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 9780})
#38: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#51: OrderedHashMap({Const: 9900})

test::foo: OrderedHashMap({Const: 30800})
test::bar: OrderedHashMap({Const: 10000})

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc dup<felt252> = dup<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc felt252_const<1> = felt252_const<1>;
libfunc felt252_sub = felt252_sub;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc felt252_const<2> = felt252_const<2>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc drop<Unit> = drop<Unit>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc jump = jump;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc drop<felt252> = drop<felt252>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc redeposit_gas = redeposit_gas;

dup<felt252>([1]) -> ([1], [2]); // 0
felt252_is_zero([2]) { fallthrough() 38([3]) }; // 1
branch_align() -> (); // 2
felt252_const<1>() -> ([4]); // 3
dup<felt252>([1]) -> ([1], [5]); // 4
felt252_sub([5], [4]) -> ([6]); // 5
store_temp<felt252>([6]) -> ([6]); // 6
felt252_is_zero([6]) { fallthrough() 27([7]) }; // 7
branch_align() -> (); // 8
felt252_const<2>() -> ([8]); // 9
felt252_sub([1], [8]) -> ([9]); // 10
store_temp<felt252>([9]) -> ([9]); // 11
felt252_is_zero([9]) { fallthrough() 19([10]) }; // 12
branch_align() -> (); // 13
store_temp<GasBuiltin>([0]) -> ([0]); // 14
function_call<user@test::bar>([0]) -> ([11], [12]); // 15
drop<Unit>([12]) -> (); // 16
rename<GasBuiltin>([11]) -> ([13]); // 17
jump() { 25() }; // 18
branch_align() -> (); // 19
drop<NonZero<felt252>>([10]) -> (); // 20
store_temp<GasBuiltin>([0]) -> ([0]); // 21
function_call<user@test::bar>([0]) -> ([14], [15]); // 22
drop<Unit>([15]) -> (); // 23
rename<GasBuiltin>([14]) -> ([13]); // 24
rename<GasBuiltin>([13]) -> ([16]); // 25
jump() { 36() }; // 26
branch_align() -> (); // 27
drop<NonZero<felt252>>([7]) -> (); // 28
drop<felt252>([1]) -> (); // 29
store_temp<GasBuiltin>([0]) -> ([0]); // 30
function_call<user@test::bar>([0]) -> ([17], [18]); // 31
drop<Unit>([18]) -> (); // 32
function_call<user@test::bar>([17]) -> ([19], [20]); // 33
drop<Unit>([20]) -> (); // 34
rename<GasBuiltin>([19]) -> ([16]); // 35
rename<GasBuiltin>([16]) -> ([21]); // 36
jump() { 49() }; // 37
branch_align() -> (); // 38
drop<NonZero<felt252>>([3]) -> (); // 39
drop<felt252>([1]) -> (); // 40
store_temp<GasBuiltin>([0]) -> ([0]); // 41
function_call<user@test::bar>([0]) -> ([22], [23]); // 42
drop<Unit>([23]) -> (); // 43
function_call<user@test::bar>([22]) -> ([24], [25]); // 44
drop<Unit>([25]) -> (); // 45
function_call<user@test::bar>([24]) -> ([26], [27]); // 46
drop<Unit>([27]) -> (); // 47
rename<GasBuiltin>([26]) -> ([21]); // 48
struct_construct<Unit>() -> ([28]); // 49
return([21], [28]); // 50
redeposit_gas([0]) -> ([1]); // 51
struct_construct<Unit>() -> ([2]); // 52
store_temp<GasBuiltin>([1]) -> ([1]); // 53
return([1], [2]); // 54

test::foo@0([0]: GasBuiltin, [1]: felt252) -> (GasBuiltin, Unit);
test::bar@51([0]: GasBuiltin) -> (GasBuiltin, Unit);

//! > casm
jmp rel 31 if [fp + -3] != 0;
ap += 2;
[fp + -3] = [ap + 0] + 1, ap++;
jmp rel 18 if [ap + -1] != 0;
ap += 2;
[fp + -3] = [ap + 0] + 2, ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [fp + -4], ap++;
call rel 24;
jmp rel 5;
[ap + 0] = [fp + -4], ap++;
call rel 19;
jmp rel 7;
[ap + 0] = [fp + -4], ap++;
call rel 14;
call rel 12;
jmp rel 9;
[ap + 0] = [fp + -4], ap++;
call rel 7;
call rel 5;
call rel 3;
ret;
[ap + 0] = [fp + -3] + 9900, ap++;
ret;

//! > ==========================================================================

//! > branch_align of withdraw_gas

//! > test_runner_name
SmallE2ETestRunnerCostComputation

//! > cairo
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    // In this case, the failing branch is more expensive than the success branch.
    // The excess created by the external branch_align should be pushed to the next (inner)
    // statements.
    match gas::withdraw_gas() {
        Option::Some(_) => {
            if x == 0 {
                // Here we don't need to withdraw gas, since we have excess created by the external
                // failing branch.
                match gas::withdraw_gas() {
                    Option::Some(_) => {
                        bar();
                    },
                    Option::None(_) => {},
                }
            } else {
                bar();
            }
        },
        Option::None(_) => {
            bar();
            bar();
        },
    }
}

#[inline(never)]
fn bar() {
    redeposit_gas()
}

//! > enforced_costs
test::bar 10000

//! > gas_solution
#0: OrderedHashMap({Const: 0})
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 9430})
#4: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#5: OrderedHashMap({Const: 0})
#6: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#13: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 10160})
#19: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 450})
#29: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#40: OrderedHashMap({Const: 9900})

test::foo: OrderedHashMap({Const: 21170})
test::bar: OrderedHashMap({Const: 10000})

//! > gas_solution_no_solver
#0: OrderedHashMap({Const: 0})
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#4: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#5: OrderedHashMap({Const: 0})
#6: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 9430})
#13: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 19590})
#19: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 9880})
#29: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#40: OrderedHashMap({Const: 9900})

test::foo: OrderedHashMap({Const: 21170})
test::bar: OrderedHashMap({Const: 10000})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];

libfunc withdraw_gas = withdraw_gas;
libfunc branch_align = branch_align;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc drop<Unit> = drop<Unit>;
libfunc jump = jump;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc drop<felt252> = drop<felt252>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc redeposit_gas = redeposit_gas;

withdraw_gas([0], [1]) { fallthrough([3], [4]) 29([5], [6]) }; // 0
branch_align() -> (); // 1
store_temp<RangeCheck>([3]) -> ([3]); // 2
felt252_is_zero([2]) { fallthrough() 19([7]) }; // 3
branch_align() -> (); // 4
withdraw_gas([3], [4]) { fallthrough([8], [9]) 13([10], [11]) }; // 5
branch_align() -> (); // 6
store_temp<GasBuiltin>([9]) -> ([9]); // 7
function_call<user@test::bar>([9]) -> ([12], [13]); // 8
drop<Unit>([13]) -> (); // 9
store_temp<RangeCheck>([8]) -> ([14]); // 10
store_temp<GasBuiltin>([12]) -> ([15]); // 11
jump() { 16() }; // 12
branch_align() -> (); // 13
store_temp<RangeCheck>([10]) -> ([14]); // 14
store_temp<GasBuiltin>([11]) -> ([15]); // 15
rename<RangeCheck>([14]) -> ([16]); // 16
rename<GasBuiltin>([15]) -> ([17]); // 17
jump() { 26() }; // 18
branch_align() -> (); // 19
drop<NonZero<felt252>>([7]) -> (); // 20
store_temp<GasBuiltin>([4]) -> ([4]); // 21
function_call<user@test::bar>([4]) -> ([18], [19]); // 22
drop<Unit>([19]) -> (); // 23
store_temp<RangeCheck>([3]) -> ([16]); // 24
store_temp<GasBuiltin>([18]) -> ([17]); // 25
rename<RangeCheck>([16]) -> ([20]); // 26
rename<GasBuiltin>([17]) -> ([21]); // 27
jump() { 38() }; // 28
branch_align() -> (); // 29
drop<felt252>([2]) -> (); // 30
store_temp<GasBuiltin>([6]) -> ([6]); // 31
function_call<user@test::bar>([6]) -> ([22], [23]); // 32
drop<Unit>([23]) -> (); // 33
function_call<user@test::bar>([22]) -> ([24], [25]); // 34
drop<Unit>([25]) -> (); // 35
store_temp<RangeCheck>([5]) -> ([20]); // 36
store_temp<GasBuiltin>([24]) -> ([21]); // 37
struct_construct<Unit>() -> ([26]); // 38
return([20], [21], [26]); // 39
redeposit_gas([0]) -> ([1]); // 40
struct_construct<Unit>() -> ([2]); // 41
store_temp<GasBuiltin>([1]) -> ([1]); // 42
return([1], [2]); // 43

test::foo@0([0]: RangeCheck, [1]: GasBuiltin, [2]: felt252) -> (RangeCheck, GasBuiltin, Unit);
test::bar@40([0]: GasBuiltin) -> (GasBuiltin, Unit);

//! > casm
%{ memory[ap + 0] = 0 <= memory[fp + -4] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -4] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 43;
[fp + -4] = [ap + 0] + 0, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
jmp rel 27 if [fp + -3] != 0;
%{ memory[ap + 0] = 0 <= memory[ap + -2] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -3] + 0];
jmp rel 13;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -1], ap++;
call rel 32;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 7;
ap += 4;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 9;
ap += 2;
[ap + 0] = [ap + -4], ap++;
call rel 15;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 10;
[ap + 0] = [fp + -4], ap++;
call rel 8;
call rel 6;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
ret;
[ap + 0] = [fp + -3] + 9900, ap++;
ret;

//! > ==========================================================================

//! > withdraw_gas reduces excess

//! > test_runner_name
SmallE2ETestRunnerCostComputation

//! > cairo
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    if x == 0 {
        // Excess is created by the external `else` branch. Therefore, we don't need to withdraw
        // gas here.
        match gas::withdraw_gas() {
            Option::Some(_) => {
                // Here we have used the excess and we need to withdraw gas.
                match gas::withdraw_gas() {
                    Option::Some(_) => {
                        bar();
                    },
                    Option::None(_) => {},
                }
            },
            Option::None(_) => {},
        }
    } else {
        bar();
    }
}

#[inline(never)]
fn bar() {
    redeposit_gas();
}

//! > enforced_costs
test::bar 2000

//! > gas_solution
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#2: OrderedHashMap({Const: 0})
#3: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#4: OrderedHashMap({Const: 900})
#5: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#12: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 1260})
#18: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 1710})
#24: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#33: OrderedHashMap({Const: 1900})

test::foo: OrderedHashMap({Const: 2740})
test::bar: OrderedHashMap({Const: 2000})

//! > gas_solution_no_solver
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#2: OrderedHashMap({Const: 0})
#3: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#4: OrderedHashMap({Const: 900})
#5: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#12: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 1260})
#18: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 1710})
#24: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#33: OrderedHashMap({Const: 1900})

test::foo: OrderedHashMap({Const: 2740})
test::bar: OrderedHashMap({Const: 2000})

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc withdraw_gas = withdraw_gas;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc drop<Unit> = drop<Unit>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc jump = jump;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc redeposit_gas = redeposit_gas;

felt252_is_zero([2]) { fallthrough() 24([3]) }; // 0
branch_align() -> (); // 1
withdraw_gas([0], [1]) { fallthrough([4], [5]) 18([6], [7]) }; // 2
branch_align() -> (); // 3
withdraw_gas([4], [5]) { fallthrough([8], [9]) 12([10], [11]) }; // 4
branch_align() -> (); // 5
store_temp<GasBuiltin>([9]) -> ([9]); // 6
function_call<user@test::bar>([9]) -> ([12], [13]); // 7
drop<Unit>([13]) -> (); // 8
store_temp<RangeCheck>([8]) -> ([14]); // 9
store_temp<GasBuiltin>([12]) -> ([15]); // 10
jump() { 15() }; // 11
branch_align() -> (); // 12
store_temp<RangeCheck>([10]) -> ([14]); // 13
store_temp<GasBuiltin>([11]) -> ([15]); // 14
rename<RangeCheck>([14]) -> ([16]); // 15
rename<GasBuiltin>([15]) -> ([17]); // 16
jump() { 21() }; // 17
branch_align() -> (); // 18
store_temp<RangeCheck>([6]) -> ([16]); // 19
store_temp<GasBuiltin>([7]) -> ([17]); // 20
rename<RangeCheck>([16]) -> ([18]); // 21
rename<GasBuiltin>([17]) -> ([19]); // 22
jump() { 31() }; // 23
branch_align() -> (); // 24
drop<NonZero<felt252>>([3]) -> (); // 25
store_temp<GasBuiltin>([1]) -> ([1]); // 26
function_call<user@test::bar>([1]) -> ([20], [21]); // 27
drop<Unit>([21]) -> (); // 28
store_temp<RangeCheck>([0]) -> ([18]); // 29
store_temp<GasBuiltin>([20]) -> ([19]); // 30
struct_construct<Unit>() -> ([22]); // 31
return([18], [19], [22]); // 32
redeposit_gas([0]) -> ([1]); // 33
struct_construct<Unit>() -> ([2]); // 34
store_temp<GasBuiltin>([1]) -> ([1]); // 35
return([1], [2]); // 36

test::foo@0([0]: RangeCheck, [1]: GasBuiltin, [2]: felt252) -> (RangeCheck, GasBuiltin, Unit);
test::bar@33([0]: GasBuiltin) -> (GasBuiltin, Unit);

//! > casm
jmp rel 44 if [fp + -3] != 0;
%{ memory[ap + 0] = 0 <= memory[fp + -4] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -4] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 30;
[fp + -4] = [ap + 0] + 0, ap++;
[ap + -1] = [[fp + -5] + 0];
%{ memory[ap + 0] = 900 <= memory[ap + -1] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768210556, ap++;
[ap + -1] = [[fp + -5] + 1];
jmp rel 13;
[ap + -2] = [ap + 0] + 900, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [ap + -1], ap++;
call rel 29;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 7;
ap += 4;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 7;
ap += 6;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
ap += 4;
[ap + 0] = [fp + -4], ap++;
call rel 5;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2], ap++;
ret;
[ap + 0] = [fp + -3] + 1900, ap++;
ret;

//! > ==========================================================================

//! > redeposit_gas libfunc

//! > test_runner_name
SmallE2ETestRunnerCostComputation

//! > cairo
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    if x == 0 {
        bar();
        bar();
        redeposit_gas();
        return ();
    } else {
        redeposit_gas();
        if x == 1 {
            bar();
        } else {
            redeposit_gas();
        }
        return ();
    }
}

#[inline(never)]
fn bar() {
    redeposit_gas();
}

//! > enforced_costs
test::bar 10000
test::foo 100000

//! > gas_solution
#2: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#9: OrderedHashMap({Const: 79300})
#13: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#15: OrderedHashMap({Const: 89080})
#21: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#27: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#29: OrderedHashMap({Const: 10170})
#33: OrderedHashMap({Const: 9900})

test::foo: OrderedHashMap({Const: 100000})
test::bar: OrderedHashMap({Const: 10000})

//! > gas_solution_no_solver
#2: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#9: OrderedHashMap({Const: 79300})
#13: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#15: OrderedHashMap({Const: 89080})
#21: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#27: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#29: OrderedHashMap({Const: 10170})
#33: OrderedHashMap({Const: 9900})

test::foo: OrderedHashMap({Const: 100000})
test::bar: OrderedHashMap({Const: 10000})

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc dup<felt252> = dup<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc drop<felt252> = drop<felt252>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc drop<Unit> = drop<Unit>;
libfunc redeposit_gas = redeposit_gas;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc felt252_const<1> = felt252_const<1>;
libfunc felt252_sub = felt252_sub;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc jump = jump;

dup<felt252>([1]) -> ([1], [2]); // 0
felt252_is_zero([2]) { fallthrough() 13([3]) }; // 1
branch_align() -> (); // 2
drop<felt252>([1]) -> (); // 3
store_temp<GasBuiltin>([0]) -> ([0]); // 4
function_call<user@test::bar>([0]) -> ([4], [5]); // 5
drop<Unit>([5]) -> (); // 6
function_call<user@test::bar>([4]) -> ([6], [7]); // 7
drop<Unit>([7]) -> (); // 8
redeposit_gas([6]) -> ([8]); // 9
struct_construct<Unit>() -> ([9]); // 10
store_temp<GasBuiltin>([8]) -> ([8]); // 11
return([8], [9]); // 12
branch_align() -> (); // 13
drop<NonZero<felt252>>([3]) -> (); // 14
redeposit_gas([0]) -> ([10]); // 15
felt252_const<1>() -> ([11]); // 16
felt252_sub([1], [11]) -> ([12]); // 17
store_temp<felt252>([12]) -> ([12]); // 18
store_temp<GasBuiltin>([10]) -> ([10]); // 19
felt252_is_zero([12]) { fallthrough() 27([13]) }; // 20
branch_align() -> (); // 21
store_temp<GasBuiltin>([10]) -> ([10]); // 22
function_call<user@test::bar>([10]) -> ([14], [15]); // 23
drop<Unit>([15]) -> (); // 24
rename<GasBuiltin>([14]) -> ([16]); // 25
jump() { 31() }; // 26
branch_align() -> (); // 27
drop<NonZero<felt252>>([13]) -> (); // 28
redeposit_gas([10]) -> ([17]); // 29
store_temp<GasBuiltin>([17]) -> ([16]); // 30
struct_construct<Unit>() -> ([18]); // 31
return([16], [18]); // 32
redeposit_gas([0]) -> ([1]); // 33
struct_construct<Unit>() -> ([2]); // 34
store_temp<GasBuiltin>([1]) -> ([1]); // 35
return([1], [2]); // 36

test::foo@0([0]: GasBuiltin, [1]: felt252) -> (GasBuiltin, Unit);
test::bar@33([0]: GasBuiltin) -> (GasBuiltin, Unit);

//! > casm
jmp rel 10 if [fp + -3] != 0;
[ap + 0] = [fp + -4], ap++;
call rel 25;
call rel 23;
[ap + 0] = [ap + -1] + 79300, ap++;
ret;
ap += 2;
[fp + -3] = [ap + 0] + 1, ap++;
[ap + 0] = [fp + -4] + 89080, ap++;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
call rel 9;
jmp rel 6;
ap += 3;
[ap + 0] = [ap + -4] + 10170, ap++;
ret;
[ap + 0] = [fp + -3] + 9900, ap++;
ret;
