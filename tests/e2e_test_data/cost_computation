//! > branch_align values are pushed to the end

//! > test_runner_name
SmallE2ETestRunnerCostComputation

//! > cairo
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    // The branch_align of the external if statements should have zero value, since the value should
    // be pushed to the inner if statement.
    if x == 0 {
        if x == 1 {
            if x == 2 {
                bar();
            } else {
                bar();
            }
        } else {
            bar();
            bar();
        }
    } else {
        bar();
        bar();
        bar();
    }
}

#[inline(never)]
fn bar() {
    redeposit_gas()
}

//! > enforced_costs
test::bar 10000

//! > gas_solution
#2: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 9870})
#8: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 9770})
#13: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#19: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 100})
#27: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#39: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#56: OrderedHashMap({Const: 9900})

test::foo: OrderedHashMap({Const: 31100})
test::bar: OrderedHashMap({Const: 10000})

//! > gas_solution_no_solver
#2: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#8: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#13: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 19640})
#19: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 19740})
#27: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 9870})
#39: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#56: OrderedHashMap({Const: 9900})

test::foo: OrderedHashMap({Const: 31100})
test::bar: OrderedHashMap({Const: 10000})

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc dup<felt252> = dup<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc felt252_const<1> = felt252_const<1>;
libfunc felt252_sub = felt252_sub;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc felt252_const<2> = felt252_const<2>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc drop<Unit> = drop<Unit>;
libfunc jump = jump;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc drop<felt252> = drop<felt252>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc redeposit_gas = redeposit_gas;

dup<felt252>([1]) -> ([1], [2]); // 0
felt252_is_zero([2]) { fallthrough() 39([3]) }; // 1
branch_align() -> (); // 2
felt252_const<1>() -> ([4]); // 3
dup<felt252>([1]) -> ([1], [6]); // 4
felt252_sub([6], [4]) -> ([5]); // 5
store_temp<felt252>([5]) -> ([5]); // 6
felt252_is_zero([5]) { fallthrough() 27([7]) }; // 7
branch_align() -> (); // 8
felt252_const<2>() -> ([8]); // 9
felt252_sub([1], [8]) -> ([9]); // 10
store_temp<felt252>([9]) -> ([9]); // 11
felt252_is_zero([9]) { fallthrough() 19([10]) }; // 12
branch_align() -> (); // 13
store_temp<GasBuiltin>([0]) -> ([13]); // 14
function_call<user@test::bar>([13]) -> ([11], [12]); // 15
drop<Unit>([12]) -> (); // 16
store_temp<GasBuiltin>([11]) -> ([14]); // 17
jump() { 25() }; // 18
branch_align() -> (); // 19
drop<NonZero<felt252>>([10]) -> (); // 20
store_temp<GasBuiltin>([0]) -> ([17]); // 21
function_call<user@test::bar>([17]) -> ([15], [16]); // 22
drop<Unit>([16]) -> (); // 23
store_temp<GasBuiltin>([15]) -> ([14]); // 24
rename<GasBuiltin>([14]) -> ([18]); // 25
jump() { 37() }; // 26
branch_align() -> (); // 27
drop<NonZero<felt252>>([7]) -> (); // 28
drop<felt252>([1]) -> (); // 29
store_temp<GasBuiltin>([0]) -> ([21]); // 30
function_call<user@test::bar>([21]) -> ([19], [20]); // 31
drop<Unit>([20]) -> (); // 32
store_temp<GasBuiltin>([19]) -> ([24]); // 33
function_call<user@test::bar>([24]) -> ([22], [23]); // 34
drop<Unit>([23]) -> (); // 35
store_temp<GasBuiltin>([22]) -> ([18]); // 36
rename<GasBuiltin>([18]) -> ([25]); // 37
jump() { 52() }; // 38
branch_align() -> (); // 39
drop<NonZero<felt252>>([3]) -> (); // 40
drop<felt252>([1]) -> (); // 41
store_temp<GasBuiltin>([0]) -> ([28]); // 42
function_call<user@test::bar>([28]) -> ([26], [27]); // 43
drop<Unit>([27]) -> (); // 44
store_temp<GasBuiltin>([26]) -> ([31]); // 45
function_call<user@test::bar>([31]) -> ([29], [30]); // 46
drop<Unit>([30]) -> (); // 47
store_temp<GasBuiltin>([29]) -> ([34]); // 48
function_call<user@test::bar>([34]) -> ([32], [33]); // 49
drop<Unit>([33]) -> (); // 50
store_temp<GasBuiltin>([32]) -> ([25]); // 51
struct_construct<Unit>() -> ([35]); // 52
rename<GasBuiltin>([25]) -> ([36]); // 53
store_temp<Unit>([35]) -> ([37]); // 54
return([36], [37]); // 55
redeposit_gas([0]) -> ([1]); // 56
struct_construct<Unit>() -> ([2]); // 57
store_temp<GasBuiltin>([1]) -> ([3]); // 58
store_temp<Unit>([2]) -> ([4]); // 59
return([3], [4]); // 60

test::foo@0([0]: GasBuiltin, [1]: felt252) -> (GasBuiltin, Unit);
test::bar@56([0]: GasBuiltin) -> (GasBuiltin, Unit);

//! > casm
jmp rel 35 if [fp + -3] != 0;
ap += 3;
[fp + -3] = [ap + 0] + 1, ap++;
jmp rel 20 if [ap + -1] != 0;
ap += 3;
[fp + -3] = [ap + 0] + 2, ap++;
jmp rel 8 if [ap + -1] != 0;
[ap + 0] = [fp + -4], ap++;
call rel 31;
[ap + 0] = [ap + -1], ap++;
jmp rel 6;
[ap + 0] = [fp + -4], ap++;
call rel 25;
[ap + 0] = [ap + -1], ap++;
jmp rel 9;
[ap + 0] = [fp + -4], ap++;
call rel 19;
[ap + 0] = [ap + -1], ap++;
call rel 16;
[ap + 0] = [ap + -1], ap++;
jmp rel 12;
[ap + 0] = [fp + -4], ap++;
call rel 10;
[ap + 0] = [ap + -1], ap++;
call rel 7;
[ap + 0] = [ap + -1], ap++;
call rel 4;
[ap + 0] = [ap + -1], ap++;
ret;
[ap + 0] = [fp + -3] + 9900, ap++;
ret;

//! > ==========================================================================

//! > branch_align of withdraw_gas

//! > test_runner_name
SmallE2ETestRunnerCostComputation

//! > cairo
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    // In this case, the failing branch is more expensive than the success branch.
    // The excess created by the external branch_align should be pushed to the next (inner)
    // statements.
    match gas::withdraw_gas() {
        Option::Some(_) => {
            if x == 0 {
                // Here we don't need to withdraw gas, since we have excess created by the external
                // failing branch.
                match gas::withdraw_gas() {
                    Option::Some(_) => {
                        bar();
                    },
                    Option::None(_) => {},
                }
            } else {
                bar();
            }
        },
        Option::None(_) => {
            bar();
            bar();
        },
    }
}

#[inline(never)]
fn bar() {
    redeposit_gas()
}

//! > enforced_costs
test::bar 10000

//! > gas_solution
#0: OrderedHashMap({Const: 0})
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 9420})
#4: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#5: OrderedHashMap({Const: 0})
#6: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#13: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 10160})
#19: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 450})
#29: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#44: OrderedHashMap({Const: 9900})

test::foo: OrderedHashMap({Const: 21270})
test::bar: OrderedHashMap({Const: 10000})

//! > gas_solution_no_solver
#0: OrderedHashMap({Const: 0})
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#4: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#5: OrderedHashMap({Const: 0})
#6: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 9420})
#13: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 19580})
#19: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 9870})
#29: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#44: OrderedHashMap({Const: 9900})

test::foo: OrderedHashMap({Const: 21270})
test::bar: OrderedHashMap({Const: 10000})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];

libfunc withdraw_gas = withdraw_gas;
libfunc branch_align = branch_align;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc drop<Unit> = drop<Unit>;
libfunc jump = jump;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc drop<felt252> = drop<felt252>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc redeposit_gas = redeposit_gas;

withdraw_gas([0], [1]) { fallthrough([3], [4]) 29([5], [6]) }; // 0
branch_align() -> (); // 1
store_temp<RangeCheck>([3]) -> ([3]); // 2
felt252_is_zero([2]) { fallthrough() 19([7]) }; // 3
branch_align() -> (); // 4
withdraw_gas([3], [4]) { fallthrough([8], [9]) 13([10], [11]) }; // 5
branch_align() -> (); // 6
store_temp<GasBuiltin>([9]) -> ([14]); // 7
function_call<user@test::bar>([14]) -> ([12], [13]); // 8
drop<Unit>([13]) -> (); // 9
store_temp<RangeCheck>([8]) -> ([15]); // 10
store_temp<GasBuiltin>([12]) -> ([16]); // 11
jump() { 16() }; // 12
branch_align() -> (); // 13
store_temp<RangeCheck>([10]) -> ([15]); // 14
store_temp<GasBuiltin>([11]) -> ([16]); // 15
rename<RangeCheck>([15]) -> ([17]); // 16
rename<GasBuiltin>([16]) -> ([18]); // 17
jump() { 26() }; // 18
branch_align() -> (); // 19
drop<NonZero<felt252>>([7]) -> (); // 20
store_temp<GasBuiltin>([4]) -> ([21]); // 21
function_call<user@test::bar>([21]) -> ([19], [20]); // 22
drop<Unit>([20]) -> (); // 23
store_temp<RangeCheck>([3]) -> ([17]); // 24
store_temp<GasBuiltin>([19]) -> ([18]); // 25
rename<RangeCheck>([17]) -> ([22]); // 26
rename<GasBuiltin>([18]) -> ([23]); // 27
jump() { 39() }; // 28
branch_align() -> (); // 29
drop<felt252>([2]) -> (); // 30
store_temp<GasBuiltin>([6]) -> ([26]); // 31
function_call<user@test::bar>([26]) -> ([24], [25]); // 32
drop<Unit>([25]) -> (); // 33
store_temp<GasBuiltin>([24]) -> ([29]); // 34
function_call<user@test::bar>([29]) -> ([27], [28]); // 35
drop<Unit>([28]) -> (); // 36
store_temp<RangeCheck>([5]) -> ([22]); // 37
store_temp<GasBuiltin>([27]) -> ([23]); // 38
struct_construct<Unit>() -> ([30]); // 39
rename<RangeCheck>([22]) -> ([31]); // 40
rename<GasBuiltin>([23]) -> ([32]); // 41
store_temp<Unit>([30]) -> ([33]); // 42
return([31], [32], [33]); // 43
redeposit_gas([0]) -> ([1]); // 44
struct_construct<Unit>() -> ([2]); // 45
store_temp<GasBuiltin>([1]) -> ([3]); // 46
store_temp<Unit>([2]) -> ([4]); // 47
return([3], [4]); // 48

test::foo@0([0]: RangeCheck, [1]: GasBuiltin, [2]: felt252) -> (RangeCheck, GasBuiltin, Unit);
test::bar@44([0]: GasBuiltin) -> (GasBuiltin, Unit);

//! > casm
%{ memory[ap + 0] = 0 <= memory[fp + -4] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -4] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 45;
[fp + -4] = [ap + 0] + 0, ap++;
[ap + -1] = [[fp + -5] + 0];
ap += 1;
[ap + 0] = [fp + -5] + 1, ap++;
jmp rel 27 if [fp + -3] != 0;
%{ memory[ap + 0] = 0 <= memory[ap + -3] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -3] + 0];
jmp rel 13;
[ap + -4] = [ap + 0] + 0, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -1], ap++;
call rel 33;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 7;
ap += 4;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
jmp rel 9;
ap += 2;
[ap + 0] = [ap + -5], ap++;
call rel 16;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 11;
[ap + 0] = [fp + -4], ap++;
call rel 9;
[ap + 0] = [ap + -1], ap++;
call rel 6;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
ret;
[ap + 0] = [fp + -3] + 9900, ap++;
ret;

//! > ==========================================================================

//! > withdraw_gas reduces excess

//! > test_runner_name
SmallE2ETestRunnerCostComputation

//! > cairo
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    if x == 0 {
        // Excess is created by the external `else` branch. Therefore, we don't need to withdraw
        // gas here.
        match gas::withdraw_gas() {
            Option::Some(_) => {
                // Here we have used the excess and we need to withdraw gas.
                match gas::withdraw_gas() {
                    Option::Some(_) => {
                        bar();
                    },
                    Option::None(_) => {},
                }
            },
            Option::None(_) => {},
        }
    } else {
        bar();
    }
}

#[inline(never)]
fn bar() {
    redeposit_gas();
}

//! > enforced_costs
test::bar 2000

//! > gas_solution
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#2: OrderedHashMap({Const: 0})
#3: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#4: OrderedHashMap({Const: 900})
#5: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#12: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 1260})
#18: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 1710})
#24: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#36: OrderedHashMap({Const: 1900})

test::foo: OrderedHashMap({Const: 2740})
test::bar: OrderedHashMap({Const: 2000})

//! > gas_solution_no_solver
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#2: OrderedHashMap({Const: 0})
#3: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#4: OrderedHashMap({Const: 900})
#5: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#12: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 1260})
#18: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 1710})
#24: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#36: OrderedHashMap({Const: 1900})

test::foo: OrderedHashMap({Const: 2740})
test::bar: OrderedHashMap({Const: 2000})

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc withdraw_gas = withdraw_gas;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc drop<Unit> = drop<Unit>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc jump = jump;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc redeposit_gas = redeposit_gas;

felt252_is_zero([2]) { fallthrough() 24([3]) }; // 0
branch_align() -> (); // 1
withdraw_gas([0], [1]) { fallthrough([4], [5]) 18([6], [7]) }; // 2
branch_align() -> (); // 3
withdraw_gas([4], [5]) { fallthrough([8], [9]) 12([10], [11]) }; // 4
branch_align() -> (); // 5
store_temp<GasBuiltin>([9]) -> ([14]); // 6
function_call<user@test::bar>([14]) -> ([12], [13]); // 7
drop<Unit>([13]) -> (); // 8
store_temp<RangeCheck>([8]) -> ([15]); // 9
store_temp<GasBuiltin>([12]) -> ([16]); // 10
jump() { 15() }; // 11
branch_align() -> (); // 12
store_temp<RangeCheck>([10]) -> ([15]); // 13
store_temp<GasBuiltin>([11]) -> ([16]); // 14
rename<RangeCheck>([15]) -> ([17]); // 15
rename<GasBuiltin>([16]) -> ([18]); // 16
jump() { 21() }; // 17
branch_align() -> (); // 18
store_temp<RangeCheck>([6]) -> ([17]); // 19
store_temp<GasBuiltin>([7]) -> ([18]); // 20
rename<RangeCheck>([17]) -> ([19]); // 21
rename<GasBuiltin>([18]) -> ([20]); // 22
jump() { 31() }; // 23
branch_align() -> (); // 24
drop<NonZero<felt252>>([3]) -> (); // 25
store_temp<GasBuiltin>([1]) -> ([23]); // 26
function_call<user@test::bar>([23]) -> ([21], [22]); // 27
drop<Unit>([22]) -> (); // 28
store_temp<RangeCheck>([0]) -> ([19]); // 29
store_temp<GasBuiltin>([21]) -> ([20]); // 30
struct_construct<Unit>() -> ([24]); // 31
rename<RangeCheck>([19]) -> ([25]); // 32
rename<GasBuiltin>([20]) -> ([26]); // 33
store_temp<Unit>([24]) -> ([27]); // 34
return([25], [26], [27]); // 35
redeposit_gas([0]) -> ([1]); // 36
struct_construct<Unit>() -> ([2]); // 37
store_temp<GasBuiltin>([1]) -> ([3]); // 38
store_temp<Unit>([2]) -> ([4]); // 39
return([3], [4]); // 40

test::foo@0([0]: RangeCheck, [1]: GasBuiltin, [2]: felt252) -> (RangeCheck, GasBuiltin, Unit);
test::bar@36([0]: GasBuiltin) -> (GasBuiltin, Unit);

//! > casm
jmp rel 44 if [fp + -3] != 0;
%{ memory[ap + 0] = 0 <= memory[fp + -4] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -4] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 30;
[fp + -4] = [ap + 0] + 0, ap++;
[ap + -1] = [[fp + -5] + 0];
%{ memory[ap + 0] = 900 <= memory[ap + -1] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768210556, ap++;
[ap + -1] = [[fp + -5] + 1];
jmp rel 13;
[ap + -2] = [ap + 0] + 900, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [ap + -1], ap++;
call rel 29;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 7;
ap += 4;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 7;
ap += 6;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
ap += 4;
[ap + 0] = [fp + -4], ap++;
call rel 5;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2], ap++;
ret;
[ap + 0] = [fp + -3] + 1900, ap++;
ret;

//! > ==========================================================================

//! > redeposit_gas libfunc

//! > test_runner_name
SmallE2ETestRunnerCostComputation

//! > cairo
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    if x == 0 {
        bar();
        bar();
        redeposit_gas();
        return ();
    } else {
        redeposit_gas();
        if x == 1 {
            bar();
        } else {
            redeposit_gas();
        }
        return ();
    }
}

#[inline(never)]
fn bar() {
    redeposit_gas();
}

//! > enforced_costs
test::bar 10000
test::foo 100000

//! > gas_solution
#2: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#10: OrderedHashMap({Const: 79200})
#15: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#17: OrderedHashMap({Const: 88980})
#23: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#29: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#31: OrderedHashMap({Const: 10260})
#37: OrderedHashMap({Const: 9900})

test::foo: OrderedHashMap({Const: 100000})
test::bar: OrderedHashMap({Const: 10000})

//! > gas_solution_no_solver
#2: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#10: OrderedHashMap({Const: 79200})
#15: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#17: OrderedHashMap({Const: 88980})
#23: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#29: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#31: OrderedHashMap({Const: 10260})
#37: OrderedHashMap({Const: 9900})

test::foo: OrderedHashMap({Const: 100000})
test::bar: OrderedHashMap({Const: 10000})

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc dup<felt252> = dup<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc drop<felt252> = drop<felt252>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc drop<Unit> = drop<Unit>;
libfunc redeposit_gas = redeposit_gas;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc felt252_const<1> = felt252_const<1>;
libfunc felt252_sub = felt252_sub;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc jump = jump;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;

dup<felt252>([1]) -> ([1], [2]); // 0
felt252_is_zero([2]) { fallthrough() 15([3]) }; // 1
branch_align() -> (); // 2
drop<felt252>([1]) -> (); // 3
store_temp<GasBuiltin>([0]) -> ([6]); // 4
function_call<user@test::bar>([6]) -> ([4], [5]); // 5
drop<Unit>([5]) -> (); // 6
store_temp<GasBuiltin>([4]) -> ([9]); // 7
function_call<user@test::bar>([9]) -> ([7], [8]); // 8
drop<Unit>([8]) -> (); // 9
redeposit_gas([7]) -> ([10]); // 10
struct_construct<Unit>() -> ([11]); // 11
store_temp<GasBuiltin>([10]) -> ([12]); // 12
store_temp<Unit>([11]) -> ([13]); // 13
return([12], [13]); // 14
branch_align() -> (); // 15
drop<NonZero<felt252>>([3]) -> (); // 16
redeposit_gas([0]) -> ([14]); // 17
felt252_const<1>() -> ([15]); // 18
felt252_sub([1], [15]) -> ([16]); // 19
store_temp<felt252>([16]) -> ([16]); // 20
store_temp<GasBuiltin>([14]) -> ([14]); // 21
felt252_is_zero([16]) { fallthrough() 29([17]) }; // 22
branch_align() -> (); // 23
store_temp<GasBuiltin>([14]) -> ([20]); // 24
function_call<user@test::bar>([20]) -> ([18], [19]); // 25
drop<Unit>([19]) -> (); // 26
store_temp<GasBuiltin>([18]) -> ([21]); // 27
jump() { 33() }; // 28
branch_align() -> (); // 29
drop<NonZero<felt252>>([17]) -> (); // 30
redeposit_gas([14]) -> ([22]); // 31
store_temp<GasBuiltin>([22]) -> ([21]); // 32
struct_construct<Unit>() -> ([23]); // 33
rename<GasBuiltin>([21]) -> ([24]); // 34
store_temp<Unit>([23]) -> ([25]); // 35
return([24], [25]); // 36
redeposit_gas([0]) -> ([1]); // 37
struct_construct<Unit>() -> ([2]); // 38
store_temp<GasBuiltin>([1]) -> ([3]); // 39
store_temp<Unit>([2]) -> ([4]); // 40
return([3], [4]); // 41

test::foo@0([0]: GasBuiltin, [1]: felt252) -> (GasBuiltin, Unit);
test::bar@37([0]: GasBuiltin) -> (GasBuiltin, Unit);

//! > casm
jmp rel 11 if [fp + -3] != 0;
[ap + 0] = [fp + -4], ap++;
call rel 27;
[ap + 0] = [ap + -1], ap++;
call rel 24;
[ap + 0] = [ap + -1] + 79200, ap++;
ret;
ap += 2;
[fp + -3] = [ap + 0] + 1, ap++;
[ap + 0] = [fp + -4] + 88980, ap++;
jmp rel 8 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
call rel 10;
[ap + 0] = [ap + -1], ap++;
jmp rel 6;
ap += 4;
[ap + 0] = [ap + -5] + 10260, ap++;
ret;
[ap + 0] = [fp + -3] + 9900, ap++;
ret;
