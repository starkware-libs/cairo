//! > hades_permutation libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(s0: felt252, s1: felt252, s2: felt252) -> (felt252, felt252, felt252) {
    poseidon::hades_permutation(s0, s1, s2)
}

//! > casm
[fp + -5] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[fp + -3] = [[fp + -6] + 2];
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = [[fp + -6] + 3], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Poseidon: 1, Const: 700})

//! > sierra_code
type Poseidon = Poseidon [storable: true, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<felt252, felt252, felt252> = Struct<ut@Tuple, felt252, felt252, felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc hades_permutation = hades_permutation;
libfunc struct_construct<Tuple<felt252, felt252, felt252>> = struct_construct<Tuple<felt252, felt252, felt252>>;
libfunc store_temp<Poseidon> = store_temp<Poseidon>;
libfunc store_temp<Tuple<felt252, felt252, felt252>> = store_temp<Tuple<felt252, felt252, felt252>>;

hades_permutation([0], [1], [2], [3]) -> ([4], [5], [6], [7]); // 0
struct_construct<Tuple<felt252, felt252, felt252>>([5], [6], [7]) -> ([8]); // 1
store_temp<Poseidon>([4]) -> ([4]); // 2
store_temp<Tuple<felt252, felt252, felt252>>([8]) -> ([8]); // 3
return([4], [8]); // 4

test::foo@0([0]: Poseidon, [1]: felt252, [2]: felt252, [3]: felt252) -> (Poseidon, Tuple<felt252, felt252, felt252>);

//! > ==========================================================================

//! > complete tuple hash

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use hash::{HashStateTrait, HashStateExTrait};

fn foo(s0: felt252, s1: felt252, s2: felt252) -> felt252 {
    poseidon::PoseidonTrait::new().update_with((s0, s1, s2)).finalize()
}

//! > casm
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2] + [fp + -5], ap++;
jmp rel 14 if [ap + -2] != 0;
ap += 3;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -5] + [fp + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
jmp rel 17;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -1] + [fp + -4], ap++;
[ap + 0] = 0, ap++;
[ap + -4] = [[fp + -6] + 0];
[ap + -2] = [[fp + -6] + 1];
[ap + -1] = [[fp + -6] + 2];
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = [[fp + -6] + 3], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = 0, ap++;
jmp rel 12 if [ap + -1] != 0;
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + [fp + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
jmp rel 13;
[ap + 0] = [ap + -3] + [fp + -3], ap++;
[ap + -5] = [[ap + -6] + 0];
[ap + -1] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + 0] = [ap + -6] + 6, ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [[ap + -9] + 5], ap++;
[ap + 0] = 0, ap++;
jmp rel 11 if [ap + -1] != 0;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + 0] = [ap + -6] + 6, ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
ret;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -5] = [[ap + -6] + 0];
[ap + -1] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + 0] = [ap + -6] + 6, ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Poseidon: 3, Const: 3200})

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 1> = Const<felt252, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type Poseidon = Poseidon [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::bool = Enum<ut@core::bool, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
<<<<<<< HEAD
type core::poseidon::HashState = Struct<ut@core::poseidon::HashState, felt252, felt252, felt252, core::bool> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 0> = Const<felt252, 0> [storable: false, drop: false, dup: false, zero_sized: false];
||||||| a1f2f2396
type core::poseidon::HashState = Struct<ut@core::poseidon::HashState, felt252, felt252, felt252, core::bool> [storable: true, drop: true, dup: true, zero_sized: false];
=======
>>>>>>> origin/main

<<<<<<< HEAD
libfunc const_as_immediate<Const<felt252, 0>> = const_as_immediate<Const<felt252, 0>>;
||||||| a1f2f2396
libfunc felt252_const<0> = felt252_const<0>;
=======
libfunc felt252_const<0> = felt252_const<0>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc felt252_add = felt252_add;
>>>>>>> origin/main
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc enum_match<core::bool> = enum_match<core::bool>;
libfunc branch_align = branch_align;
libfunc drop<Unit> = drop<Unit>;
libfunc store_temp<Poseidon> = store_temp<Poseidon>;
libfunc jump = jump;
libfunc hades_permutation = hades_permutation;
<<<<<<< HEAD
libfunc struct_deconstruct<core::poseidon::HashState> = struct_deconstruct<core::poseidon::HashState>;
libfunc const_as_immediate<Const<felt252, 1>> = const_as_immediate<Const<felt252, 1>>;
||||||| a1f2f2396
libfunc struct_deconstruct<core::poseidon::HashState> = struct_deconstruct<core::poseidon::HashState>;
libfunc felt252_const<1> = felt252_const<1>;
=======
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc felt252_const<1> = felt252_const<1>;
>>>>>>> origin/main
libfunc drop<felt252> = drop<felt252>;

<<<<<<< HEAD
const_as_immediate<Const<felt252, 0>>() -> ([4]); // 0
const_as_immediate<Const<felt252, 0>>() -> ([5]); // 1
const_as_immediate<Const<felt252, 0>>() -> ([6]); // 2
struct_construct<Unit>() -> ([7]); // 3
enum_init<core::bool, 0>([7]) -> ([8]); // 4
store_temp<core::bool>([8]) -> ([8]); // 5
enum_match<core::bool>([8]) { fallthrough([9]) 17([10]) }; // 6
branch_align() -> (); // 7
drop<Unit>([9]) -> (); // 8
store_temp<felt252>([4]) -> ([4]); // 9
felt252_add([4], [1]) -> ([11]); // 10
struct_construct<Unit>() -> ([12]); // 11
enum_init<core::bool, 1>([12]) -> ([13]); // 12
struct_construct<core::poseidon::HashState>([11], [5], [6], [13]) -> ([14]); // 13
store_temp<Poseidon>([0]) -> ([15]); // 14
store_temp<core::poseidon::HashState>([14]) -> ([16]); // 15
jump() { 30() }; // 16
branch_align() -> (); // 17
drop<Unit>([10]) -> (); // 18
store_temp<felt252>([5]) -> ([5]); // 19
felt252_add([5], [1]) -> ([17]); // 20
store_temp<felt252>([4]) -> ([4]); // 21
store_temp<felt252>([17]) -> ([17]); // 22
||||||| a1f2f2396
felt252_const<0>() -> ([4]); // 0
felt252_const<0>() -> ([5]); // 1
felt252_const<0>() -> ([6]); // 2
struct_construct<Unit>() -> ([7]); // 3
enum_init<core::bool, 0>([7]) -> ([8]); // 4
store_temp<core::bool>([8]) -> ([8]); // 5
enum_match<core::bool>([8]) { fallthrough([9]) 17([10]) }; // 6
branch_align() -> (); // 7
drop<Unit>([9]) -> (); // 8
store_temp<felt252>([4]) -> ([4]); // 9
felt252_add([4], [1]) -> ([11]); // 10
struct_construct<Unit>() -> ([12]); // 11
enum_init<core::bool, 1>([12]) -> ([13]); // 12
struct_construct<core::poseidon::HashState>([11], [5], [6], [13]) -> ([14]); // 13
store_temp<Poseidon>([0]) -> ([15]); // 14
store_temp<core::poseidon::HashState>([14]) -> ([16]); // 15
jump() { 30() }; // 16
branch_align() -> (); // 17
drop<Unit>([10]) -> (); // 18
store_temp<felt252>([5]) -> ([5]); // 19
felt252_add([5], [1]) -> ([17]); // 20
store_temp<felt252>([4]) -> ([4]); // 21
store_temp<felt252>([17]) -> ([17]); // 22
=======
felt252_const<0>() -> ([4]); // 0
store_temp<felt252>([4]) -> ([4]); // 1
felt252_add([4], [1]) -> ([5]); // 2
felt252_const<0>() -> ([6]); // 3
felt252_const<0>() -> ([7]); // 4
struct_construct<Unit>() -> ([8]); // 5
enum_init<core::bool, 1>([8]) -> ([9]); // 6
store_temp<core::bool>([9]) -> ([9]); // 7
store_temp<felt252>([5]) -> ([5]); // 8
enum_match<core::bool>([9]) { fallthrough([10]) 21([11]) }; // 9
branch_align() -> (); // 10
drop<Unit>([10]) -> (); // 11
felt252_add([5], [2]) -> ([12]); // 12
struct_construct<Unit>() -> ([13]); // 13
enum_init<core::bool, 1>([13]) -> ([14]); // 14
store_temp<Poseidon>([0]) -> ([15]); // 15
store_temp<felt252>([12]) -> ([16]); // 16
store_temp<felt252>([6]) -> ([17]); // 17
store_temp<felt252>([7]) -> ([18]); // 18
store_temp<core::bool>([14]) -> ([19]); // 19
jump() { 35() }; // 20
branch_align() -> (); // 21
drop<Unit>([11]) -> (); // 22
>>>>>>> origin/main
store_temp<felt252>([6]) -> ([6]); // 23
<<<<<<< HEAD
hades_permutation([0], [4], [17], [6]) -> ([18], [19], [20], [21]); // 24
struct_construct<Unit>() -> ([22]); // 25
enum_init<core::bool, 0>([22]) -> ([23]); // 26
struct_construct<core::poseidon::HashState>([19], [20], [21], [23]) -> ([24]); // 27
store_temp<Poseidon>([18]) -> ([15]); // 28
store_temp<core::poseidon::HashState>([24]) -> ([16]); // 29
struct_deconstruct<core::poseidon::HashState>([16]) -> ([25], [26], [27], [28]); // 30
enum_match<core::bool>([28]) { fallthrough([29]) 41([30]) }; // 31
branch_align() -> (); // 32
drop<Unit>([29]) -> (); // 33
felt252_add([25], [2]) -> ([31]); // 34
struct_construct<Unit>() -> ([32]); // 35
enum_init<core::bool, 1>([32]) -> ([33]); // 36
struct_construct<core::poseidon::HashState>([31], [26], [27], [33]) -> ([34]); // 37
store_temp<Poseidon>([15]) -> ([35]); // 38
store_temp<core::poseidon::HashState>([34]) -> ([36]); // 39
jump() { 51() }; // 40
branch_align() -> (); // 41
drop<Unit>([30]) -> (); // 42
felt252_add([26], [2]) -> ([37]); // 43
store_temp<felt252>([37]) -> ([37]); // 44
hades_permutation([15], [25], [37], [27]) -> ([38], [39], [40], [41]); // 45
struct_construct<Unit>() -> ([42]); // 46
enum_init<core::bool, 0>([42]) -> ([43]); // 47
struct_construct<core::poseidon::HashState>([39], [40], [41], [43]) -> ([44]); // 48
store_temp<Poseidon>([38]) -> ([35]); // 49
store_temp<core::poseidon::HashState>([44]) -> ([36]); // 50
struct_deconstruct<core::poseidon::HashState>([36]) -> ([45], [46], [47], [48]); // 51
enum_match<core::bool>([48]) { fallthrough([49]) 62([50]) }; // 52
branch_align() -> (); // 53
drop<Unit>([49]) -> (); // 54
felt252_add([45], [3]) -> ([51]); // 55
struct_construct<Unit>() -> ([52]); // 56
enum_init<core::bool, 1>([52]) -> ([53]); // 57
struct_construct<core::poseidon::HashState>([51], [46], [47], [53]) -> ([54]); // 58
store_temp<Poseidon>([35]) -> ([55]); // 59
store_temp<core::poseidon::HashState>([54]) -> ([56]); // 60
jump() { 72() }; // 61
branch_align() -> (); // 62
drop<Unit>([50]) -> (); // 63
felt252_add([46], [3]) -> ([57]); // 64
store_temp<felt252>([57]) -> ([57]); // 65
hades_permutation([35], [45], [57], [47]) -> ([58], [59], [60], [61]); // 66
struct_construct<Unit>() -> ([62]); // 67
enum_init<core::bool, 0>([62]) -> ([63]); // 68
struct_construct<core::poseidon::HashState>([59], [60], [61], [63]) -> ([64]); // 69
store_temp<Poseidon>([58]) -> ([55]); // 70
store_temp<core::poseidon::HashState>([64]) -> ([56]); // 71
struct_deconstruct<core::poseidon::HashState>([56]) -> ([65], [66], [67], [68]); // 72
enum_match<core::bool>([68]) { fallthrough([69]) 85([70]) }; // 73
branch_align() -> (); // 74
drop<Unit>([69]) -> (); // 75
const_as_immediate<Const<felt252, 1>>() -> ([71]); // 76
felt252_add([65], [71]) -> ([72]); // 77
store_temp<felt252>([72]) -> ([72]); // 78
hades_permutation([55], [72], [66], [67]) -> ([73], [74], [75], [76]); // 79
drop<felt252>([75]) -> (); // 80
drop<felt252>([76]) -> (); // 81
store_temp<Poseidon>([73]) -> ([73]); // 82
store_temp<felt252>([74]) -> ([74]); // 83
return([73], [74]); // 84
branch_align() -> (); // 85
drop<Unit>([70]) -> (); // 86
const_as_immediate<Const<felt252, 1>>() -> ([77]); // 87
felt252_add([66], [77]) -> ([78]); // 88
store_temp<felt252>([78]) -> ([78]); // 89
hades_permutation([55], [65], [78], [67]) -> ([79], [80], [81], [82]); // 90
drop<felt252>([81]) -> (); // 91
drop<felt252>([82]) -> (); // 92
store_temp<Poseidon>([79]) -> ([79]); // 93
store_temp<felt252>([80]) -> ([80]); // 94
return([79], [80]); // 95
||||||| a1f2f2396
hades_permutation([0], [4], [17], [6]) -> ([18], [19], [20], [21]); // 24
struct_construct<Unit>() -> ([22]); // 25
enum_init<core::bool, 0>([22]) -> ([23]); // 26
struct_construct<core::poseidon::HashState>([19], [20], [21], [23]) -> ([24]); // 27
store_temp<Poseidon>([18]) -> ([15]); // 28
store_temp<core::poseidon::HashState>([24]) -> ([16]); // 29
struct_deconstruct<core::poseidon::HashState>([16]) -> ([25], [26], [27], [28]); // 30
enum_match<core::bool>([28]) { fallthrough([29]) 41([30]) }; // 31
branch_align() -> (); // 32
drop<Unit>([29]) -> (); // 33
felt252_add([25], [2]) -> ([31]); // 34
struct_construct<Unit>() -> ([32]); // 35
enum_init<core::bool, 1>([32]) -> ([33]); // 36
struct_construct<core::poseidon::HashState>([31], [26], [27], [33]) -> ([34]); // 37
store_temp<Poseidon>([15]) -> ([35]); // 38
store_temp<core::poseidon::HashState>([34]) -> ([36]); // 39
jump() { 51() }; // 40
branch_align() -> (); // 41
drop<Unit>([30]) -> (); // 42
felt252_add([26], [2]) -> ([37]); // 43
store_temp<felt252>([37]) -> ([37]); // 44
hades_permutation([15], [25], [37], [27]) -> ([38], [39], [40], [41]); // 45
struct_construct<Unit>() -> ([42]); // 46
enum_init<core::bool, 0>([42]) -> ([43]); // 47
struct_construct<core::poseidon::HashState>([39], [40], [41], [43]) -> ([44]); // 48
store_temp<Poseidon>([38]) -> ([35]); // 49
store_temp<core::poseidon::HashState>([44]) -> ([36]); // 50
struct_deconstruct<core::poseidon::HashState>([36]) -> ([45], [46], [47], [48]); // 51
enum_match<core::bool>([48]) { fallthrough([49]) 62([50]) }; // 52
branch_align() -> (); // 53
drop<Unit>([49]) -> (); // 54
felt252_add([45], [3]) -> ([51]); // 55
struct_construct<Unit>() -> ([52]); // 56
enum_init<core::bool, 1>([52]) -> ([53]); // 57
struct_construct<core::poseidon::HashState>([51], [46], [47], [53]) -> ([54]); // 58
store_temp<Poseidon>([35]) -> ([55]); // 59
store_temp<core::poseidon::HashState>([54]) -> ([56]); // 60
jump() { 72() }; // 61
branch_align() -> (); // 62
drop<Unit>([50]) -> (); // 63
felt252_add([46], [3]) -> ([57]); // 64
store_temp<felt252>([57]) -> ([57]); // 65
hades_permutation([35], [45], [57], [47]) -> ([58], [59], [60], [61]); // 66
struct_construct<Unit>() -> ([62]); // 67
enum_init<core::bool, 0>([62]) -> ([63]); // 68
struct_construct<core::poseidon::HashState>([59], [60], [61], [63]) -> ([64]); // 69
store_temp<Poseidon>([58]) -> ([55]); // 70
store_temp<core::poseidon::HashState>([64]) -> ([56]); // 71
struct_deconstruct<core::poseidon::HashState>([56]) -> ([65], [66], [67], [68]); // 72
enum_match<core::bool>([68]) { fallthrough([69]) 85([70]) }; // 73
branch_align() -> (); // 74
drop<Unit>([69]) -> (); // 75
felt252_const<1>() -> ([71]); // 76
felt252_add([65], [71]) -> ([72]); // 77
store_temp<felt252>([72]) -> ([72]); // 78
hades_permutation([55], [72], [66], [67]) -> ([73], [74], [75], [76]); // 79
drop<felt252>([75]) -> (); // 80
drop<felt252>([76]) -> (); // 81
store_temp<Poseidon>([73]) -> ([73]); // 82
store_temp<felt252>([74]) -> ([74]); // 83
return([73], [74]); // 84
branch_align() -> (); // 85
drop<Unit>([70]) -> (); // 86
felt252_const<1>() -> ([77]); // 87
felt252_add([66], [77]) -> ([78]); // 88
store_temp<felt252>([78]) -> ([78]); // 89
hades_permutation([55], [65], [78], [67]) -> ([79], [80], [81], [82]); // 90
drop<felt252>([81]) -> (); // 91
drop<felt252>([82]) -> (); // 92
store_temp<Poseidon>([79]) -> ([79]); // 93
store_temp<felt252>([80]) -> ([80]); // 94
return([79], [80]); // 95
=======
felt252_add([6], [2]) -> ([20]); // 24
store_temp<felt252>([20]) -> ([20]); // 25
store_temp<felt252>([7]) -> ([7]); // 26
hades_permutation([0], [5], [20], [7]) -> ([21], [22], [23], [24]); // 27
struct_construct<Unit>() -> ([25]); // 28
enum_init<core::bool, 0>([25]) -> ([26]); // 29
store_temp<Poseidon>([21]) -> ([15]); // 30
store_temp<felt252>([22]) -> ([16]); // 31
store_temp<felt252>([23]) -> ([17]); // 32
store_temp<felt252>([24]) -> ([18]); // 33
store_temp<core::bool>([26]) -> ([19]); // 34
enum_match<core::bool>([19]) { fallthrough([27]) 47([28]) }; // 35
branch_align() -> (); // 36
drop<Unit>([27]) -> (); // 37
felt252_add([16], [3]) -> ([29]); // 38
struct_construct<Unit>() -> ([30]); // 39
enum_init<core::bool, 1>([30]) -> ([31]); // 40
store_temp<Poseidon>([15]) -> ([32]); // 41
store_temp<felt252>([29]) -> ([33]); // 42
store_temp<felt252>([17]) -> ([34]); // 43
store_temp<felt252>([18]) -> ([35]); // 44
store_temp<core::bool>([31]) -> ([36]); // 45
jump() { 59() }; // 46
branch_align() -> (); // 47
drop<Unit>([28]) -> (); // 48
felt252_add([17], [3]) -> ([37]); // 49
store_temp<felt252>([37]) -> ([37]); // 50
hades_permutation([15], [16], [37], [18]) -> ([38], [39], [40], [41]); // 51
struct_construct<Unit>() -> ([42]); // 52
enum_init<core::bool, 0>([42]) -> ([43]); // 53
store_temp<Poseidon>([38]) -> ([32]); // 54
store_temp<felt252>([39]) -> ([33]); // 55
store_temp<felt252>([40]) -> ([34]); // 56
store_temp<felt252>([41]) -> ([35]); // 57
store_temp<core::bool>([43]) -> ([36]); // 58
enum_match<core::bool>([36]) { fallthrough([44]) 71([45]) }; // 59
branch_align() -> (); // 60
drop<Unit>([44]) -> (); // 61
felt252_const<1>() -> ([46]); // 62
felt252_add([33], [46]) -> ([47]); // 63
store_temp<felt252>([47]) -> ([47]); // 64
hades_permutation([32], [47], [34], [35]) -> ([48], [49], [50], [51]); // 65
drop<felt252>([50]) -> (); // 66
drop<felt252>([51]) -> (); // 67
store_temp<Poseidon>([48]) -> ([48]); // 68
store_temp<felt252>([49]) -> ([49]); // 69
return([48], [49]); // 70
branch_align() -> (); // 71
drop<Unit>([45]) -> (); // 72
felt252_const<1>() -> ([52]); // 73
felt252_add([34], [52]) -> ([53]); // 74
store_temp<felt252>([53]) -> ([53]); // 75
hades_permutation([32], [33], [53], [35]) -> ([54], [55], [56], [57]); // 76
drop<felt252>([56]) -> (); // 77
drop<felt252>([57]) -> (); // 78
store_temp<Poseidon>([54]) -> ([54]); // 79
store_temp<felt252>([55]) -> ([55]); // 80
return([54], [55]); // 81
>>>>>>> origin/main

test::foo@0([0]: Poseidon, [1]: felt252, [2]: felt252, [3]: felt252) -> (Poseidon, felt252);
