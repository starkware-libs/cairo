//! > gas_coupon_buy libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
fn foo() -> Option<gas::GasCoupon> nopanic {
    gas::gas_coupon_buy(100)
}

//! > casm
[ap + 0] = 100, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + -2] <= memory[fp + -3] %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 13;
[ap + -1] = [[fp + -4] + 0];
ap += 1;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [ap + -3] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1070})

//! > sierra_code
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type GasCoupon = GasCoupon [storable: true, drop: true, dup: false, zero_sized: false];
type core::option::Option::<core::gas::GasCoupon> = Enum<ut@core::option::Option::<core::gas::GasCoupon>, GasCoupon, Unit> [storable: true, drop: true, dup: false, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Const<u128, 100> = Const<u128, 100> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<u128, 100>> = const_as_immediate<Const<u128, 100>>;
libfunc store_temp<u128> = store_temp<u128>;
libfunc gas_coupon_buy = gas_coupon_buy;
libfunc branch_align = branch_align;
libfunc redeposit_gas = redeposit_gas;
libfunc enum_init<core::option::Option::<core::gas::GasCoupon>, 0> = enum_init<core::option::Option::<core::gas::GasCoupon>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<core::option::Option::<core::gas::GasCoupon>> = store_temp<core::option::Option::<core::gas::GasCoupon>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::gas::GasCoupon>, 1> = enum_init<core::option::Option::<core::gas::GasCoupon>, 1>;

F0:
const_as_immediate<Const<u128, 100>>() -> ([2]);
store_temp<u128>([2]) -> ([2]);
gas_coupon_buy([0], [1], [2]) { fallthrough([3], [4], [5]) F0_B0([6], [7]) };
branch_align() -> ();
redeposit_gas([4]) -> ([8]);
enum_init<core::option::Option::<core::gas::GasCoupon>, 0>([5]) -> ([9]);
store_temp<RangeCheck>([3]) -> ([3]);
store_temp<GasBuiltin>([8]) -> ([8]);
store_temp<core::option::Option::<core::gas::GasCoupon>>([9]) -> ([9]);
return([3], [8], [9]);
F0_B0:
branch_align() -> ();
redeposit_gas([7]) -> ([10]);
struct_construct<Unit>() -> ([11]);
enum_init<core::option::Option::<core::gas::GasCoupon>, 1>([11]) -> ([12]);
store_temp<RangeCheck>([6]) -> ([6]);
store_temp<GasBuiltin>([10]) -> ([10]);
store_temp<core::option::Option::<core::gas::GasCoupon>>([12]) -> ([12]);
return([6], [10], [12]);

test::foo@F0([0]: RangeCheck, [1]: GasBuiltin) -> (RangeCheck, GasBuiltin, core::option::Option::<core::gas::GasCoupon>);
