//! > coupon type and coupon_call

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
impl DropCoupon<T, impl DropImpl: Drop<T>> of Drop<bar::<T, DropImpl>::Coupon>;

fn foo(x: bar::<u8>::Coupon) {
    bar::<u8>(0, __coupon__: x);
}

fn bar<T, +Drop<T>>(x: T) -> felt252 {
    10
}

//! > casm
ret;

//! > function_costs
test::foo: OrderedHashMap({})

//! > sierra_code
type Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>> = Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>> [storable: true, drop: true, dup: false, zero_sized: true];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];

libfunc drop<Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>> = drop<Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>>;

drop<Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>>([0]) -> (); // 0
return(); // 1

test::foo@0([0]: Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>) -> ();

//! > ==========================================================================

//! > coupon_buy

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
impl DropCoupon<T, impl DropImpl: Drop<T>> of Drop<bar::<T, DropImpl>::Coupon>;
extern fn coupon_buy<T>() -> T nopanic;

fn foo() {
    // Buy coupons.
    let (c0, _c1) = buy_coupons();
    // Use coupons.
    bar(0, __coupon__: c0);
}

#[inline(never)]
fn buy_coupons() -> (bar::<u8>::Coupon, bar::<u8>::Coupon) {
    (coupon_buy(), coupon_buy())
}

#[inline(never)]
fn bar<T, +Drop<T>>(x: T) -> felt252 {
    10
}

//! > casm
call rel 7;
[ap + 0] = 0, ap++;
call rel 4;
ret;
ret;
[ap + 0] = 10, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 700})
test::buy_coupons: OrderedHashMap({Const: 200})
test::bar::<core::integer::u8, core::integer::u8Drop>: OrderedHashMap({Const: 100})

//! > sierra_code
type Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>> = Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>> [storable: true, drop: true, dup: false, zero_sized: true];
type Tuple<Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>, Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>> = Struct<ut@Tuple, Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>, Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>> [storable: true, drop: true, dup: false, zero_sized: true];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Const<felt252, 10> = Const<felt252, 10> [storable: false, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Const<u8, 0> = Const<u8, 0> [storable: false, drop: false, dup: false, zero_sized: false];
type u8 = u8 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc function_call<user@test::buy_coupons> = function_call<user@test::buy_coupons>;
libfunc struct_deconstruct<Tuple<Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>, Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>>> = struct_deconstruct<Tuple<Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>, Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>>>;
libfunc drop<Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>> = drop<Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>>;
libfunc const_as_immediate<Const<u8, 0>> = const_as_immediate<Const<u8, 0>>;
libfunc store_temp<u8> = store_temp<u8>;
libfunc coupon_call<user@test::bar::<core::integer::u8, core::integer::u8Drop>> = coupon_call<user@test::bar::<core::integer::u8, core::integer::u8Drop>>;
libfunc drop<felt252> = drop<felt252>;
libfunc coupon_buy<Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>> = coupon_buy<Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>>;
libfunc struct_construct<Tuple<Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>, Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>>> = struct_construct<Tuple<Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>, Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>>>;
libfunc drop<u8> = drop<u8>;
libfunc const_as_immediate<Const<felt252, 10>> = const_as_immediate<Const<felt252, 10>>;
libfunc store_temp<felt252> = store_temp<felt252>;

function_call<user@test::buy_coupons>() -> ([0]); // 0
struct_deconstruct<Tuple<Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>, Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>>>([0]) -> ([1], [2]); // 1
drop<Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>>([2]) -> (); // 2
const_as_immediate<Const<u8, 0>>() -> ([3]); // 3
store_temp<u8>([3]) -> ([3]); // 4
coupon_call<user@test::bar::<core::integer::u8, core::integer::u8Drop>>([3], [1]) -> ([4]); // 5
drop<felt252>([4]) -> (); // 6
return(); // 7
coupon_buy<Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>>() -> ([0]); // 8
coupon_buy<Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>>() -> ([1]); // 9
struct_construct<Tuple<Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>, Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>>>([0], [1]) -> ([2]); // 10
return([2]); // 11
drop<u8>([0]) -> (); // 12
const_as_immediate<Const<felt252, 10>>() -> ([1]); // 13
store_temp<felt252>([1]) -> ([1]); // 14
return([1]); // 15

test::foo@0() -> ();
test::buy_coupons@8() -> (Tuple<Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>, Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>>);
test::bar::<core::integer::u8, core::integer::u8Drop>@12([0]: u8) -> (felt252);

//! > ==========================================================================

//! > coupon_refund

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
extern fn coupon_refund<T>(c: T) nopanic;

fn foo(c: bar::<u8>::Coupon) {
    // Get refund on coupon.
    coupon_refund(c);
    bar(0_u8);
}

#[inline(never)]
fn bar<T, +Drop<T>>(x: T) -> felt252 {
    10
}

//! > casm
[ap + 0] = 0, ap++;
call rel 3;
ret;
[ap + 0] = 10, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})
test::bar::<core::integer::u8, core::integer::u8Drop>: OrderedHashMap({Const: 100})

//! > sierra_code
type Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>> = Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>> [storable: true, drop: true, dup: false, zero_sized: true];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Const<felt252, 10> = Const<felt252, 10> [storable: false, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Const<u8, 0> = Const<u8, 0> [storable: false, drop: false, dup: false, zero_sized: false];
type u8 = u8 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc coupon_refund<Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>> = coupon_refund<Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>>;
libfunc const_as_immediate<Const<u8, 0>> = const_as_immediate<Const<u8, 0>>;
libfunc store_temp<u8> = store_temp<u8>;
libfunc function_call<user@test::bar::<core::integer::u8, core::integer::u8Drop>> = function_call<user@test::bar::<core::integer::u8, core::integer::u8Drop>>;
libfunc drop<felt252> = drop<felt252>;
libfunc drop<u8> = drop<u8>;
libfunc const_as_immediate<Const<felt252, 10>> = const_as_immediate<Const<felt252, 10>>;
libfunc store_temp<felt252> = store_temp<felt252>;

coupon_refund<Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>>([0]) -> (); // 0
const_as_immediate<Const<u8, 0>>() -> ([1]); // 1
store_temp<u8>([1]) -> ([1]); // 2
function_call<user@test::bar::<core::integer::u8, core::integer::u8Drop>>([1]) -> ([2]); // 3
drop<felt252>([2]) -> (); // 4
return(); // 5
drop<u8>([0]) -> (); // 6
const_as_immediate<Const<felt252, 10>>() -> ([1]); // 7
store_temp<felt252>([1]) -> ([1]); // 8
return([1]); // 9

test::foo@0([0]: Coupon<user@test::bar::<core::integer::u8, core::integer::u8Drop>>) -> ();
test::bar::<core::integer::u8, core::integer::u8Drop>@6([0]: u8) -> (felt252);

//! > ==========================================================================

//! > Use coupon to destruct Array of non-droppable.

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
extern fn drop<T>(c: T) nopanic;

struct NonDroppable {
    x: u64,
}

fn destruct(arr: Array<(NonDroppable, destruct::Coupon)>) nopanic {
    match arr.pop_front_consume() {
        Some((
            rem, (elm, coupon),
        )) => {
            destruct(rem, __coupon__: coupon);
            integer::u64_bitwise(elm.x, elm.x);
            drop(elm);
        },
        None => {},
    }
}

//! > casm
ap += 1;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[fp + 0] = [[fp + -4] + 0];
call rel -12;
[fp + 0] = [[ap + -1] + 0];
[fp + 0] = [[ap + -1] + 1];
[ap + 0] = [ap + -1] + 5, ap++;
ret;
[ap + 0] = [fp + -5], ap++;
ret;

//! > function_costs
test::destruct: OrderedHashMap({Bitwise: 1, Const: 1200})

//! > sierra_code
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type test::NonDroppable = Struct<ut@test::NonDroppable, u64> [storable: true, drop: true, dup: true, zero_sized: false];
type Uninitialized<test::NonDroppable> = Uninitialized<test::NonDroppable> [storable: false, drop: true, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Bitwise = Bitwise [storable: true, drop: false, dup: false, zero_sized: false];
type Coupon<user@test::destruct> = Coupon<user@test::destruct> [storable: true, drop: true, dup: false, zero_sized: true];
type Tuple<test::NonDroppable, Coupon<user@test::destruct>> = Struct<ut@Tuple, test::NonDroppable, Coupon<user@test::destruct>> [storable: true, drop: true, dup: false, zero_sized: false];
type Box<Tuple<test::NonDroppable, Coupon<user@test::destruct>>> = Box<Tuple<test::NonDroppable, Coupon<user@test::destruct>>> [storable: true, drop: true, dup: false, zero_sized: false];
type Array<Tuple<test::NonDroppable, Coupon<user@test::destruct>>> = Array<Tuple<test::NonDroppable, Coupon<user@test::destruct>>> [storable: true, drop: true, dup: false, zero_sized: false];

libfunc alloc_local<test::NonDroppable> = alloc_local<test::NonDroppable>;
libfunc finalize_locals = finalize_locals;
libfunc disable_ap_tracking = disable_ap_tracking;
libfunc array_pop_front_consume<Tuple<test::NonDroppable, Coupon<user@test::destruct>>> = array_pop_front_consume<Tuple<test::NonDroppable, Coupon<user@test::destruct>>>;
libfunc branch_align = branch_align;
libfunc unbox<Tuple<test::NonDroppable, Coupon<user@test::destruct>>> = unbox<Tuple<test::NonDroppable, Coupon<user@test::destruct>>>;
libfunc struct_deconstruct<Tuple<test::NonDroppable, Coupon<user@test::destruct>>> = struct_deconstruct<Tuple<test::NonDroppable, Coupon<user@test::destruct>>>;
libfunc store_temp<Bitwise> = store_temp<Bitwise>;
libfunc store_temp<Array<Tuple<test::NonDroppable, Coupon<user@test::destruct>>>> = store_temp<Array<Tuple<test::NonDroppable, Coupon<user@test::destruct>>>>;
libfunc store_local<test::NonDroppable> = store_local<test::NonDroppable>;
libfunc coupon_call<user@test::destruct> = coupon_call<user@test::destruct>;
libfunc struct_deconstruct<test::NonDroppable> = struct_deconstruct<test::NonDroppable>;
libfunc dup<u64> = dup<u64>;
libfunc u64_bitwise = u64_bitwise;
libfunc drop<u64> = drop<u64>;
libfunc struct_construct<test::NonDroppable> = struct_construct<test::NonDroppable>;
libfunc drop<test::NonDroppable> = drop<test::NonDroppable>;
libfunc drop<Uninitialized<test::NonDroppable>> = drop<Uninitialized<test::NonDroppable>>;

alloc_local<test::NonDroppable>() -> ([3]); // 0
finalize_locals() -> (); // 1
disable_ap_tracking() -> (); // 2
array_pop_front_consume<Tuple<test::NonDroppable, Coupon<user@test::destruct>>>([1]) { fallthrough([4], [5]) 22() }; // 3
branch_align() -> (); // 4
unbox<Tuple<test::NonDroppable, Coupon<user@test::destruct>>>([5]) -> ([6]); // 5
struct_deconstruct<Tuple<test::NonDroppable, Coupon<user@test::destruct>>>([6]) -> ([2], [7]); // 6
store_temp<Bitwise>([0]) -> ([0]); // 7
store_temp<Array<Tuple<test::NonDroppable, Coupon<user@test::destruct>>>>([4]) -> ([4]); // 8
store_local<test::NonDroppable>([3], [2]) -> ([2]); // 9
coupon_call<user@test::destruct>([0], [4], [7]) -> ([8]); // 10
struct_deconstruct<test::NonDroppable>([2]) -> ([9]); // 11
dup<u64>([9]) -> ([9], [10]); // 12
dup<u64>([9]) -> ([9], [11]); // 13
u64_bitwise([8], [10], [11]) -> ([12], [13], [14], [15]); // 14
drop<u64>([13]) -> (); // 15
drop<u64>([14]) -> (); // 16
drop<u64>([15]) -> (); // 17
struct_construct<test::NonDroppable>([9]) -> ([16]); // 18
drop<test::NonDroppable>([16]) -> (); // 19
store_temp<Bitwise>([12]) -> ([12]); // 20
return([12]); // 21
branch_align() -> (); // 22
drop<Uninitialized<test::NonDroppable>>([3]) -> (); // 23
store_temp<Bitwise>([0]) -> ([0]); // 24
return([0]); // 25

test::destruct@0([0]: Bitwise, [1]: Array<Tuple<test::NonDroppable, Coupon<user@test::destruct>>>) -> (Bitwise);

//! > ==========================================================================

//! > Withdraw gas is added when coupon_buy is used recursively.

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
extern fn coupon_buy<T>() -> T nopanic;
extern fn coupon_refund<T>(c: T) nopanic;
impl CouponRecursiveBuyDrop of Drop<recursive_buy::<u8>::Coupon>;
impl CouponRecursiveRefundDrop of Drop<recursive_refund::<u8>::Coupon>;

#[inline(never)]
fn recursive_buy<T>() {
    coupon_buy::<recursive_buy::<u8>::Coupon>();
}

#[inline(never)]
fn recursive_refund<T>(c: recursive_refund::<u8>::Coupon) {
    coupon_refund(c);
}

fn foo(c: recursive_refund::<u8>::Coupon) {
    recursive_buy::<u8>();
    recursive_refund::<u8>(c);
}

//! > casm
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 19;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
call rel 49;
ret;
ap += 8;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13] + 990, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
%{ memory[ap + 0] = 990 <= memory[fp + -3] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768210466, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 17;
[fp + -3] = [ap + 0] + 990, ap++;
[ap + -1] = [[fp + -4] + 0];
ap += 2;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
%{ memory[ap + 0] = 0 <= memory[fp + -3] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 18;
[fp + -3] = [ap + 0] + 0, ap++;
[ap + -1] = [[fp + -4] + 0];
ap += 2;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [ap + -4] + 780, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 3440})
test::recursive_buy::<core::integer::u8>: OrderedHashMap({Const: 1270})
test::recursive_refund::<core::integer::u8>: OrderedHashMap({Const: 1270})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type core::panics::Panic = Struct<ut@core::panics::Panic> [storable: true, drop: true, dup: true, zero_sized: true];
type Const<felt252, 375233589013918064796019> = Const<felt252, 375233589013918064796019> [storable: false, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Coupon<user@test::recursive_buy::<core::integer::u8>> = Coupon<user@test::recursive_buy::<core::integer::u8>> [storable: true, drop: true, dup: false, zero_sized: true];
type Coupon<user@test::recursive_refund::<core::integer::u8>> = Coupon<user@test::recursive_refund::<core::integer::u8>> [storable: true, drop: true, dup: false, zero_sized: true];
type Tuple<core::panics::Panic, Array<felt252>> = Struct<ut@Tuple, core::panics::Panic, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type Tuple<Unit> = Struct<ut@Tuple, Unit> [storable: true, drop: true, dup: true, zero_sized: true];
type core::panics::PanicResult::<((),)> = Enum<ut@core::panics::PanicResult::<((),)>, Tuple<Unit>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];

libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::recursive_buy::<core::integer::u8>> = function_call<user@test::recursive_buy::<core::integer::u8>>;
libfunc enum_match<core::panics::PanicResult::<((),)>> = enum_match<core::panics::PanicResult::<((),)>>;
libfunc branch_align = branch_align;
libfunc drop<Tuple<Unit>> = drop<Tuple<Unit>>;
libfunc redeposit_gas = redeposit_gas;
libfunc function_call<user@test::recursive_refund::<core::integer::u8>> = function_call<user@test::recursive_refund::<core::integer::u8>>;
libfunc drop<Coupon<user@test::recursive_refund::<core::integer::u8>>> = drop<Coupon<user@test::recursive_refund::<core::integer::u8>>>;
libfunc enum_init<core::panics::PanicResult::<((),)>, 1> = enum_init<core::panics::PanicResult::<((),)>, 1>;
libfunc store_temp<core::panics::PanicResult::<((),)>> = store_temp<core::panics::PanicResult::<((),)>>;
libfunc withdraw_gas = withdraw_gas;
libfunc coupon_buy<Coupon<user@test::recursive_buy::<core::integer::u8>>> = coupon_buy<Coupon<user@test::recursive_buy::<core::integer::u8>>>;
libfunc drop<Coupon<user@test::recursive_buy::<core::integer::u8>>> = drop<Coupon<user@test::recursive_buy::<core::integer::u8>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc struct_construct<Tuple<Unit>> = struct_construct<Tuple<Unit>>;
libfunc enum_init<core::panics::PanicResult::<((),)>, 0> = enum_init<core::panics::PanicResult::<((),)>, 0>;
libfunc array_new<felt252> = array_new<felt252>;
libfunc const_as_immediate<Const<felt252, 375233589013918064796019>> = const_as_immediate<Const<felt252, 375233589013918064796019>>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc array_append<felt252> = array_append<felt252>;
libfunc struct_construct<core::panics::Panic> = struct_construct<core::panics::Panic>;
libfunc struct_construct<Tuple<core::panics::Panic, Array<felt252>>> = struct_construct<Tuple<core::panics::Panic, Array<felt252>>>;
libfunc coupon_refund<Coupon<user@test::recursive_refund::<core::integer::u8>>> = coupon_refund<Coupon<user@test::recursive_refund::<core::integer::u8>>>;

store_temp<RangeCheck>([0]) -> ([0]); // 0
store_temp<GasBuiltin>([1]) -> ([1]); // 1
function_call<user@test::recursive_buy::<core::integer::u8>>([0], [1]) -> ([3], [4], [5]); // 2
enum_match<core::panics::PanicResult::<((),)>>([5]) { fallthrough([6]) 11([7]) }; // 3
branch_align() -> (); // 4
drop<Tuple<Unit>>([6]) -> (); // 5
redeposit_gas([4]) -> ([8]); // 6
store_temp<RangeCheck>([3]) -> ([3]); // 7
store_temp<GasBuiltin>([8]) -> ([8]); // 8
function_call<user@test::recursive_refund::<core::integer::u8>>([3], [8], [2]) -> ([9], [10], [11]); // 9
return([9], [10], [11]); // 10
branch_align() -> (); // 11
drop<Coupon<user@test::recursive_refund::<core::integer::u8>>>([2]) -> (); // 12
redeposit_gas([4]) -> ([12]); // 13
enum_init<core::panics::PanicResult::<((),)>, 1>([7]) -> ([13]); // 14
store_temp<RangeCheck>([3]) -> ([3]); // 15
store_temp<GasBuiltin>([12]) -> ([12]); // 16
store_temp<core::panics::PanicResult::<((),)>>([13]) -> ([13]); // 17
return([3], [12], [13]); // 18
withdraw_gas([0], [1]) { fallthrough([2], [3]) 31([4], [5]) }; // 19
branch_align() -> (); // 20
redeposit_gas([3]) -> ([6]); // 21
coupon_buy<Coupon<user@test::recursive_buy::<core::integer::u8>>>() -> ([7]); // 22
drop<Coupon<user@test::recursive_buy::<core::integer::u8>>>([7]) -> (); // 23
struct_construct<Unit>() -> ([8]); // 24
struct_construct<Tuple<Unit>>([8]) -> ([9]); // 25
enum_init<core::panics::PanicResult::<((),)>, 0>([9]) -> ([10]); // 26
store_temp<RangeCheck>([2]) -> ([2]); // 27
store_temp<GasBuiltin>([6]) -> ([6]); // 28
store_temp<core::panics::PanicResult::<((),)>>([10]) -> ([10]); // 29
return([2], [6], [10]); // 30
branch_align() -> (); // 31
redeposit_gas([5]) -> ([11]); // 32
array_new<felt252>() -> ([12]); // 33
const_as_immediate<Const<felt252, 375233589013918064796019>>() -> ([13]); // 34
store_temp<felt252>([13]) -> ([13]); // 35
array_append<felt252>([12], [13]) -> ([14]); // 36
struct_construct<core::panics::Panic>() -> ([15]); // 37
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([15], [14]) -> ([16]); // 38
enum_init<core::panics::PanicResult::<((),)>, 1>([16]) -> ([17]); // 39
store_temp<RangeCheck>([4]) -> ([4]); // 40
store_temp<GasBuiltin>([11]) -> ([11]); // 41
store_temp<core::panics::PanicResult::<((),)>>([17]) -> ([17]); // 42
return([4], [11], [17]); // 43
withdraw_gas([0], [1]) { fallthrough([3], [4]) 55([5], [6]) }; // 44
branch_align() -> (); // 45
redeposit_gas([4]) -> ([7]); // 46
coupon_refund<Coupon<user@test::recursive_refund::<core::integer::u8>>>([2]) -> (); // 47
struct_construct<Unit>() -> ([8]); // 48
struct_construct<Tuple<Unit>>([8]) -> ([9]); // 49
enum_init<core::panics::PanicResult::<((),)>, 0>([9]) -> ([10]); // 50
store_temp<RangeCheck>([3]) -> ([3]); // 51
store_temp<GasBuiltin>([7]) -> ([7]); // 52
store_temp<core::panics::PanicResult::<((),)>>([10]) -> ([10]); // 53
return([3], [7], [10]); // 54
branch_align() -> (); // 55
drop<Coupon<user@test::recursive_refund::<core::integer::u8>>>([2]) -> (); // 56
redeposit_gas([6]) -> ([11]); // 57
array_new<felt252>() -> ([12]); // 58
const_as_immediate<Const<felt252, 375233589013918064796019>>() -> ([13]); // 59
store_temp<felt252>([13]) -> ([13]); // 60
array_append<felt252>([12], [13]) -> ([14]); // 61
struct_construct<core::panics::Panic>() -> ([15]); // 62
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([15], [14]) -> ([16]); // 63
enum_init<core::panics::PanicResult::<((),)>, 1>([16]) -> ([17]); // 64
store_temp<RangeCheck>([5]) -> ([5]); // 65
store_temp<GasBuiltin>([11]) -> ([11]); // 66
store_temp<core::panics::PanicResult::<((),)>>([17]) -> ([17]); // 67
return([5], [11], [17]); // 68

test::foo@0([0]: RangeCheck, [1]: GasBuiltin, [2]: Coupon<user@test::recursive_refund::<core::integer::u8>>) -> (RangeCheck, GasBuiltin, core::panics::PanicResult::<((),)>);
test::recursive_buy::<core::integer::u8>@19([0]: RangeCheck, [1]: GasBuiltin) -> (RangeCheck, GasBuiltin, core::panics::PanicResult::<((),)>);
test::recursive_refund::<core::integer::u8>@44([0]: RangeCheck, [1]: GasBuiltin, [2]: Coupon<user@test::recursive_refund::<core::integer::u8>>) -> (RangeCheck, GasBuiltin, core::panics::PanicResult::<((),)>);
