//! > storage_base_address_from_felt libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(addr: felt) -> starknet::StorageBaseAddress {
    starknet::storage_base_address_from_felt(addr)
}

//! > casm
%{ memory[ap + 5] = memory[fp + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[fp + -3] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -4] + 0], ap++;
[ap + -4] = [[fp + -4] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -4] + 2];
jmp rel 17;
[ap + 5] = [fp + -3], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -4] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -4] + 1], ap++;
[ap + -7] = [[fp + -4] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1410})

//! > sierra_code
type RangeCheck = RangeCheck;
type felt = felt;
type StorageBaseAddress = StorageBaseAddress;

libfunc storage_base_address_from_felt = storage_base_address_from_felt;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<StorageBaseAddress> = store_temp<StorageBaseAddress>;

storage_base_address_from_felt([0], [1]) -> ([2], [3]);
store_temp<RangeCheck>([2]) -> ([4]);
store_temp<StorageBaseAddress>([3]) -> ([5]);
return([4], [5]);

test::foo@0([0]: RangeCheck, [1]: felt) -> (RangeCheck, StorageBaseAddress);

//! > ==========================================================================

//! > storage_address_from_base_and_offset libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(base: starknet::StorageBaseAddress, offset: u8) -> starknet::StorageAddress {
    starknet::storage_address_from_base_and_offset(base, offset)
}

//! > casm
[ap + 0] = [fp + -4] + [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type StorageBaseAddress = StorageBaseAddress;
type u8 = u8;
type StorageAddress = StorageAddress;

libfunc storage_address_from_base_and_offset = storage_address_from_base_and_offset;
libfunc store_temp<StorageAddress> = store_temp<StorageAddress>;

storage_address_from_base_and_offset([0], [1]) -> ([2]);
store_temp<StorageAddress>([2]) -> ([3]);
return([3]);

test::foo@0([0]: StorageBaseAddress, [1]: u8) -> (StorageAddress);

//! > ==========================================================================

//! > storage_read_syscall libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(
    address_domain: felt, address: starknet::StorageAddress,
) -> Result::<felt, Array::<felt>> {
    starknet::storage_read_syscall(address_domain, address)
}

//! > casm
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = 0, ap++;
jmp rel 11;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
jmp rel 2;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 11300})

//! > sierra_code
type GasBuiltin = GasBuiltin;
type System = System;
type felt = felt;
type StorageAddress = StorageAddress;
type Array<felt> = Array<felt>;
type core::result::Result::<core::felt, core::array::Array::<core::felt>> = Enum<ut@core::result::Result::<core::felt, core::array::Array::<core::felt>>, felt, Array<felt>>;

libfunc storage_read_syscall = storage_read_syscall;
libfunc branch_align = branch_align;
libfunc enum_init<core::result::Result::<core::felt, core::array::Array::<core::felt>>, 0> = enum_init<core::result::Result::<core::felt, core::array::Array::<core::felt>>, 0>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<System> = store_temp<System>;
libfunc store_temp<core::result::Result::<core::felt, core::array::Array::<core::felt>>> = store_temp<core::result::Result::<core::felt, core::array::Array::<core::felt>>>;
libfunc jump = jump;
libfunc enum_init<core::result::Result::<core::felt, core::array::Array::<core::felt>>, 1> = enum_init<core::result::Result::<core::felt, core::array::Array::<core::felt>>, 1>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc rename<System> = rename<System>;
libfunc rename<core::result::Result::<core::felt, core::array::Array::<core::felt>>> = rename<core::result::Result::<core::felt, core::array::Array::<core::felt>>>;

storage_read_syscall([0], [1], [2], [3]) { fallthrough([4], [5], [6]) 7([7], [8], [9]) };
branch_align() -> ();
enum_init<core::result::Result::<core::felt, core::array::Array::<core::felt>>, 0>([6]) -> ([10]);
store_temp<GasBuiltin>([4]) -> ([11]);
store_temp<System>([5]) -> ([12]);
store_temp<core::result::Result::<core::felt, core::array::Array::<core::felt>>>([10]) -> ([13]);
jump() { 13() };
branch_align() -> ();
enum_init<core::result::Result::<core::felt, core::array::Array::<core::felt>>, 1>([9]) -> ([14]);
store_temp<GasBuiltin>([7]) -> ([11]);
store_temp<System>([8]) -> ([12]);
store_temp<core::result::Result::<core::felt, core::array::Array::<core::felt>>>([14]) -> ([13]);
jump() { 13() };
rename<GasBuiltin>([11]) -> ([15]);
rename<System>([12]) -> ([16]);
rename<core::result::Result::<core::felt, core::array::Array::<core::felt>>>([13]) -> ([17]);
return([15], [16], [17]);

test::foo@0([0]: GasBuiltin, [1]: System, [2]: felt, [3]: StorageAddress) -> (GasBuiltin, System, core::result::Result::<core::felt, core::array::Array::<core::felt>>);

//! > ==========================================================================

//! > storage_write_syscall libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(
    address_domain: felt, address: starknet::StorageAddress, value: felt,
) -> Result::<(), Array::<felt>> {
    starknet::storage_write_syscall(address_domain, address, value)
}

//! > casm
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[fp + -5] = [[fp + -6] + 2];
[fp + -4] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 6], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 11;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [fp + -6] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
[ap + 0] = [[fp + -6] + 8], ap++;
jmp rel 2;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 11400})

//! > sierra_code
type GasBuiltin = GasBuiltin;
type System = System;
type felt = felt;
type StorageAddress = StorageAddress;
type Array<felt> = Array<felt>;
type Unit = Struct<ut@Tuple>;
type core::result::Result::<(), core::array::Array::<core::felt>> = Enum<ut@core::result::Result::<(), core::array::Array::<core::felt>>, Unit, Array<felt>>;

libfunc storage_write_syscall = storage_write_syscall;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::result::Result::<(), core::array::Array::<core::felt>>, 0> = enum_init<core::result::Result::<(), core::array::Array::<core::felt>>, 0>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<System> = store_temp<System>;
libfunc store_temp<core::result::Result::<(), core::array::Array::<core::felt>>> = store_temp<core::result::Result::<(), core::array::Array::<core::felt>>>;
libfunc jump = jump;
libfunc enum_init<core::result::Result::<(), core::array::Array::<core::felt>>, 1> = enum_init<core::result::Result::<(), core::array::Array::<core::felt>>, 1>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc rename<System> = rename<System>;
libfunc rename<core::result::Result::<(), core::array::Array::<core::felt>>> = rename<core::result::Result::<(), core::array::Array::<core::felt>>>;

storage_write_syscall([0], [1], [2], [3], [4]) { fallthrough([5], [6]) 8([7], [8], [9]) };
branch_align() -> ();
struct_construct<Unit>() -> ([10]);
enum_init<core::result::Result::<(), core::array::Array::<core::felt>>, 0>([10]) -> ([11]);
store_temp<GasBuiltin>([5]) -> ([12]);
store_temp<System>([6]) -> ([13]);
store_temp<core::result::Result::<(), core::array::Array::<core::felt>>>([11]) -> ([14]);
jump() { 14() };
branch_align() -> ();
enum_init<core::result::Result::<(), core::array::Array::<core::felt>>, 1>([9]) -> ([15]);
store_temp<GasBuiltin>([7]) -> ([12]);
store_temp<System>([8]) -> ([13]);
store_temp<core::result::Result::<(), core::array::Array::<core::felt>>>([15]) -> ([14]);
jump() { 14() };
rename<GasBuiltin>([12]) -> ([16]);
rename<System>([13]) -> ([17]);
rename<core::result::Result::<(), core::array::Array::<core::felt>>>([14]) -> ([18]);
return([16], [17], [18]);

test::foo@0([0]: GasBuiltin, [1]: System, [2]: felt, [3]: StorageAddress, [4]: felt) -> (GasBuiltin, System, core::result::Result::<(), core::array::Array::<core::felt>>);
