//! > call_contract_syscall libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(address: ContractAddress, entry_point_selector: felt, calldata: Array::<felt>) -> starknet::SyscallResult::<Array::<felt>> {
    starknet::call_contract_syscall(address, entry_point_selector, calldata)
}

//! > casm
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -8] = [[fp + -7] + 1];
[fp + -6] = [[fp + -7] + 2];
[fp + -5] = [[fp + -7] + 3];
[fp + -4] = [[fp + -7] + 4];
[fp + -3] = [[fp + -7] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 7], ap++;
jmp rel 11 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 6], ap++;
[ap + 0] = [fp + -7] + 10, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -7] + 8], ap++;
[ap + 0] = [[fp + -7] + 9], ap++;
jmp rel 11;
[ap + 0] = [[fp + -7] + 6], ap++;
[ap + 0] = [fp + -7] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -7] + 8], ap++;
[ap + 0] = [[fp + -7] + 9], ap++;
jmp rel 2;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 11500})

//! > sierra_code
type GasBuiltin = GasBuiltin;
type System = System;
type ContractAddress = ContractAddress;
type felt = felt;
type Array<felt> = Array<felt>;
type core::result::Result::<core::array::Array::<core::felt>, core::array::Array::<core::felt>> = Enum<ut@core::result::Result::<core::array::Array::<core::felt>, core::array::Array::<core::felt>>, Array<felt>, Array<felt>>;

libfunc call_contract_syscall = call_contract_syscall;
libfunc branch_align = branch_align;
libfunc enum_init<core::result::Result::<core::array::Array::<core::felt>, core::array::Array::<core::felt>>, 0> = enum_init<core::result::Result::<core::array::Array::<core::felt>, core::array::Array::<core::felt>>, 0>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<System> = store_temp<System>;
libfunc store_temp<core::result::Result::<core::array::Array::<core::felt>, core::array::Array::<core::felt>>> = store_temp<core::result::Result::<core::array::Array::<core::felt>, core::array::Array::<core::felt>>>;
libfunc jump = jump;
libfunc enum_init<core::result::Result::<core::array::Array::<core::felt>, core::array::Array::<core::felt>>, 1> = enum_init<core::result::Result::<core::array::Array::<core::felt>, core::array::Array::<core::felt>>, 1>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc rename<System> = rename<System>;
libfunc rename<core::result::Result::<core::array::Array::<core::felt>, core::array::Array::<core::felt>>> = rename<core::result::Result::<core::array::Array::<core::felt>, core::array::Array::<core::felt>>>;

call_contract_syscall([0], [1], [2], [3], [4]) { fallthrough([5], [6], [7]) 7([8], [9], [10]) };
branch_align() -> ();
enum_init<core::result::Result::<core::array::Array::<core::felt>, core::array::Array::<core::felt>>, 0>([7]) -> ([11]);
store_temp<GasBuiltin>([5]) -> ([12]);
store_temp<System>([6]) -> ([13]);
store_temp<core::result::Result::<core::array::Array::<core::felt>, core::array::Array::<core::felt>>>([11]) -> ([14]);
jump() { 13() };
branch_align() -> ();
enum_init<core::result::Result::<core::array::Array::<core::felt>, core::array::Array::<core::felt>>, 1>([10]) -> ([15]);
store_temp<GasBuiltin>([8]) -> ([12]);
store_temp<System>([9]) -> ([13]);
store_temp<core::result::Result::<core::array::Array::<core::felt>, core::array::Array::<core::felt>>>([15]) -> ([14]);
jump() { 13() };
rename<GasBuiltin>([12]) -> ([16]);
rename<System>([13]) -> ([17]);
rename<core::result::Result::<core::array::Array::<core::felt>, core::array::Array::<core::felt>>>([14]) -> ([18]);
return([16], [17], [18]);

test::foo@0([0]: GasBuiltin, [1]: System, [2]: ContractAddress, [3]: felt, [4]: Array<felt>) -> (GasBuiltin, System, core::result::Result::<core::array::Array::<core::felt>, core::array::Array::<core::felt>>);

//! > ==========================================================================

//! > contract_address_try_from_felt libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(address: felt) -> Option::<starknet::ContractAddress> {
    starknet::contract_address_try_from_felt(address)
}

//! > casm
%{ memory[ap + 4] = memory[fp + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[fp + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -4] + 0], ap++;
[ap + -4] = [[fp + -4] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -4] + 2];
jmp rel 19;
%{
(value, scalar) = (memory[fp + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[fp + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -4] + 0], ap++;
[ap + -3] = [[fp + -4] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -4] + 2];
ap += 1;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 10;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 2;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1510})

//! > sierra_code
type RangeCheck = RangeCheck;
type felt = felt;
type ContractAddress = ContractAddress;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<core::starknet::contract_address::ContractAddress> = Enum<ut@core::option::Option::<core::starknet::contract_address::ContractAddress>, ContractAddress, Unit>;

libfunc contract_address_try_from_felt = contract_address_try_from_felt;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::starknet::contract_address::ContractAddress>, 0> = enum_init<core::option::Option::<core::starknet::contract_address::ContractAddress>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::starknet::contract_address::ContractAddress>> = store_temp<core::option::Option::<core::starknet::contract_address::ContractAddress>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::starknet::contract_address::ContractAddress>, 1> = enum_init<core::option::Option::<core::starknet::contract_address::ContractAddress>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::option::Option::<core::starknet::contract_address::ContractAddress>> = rename<core::option::Option::<core::starknet::contract_address::ContractAddress>>;

contract_address_try_from_felt([0], [1]) { fallthrough([2], [3]) 6([4]) };
branch_align() -> ();
enum_init<core::option::Option::<core::starknet::contract_address::ContractAddress>, 0>([3]) -> ([5]);
store_temp<RangeCheck>([2]) -> ([6]);
store_temp<core::option::Option::<core::starknet::contract_address::ContractAddress>>([5]) -> ([7]);
jump() { 12() };
branch_align() -> ();
struct_construct<Unit>() -> ([8]);
enum_init<core::option::Option::<core::starknet::contract_address::ContractAddress>, 1>([8]) -> ([9]);
store_temp<RangeCheck>([4]) -> ([6]);
store_temp<core::option::Option::<core::starknet::contract_address::ContractAddress>>([9]) -> ([7]);
jump() { 12() };
rename<RangeCheck>([6]) -> ([10]);
rename<core::option::Option::<core::starknet::contract_address::ContractAddress>>([7]) -> ([11]);
return([10], [11]);

test::foo@0([0]: RangeCheck, [1]: felt) -> (RangeCheck, core::option::Option::<core::starknet::contract_address::ContractAddress>);

//! > ==========================================================================

//! > contract_address_to_felt libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(address: ContractAddress) -> felt {
    starknet::contract_address_to_felt(address)
}

//! > casm
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type ContractAddress = ContractAddress;
type felt = felt;

libfunc contract_address_to_felt = contract_address_to_felt;
libfunc store_temp<felt> = store_temp<felt>;

contract_address_to_felt([0]) -> ([1]);
store_temp<felt>([1]) -> ([2]);
return([2]);

test::foo@0([0]: ContractAddress) -> (felt);
