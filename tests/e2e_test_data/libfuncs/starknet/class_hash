//! > class_hash_try_from_felt252 libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(address: felt252) -> Option::<starknet::ClassHash> {
    starknet::class_hash::class_hash_try_from_felt252(address)
}

//! > casm
%{ memory[ap + 4] = memory[fp + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[fp + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -4] + 0], ap++;
[ap + -4] = [[fp + -4] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -4] + 2];
jmp rel 19;
%{
(value, scalar) = (memory[fp + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[fp + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -4] + 0], ap++;
[ap + -3] = [[fp + -4] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -4] + 2];
ap += 1;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 8;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1420})

//! > sierra_code
type RangeCheck = RangeCheck;
type felt252 = felt252;
type ClassHash = ClassHash;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<core::starknet::class_hash::ClassHash> = Enum<ut@core::option::Option::<core::starknet::class_hash::ClassHash>, ClassHash, Unit>;

libfunc class_hash_try_from_felt252 = class_hash_try_from_felt252;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::starknet::class_hash::ClassHash>, 0> = enum_init<core::option::Option::<core::starknet::class_hash::ClassHash>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::starknet::class_hash::ClassHash>> = store_temp<core::option::Option::<core::starknet::class_hash::ClassHash>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::starknet::class_hash::ClassHash>, 1> = enum_init<core::option::Option::<core::starknet::class_hash::ClassHash>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::option::Option::<core::starknet::class_hash::ClassHash>> = rename<core::option::Option::<core::starknet::class_hash::ClassHash>>;

class_hash_try_from_felt252([0], [1]) { fallthrough([2], [3]) 6([4]) };
branch_align() -> ();
enum_init<core::option::Option::<core::starknet::class_hash::ClassHash>, 0>([3]) -> ([5]);
store_temp<RangeCheck>([2]) -> ([6]);
store_temp<core::option::Option::<core::starknet::class_hash::ClassHash>>([5]) -> ([7]);
jump() { 11() };
branch_align() -> ();
struct_construct<Unit>() -> ([8]);
enum_init<core::option::Option::<core::starknet::class_hash::ClassHash>, 1>([8]) -> ([9]);
store_temp<RangeCheck>([4]) -> ([6]);
store_temp<core::option::Option::<core::starknet::class_hash::ClassHash>>([9]) -> ([7]);
rename<RangeCheck>([6]) -> ([10]);
rename<core::option::Option::<core::starknet::class_hash::ClassHash>>([7]) -> ([11]);
return([10], [11]);

test::foo@0([0]: RangeCheck, [1]: felt252) -> (RangeCheck, core::option::Option::<core::starknet::class_hash::ClassHash>);

//! > ==========================================================================

//! > class_hash_to_felt252 libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(address: starknet::ClassHash) -> felt252 {
    starknet::class_hash::class_hash_to_felt252(address)
}

//! > casm
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type ClassHash = ClassHash;
type felt252 = felt252;

libfunc class_hash_to_felt252 = class_hash_to_felt252;
libfunc store_temp<felt252> = store_temp<felt252>;

class_hash_to_felt252([0]) -> ([1]);
store_temp<felt252>([1]) -> ([2]);
return([2]);

test::foo@0([0]: ClassHash) -> (felt252);
