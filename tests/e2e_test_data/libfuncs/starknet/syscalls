//! > emit_event_syscall libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(keys: Span<felt252>, data: Span<felt252>) -> starknet::SyscallResult<()> {
    starknet::syscalls::emit_event_syscall(keys, data)
}

//! > casm
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -8] = [[fp + -7] + 1];
[fp + -6] = [[fp + -7] + 2];
[fp + -5] = [[fp + -7] + 3];
[fp + -4] = [[fp + -7] + 4];
[fp + -3] = [[fp + -7] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 7], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 6], ap++;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [[fp + -7] + 6], ap++;
[ap + 0] = [fp + -7] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -7] + 8], ap++;
[ap + 0] = [[fp + -7] + 9], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 11500})

//! > sierra_code
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type core::result::Result::<(), core::array::Array::<core::felt252>> = Enum<ut@core::result::Result::<(), core::array::Array::<core::felt252>>, Unit, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::array::Span::<core::felt252> = Struct<ut@core::array::Span::<core::felt252>, Snapshot<Array<felt252>>> [storable: true, drop: true, dup: true, zero_sized: false];
type System = System [storable: true, drop: false, dup: false, zero_sized: false];

libfunc emit_event_syscall = emit_event_syscall;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::result::Result::<(), core::array::Array::<core::felt252>>, 0> = enum_init<core::result::Result::<(), core::array::Array::<core::felt252>>, 0>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<System> = store_temp<System>;
libfunc store_temp<core::result::Result::<(), core::array::Array::<core::felt252>>> = store_temp<core::result::Result::<(), core::array::Array::<core::felt252>>>;
libfunc jump = jump;
libfunc enum_init<core::result::Result::<(), core::array::Array::<core::felt252>>, 1> = enum_init<core::result::Result::<(), core::array::Array::<core::felt252>>, 1>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc rename<System> = rename<System>;
libfunc rename<core::result::Result::<(), core::array::Array::<core::felt252>>> = rename<core::result::Result::<(), core::array::Array::<core::felt252>>>;

emit_event_syscall([0], [1], [2], [3]) { fallthrough([4], [5]) 8([6], [7], [8]) }; // 0
branch_align() -> (); // 1
struct_construct<Unit>() -> ([9]); // 2
enum_init<core::result::Result::<(), core::array::Array::<core::felt252>>, 0>([9]) -> ([10]); // 3
store_temp<GasBuiltin>([4]) -> ([11]); // 4
store_temp<System>([5]) -> ([12]); // 5
store_temp<core::result::Result::<(), core::array::Array::<core::felt252>>>([10]) -> ([13]); // 6
jump() { 13() }; // 7
branch_align() -> (); // 8
enum_init<core::result::Result::<(), core::array::Array::<core::felt252>>, 1>([8]) -> ([14]); // 9
store_temp<GasBuiltin>([6]) -> ([11]); // 10
store_temp<System>([7]) -> ([12]); // 11
store_temp<core::result::Result::<(), core::array::Array::<core::felt252>>>([14]) -> ([13]); // 12
rename<GasBuiltin>([11]) -> ([15]); // 13
rename<System>([12]) -> ([16]); // 14
rename<core::result::Result::<(), core::array::Array::<core::felt252>>>([13]) -> ([17]); // 15
return([15], [16], [17]); // 16

test::foo@0([0]: GasBuiltin, [1]: System, [2]: core::array::Span::<core::felt252>, [3]: core::array::Span::<core::felt252>) -> (GasBuiltin, System, core::result::Result::<(), core::array::Array::<core::felt252>>);

//! > ==========================================================================

//! > get_block_hash_syscall libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(block_number: u64) -> starknet::SyscallResult<felt252> {
    starknet::syscalls::get_block_hash_syscall(block_number)
}

//! > casm
[ap + 0] = 22096086224907272360718070632, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
[fp + -3] = [[fp + -4] + 2];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 4], ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 3], ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 9;
[ap + 0] = [[fp + -4] + 3], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 11200})

//! > sierra_code
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type core::result::Result::<core::felt252, core::array::Array::<core::felt252>> = Enum<ut@core::result::Result::<core::felt252, core::array::Array::<core::felt252>>, felt252, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type System = System [storable: true, drop: false, dup: false, zero_sized: false];

libfunc get_block_hash_syscall = get_block_hash_syscall;
libfunc branch_align = branch_align;
libfunc enum_init<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>, 0> = enum_init<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>, 0>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<System> = store_temp<System>;
libfunc store_temp<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>> = store_temp<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>>;
libfunc jump = jump;
libfunc enum_init<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>, 1> = enum_init<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>, 1>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc rename<System> = rename<System>;
libfunc rename<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>> = rename<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>>;

get_block_hash_syscall([0], [1], [2]) { fallthrough([3], [4], [5]) 7([6], [7], [8]) }; // 0
branch_align() -> (); // 1
enum_init<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>, 0>([5]) -> ([9]); // 2
store_temp<GasBuiltin>([3]) -> ([10]); // 3
store_temp<System>([4]) -> ([11]); // 4
store_temp<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>>([9]) -> ([12]); // 5
jump() { 12() }; // 6
branch_align() -> (); // 7
enum_init<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>, 1>([8]) -> ([13]); // 8
store_temp<GasBuiltin>([6]) -> ([10]); // 9
store_temp<System>([7]) -> ([11]); // 10
store_temp<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>>([13]) -> ([12]); // 11
rename<GasBuiltin>([10]) -> ([14]); // 12
rename<System>([11]) -> ([15]); // 13
rename<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>>([12]) -> ([16]); // 14
return([14], [15], [16]); // 15

test::foo@0([0]: GasBuiltin, [1]: System, [2]: u64) -> (GasBuiltin, System, core::result::Result::<core::felt252, core::array::Array::<core::felt252>>);

//! > ==========================================================================

//! > get_execution_info_syscall libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo() -> starknet::SyscallResult<Box<starknet::ExecutionInfo>> {
    starknet::info::get_execution_info_syscall()
}

//! > casm
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 3], ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [fp + -3] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
jmp rel 9;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [fp + -3] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 5], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 11100})

//! > sierra_code
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type Box<core::starknet::info::ExecutionInfo> = Box<core::starknet::info::ExecutionInfo> [storable: true, drop: true, dup: true, zero_sized: false];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type core::result::Result::<core::box::Box::<core::starknet::info::ExecutionInfo>, core::array::Array::<core::felt252>> = Enum<ut@core::result::Result::<core::box::Box::<core::starknet::info::ExecutionInfo>, core::array::Array::<core::felt252>>, Box<core::starknet::info::ExecutionInfo>, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Box<core::starknet::info::BlockInfo> = Box<core::starknet::info::BlockInfo> [storable: true, drop: true, dup: true, zero_sized: false];
type Box<core::starknet::info::TxInfo> = Box<core::starknet::info::TxInfo> [storable: true, drop: true, dup: true, zero_sized: false];
type ContractAddress = ContractAddress [storable: true, drop: true, dup: true, zero_sized: false];
type core::starknet::info::ExecutionInfo = Struct<ut@core::starknet::info::ExecutionInfo, Box<core::starknet::info::BlockInfo>, Box<core::starknet::info::TxInfo>, ContractAddress, ContractAddress, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::array::Span::<core::felt252> = Struct<ut@core::array::Span::<core::felt252>, Snapshot<Array<felt252>>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::starknet::info::TxInfo = Struct<ut@core::starknet::info::TxInfo, felt252, ContractAddress, u128, core::array::Span::<core::felt252>, felt252, felt252, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type core::starknet::info::BlockInfo = Struct<ut@core::starknet::info::BlockInfo, u64, u64, ContractAddress> [storable: true, drop: true, dup: true, zero_sized: false];
type System = System [storable: true, drop: false, dup: false, zero_sized: false];

libfunc get_execution_info_syscall = get_execution_info_syscall;
libfunc branch_align = branch_align;
libfunc enum_init<core::result::Result::<core::box::Box::<core::starknet::info::ExecutionInfo>, core::array::Array::<core::felt252>>, 0> = enum_init<core::result::Result::<core::box::Box::<core::starknet::info::ExecutionInfo>, core::array::Array::<core::felt252>>, 0>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<System> = store_temp<System>;
libfunc store_temp<core::result::Result::<core::box::Box::<core::starknet::info::ExecutionInfo>, core::array::Array::<core::felt252>>> = store_temp<core::result::Result::<core::box::Box::<core::starknet::info::ExecutionInfo>, core::array::Array::<core::felt252>>>;
libfunc jump = jump;
libfunc enum_init<core::result::Result::<core::box::Box::<core::starknet::info::ExecutionInfo>, core::array::Array::<core::felt252>>, 1> = enum_init<core::result::Result::<core::box::Box::<core::starknet::info::ExecutionInfo>, core::array::Array::<core::felt252>>, 1>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc rename<System> = rename<System>;
libfunc rename<core::result::Result::<core::box::Box::<core::starknet::info::ExecutionInfo>, core::array::Array::<core::felt252>>> = rename<core::result::Result::<core::box::Box::<core::starknet::info::ExecutionInfo>, core::array::Array::<core::felt252>>>;

get_execution_info_syscall([0], [1]) { fallthrough([2], [3], [4]) 7([5], [6], [7]) }; // 0
branch_align() -> (); // 1
enum_init<core::result::Result::<core::box::Box::<core::starknet::info::ExecutionInfo>, core::array::Array::<core::felt252>>, 0>([4]) -> ([8]); // 2
store_temp<GasBuiltin>([2]) -> ([9]); // 3
store_temp<System>([3]) -> ([10]); // 4
store_temp<core::result::Result::<core::box::Box::<core::starknet::info::ExecutionInfo>, core::array::Array::<core::felt252>>>([8]) -> ([11]); // 5
jump() { 12() }; // 6
branch_align() -> (); // 7
enum_init<core::result::Result::<core::box::Box::<core::starknet::info::ExecutionInfo>, core::array::Array::<core::felt252>>, 1>([7]) -> ([12]); // 8
store_temp<GasBuiltin>([5]) -> ([9]); // 9
store_temp<System>([6]) -> ([10]); // 10
store_temp<core::result::Result::<core::box::Box::<core::starknet::info::ExecutionInfo>, core::array::Array::<core::felt252>>>([12]) -> ([11]); // 11
rename<GasBuiltin>([9]) -> ([13]); // 12
rename<System>([10]) -> ([14]); // 13
rename<core::result::Result::<core::box::Box::<core::starknet::info::ExecutionInfo>, core::array::Array::<core::felt252>>>([11]) -> ([15]); // 14
return([13], [14], [15]); // 15

test::foo@0([0]: GasBuiltin, [1]: System) -> (GasBuiltin, System, core::result::Result::<core::box::Box::<core::starknet::info::ExecutionInfo>, core::array::Array::<core::felt252>>);

//! > ==========================================================================

//! > call_contract_syscall libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(
    address: starknet::ContractAddress, entry_point_selector: felt252, calldata: Span::<felt252>
) -> starknet::SyscallResult<Span<felt252>> {
    starknet::call_contract_syscall(address, entry_point_selector, calldata)
}

//! > casm
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -8] = [[fp + -7] + 1];
[fp + -6] = [[fp + -7] + 2];
[fp + -5] = [[fp + -7] + 3];
[fp + -4] = [[fp + -7] + 4];
[fp + -3] = [[fp + -7] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 7], ap++;
jmp rel 11 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 6], ap++;
[ap + 0] = [fp + -7] + 10, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -7] + 8], ap++;
[ap + 0] = [[fp + -7] + 9], ap++;
jmp rel 9;
[ap + 0] = [[fp + -7] + 6], ap++;
[ap + 0] = [fp + -7] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -7] + 8], ap++;
[ap + 0] = [[fp + -7] + 9], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 11500})

//! > sierra_code
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::array::Span::<core::felt252> = Struct<ut@core::array::Span::<core::felt252>, Snapshot<Array<felt252>>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>> = Enum<ut@core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>, core::array::Span::<core::felt252>, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type ContractAddress = ContractAddress [storable: true, drop: true, dup: true, zero_sized: false];
type System = System [storable: true, drop: false, dup: false, zero_sized: false];

libfunc call_contract_syscall = call_contract_syscall;
libfunc branch_align = branch_align;
libfunc enum_init<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>, 0> = enum_init<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>, 0>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<System> = store_temp<System>;
libfunc store_temp<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>> = store_temp<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>>;
libfunc jump = jump;
libfunc enum_init<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>, 1> = enum_init<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>, 1>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc rename<System> = rename<System>;
libfunc rename<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>> = rename<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>>;

call_contract_syscall([0], [1], [2], [3], [4]) { fallthrough([5], [6], [7]) 7([8], [9], [10]) }; // 0
branch_align() -> (); // 1
enum_init<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>, 0>([7]) -> ([11]); // 2
store_temp<GasBuiltin>([5]) -> ([12]); // 3
store_temp<System>([6]) -> ([13]); // 4
store_temp<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>>([11]) -> ([14]); // 5
jump() { 12() }; // 6
branch_align() -> (); // 7
enum_init<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>, 1>([10]) -> ([15]); // 8
store_temp<GasBuiltin>([8]) -> ([12]); // 9
store_temp<System>([9]) -> ([13]); // 10
store_temp<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>>([15]) -> ([14]); // 11
rename<GasBuiltin>([12]) -> ([16]); // 12
rename<System>([13]) -> ([17]); // 13
rename<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>>([14]) -> ([18]); // 14
return([16], [17], [18]); // 15

test::foo@0([0]: GasBuiltin, [1]: System, [2]: ContractAddress, [3]: felt252, [4]: core::array::Span::<core::felt252>) -> (GasBuiltin, System, core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>);

//! > ==========================================================================

//! > storage_read_syscall libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(
    address_domain: u32, address: starknet::StorageAddress,
) -> starknet::SyscallResult<felt252> {
    starknet::storage_read_syscall(address_domain, address)
}

//! > casm
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
jmp rel 9;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 11300})

//! > sierra_code
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type core::result::Result::<core::felt252, core::array::Array::<core::felt252>> = Enum<ut@core::result::Result::<core::felt252, core::array::Array::<core::felt252>>, felt252, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type StorageAddress = StorageAddress [storable: true, drop: true, dup: true, zero_sized: false];
type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type System = System [storable: true, drop: false, dup: false, zero_sized: false];

libfunc storage_read_syscall = storage_read_syscall;
libfunc branch_align = branch_align;
libfunc enum_init<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>, 0> = enum_init<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>, 0>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<System> = store_temp<System>;
libfunc store_temp<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>> = store_temp<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>>;
libfunc jump = jump;
libfunc enum_init<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>, 1> = enum_init<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>, 1>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc rename<System> = rename<System>;
libfunc rename<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>> = rename<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>>;

storage_read_syscall([0], [1], [2], [3]) { fallthrough([4], [5], [6]) 7([7], [8], [9]) }; // 0
branch_align() -> (); // 1
enum_init<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>, 0>([6]) -> ([10]); // 2
store_temp<GasBuiltin>([4]) -> ([11]); // 3
store_temp<System>([5]) -> ([12]); // 4
store_temp<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>>([10]) -> ([13]); // 5
jump() { 12() }; // 6
branch_align() -> (); // 7
enum_init<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>, 1>([9]) -> ([14]); // 8
store_temp<GasBuiltin>([7]) -> ([11]); // 9
store_temp<System>([8]) -> ([12]); // 10
store_temp<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>>([14]) -> ([13]); // 11
rename<GasBuiltin>([11]) -> ([15]); // 12
rename<System>([12]) -> ([16]); // 13
rename<core::result::Result::<core::felt252, core::array::Array::<core::felt252>>>([13]) -> ([17]); // 14
return([15], [16], [17]); // 15

test::foo@0([0]: GasBuiltin, [1]: System, [2]: u32, [3]: StorageAddress) -> (GasBuiltin, System, core::result::Result::<core::felt252, core::array::Array::<core::felt252>>);

//! > ==========================================================================

//! > storage_write_syscall libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(
    address_domain: u32, address: starknet::StorageAddress, value: felt252,
) -> starknet::SyscallResult<()> {
    starknet::storage_write_syscall(address_domain, address, value)
}

//! > casm
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[fp + -5] = [[fp + -6] + 2];
[fp + -4] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 6], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [fp + -6] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
[ap + 0] = [[fp + -6] + 8], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 11400})

//! > sierra_code
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type core::result::Result::<(), core::array::Array::<core::felt252>> = Enum<ut@core::result::Result::<(), core::array::Array::<core::felt252>>, Unit, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type StorageAddress = StorageAddress [storable: true, drop: true, dup: true, zero_sized: false];
type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type System = System [storable: true, drop: false, dup: false, zero_sized: false];

libfunc storage_write_syscall = storage_write_syscall;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::result::Result::<(), core::array::Array::<core::felt252>>, 0> = enum_init<core::result::Result::<(), core::array::Array::<core::felt252>>, 0>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<System> = store_temp<System>;
libfunc store_temp<core::result::Result::<(), core::array::Array::<core::felt252>>> = store_temp<core::result::Result::<(), core::array::Array::<core::felt252>>>;
libfunc jump = jump;
libfunc enum_init<core::result::Result::<(), core::array::Array::<core::felt252>>, 1> = enum_init<core::result::Result::<(), core::array::Array::<core::felt252>>, 1>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc rename<System> = rename<System>;
libfunc rename<core::result::Result::<(), core::array::Array::<core::felt252>>> = rename<core::result::Result::<(), core::array::Array::<core::felt252>>>;

storage_write_syscall([0], [1], [2], [3], [4]) { fallthrough([5], [6]) 8([7], [8], [9]) }; // 0
branch_align() -> (); // 1
struct_construct<Unit>() -> ([10]); // 2
enum_init<core::result::Result::<(), core::array::Array::<core::felt252>>, 0>([10]) -> ([11]); // 3
store_temp<GasBuiltin>([5]) -> ([12]); // 4
store_temp<System>([6]) -> ([13]); // 5
store_temp<core::result::Result::<(), core::array::Array::<core::felt252>>>([11]) -> ([14]); // 6
jump() { 13() }; // 7
branch_align() -> (); // 8
enum_init<core::result::Result::<(), core::array::Array::<core::felt252>>, 1>([9]) -> ([15]); // 9
store_temp<GasBuiltin>([7]) -> ([12]); // 10
store_temp<System>([8]) -> ([13]); // 11
store_temp<core::result::Result::<(), core::array::Array::<core::felt252>>>([15]) -> ([14]); // 12
rename<GasBuiltin>([12]) -> ([16]); // 13
rename<System>([13]) -> ([17]); // 14
rename<core::result::Result::<(), core::array::Array::<core::felt252>>>([14]) -> ([18]); // 15
return([16], [17], [18]); // 16

test::foo@0([0]: GasBuiltin, [1]: System, [2]: u32, [3]: StorageAddress, [4]: felt252) -> (GasBuiltin, System, core::result::Result::<(), core::array::Array::<core::felt252>>);

//! > ==========================================================================

//! > deploy_syscall libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(
    class_hash: starknet::ClassHash,
    contract_address_salt: felt252,
    calldata: Span<felt252>,
    deploy_from_zero: bool,
) -> starknet::SyscallResult<(starknet::ContractAddress, Span::<felt252>)> {
    starknet::syscalls::deploy_syscall(
        class_hash,
        contract_address_salt,
        calldata,
        deploy_from_zero,
    )
}

//! > casm
[ap + 0] = 75202468540281, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -9] = [[fp + -8] + 1];
[fp + -7] = [[fp + -8] + 2];
[fp + -6] = [[fp + -8] + 3];
[fp + -5] = [[fp + -8] + 4];
[fp + -4] = [[fp + -8] + 5];
[fp + -3] = [[fp + -8] + 6];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8]) %}
[ap + 0] = [[fp + -8] + 8], ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [[fp + -8] + 7], ap++;
[ap + 0] = [fp + -8] + 12, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -8] + 9], ap++;
[ap + 0] = [[fp + -8] + 10], ap++;
[ap + 0] = [[fp + -8] + 11], ap++;
jmp rel 11;
[ap + 0] = [[fp + -8] + 7], ap++;
[ap + 0] = [fp + -8] + 11, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -8] + 9], ap++;
[ap + 0] = [[fp + -8] + 10], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 11700})

//! > sierra_code
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type ContractAddress = ContractAddress [storable: true, drop: true, dup: true, zero_sized: false];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::array::Span::<core::felt252> = Struct<ut@core::array::Span::<core::felt252>, Snapshot<Array<felt252>>> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<ContractAddress, core::array::Span::<core::felt252>> = Struct<ut@Tuple, ContractAddress, core::array::Span::<core::felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::result::Result::<(core::starknet::contract_address::ContractAddress, core::array::Span::<core::felt252>), core::array::Array::<core::felt252>> = Enum<ut@core::result::Result::<(core::starknet::contract_address::ContractAddress, core::array::Span::<core::felt252>), core::array::Array::<core::felt252>>, Tuple<ContractAddress, core::array::Span::<core::felt252>>, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::bool = Enum<ut@core::bool, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type ClassHash = ClassHash [storable: true, drop: true, dup: true, zero_sized: false];
type System = System [storable: true, drop: false, dup: false, zero_sized: false];

libfunc deploy_syscall = deploy_syscall;
libfunc branch_align = branch_align;
libfunc struct_construct<Tuple<ContractAddress, core::array::Span::<core::felt252>>> = struct_construct<Tuple<ContractAddress, core::array::Span::<core::felt252>>>;
libfunc enum_init<core::result::Result::<(core::starknet::contract_address::ContractAddress, core::array::Span::<core::felt252>), core::array::Array::<core::felt252>>, 0> = enum_init<core::result::Result::<(core::starknet::contract_address::ContractAddress, core::array::Span::<core::felt252>), core::array::Array::<core::felt252>>, 0>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<System> = store_temp<System>;
libfunc store_temp<core::result::Result::<(core::starknet::contract_address::ContractAddress, core::array::Span::<core::felt252>), core::array::Array::<core::felt252>>> = store_temp<core::result::Result::<(core::starknet::contract_address::ContractAddress, core::array::Span::<core::felt252>), core::array::Array::<core::felt252>>>;
libfunc jump = jump;
libfunc enum_init<core::result::Result::<(core::starknet::contract_address::ContractAddress, core::array::Span::<core::felt252>), core::array::Array::<core::felt252>>, 1> = enum_init<core::result::Result::<(core::starknet::contract_address::ContractAddress, core::array::Span::<core::felt252>), core::array::Array::<core::felt252>>, 1>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc rename<System> = rename<System>;
libfunc rename<core::result::Result::<(core::starknet::contract_address::ContractAddress, core::array::Span::<core::felt252>), core::array::Array::<core::felt252>>> = rename<core::result::Result::<(core::starknet::contract_address::ContractAddress, core::array::Span::<core::felt252>), core::array::Array::<core::felt252>>>;

deploy_syscall([0], [1], [2], [3], [4], [5]) { fallthrough([6], [7], [8], [9]) 8([10], [11], [12]) }; // 0
branch_align() -> (); // 1
struct_construct<Tuple<ContractAddress, core::array::Span::<core::felt252>>>([8], [9]) -> ([13]); // 2
enum_init<core::result::Result::<(core::starknet::contract_address::ContractAddress, core::array::Span::<core::felt252>), core::array::Array::<core::felt252>>, 0>([13]) -> ([14]); // 3
store_temp<GasBuiltin>([6]) -> ([15]); // 4
store_temp<System>([7]) -> ([16]); // 5
store_temp<core::result::Result::<(core::starknet::contract_address::ContractAddress, core::array::Span::<core::felt252>), core::array::Array::<core::felt252>>>([14]) -> ([17]); // 6
jump() { 13() }; // 7
branch_align() -> (); // 8
enum_init<core::result::Result::<(core::starknet::contract_address::ContractAddress, core::array::Span::<core::felt252>), core::array::Array::<core::felt252>>, 1>([12]) -> ([18]); // 9
store_temp<GasBuiltin>([10]) -> ([15]); // 10
store_temp<System>([11]) -> ([16]); // 11
store_temp<core::result::Result::<(core::starknet::contract_address::ContractAddress, core::array::Span::<core::felt252>), core::array::Array::<core::felt252>>>([18]) -> ([17]); // 12
rename<GasBuiltin>([15]) -> ([19]); // 13
rename<System>([16]) -> ([20]); // 14
rename<core::result::Result::<(core::starknet::contract_address::ContractAddress, core::array::Span::<core::felt252>), core::array::Array::<core::felt252>>>([17]) -> ([21]); // 15
return([19], [20], [21]); // 16

test::foo@0([0]: GasBuiltin, [1]: System, [2]: ClassHash, [3]: felt252, [4]: core::array::Span::<core::felt252>, [5]: core::bool) -> (GasBuiltin, System, core::result::Result::<(core::starknet::contract_address::ContractAddress, core::array::Span::<core::felt252>), core::array::Array::<core::felt252>>);

//! > ==========================================================================

//! > keccak libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(input: Array::<u64>) -> starknet::SyscallResult<u256> {
    starknet::syscalls::keccak_syscall(input.span())
}

//! > casm
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 82898831237483, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[ap + -3] = [[fp + -5] + 2];
[ap + -2] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 11 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
jmp rel 9;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 11500})

//! > sierra_code
type Array<u64> = Array<u64> [storable: true, drop: true, dup: false, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type core::result::Result::<core::integer::u256, core::array::Array::<core::felt252>> = Enum<ut@core::result::Result::<core::integer::u256, core::array::Array::<core::felt252>>, core::integer::u256, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type System = System [storable: true, drop: false, dup: false, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type Snapshot<Array<u64>> = Snapshot<Array<u64>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::array::Span::<core::integer::u64> = Struct<ut@core::array::Span::<core::integer::u64>, Snapshot<Array<u64>>> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc snapshot_take<Array<u64>> = snapshot_take<Array<u64>>;
libfunc drop<Array<u64>> = drop<Array<u64>>;
libfunc struct_construct<core::array::Span::<core::integer::u64>> = struct_construct<core::array::Span::<core::integer::u64>>;
libfunc store_temp<core::array::Span::<core::integer::u64>> = store_temp<core::array::Span::<core::integer::u64>>;
libfunc keccak_syscall = keccak_syscall;
libfunc branch_align = branch_align;
libfunc enum_init<core::result::Result::<core::integer::u256, core::array::Array::<core::felt252>>, 0> = enum_init<core::result::Result::<core::integer::u256, core::array::Array::<core::felt252>>, 0>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<System> = store_temp<System>;
libfunc store_temp<core::result::Result::<core::integer::u256, core::array::Array::<core::felt252>>> = store_temp<core::result::Result::<core::integer::u256, core::array::Array::<core::felt252>>>;
libfunc jump = jump;
libfunc enum_init<core::result::Result::<core::integer::u256, core::array::Array::<core::felt252>>, 1> = enum_init<core::result::Result::<core::integer::u256, core::array::Array::<core::felt252>>, 1>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc rename<System> = rename<System>;
libfunc rename<core::result::Result::<core::integer::u256, core::array::Array::<core::felt252>>> = rename<core::result::Result::<core::integer::u256, core::array::Array::<core::felt252>>>;

snapshot_take<Array<u64>>([2]) -> ([3], [4]); // 0
drop<Array<u64>>([3]) -> (); // 1
struct_construct<core::array::Span::<core::integer::u64>>([4]) -> ([5]); // 2
store_temp<core::array::Span::<core::integer::u64>>([5]) -> ([5]); // 3
keccak_syscall([0], [1], [5]) { fallthrough([6], [7], [8]) 11([9], [10], [11]) }; // 4
branch_align() -> (); // 5
enum_init<core::result::Result::<core::integer::u256, core::array::Array::<core::felt252>>, 0>([8]) -> ([12]); // 6
store_temp<GasBuiltin>([6]) -> ([13]); // 7
store_temp<System>([7]) -> ([14]); // 8
store_temp<core::result::Result::<core::integer::u256, core::array::Array::<core::felt252>>>([12]) -> ([15]); // 9
jump() { 16() }; // 10
branch_align() -> (); // 11
enum_init<core::result::Result::<core::integer::u256, core::array::Array::<core::felt252>>, 1>([11]) -> ([16]); // 12
store_temp<GasBuiltin>([9]) -> ([13]); // 13
store_temp<System>([10]) -> ([14]); // 14
store_temp<core::result::Result::<core::integer::u256, core::array::Array::<core::felt252>>>([16]) -> ([15]); // 15
rename<GasBuiltin>([13]) -> ([17]); // 16
rename<System>([14]) -> ([18]); // 17
rename<core::result::Result::<core::integer::u256, core::array::Array::<core::felt252>>>([15]) -> ([19]); // 18
return([17], [18], [19]); // 19

test::foo@0([0]: GasBuiltin, [1]: System, [2]: Array<u64>) -> (GasBuiltin, System, core::result::Result::<core::integer::u256, core::array::Array::<core::felt252>>);

//! > ==========================================================================

//! > library_call_syscall libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(
    class_hash: starknet::ClassHash, function_selector: felt252, calldata: Span<felt252>
) -> starknet::SyscallResult<Span<felt252>> implicits(GasBuiltin, System) {
    starknet::syscalls::library_call_syscall(class_hash, function_selector, calldata)
}

//! > casm
[ap + 0] = 92376026794327011772951660, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -8] = [[fp + -7] + 1];
[fp + -6] = [[fp + -7] + 2];
[fp + -5] = [[fp + -7] + 3];
[fp + -4] = [[fp + -7] + 4];
[fp + -3] = [[fp + -7] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 7], ap++;
jmp rel 11 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 6], ap++;
[ap + 0] = [fp + -7] + 10, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -7] + 8], ap++;
[ap + 0] = [[fp + -7] + 9], ap++;
jmp rel 9;
[ap + 0] = [[fp + -7] + 6], ap++;
[ap + 0] = [fp + -7] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -7] + 8], ap++;
[ap + 0] = [[fp + -7] + 9], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 11500})

//! > sierra_code
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::array::Span::<core::felt252> = Struct<ut@core::array::Span::<core::felt252>, Snapshot<Array<felt252>>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>> = Enum<ut@core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>, core::array::Span::<core::felt252>, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type ClassHash = ClassHash [storable: true, drop: true, dup: true, zero_sized: false];
type System = System [storable: true, drop: false, dup: false, zero_sized: false];

libfunc library_call_syscall = library_call_syscall;
libfunc branch_align = branch_align;
libfunc enum_init<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>, 0> = enum_init<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>, 0>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<System> = store_temp<System>;
libfunc store_temp<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>> = store_temp<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>>;
libfunc jump = jump;
libfunc enum_init<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>, 1> = enum_init<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>, 1>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc rename<System> = rename<System>;
libfunc rename<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>> = rename<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>>;

library_call_syscall([0], [1], [2], [3], [4]) { fallthrough([5], [6], [7]) 7([8], [9], [10]) }; // 0
branch_align() -> (); // 1
enum_init<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>, 0>([7]) -> ([11]); // 2
store_temp<GasBuiltin>([5]) -> ([12]); // 3
store_temp<System>([6]) -> ([13]); // 4
store_temp<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>>([11]) -> ([14]); // 5
jump() { 12() }; // 6
branch_align() -> (); // 7
enum_init<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>, 1>([10]) -> ([15]); // 8
store_temp<GasBuiltin>([8]) -> ([12]); // 9
store_temp<System>([9]) -> ([13]); // 10
store_temp<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>>([15]) -> ([14]); // 11
rename<GasBuiltin>([12]) -> ([16]); // 12
rename<System>([13]) -> ([17]); // 13
rename<core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>>([14]) -> ([18]); // 14
return([16], [17], [18]); // 15

test::foo@0([0]: GasBuiltin, [1]: System, [2]: ClassHash, [3]: felt252, [4]: core::array::Span::<core::felt252>) -> (GasBuiltin, System, core::result::Result::<core::array::Span::<core::felt252>, core::array::Array::<core::felt252>>);

//! > ==========================================================================

//! > send_message_to_l1_syscall libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(
    to_address: felt252, payload: Span<felt252>
) -> starknet::SyscallResult<()> implicits(GasBuiltin, System) {
    starknet::syscalls::send_message_to_l1_syscall(to_address, payload)
}

//! > casm
[ap + 0] = 433017908768303439907196859243777073, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[fp + -5] = [[fp + -6] + 2];
[fp + -4] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 6], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [fp + -6] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
[ap + 0] = [[fp + -6] + 8], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 11400})

//! > sierra_code
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type core::result::Result::<(), core::array::Array::<core::felt252>> = Enum<ut@core::result::Result::<(), core::array::Array::<core::felt252>>, Unit, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::array::Span::<core::felt252> = Struct<ut@core::array::Span::<core::felt252>, Snapshot<Array<felt252>>> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type System = System [storable: true, drop: false, dup: false, zero_sized: false];

libfunc send_message_to_l1_syscall = send_message_to_l1_syscall;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::result::Result::<(), core::array::Array::<core::felt252>>, 0> = enum_init<core::result::Result::<(), core::array::Array::<core::felt252>>, 0>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<System> = store_temp<System>;
libfunc store_temp<core::result::Result::<(), core::array::Array::<core::felt252>>> = store_temp<core::result::Result::<(), core::array::Array::<core::felt252>>>;
libfunc jump = jump;
libfunc enum_init<core::result::Result::<(), core::array::Array::<core::felt252>>, 1> = enum_init<core::result::Result::<(), core::array::Array::<core::felt252>>, 1>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc rename<System> = rename<System>;
libfunc rename<core::result::Result::<(), core::array::Array::<core::felt252>>> = rename<core::result::Result::<(), core::array::Array::<core::felt252>>>;

send_message_to_l1_syscall([0], [1], [2], [3]) { fallthrough([4], [5]) 8([6], [7], [8]) }; // 0
branch_align() -> (); // 1
struct_construct<Unit>() -> ([9]); // 2
enum_init<core::result::Result::<(), core::array::Array::<core::felt252>>, 0>([9]) -> ([10]); // 3
store_temp<GasBuiltin>([4]) -> ([11]); // 4
store_temp<System>([5]) -> ([12]); // 5
store_temp<core::result::Result::<(), core::array::Array::<core::felt252>>>([10]) -> ([13]); // 6
jump() { 13() }; // 7
branch_align() -> (); // 8
enum_init<core::result::Result::<(), core::array::Array::<core::felt252>>, 1>([8]) -> ([14]); // 9
store_temp<GasBuiltin>([6]) -> ([11]); // 10
store_temp<System>([7]) -> ([12]); // 11
store_temp<core::result::Result::<(), core::array::Array::<core::felt252>>>([14]) -> ([13]); // 12
rename<GasBuiltin>([11]) -> ([15]); // 13
rename<System>([12]) -> ([16]); // 14
rename<core::result::Result::<(), core::array::Array::<core::felt252>>>([13]) -> ([17]); // 15
return([15], [16], [17]); // 16

test::foo@0([0]: GasBuiltin, [1]: System, [2]: felt252, [3]: core::array::Span::<core::felt252>) -> (GasBuiltin, System, core::result::Result::<(), core::array::Array::<core::felt252>>);
