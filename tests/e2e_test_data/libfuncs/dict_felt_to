//! > dict_felt_to_new libfunc

//! > test_comments

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo() -> DictFeltTo::<felt> {
    dict_felt_to_new::<felt>()
}

//! > casm
%{
if '__dict_manager' not in globals():
    from starkware.cairo.common.dict import DictManager
    __dict_manager = DictManager()
# memory[fp + -3] is the address of the current dict manager
n_dicts = memory[memory[fp + -3] + 1]
# memory[memory[fp + -3] + 0] is the address of the dict infos segment
# n_dicts * 3 is added to get the address of the new DictInfo
memory[memory[memory[fp + -3] + 0] + n_dicts * 3] = (
    __dict_manager.new_default_dict(segments, 0, temp_segment=n_dicts > 0)
)
%}
[ap + 0] = [[fp + -3] + 0], ap++;
[ap + 0] = [[fp + -3] + 1], ap++;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + -3] = [[fp + -3] + 3];
[ap + 0] = [ap + -2] + 1, ap++;
[ap + -1] = [[fp + -3] + 4];
[ap + -2] = [[fp + -3] + 5];
[ap + 0] = [ap + -3] * 3, ap++;
[ap + 0] = [ap + -5] + [ap + -1], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 9})

//! > sierra_code
type DictManager = DictManager;
type felt = felt;
type DictFeltTo<felt> = DictFeltTo<felt>;

libfunc dict_felt_to_new<felt> = dict_felt_to_new<felt>;
libfunc store_temp<DictManager> = store_temp<DictManager>;
libfunc rename<DictManager> = rename<DictManager>;
libfunc store_temp<DictFeltTo<felt>> = store_temp<DictFeltTo<felt>>;
libfunc rename<DictFeltTo<felt>> = rename<DictFeltTo<felt>>;

dict_felt_to_new<felt>([0]) -> ([1], [2]);
store_temp<DictManager>([1]) -> ([1]);
rename<DictManager>([1]) -> ([3]);
store_temp<DictFeltTo<felt>>([2]) -> ([2]);
rename<DictFeltTo<felt>>([2]) -> ([4]);
return([3], [4]);

test::foo@0([0]: DictManager) -> (DictManager, DictFeltTo<felt>);

//! > ==========================================================================

//! > dict_felt_to_write libfunc

//! > test_comments

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo(ref dict: DictFeltTo::<felt>, key: felt, value: felt) {
    dict_felt_to_write::<felt>(dict, key, value);
}

//! > casm
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -5])
dict_tracker.current_ptr += 3
memory[ap + 0] = dict_tracker.data[memory[fp + -4]]
dict_tracker.data[memory[fp + -4]] = memory[fp + -3]
%}
[fp + -4] = [[fp + -5] + 0], ap++;
[ap + -1] = [[fp + -5] + 1];
[fp + -3] = [[fp + -5] + 2];
[ap + 0] = [fp + -5] + 3, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 6})

//! > sierra_code
type felt = felt;
type DictFeltTo<felt> = DictFeltTo<felt>;
type Unit = Struct<ut@Tuple>;

libfunc dict_felt_to_write<felt> = dict_felt_to_write<felt>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<DictFeltTo<felt>> = store_temp<DictFeltTo<felt>>;
libfunc rename<DictFeltTo<felt>> = rename<DictFeltTo<felt>>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc rename<Unit> = rename<Unit>;

dict_felt_to_write<felt>([0], [1], [2]) -> ([3]);
struct_construct<Unit>() -> ([4]);
store_temp<DictFeltTo<felt>>([3]) -> ([3]);
rename<DictFeltTo<felt>>([3]) -> ([5]);
store_temp<Unit>([4]) -> ([4]);
rename<Unit>([4]) -> ([6]);
return([5], [6]);

test::foo@0([0]: DictFeltTo<felt>, [1]: felt, [2]: felt) -> (DictFeltTo<felt>, Unit);

//! > ==========================================================================

//! > dict_felt_to_read libfunc

//! > test_comments

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo(ref dict: DictFeltTo::<felt>, key: felt) -> felt {
    dict_felt_to_read::<felt>(dict, key)
}

//! > casm
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -4])
dict_tracker.current_ptr += 3
[ap + 0] = dict_tracker.data[memory[fp + -3]]
%}
[fp + -3] = [[fp + -4] + 0], ap++;
[ap + -1] = [[fp + -4] + 1];
[ap + -1] = [[fp + -4] + 2];
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 6})

//! > sierra_code
type felt = felt;
type DictFeltTo<felt> = DictFeltTo<felt>;

libfunc dict_felt_to_read<felt> = dict_felt_to_read<felt>;
libfunc store_temp<DictFeltTo<felt>> = store_temp<DictFeltTo<felt>>;
libfunc rename<DictFeltTo<felt>> = rename<DictFeltTo<felt>>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc rename<felt> = rename<felt>;

dict_felt_to_read<felt>([0], [1]) -> ([2], [3]);
store_temp<DictFeltTo<felt>>([2]) -> ([2]);
rename<DictFeltTo<felt>>([2]) -> ([4]);
store_temp<felt>([3]) -> ([3]);
rename<felt>([3]) -> ([5]);
return([4], [5]);

test::foo@0([0]: DictFeltTo<felt>, [1]: felt) -> (DictFeltTo<felt>, felt);

//! > ==========================================================================

//! > dict_felt_to_squash libfunc

//! > test_comments

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo(dict: DictFeltTo::<felt>) -> SquashedDictFeltTo::<felt> {
    dict_felt_to_squash::<felt>(dict)
}

//! > casm
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 4;
jmp rel 247;
%{
expected_segment_index = memory[fp + -3].segment_index
for i in range(memory[memory[fp + -4]]):
    if memory[memory[fp + -4] + 1].segment_index == expected_segment_index:
        memory[fp + 0] = i
        break
else:
    raise Exception(f"Dict with end pointer was not found.")
%}
[fp + 1] = [[fp + -4] + 0], ap++;
[fp + 2] = [[fp + -4] + 1], ap++;
[fp + 3] = [[fp + -4] + 2], ap++;
[fp + 0] = [[fp + -5] + 0], ap++;
[fp + 2] = [ap + 0] + 1, ap++;
[ap + -1] = [ap + 0] + [fp + 0], ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [fp + 0] * 3, ap++;
[ap + 0] = [fp + 1] + [ap + -1], ap++;
[fp + 3] = [[ap + -1] + 2];
[fp + -3] = [[ap + -1] + 1];
[fp + 1] = [[fp + -4] + 3];
[fp + 2] = [[fp + -4] + 4];
[ap + 0] = [fp + 3] + 1, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [[ap + -3] + 0], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
call rel 8;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 3;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
call rel 28;
[fp + 0] = [ap + -3];
[fp + 1] = [ap + -2];
[fp + 2] = [ap + -1];
[ap + -1] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -2] = [ap + 0] * 3, ap++;
[ap + 0] = [fp + -3], ap++;
call rel 6;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
ret;
jmp rel 3 if [fp + -4] != 0;
ret;
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [fp + -5] + 3, ap++;
[fp + -4] = [ap + 0] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
call rel -9;
ret;
ap += 1;
%{
   # Prepare arguments for dict_new. In particular, the same dictionary values should be copied
   # to the new (squashed) dictionary.
   vm_enter_scope({
       # Make __dict_manager accessible.
       '__dict_manager': __dict_manager,
       # Create a copy of the dict, in case it changes in the future.
       'initial_dict': dict(__dict_manager.get_dict(memory[fp + -3])),
   })
%}
call rel 13;
[fp + 0] = [ap + -1];
%{ vm_exit_scope() %}
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + 0], ap++;
call rel 9;
%{ # Update the DictTracker's current_ptr to point to the end of the squashed dict.
__dict_manager.get_tracker(memory[fp + 0]).current_ptr = memory[ap + -1].address_
 %}
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -3], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
ret;
[fp + -4] = [fp + 0] + [fp + -5], ap++;
jmp rel 5 if [fp + 0] != 0, ap++;
%{ vm_exit_scope() %}
[ap + 1] = [fp + -6], ap++;
[ap + 1] = [fp + -3], ap++;
ret;
[fp + 0] = [ap + 1] * 3, ap++;
%{
dict_access_size = 3
address = memory[fp + -5].address_
assert memory[fp + 0] % dict_access_size == 0, 'Accesses array size must be divisible by DictAccess.SIZE'
n_accesses = memory[ap + 0]
if '__squash_dict_max_size' in globals():
    assert n_accesses <= __squash_dict_max_size, f'squash_dict() can only be used with n_accesses<={__squash_dict_max_size}. ' f'Got: n_accesses={n_accesses}.'
# A map from key to the list of indices accessing it.
access_indices = {}
for i in range(n_accesses):
    key = memory[address + dict_access_size * i]
    access_indices.setdefault(key, []).append(i)
# Descending list of keys.
keys = sorted(access_indices.keys(), reverse=True)
# Are the keys used bigger than range_check bound.
memory[fp + 2] = 1 if keys[0] >= range_check_builtin.bound else 0
memory[fp + 1] = key = keys.pop()
%}
jmp rel 7 if [fp + 2] != 0, ap++;
[fp + 1] = [[fp + -6] + 0];
[ap + 0] = [fp + -6] + 1, ap++;
jmp rel 3;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -3], ap++;
[fp + -4] = [ap + 0] + 1, ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 2], ap++;
call rel 5;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
%{ vm_exit_scope() %}
ret;
%{
current_access_indices = sorted(access_indices[key])[::-1]
current_access_index = current_access_indices.pop()
memory[fp + -9] = current_access_index
%}
[ap + 2] = [[fp + -9] + 0], ap++;
[ap + 2] = [ap + 1] * 3, ap++;
[ap + 4] = [fp + -8] + [ap + 1], ap++;
[ap + 4] = [[ap + 3] + 2], ap++;
[ap + 4] = [fp + -9] + 1, ap++;
[fp + -5] = [[ap + 1] + 0], ap++;
[fp + -5] = [[fp + -7] + 0], ap++;
[ap + -3] = [[ap + -1] + 1], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
%{  memory[ap + -4] = 0 if current_access_indices else 1  %}
jmp rel 18 if [ap + -4] != 0;
%{
new_access_index = current_access_indices.pop()
memory[ap + 0] = new_access_index - current_access_index - 1
current_access_index = new_access_index
%}
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 1] = [ap + -6] + [ap + -1], ap++;
[ap + -6] = [[ap + 0] + 1], ap++;
[ap + 0] = [[ap + -1] + 2], ap++;
[fp + -5] = [[ap + -2] + 0], ap++;
[ap + -1] = [ap + -8] + 1;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
%{  memory[ap + -7] = 1 if current_access_indices else 0  %}
jmp rel -14 if [ap + -7] != 0;
%{  assert len(current_access_indices) == 0  %}
[fp + -6] = [ap + 0] + [ap + -3], ap++;
[ap + -1] = [ap + -2];
[ap + -2] = [ap + 0] + [fp + -9], ap++;
%{  assert memory[ap + -1] == len(access_indices[key])  %}
[ap + -4] = [[fp + -7] + 2];
[fp + -4] = [fp + 1] + [ap + -1];
jmp rel 7 if [fp + 1] != 0;
%{  assert len(keys) == 0  %}
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
ret;
%{ assert len(keys) > 0, 'No keys left but remaining_accesses > 0.'
memory[fp + 0] = key = keys.pop()
 %}
jmp rel 14 if [fp + -3] != 0;
[ap + 0] = [fp + -5] + 1, ap++;
[fp + 0] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -5] + 1];
[ap + 0] = [ap + -5] + 2, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
jmp rel 14;
ap += 2;
[ap + -2] = [fp + -9];
[ap + -1] = [fp + -5];
[ap + 0] = [fp + 0], ap++;
call rel 18;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [fp + -3], ap++;
call rel -75;
ret;
%{
from starkware.cairo.common.math_utils import assert_integer
assert_integer(memory[fp + -4])
assert_integer(memory[fp + -3])
assert (memory[fp + -4] % PRIME) < (memory[fp + -3] % PRIME), f'a = {memory[fp + -4] % PRIME} is not less than b = {memory[fp + -3] % PRIME}.'
%}
[fp + -4] = [ap + 0] + [fp + -3], ap++;
[ap + 0] = [fp + -5], ap++;
jmp rel 6 if [ap + -2] != 0, ap++;
[ap + -1] = [fp + -4] + 1;
jmp rel 3;
[ap + -1] = [fp + -4];
[ap + 0] = [fp + -3], ap++;
call rel 4;
[ap + 0] = [ap + -1], ap++;
ret;
%{
import itertools

from starkware.cairo.common.math_utils import assert_integer
assert_integer(memory[fp + -4])
assert_integer(memory[fp + -3])
a = memory[fp + -4] % PRIME
b = memory[fp + -3] % PRIME
assert a <= b, f'a = {a} is not less than or equal to b = {b}.'

# Find an arc less than PRIME / 3, and another less than PRIME / 2.
lengths_and_indices = [(a, 0), (b - a, 1), (PRIME - 1 - b, 2)]
lengths_and_indices.sort()
assert lengths_and_indices[0][0] <= PRIME // 3 and lengths_and_indices[1][0] <= PRIME // 2
excluded = lengths_and_indices[2][1]

memory[memory[fp + -5] + 1], memory[memory[fp + -5] + 0] = (
    divmod(lengths_and_indices[0][0], 3544607988759775765608368578435044694))
memory[memory[fp + -5] + 3], memory[memory[fp + -5] + 2] = (
    divmod(lengths_and_indices[1][0], 5316911983139663648412552867652567041))
%}
[ap + 0] = [[fp + -5] + 0], ap++;
[ap + 0] = [[fp + -5] + 1], ap++;
[ap + 0] = [ap + -1] * 5316911983139663648412552867652567041, ap++;
[ap + 0] = [ap + -3] + [ap + -1], ap++;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 3], ap++;
[ap + 0] = [ap + -1] * 3544607988759775765608368578435044694, ap++;
[ap + 0] = [ap + -3] + [ap + -1], ap++;
[ap + 0] = [ap + -5] + [ap + -1], ap++;
[ap + 0] = [ap + -6] * [ap + -2], ap++;
%{ memory[ap + 0] = 1 if excluded != 0 else 0 %}
jmp rel 13 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -4] * -1, ap++;
[ap + -4] = [ap + -1] + -1;
[fp + -4] = [ap + 0] + [fp + -3], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + -5] = [ap + -2] * [ap + -1];
[ap + 0] = [fp + -5] + 4, ap++;
ret;
%{ memory[ap + 0] = 1 if excluded != 1 else 0 %}
jmp rel 11 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] * -1, ap++;
[ap + 0] = [fp + -3] + -1, ap++;
[ap + -6] = [fp + -4] + [ap + -1];
[ap + -5] = [fp + -4] * [ap + -1];
[ap + 0] = [fp + -5] + 4, ap++;
ret;
%{ assert excluded == 2 %}
[ap + -4] = [fp + -3];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + -4] = [fp + -4] * [ap + -1];
[ap + 0] = [fp + -5] + 4, ap++;
ret;
ret;

//! > function_costs
test::foo: OrderedHashMap({})

//! > sierra_code
type RangeCheck = RangeCheck;
type DictManager = DictManager;
type felt = felt;
type DictFeltTo<felt> = DictFeltTo<felt>;
type SquashedDictFeltTo<felt> = SquashedDictFeltTo<felt>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc dict_felt_to_squash<felt> = dict_felt_to_squash<felt>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<DictManager> = rename<DictManager>;
libfunc rename<SquashedDictFeltTo<felt>> = rename<SquashedDictFeltTo<felt>>;

revoke_ap_tracking() -> ();
dict_felt_to_squash<felt>([0], [1], [2]) -> ([3], [4], [5]);
rename<RangeCheck>([3]) -> ([6]);
rename<DictManager>([4]) -> ([7]);
rename<SquashedDictFeltTo<felt>>([5]) -> ([8]);
return([6], [7], [8]);

test::foo@0([0]: RangeCheck, [1]: DictManager, [2]: DictFeltTo<felt>) -> (RangeCheck, DictManager, SquashedDictFeltTo<felt>);
