//! > dict_felt_to_new libfunc

//! > test_comments

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo() -> DictFeltTo::<felt> {
    dict_felt_to_new::<felt>()
}

//! > casm
%{
   if '__dict_manager' not in globals():
       from starkware.cairo.common.dict import DictManager
       __dict_manager = DictManager()
   # memory[dict_manager_ptr] is the address of the current dict manager
   n_dicts = memory[memory[fp + -3] + 1]
   # memory[memory[dict_manager_ptr] + 0] is the address of the dict infos segment
   # n_dicts * 3 is added to get the address of the new DictInfo
   memory[memory[memory[fp + -3] + 0] + n_dicts * 3] = (
       __dict_manager.new_default_dict(segments, 0, temp_segment=n_dicts > 0)
   )
%}
[ap + 0] = [[fp + -3] + 0], ap++;
[ap + 0] = [[fp + -3] + 1], ap++;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + -3] = [[fp + -3] + 3];
[ap + 0] = [ap + -2] + 1, ap++;
[ap + -1] = [[fp + -3] + 4];
[ap + -2] = [[fp + -3] + 5];
[ap + 0] = [ap + -3] * 3, ap++;
[ap + 0] = [ap + -5] + [ap + -1], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 9})

//! > sierra_code
type DictManager = DictManager;
type felt = felt;
type DictFeltTo<felt> = DictFeltTo<felt>;

libfunc dict_felt_to_new<felt> = dict_felt_to_new<felt>;
libfunc store_temp<DictManager> = store_temp<DictManager>;
libfunc rename<DictManager> = rename<DictManager>;
libfunc store_temp<DictFeltTo<felt>> = store_temp<DictFeltTo<felt>>;
libfunc rename<DictFeltTo<felt>> = rename<DictFeltTo<felt>>;

dict_felt_to_new<felt>([0]) -> ([1], [2]);
store_temp<DictManager>([1]) -> ([1]);
rename<DictManager>([1]) -> ([3]);
store_temp<DictFeltTo<felt>>([2]) -> ([2]);
rename<DictFeltTo<felt>>([2]) -> ([4]);
return([3], [4]);

test::foo@0([0]: DictManager) -> (DictManager, DictFeltTo<felt>);

//! > ==========================================================================

//! > dict_felt_to_write libfunc

//! > test_comments

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo(ref dict: DictFeltTo::<felt>, key: felt, value: felt) {
    dict_felt_to_write::<felt>(dict, key, value);
}

//! > casm
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -5])
dict_tracker.current_ptr += 3
memory[ap + 0] = dict_tracker.data[memory[fp + -4]]
dict_tracker.data[memory[fp + -4]] = memory[fp + -3]
%}
[fp + -4] = [[fp + -5] + 0], ap++;
[ap + -1] = [[fp + -5] + 1];
[fp + -3] = [[fp + -5] + 2];
[ap + 0] = [fp + -5] + 3, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 6})

//! > sierra_code
type felt = felt;
type DictFeltTo<felt> = DictFeltTo<felt>;
type Unit = Struct<ut@Tuple>;

libfunc dict_felt_to_write<felt> = dict_felt_to_write<felt>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<DictFeltTo<felt>> = store_temp<DictFeltTo<felt>>;
libfunc rename<DictFeltTo<felt>> = rename<DictFeltTo<felt>>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc rename<Unit> = rename<Unit>;

dict_felt_to_write<felt>([0], [1], [2]) -> ([3]);
struct_construct<Unit>() -> ([4]);
store_temp<DictFeltTo<felt>>([3]) -> ([3]);
rename<DictFeltTo<felt>>([3]) -> ([5]);
store_temp<Unit>([4]) -> ([4]);
rename<Unit>([4]) -> ([6]);
return([5], [6]);

test::foo@0([0]: DictFeltTo<felt>, [1]: felt, [2]: felt) -> (DictFeltTo<felt>, Unit);

//! > ==========================================================================

//! > dict_felt_to_read libfunc

//! > test_comments

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo(ref dict: DictFeltTo::<felt>, key: felt) -> felt {
    dict_felt_to_read::<felt>(dict, key)
}

//! > casm
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -4])
dict_tracker.current_ptr += 3
memory[ap + 0] = dict_tracker.data[memory[fp + -3]]
%}
[fp + -3] = [[fp + -4] + 0], ap++;
[ap + -1] = [[fp + -4] + 1];
[ap + -1] = [[fp + -4] + 2];
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 6})

//! > sierra_code
type felt = felt;
type DictFeltTo<felt> = DictFeltTo<felt>;

libfunc dict_felt_to_read<felt> = dict_felt_to_read<felt>;
libfunc store_temp<DictFeltTo<felt>> = store_temp<DictFeltTo<felt>>;
libfunc rename<DictFeltTo<felt>> = rename<DictFeltTo<felt>>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc rename<felt> = rename<felt>;

dict_felt_to_read<felt>([0], [1]) -> ([2], [3]);
store_temp<DictFeltTo<felt>>([2]) -> ([2]);
rename<DictFeltTo<felt>>([2]) -> ([4]);
store_temp<felt>([3]) -> ([3]);
rename<felt>([3]) -> ([5]);
return([4], [5]);

test::foo@0([0]: DictFeltTo<felt>, [1]: felt) -> (DictFeltTo<felt>, felt);

//! > ==========================================================================

//! > dict_felt_to_squash libfunc

//! > test_comments
TODO(gil): Reenable when squash is added.

//! > test_function_name
run_small_e2e_test

//! > cairo
// fn foo(dict: DictFeltTo::<felt>) -> SquashedDictFeltTo::<felt> {
//     dict_felt_to_squash::<felt>(dict)
// }
fn foo() {
}

//! > casm
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 1})

//! > sierra_code
type Unit = Struct<ut@Tuple>;

libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc rename<Unit> = rename<Unit>;

struct_construct<Unit>() -> ([0]);
store_temp<Unit>([0]) -> ([0]);
rename<Unit>([0]) -> ([1]);
return([1]);

test::foo@0() -> (Unit);
