//! > span_pop_front libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref span: span::Span<usize>) -> Option<Box<usize>> {
    span::span_pop_front(ref span)
}

//! > casm
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 700})

//! > sierra_code
type u32 = u32;
type Span<u32> = Span<u32>;
type Box<u32> = Box<u32>;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<core::box::Box::<core::integer::u32>> = Enum<ut@core::option::Option::<core::box::Box::<core::integer::u32>>, Box<u32>, Unit>;

libfunc span_pop_front<u32> = span_pop_front<u32>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::box::Box::<core::integer::u32>>, 0> = enum_init<core::option::Option::<core::box::Box::<core::integer::u32>>, 0>;
libfunc store_temp<Span<u32>> = store_temp<Span<u32>>;
libfunc store_temp<core::option::Option::<core::box::Box::<core::integer::u32>>> = store_temp<core::option::Option::<core::box::Box::<core::integer::u32>>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::box::Box::<core::integer::u32>>, 1> = enum_init<core::option::Option::<core::box::Box::<core::integer::u32>>, 1>;
libfunc rename<Span<u32>> = rename<Span<u32>>;
libfunc rename<core::option::Option::<core::box::Box::<core::integer::u32>>> = rename<core::option::Option::<core::box::Box::<core::integer::u32>>>;

span_pop_front<u32>([0]) { fallthrough([1], [2]) 6([3]) };
branch_align() -> ();
enum_init<core::option::Option::<core::box::Box::<core::integer::u32>>, 0>([2]) -> ([4]);
store_temp<Span<u32>>([1]) -> ([5]);
store_temp<core::option::Option::<core::box::Box::<core::integer::u32>>>([4]) -> ([6]);
jump() { 11() };
branch_align() -> ();
struct_construct<Unit>() -> ([7]);
enum_init<core::option::Option::<core::box::Box::<core::integer::u32>>, 1>([7]) -> ([8]);
store_temp<Span<u32>>([3]) -> ([5]);
store_temp<core::option::Option::<core::box::Box::<core::integer::u32>>>([8]) -> ([6]);
rename<Span<u32>>([5]) -> ([9]);
rename<core::option::Option::<core::box::Box::<core::integer::u32>>>([6]) -> ([10]);
return([9], [10]);

test::foo@0([0]: Span<u32>) -> (Span<u32>, core::option::Option::<core::box::Box::<core::integer::u32>>);

//! > ==========================================================================

//! > span_pop_front_consume libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(span: span::Span<usize>) -> Option<(span::Span<usize>, Box<usize>)> {
    span::span_pop_front_consume(span)
}

//! > casm
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 10;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 700})

//! > sierra_code
type u32 = u32;
type Span<u32> = Span<u32>;
type Box<u32> = Box<u32>;
type Tuple<Span<u32>, Box<u32>> = Struct<ut@Tuple, Span<u32>, Box<u32>>;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)> = Enum<ut@core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>, Tuple<Span<u32>, Box<u32>>, Unit>;

libfunc span_pop_front_consume<u32> = span_pop_front_consume<u32>;
libfunc branch_align = branch_align;
libfunc struct_construct<Tuple<Span<u32>, Box<u32>>> = struct_construct<Tuple<Span<u32>, Box<u32>>>;
libfunc enum_init<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>, 0> = enum_init<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>, 0>;
libfunc store_temp<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>> = store_temp<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>, 1> = enum_init<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>, 1>;
libfunc rename<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>> = rename<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>>;

span_pop_front_consume<u32>([0]) { fallthrough([1], [2]) 6() };
branch_align() -> ();
struct_construct<Tuple<Span<u32>, Box<u32>>>([1], [2]) -> ([3]);
enum_init<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>, 0>([3]) -> ([4]);
store_temp<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>>([4]) -> ([5]);
jump() { 10() };
branch_align() -> ();
struct_construct<Unit>() -> ([6]);
enum_init<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>, 1>([6]) -> ([7]);
store_temp<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>>([7]) -> ([5]);
rename<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>>([5]) -> ([8]);
return([8]);

test::foo@0([0]: Span<u32>) -> (core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>);

//! > ==========================================================================

//! > span_pop_back libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref span: span::Span<usize>) -> Option<Box<usize>> {
    span::span_pop_back(ref span)
}

//! > casm
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [fp + -4], ap++;
[fp + -3] = [ap + 0] + 1, ap++;
[ap + 0] = 0, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 700})

//! > sierra_code
type u32 = u32;
type Span<u32> = Span<u32>;
type Box<u32> = Box<u32>;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<core::box::Box::<core::integer::u32>> = Enum<ut@core::option::Option::<core::box::Box::<core::integer::u32>>, Box<u32>, Unit>;

libfunc span_pop_back<u32> = span_pop_back<u32>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::box::Box::<core::integer::u32>>, 0> = enum_init<core::option::Option::<core::box::Box::<core::integer::u32>>, 0>;
libfunc store_temp<Span<u32>> = store_temp<Span<u32>>;
libfunc store_temp<core::option::Option::<core::box::Box::<core::integer::u32>>> = store_temp<core::option::Option::<core::box::Box::<core::integer::u32>>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::box::Box::<core::integer::u32>>, 1> = enum_init<core::option::Option::<core::box::Box::<core::integer::u32>>, 1>;
libfunc rename<Span<u32>> = rename<Span<u32>>;
libfunc rename<core::option::Option::<core::box::Box::<core::integer::u32>>> = rename<core::option::Option::<core::box::Box::<core::integer::u32>>>;

span_pop_back<u32>([0]) { fallthrough([1], [2]) 6([3]) };
branch_align() -> ();
enum_init<core::option::Option::<core::box::Box::<core::integer::u32>>, 0>([2]) -> ([4]);
store_temp<Span<u32>>([1]) -> ([5]);
store_temp<core::option::Option::<core::box::Box::<core::integer::u32>>>([4]) -> ([6]);
jump() { 11() };
branch_align() -> ();
struct_construct<Unit>() -> ([7]);
enum_init<core::option::Option::<core::box::Box::<core::integer::u32>>, 1>([7]) -> ([8]);
store_temp<Span<u32>>([3]) -> ([5]);
store_temp<core::option::Option::<core::box::Box::<core::integer::u32>>>([8]) -> ([6]);
rename<Span<u32>>([5]) -> ([9]);
rename<core::option::Option::<core::box::Box::<core::integer::u32>>>([6]) -> ([10]);
return([9], [10]);

test::foo@0([0]: Span<u32>) -> (Span<u32>, core::option::Option::<core::box::Box::<core::integer::u32>>);

//! > ==========================================================================

//! > span_pop_back_consume libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(span: span::Span<usize>) -> Option<(span::Span<usize>, Box<usize>)> {
    span::span_pop_back_consume(span)
}

//! > casm
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[fp + -3] = [ap + 0] + 1, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
jmp rel 10;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 700})

//! > sierra_code
type u32 = u32;
type Span<u32> = Span<u32>;
type Box<u32> = Box<u32>;
type Tuple<Span<u32>, Box<u32>> = Struct<ut@Tuple, Span<u32>, Box<u32>>;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)> = Enum<ut@core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>, Tuple<Span<u32>, Box<u32>>, Unit>;

libfunc span_pop_back_consume<u32> = span_pop_back_consume<u32>;
libfunc branch_align = branch_align;
libfunc struct_construct<Tuple<Span<u32>, Box<u32>>> = struct_construct<Tuple<Span<u32>, Box<u32>>>;
libfunc enum_init<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>, 0> = enum_init<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>, 0>;
libfunc store_temp<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>> = store_temp<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>, 1> = enum_init<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>, 1>;
libfunc rename<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>> = rename<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>>;

span_pop_back_consume<u32>([0]) { fallthrough([1], [2]) 6() };
branch_align() -> ();
struct_construct<Tuple<Span<u32>, Box<u32>>>([1], [2]) -> ([3]);
enum_init<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>, 0>([3]) -> ([4]);
store_temp<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>>([4]) -> ([5]);
jump() { 10() };
branch_align() -> ();
struct_construct<Unit>() -> ([6]);
enum_init<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>, 1>([6]) -> ([7]);
store_temp<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>>([7]) -> ([5]);
rename<core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>>([5]) -> ([8]);
return([8]);

test::foo@0([0]: Span<u32>) -> (core::option::Option::<(core::span::Span::<core::integer::u32>, core::box::Box::<core::integer::u32>)>);

//! > ==========================================================================

//! > span_get libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(span: span::Span<@usize>, index: usize) -> Option<Box<@usize>>{
    span::span_get(span, index)
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -5], ap++;
%{ memory[ap + 0] = memory[fp + -3] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 13;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + [fp + -3], ap++;
jmp rel 10;
ap += 1;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 980})

//! > sierra_code
type RangeCheck = RangeCheck;
type u32 = u32;
type Span<u32> = Span<u32>;
type Box<u32> = Box<u32>;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<core::box::Box::<@core::integer::u32>> = Enum<ut@core::option::Option::<core::box::Box::<@core::integer::u32>>, Box<u32>, Unit>;

libfunc span_get<u32> = span_get<u32>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::box::Box::<@core::integer::u32>>, 0> = enum_init<core::option::Option::<core::box::Box::<@core::integer::u32>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::box::Box::<@core::integer::u32>>> = store_temp<core::option::Option::<core::box::Box::<@core::integer::u32>>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::box::Box::<@core::integer::u32>>, 1> = enum_init<core::option::Option::<core::box::Box::<@core::integer::u32>>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::option::Option::<core::box::Box::<@core::integer::u32>>> = rename<core::option::Option::<core::box::Box::<@core::integer::u32>>>;

span_get<u32>([0], [1], [2]) { fallthrough([3], [4]) 6([5]) };
branch_align() -> ();
enum_init<core::option::Option::<core::box::Box::<@core::integer::u32>>, 0>([4]) -> ([6]);
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<core::option::Option::<core::box::Box::<@core::integer::u32>>>([6]) -> ([8]);
jump() { 11() };
branch_align() -> ();
struct_construct<Unit>() -> ([9]);
enum_init<core::option::Option::<core::box::Box::<@core::integer::u32>>, 1>([9]) -> ([10]);
store_temp<RangeCheck>([5]) -> ([7]);
store_temp<core::option::Option::<core::box::Box::<@core::integer::u32>>>([10]) -> ([8]);
rename<RangeCheck>([7]) -> ([11]);
rename<core::option::Option::<core::box::Box::<@core::integer::u32>>>([8]) -> ([12]);
return([11], [12]);

test::foo@0([0]: RangeCheck, [1]: Span<u32>, [2]: u32) -> (RangeCheck, core::option::Option::<core::box::Box::<@core::integer::u32>>);

//! > ==========================================================================

//! > span_slice libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(span: span::Span<@usize>, start: usize, length: usize) -> Option<span::Span<@usize>> {
    span::span_slice(span, start, length)
}

//! > casm
[fp + -5] = [ap + 0] + [fp + -6], ap++;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -2] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 14;
[ap + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -7] + 0];
ap += 1;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6] + [fp + -4], ap++;
[ap + 0] = [fp + -6] + [ap + -7], ap++;
jmp rel 10;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1180})

//! > sierra_code
type RangeCheck = RangeCheck;
type u32 = u32;
type Span<u32> = Span<u32>;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<core::span::Span::<@core::integer::u32>> = Enum<ut@core::option::Option::<core::span::Span::<@core::integer::u32>>, Span<u32>, Unit>;

libfunc span_slice<u32> = span_slice<u32>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::span::Span::<@core::integer::u32>>, 0> = enum_init<core::option::Option::<core::span::Span::<@core::integer::u32>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::span::Span::<@core::integer::u32>>> = store_temp<core::option::Option::<core::span::Span::<@core::integer::u32>>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::span::Span::<@core::integer::u32>>, 1> = enum_init<core::option::Option::<core::span::Span::<@core::integer::u32>>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::option::Option::<core::span::Span::<@core::integer::u32>>> = rename<core::option::Option::<core::span::Span::<@core::integer::u32>>>;

span_slice<u32>([0], [1], [2], [3]) { fallthrough([4], [5]) 6([6]) };
branch_align() -> ();
enum_init<core::option::Option::<core::span::Span::<@core::integer::u32>>, 0>([5]) -> ([7]);
store_temp<RangeCheck>([4]) -> ([8]);
store_temp<core::option::Option::<core::span::Span::<@core::integer::u32>>>([7]) -> ([9]);
jump() { 11() };
branch_align() -> ();
struct_construct<Unit>() -> ([10]);
enum_init<core::option::Option::<core::span::Span::<@core::integer::u32>>, 1>([10]) -> ([11]);
store_temp<RangeCheck>([6]) -> ([8]);
store_temp<core::option::Option::<core::span::Span::<@core::integer::u32>>>([11]) -> ([9]);
rename<RangeCheck>([8]) -> ([12]);
rename<core::option::Option::<core::span::Span::<@core::integer::u32>>>([9]) -> ([13]);
return([12], [13]);

test::foo@0([0]: RangeCheck, [1]: Span<u32>, [2]: u32, [3]: u32) -> (RangeCheck, core::option::Option::<core::span::Span::<@core::integer::u32>>);

//! > ==========================================================================

//! > span_len libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(span: @span::Span<@u128>) -> usize {
    span::span_len(span)
}

//! > casm
[fp + -3] = [ap + 0] + [fp + -4], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type u128 = u128;
type Span<u128> = Span<u128>;
type u32 = u32;

libfunc span_len<u128> = span_len<u128>;
libfunc store_temp<u32> = store_temp<u32>;

span_len<u128>([0]) -> ([1]);
store_temp<u32>([1]) -> ([2]);
return([2]);

test::foo@0([0]: Span<u128>) -> (u32);
