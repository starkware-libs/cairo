//! > init enum with a single variant

//! > test_function_name
SmallE2ETestRunner

//! > cairo
use span::SpanTrait;
use span::SpanImpl;

fn foo(a: Span::<felt>) -> usize {
    a.len()
}

//! > casm
[fp + -3] = [ap + 0] + [fp + -4], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type felt = felt;
type Array<felt> = Array<felt>;
type Snapshot<Array<felt>> = Snapshot<Array<felt>>;
type core::span::Span::<core::felt> = Struct<ut@core::span::Span::<core::felt>, Snapshot<Array<felt>>>;
type u32 = u32;

libfunc struct_deconstruct<core::span::Span::<core::felt>> = struct_deconstruct<core::span::Span::<core::felt>>;
libfunc array_len<felt> = array_len<felt>;
libfunc store_temp<u32> = store_temp<u32>;

struct_deconstruct<core::span::Span::<core::felt>>([0]) -> ([1]);
array_len<felt>([1]) -> ([2]);
store_temp<u32>([2]) -> ([3]);
return([3]);

test::foo@0([0]: core::span::Span::<core::felt>) -> (u32);
