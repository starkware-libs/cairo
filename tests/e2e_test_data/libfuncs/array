//! > array_new libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo() -> Array::<felt252> {
    array::array_new::<felt252>()
}

//! > casm
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -2], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type felt252 = felt252;
type Array<felt252> = Array<felt252>;

libfunc array_new<felt252> = array_new<felt252>;
libfunc store_temp<Array<felt252>> = store_temp<Array<felt252>>;

array_new<felt252>() -> ([0]);
store_temp<Array<felt252>>([0]) -> ([1]);
return([1]);

test::foo@0() -> (Array<felt252>);

//! > ==========================================================================

//! > array_append libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref arr: Array::<felt252>, value: felt252) {
    array::array_append::<felt252>(ref arr, value);
}

//! > casm
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type felt252 = felt252;
type Array<felt252> = Array<felt252>;
type Unit = Struct<ut@Tuple>;

libfunc array_append<felt252> = array_append<felt252>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Array<felt252>> = store_temp<Array<felt252>>;
libfunc store_temp<Unit> = store_temp<Unit>;

array_append<felt252>([0], [1]) -> ([2]);
struct_construct<Unit>() -> ([3]);
store_temp<Array<felt252>>([2]) -> ([4]);
store_temp<Unit>([3]) -> ([5]);
return([4], [5]);

test::foo@0([0]: Array<felt252>, [1]: felt252) -> (Array<felt252>, Unit);

//! > ==========================================================================

//! > array_append libfunc twice.

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref arr: Array::<felt252>, value1: felt252, value2: felt252) {
    array::array_append::<felt252>(ref arr, value1);
    array::array_append::<felt252>(ref arr, value2);
}

//! > casm
[fp + -4] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 400})

//! > sierra_code
type felt252 = felt252;
type Array<felt252> = Array<felt252>;
type Unit = Struct<ut@Tuple>;

libfunc array_append<felt252> = array_append<felt252>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Array<felt252>> = store_temp<Array<felt252>>;
libfunc store_temp<Unit> = store_temp<Unit>;

array_append<felt252>([0], [1]) -> ([3]);
array_append<felt252>([3], [2]) -> ([4]);
struct_construct<Unit>() -> ([5]);
store_temp<Array<felt252>>([4]) -> ([6]);
store_temp<Unit>([5]) -> ([7]);
return([6], [7]);

test::foo@0([0]: Array<felt252>, [1]: felt252, [2]: felt252) -> (Array<felt252>, Unit);

//! > ==========================================================================

//! > array_pop_front libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref arr: Array::<felt252>) -> Option::<Box<felt252>> {
    array::array_pop_front::<felt252>(ref arr)
}

//! > casm
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 700})

//! > sierra_code
type felt252 = felt252;
type Array<felt252> = Array<felt252>;
type Box<felt252> = Box<felt252>;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<core::box::Box::<core::felt252>> = Enum<ut@core::option::Option::<core::box::Box::<core::felt252>>, Box<felt252>, Unit>;

libfunc array_pop_front<felt252> = array_pop_front<felt252>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::box::Box::<core::felt252>>, 0> = enum_init<core::option::Option::<core::box::Box::<core::felt252>>, 0>;
libfunc store_temp<Array<felt252>> = store_temp<Array<felt252>>;
libfunc store_temp<core::option::Option::<core::box::Box::<core::felt252>>> = store_temp<core::option::Option::<core::box::Box::<core::felt252>>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::box::Box::<core::felt252>>, 1> = enum_init<core::option::Option::<core::box::Box::<core::felt252>>, 1>;
libfunc rename<Array<felt252>> = rename<Array<felt252>>;
libfunc rename<core::option::Option::<core::box::Box::<core::felt252>>> = rename<core::option::Option::<core::box::Box::<core::felt252>>>;

array_pop_front<felt252>([0]) { fallthrough([1], [2]) 6([3]) };
branch_align() -> ();
enum_init<core::option::Option::<core::box::Box::<core::felt252>>, 0>([2]) -> ([4]);
store_temp<Array<felt252>>([1]) -> ([5]);
store_temp<core::option::Option::<core::box::Box::<core::felt252>>>([4]) -> ([6]);
jump() { 11() };
branch_align() -> ();
struct_construct<Unit>() -> ([7]);
enum_init<core::option::Option::<core::box::Box::<core::felt252>>, 1>([7]) -> ([8]);
store_temp<Array<felt252>>([3]) -> ([5]);
store_temp<core::option::Option::<core::box::Box::<core::felt252>>>([8]) -> ([6]);
rename<Array<felt252>>([5]) -> ([9]);
rename<core::option::Option::<core::box::Box::<core::felt252>>>([6]) -> ([10]);
return([9], [10]);

test::foo@0([0]: Array<felt252>) -> (Array<felt252>, core::option::Option::<core::box::Box::<core::felt252>>);

//! > ==========================================================================

//! > array_snapshot_pop_front libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref arr: @Array::<felt252>) -> Option::<Box<@felt252>> {
    array::array_snapshot_pop_front::<felt252>(ref arr)
}

//! > casm
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 700})

//! > sierra_code
type felt252 = felt252;
type Array<felt252> = Array<felt252>;
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>>;
type Box<felt252> = Box<felt252>;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<core::box::Box::<@core::felt252>> = Enum<ut@core::option::Option::<core::box::Box::<@core::felt252>>, Box<felt252>, Unit>;

libfunc array_snapshot_pop_front<felt252> = array_snapshot_pop_front<felt252>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 0> = enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 0>;
libfunc store_temp<Snapshot<Array<felt252>>> = store_temp<Snapshot<Array<felt252>>>;
libfunc store_temp<core::option::Option::<core::box::Box::<@core::felt252>>> = store_temp<core::option::Option::<core::box::Box::<@core::felt252>>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 1> = enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 1>;
libfunc rename<Snapshot<Array<felt252>>> = rename<Snapshot<Array<felt252>>>;
libfunc rename<core::option::Option::<core::box::Box::<@core::felt252>>> = rename<core::option::Option::<core::box::Box::<@core::felt252>>>;

array_snapshot_pop_front<felt252>([0]) { fallthrough([1], [2]) 6([3]) };
branch_align() -> ();
enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 0>([2]) -> ([4]);
store_temp<Snapshot<Array<felt252>>>([1]) -> ([5]);
store_temp<core::option::Option::<core::box::Box::<@core::felt252>>>([4]) -> ([6]);
jump() { 11() };
branch_align() -> ();
struct_construct<Unit>() -> ([7]);
enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 1>([7]) -> ([8]);
store_temp<Snapshot<Array<felt252>>>([3]) -> ([5]);
store_temp<core::option::Option::<core::box::Box::<@core::felt252>>>([8]) -> ([6]);
rename<Snapshot<Array<felt252>>>([5]) -> ([9]);
rename<core::option::Option::<core::box::Box::<@core::felt252>>>([6]) -> ([10]);
return([9], [10]);

test::foo@0([0]: Snapshot<Array<felt252>>) -> (Snapshot<Array<felt252>>, core::option::Option::<core::box::Box::<@core::felt252>>);

//! > ==========================================================================

//! > array_get libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(arr: @Array::<felt252>, idx: usize) -> Option::<Box<@felt252>> {
    array::array_get(arr, idx)
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -5], ap++;
%{ memory[ap + 0] = memory[fp + -3] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 13;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + [fp + -3], ap++;
jmp rel 10;
ap += 1;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 980})

//! > sierra_code
type RangeCheck = RangeCheck;
type felt252 = felt252;
type Array<felt252> = Array<felt252>;
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>>;
type u32 = u32;
type Box<felt252> = Box<felt252>;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<core::box::Box::<@core::felt252>> = Enum<ut@core::option::Option::<core::box::Box::<@core::felt252>>, Box<felt252>, Unit>;

libfunc array_get<felt252> = array_get<felt252>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 0> = enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::box::Box::<@core::felt252>>> = store_temp<core::option::Option::<core::box::Box::<@core::felt252>>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 1> = enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::option::Option::<core::box::Box::<@core::felt252>>> = rename<core::option::Option::<core::box::Box::<@core::felt252>>>;

array_get<felt252>([0], [1], [2]) { fallthrough([3], [4]) 6([5]) };
branch_align() -> ();
enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 0>([4]) -> ([6]);
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<core::option::Option::<core::box::Box::<@core::felt252>>>([6]) -> ([8]);
jump() { 11() };
branch_align() -> ();
struct_construct<Unit>() -> ([9]);
enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 1>([9]) -> ([10]);
store_temp<RangeCheck>([5]) -> ([7]);
store_temp<core::option::Option::<core::box::Box::<@core::felt252>>>([10]) -> ([8]);
rename<RangeCheck>([7]) -> ([11]);
rename<core::option::Option::<core::box::Box::<@core::felt252>>>([8]) -> ([12]);
return([11], [12]);

test::foo@0([0]: RangeCheck, [1]: Snapshot<Array<felt252>>, [2]: u32) -> (RangeCheck, core::option::Option::<core::box::Box::<@core::felt252>>);

//! > ==========================================================================

//! > array_get libfunc on larger element

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(arr: @Array::<u256>, idx: usize) -> Option::<Box<@u256>> {
    array::array_get(arr, idx)
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -5], ap++;
[ap + 0] = [fp + -3] * 2, ap++;
%{ memory[ap + 0] = memory[ap + -1] < memory[ap + -2] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 13;
[ap + 0] = [ap + -2] + 1, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + [ap + -6], ap++;
jmp rel 10;
ap += 1;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1080})

//! > sierra_code
type RangeCheck = RangeCheck;
type u128 = u128;
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128>;
type Array<core::integer::u256> = Array<core::integer::u256>;
type Snapshot<Array<core::integer::u256>> = Snapshot<Array<core::integer::u256>>;
type u32 = u32;
type Box<core::integer::u256> = Box<core::integer::u256>;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<core::box::Box::<@core::integer::u256>> = Enum<ut@core::option::Option::<core::box::Box::<@core::integer::u256>>, Box<core::integer::u256>, Unit>;

libfunc array_get<core::integer::u256> = array_get<core::integer::u256>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::box::Box::<@core::integer::u256>>, 0> = enum_init<core::option::Option::<core::box::Box::<@core::integer::u256>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::box::Box::<@core::integer::u256>>> = store_temp<core::option::Option::<core::box::Box::<@core::integer::u256>>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::box::Box::<@core::integer::u256>>, 1> = enum_init<core::option::Option::<core::box::Box::<@core::integer::u256>>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::option::Option::<core::box::Box::<@core::integer::u256>>> = rename<core::option::Option::<core::box::Box::<@core::integer::u256>>>;

array_get<core::integer::u256>([0], [1], [2]) { fallthrough([3], [4]) 6([5]) };
branch_align() -> ();
enum_init<core::option::Option::<core::box::Box::<@core::integer::u256>>, 0>([4]) -> ([6]);
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<core::option::Option::<core::box::Box::<@core::integer::u256>>>([6]) -> ([8]);
jump() { 11() };
branch_align() -> ();
struct_construct<Unit>() -> ([9]);
enum_init<core::option::Option::<core::box::Box::<@core::integer::u256>>, 1>([9]) -> ([10]);
store_temp<RangeCheck>([5]) -> ([7]);
store_temp<core::option::Option::<core::box::Box::<@core::integer::u256>>>([10]) -> ([8]);
rename<RangeCheck>([7]) -> ([11]);
rename<core::option::Option::<core::box::Box::<@core::integer::u256>>>([8]) -> ([12]);
return([11], [12]);

test::foo@0([0]: RangeCheck, [1]: Snapshot<Array<core::integer::u256>>, [2]: u32) -> (RangeCheck, core::option::Option::<core::box::Box::<@core::integer::u256>>);

//! > ==========================================================================

//! > array_get libfunc on a non duppable type

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(arr: @Array::<Array::<felt252>>, idx: usize) -> Option::<Box<@Array::<felt252>>> {
    array::array_get(arr, idx)
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -5], ap++;
[ap + 0] = [fp + -3] * 2, ap++;
%{ memory[ap + 0] = memory[ap + -1] < memory[ap + -2] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 13;
[ap + 0] = [ap + -2] + 1, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + [ap + -6], ap++;
jmp rel 10;
ap += 1;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1080})

//! > sierra_code
type RangeCheck = RangeCheck;
type felt252 = felt252;
type Array<felt252> = Array<felt252>;
type Array<Array<felt252>> = Array<Array<felt252>>;
type Snapshot<Array<Array<felt252>>> = Snapshot<Array<Array<felt252>>>;
type u32 = u32;
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>>;
type Box<Snapshot<Array<felt252>>> = Box<Snapshot<Array<felt252>>>;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>> = Enum<ut@core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>, Box<Snapshot<Array<felt252>>>, Unit>;

libfunc array_get<Array<felt252>> = array_get<Array<felt252>>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>, 0> = enum_init<core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>> = store_temp<core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>, 1> = enum_init<core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>> = rename<core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>>;

array_get<Array<felt252>>([0], [1], [2]) { fallthrough([3], [4]) 6([5]) };
branch_align() -> ();
enum_init<core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>, 0>([4]) -> ([6]);
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>>([6]) -> ([8]);
jump() { 11() };
branch_align() -> ();
struct_construct<Unit>() -> ([9]);
enum_init<core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>, 1>([9]) -> ([10]);
store_temp<RangeCheck>([5]) -> ([7]);
store_temp<core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>>([10]) -> ([8]);
rename<RangeCheck>([7]) -> ([11]);
rename<core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>>([8]) -> ([12]);
return([11], [12]);

test::foo@0([0]: RangeCheck, [1]: Snapshot<Array<Array<felt252>>>, [2]: u32) -> (RangeCheck, core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>);

//! > ==========================================================================

//! > array_len libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref arr: Array::<felt252>) -> usize {
    array::array_len::<felt252>(@arr)
}

//! > casm
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type felt252 = felt252;
type Array<felt252> = Array<felt252>;
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>>;
type u32 = u32;

libfunc snapshot_take<Array<felt252>> = snapshot_take<Array<felt252>>;
libfunc array_len<felt252> = array_len<felt252>;
libfunc store_temp<Array<felt252>> = store_temp<Array<felt252>>;
libfunc store_temp<u32> = store_temp<u32>;

snapshot_take<Array<felt252>>([0]) -> ([1], [2]);
array_len<felt252>([2]) -> ([3]);
store_temp<Array<felt252>>([1]) -> ([4]);
store_temp<u32>([3]) -> ([5]);
return([4], [5]);

test::foo@0([0]: Array<felt252>) -> (Array<felt252>, u32);

//! > ==========================================================================

//! > array_len libfunc on larger element

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref arr: Array::<u256>) -> usize {
    array::array_len::<u256>(@arr)
}

//! > casm
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -3] = [ap + 0] * 2, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 400})

//! > sierra_code
type u128 = u128;
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128>;
type Array<core::integer::u256> = Array<core::integer::u256>;
type Snapshot<Array<core::integer::u256>> = Snapshot<Array<core::integer::u256>>;
type u32 = u32;

libfunc snapshot_take<Array<core::integer::u256>> = snapshot_take<Array<core::integer::u256>>;
libfunc array_len<core::integer::u256> = array_len<core::integer::u256>;
libfunc store_temp<Array<core::integer::u256>> = store_temp<Array<core::integer::u256>>;
libfunc store_temp<u32> = store_temp<u32>;

snapshot_take<Array<core::integer::u256>>([0]) -> ([1], [2]);
array_len<core::integer::u256>([2]) -> ([3]);
store_temp<Array<core::integer::u256>>([1]) -> ([4]);
store_temp<u32>([3]) -> ([5]);
return([4], [5]);

test::foo@0([0]: Array<core::integer::u256>) -> (Array<core::integer::u256>, u32);
