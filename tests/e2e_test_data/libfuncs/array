//! > array_new libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo() -> Array::<felt252> {
    array::array_new::<felt252>()
}

//! > casm
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -2], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc array_new<felt252> = array_new<felt252>;
libfunc store_temp<Array<felt252>> = store_temp<Array<felt252>>;

array_new<felt252>() -> ([0]); // 0
store_temp<Array<felt252>>([0]) -> ([0]); // 1
return([0]); // 2

test::foo@0() -> (Array<felt252>);

//! > ==========================================================================

//! > array_append libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref arr: Array::<felt252>, value: felt252) {
    array::array_append::<felt252>(ref arr, value);
}

//! > casm
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc array_append<felt252> = array_append<felt252>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Array<felt252>> = store_temp<Array<felt252>>;

array_append<felt252>([0], [1]) -> ([2]); // 0
struct_construct<Unit>() -> ([3]); // 1
store_temp<Array<felt252>>([2]) -> ([2]); // 2
return([2], [3]); // 3

test::foo@0([0]: Array<felt252>, [1]: felt252) -> (Array<felt252>, Unit);

//! > ==========================================================================

//! > array_append libfunc twice.

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref arr: Array::<felt252>, value1: felt252, value2: felt252) {
    array::array_append::<felt252>(ref arr, value1);
    array::array_append::<felt252>(ref arr, value2);
}

//! > casm
[fp + -4] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 400})

//! > sierra_code
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc array_append<felt252> = array_append<felt252>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Array<felt252>> = store_temp<Array<felt252>>;

array_append<felt252>([0], [1]) -> ([3]); // 0
array_append<felt252>([3], [2]) -> ([4]); // 1
struct_construct<Unit>() -> ([5]); // 2
store_temp<Array<felt252>>([4]) -> ([4]); // 3
return([4], [5]); // 4

test::foo@0([0]: Array<felt252>, [1]: felt252, [2]: felt252) -> (Array<felt252>, Unit);

//! > ==========================================================================

//! > array_pop_front libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref arr: Array::<felt252>) -> Option::<Box<felt252>> {
    array::array_pop_front::<felt252>(ref arr)
}

//! > casm
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 700})

//! > sierra_code
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Box<felt252> = Box<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<core::box::Box::<core::felt252>> = Enum<ut@core::option::Option::<core::box::Box::<core::felt252>>, Box<felt252>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc array_pop_front<felt252> = array_pop_front<felt252>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::box::Box::<core::felt252>>, 0> = enum_init<core::option::Option::<core::box::Box::<core::felt252>>, 0>;
libfunc store_temp<Array<felt252>> = store_temp<Array<felt252>>;
libfunc store_temp<core::option::Option::<core::box::Box::<core::felt252>>> = store_temp<core::option::Option::<core::box::Box::<core::felt252>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::box::Box::<core::felt252>>, 1> = enum_init<core::option::Option::<core::box::Box::<core::felt252>>, 1>;

array_pop_front<felt252>([0]) { fallthrough([1], [2]) 6([3]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<core::box::Box::<core::felt252>>, 0>([2]) -> ([4]); // 2
store_temp<Array<felt252>>([1]) -> ([1]); // 3
store_temp<core::option::Option::<core::box::Box::<core::felt252>>>([4]) -> ([4]); // 4
return([1], [4]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([5]); // 7
enum_init<core::option::Option::<core::box::Box::<core::felt252>>, 1>([5]) -> ([6]); // 8
store_temp<Array<felt252>>([3]) -> ([3]); // 9
store_temp<core::option::Option::<core::box::Box::<core::felt252>>>([6]) -> ([6]); // 10
return([3], [6]); // 11

test::foo@0([0]: Array<felt252>) -> (Array<felt252>, core::option::Option::<core::box::Box::<core::felt252>>);

//! > ==========================================================================

//! > array_pop_front_consume libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(arr: Array<felt252>) -> Option::<(Array<felt252>, Box<felt252>)> {
    array::array_pop_front_consume::<felt252>(arr)
}

//! > casm
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 700})

//! > sierra_code
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Box<felt252> = Box<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<Array<felt252>, Box<felt252>> = Struct<ut@Tuple, Array<felt252>, Box<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type core::option::Option::<(core::array::Array::<core::felt252>, core::box::Box::<core::felt252>)> = Enum<ut@core::option::Option::<(core::array::Array::<core::felt252>, core::box::Box::<core::felt252>)>, Tuple<Array<felt252>, Box<felt252>>, Unit> [storable: true, drop: true, dup: false, zero_sized: false];

libfunc array_pop_front_consume<felt252> = array_pop_front_consume<felt252>;
libfunc branch_align = branch_align;
libfunc struct_construct<Tuple<Array<felt252>, Box<felt252>>> = struct_construct<Tuple<Array<felt252>, Box<felt252>>>;
libfunc enum_init<core::option::Option::<(core::array::Array::<core::felt252>, core::box::Box::<core::felt252>)>, 0> = enum_init<core::option::Option::<(core::array::Array::<core::felt252>, core::box::Box::<core::felt252>)>, 0>;
libfunc store_temp<core::option::Option::<(core::array::Array::<core::felt252>, core::box::Box::<core::felt252>)>> = store_temp<core::option::Option::<(core::array::Array::<core::felt252>, core::box::Box::<core::felt252>)>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<(core::array::Array::<core::felt252>, core::box::Box::<core::felt252>)>, 1> = enum_init<core::option::Option::<(core::array::Array::<core::felt252>, core::box::Box::<core::felt252>)>, 1>;

array_pop_front_consume<felt252>([0]) { fallthrough([1], [2]) 6() }; // 0
branch_align() -> (); // 1
struct_construct<Tuple<Array<felt252>, Box<felt252>>>([1], [2]) -> ([3]); // 2
enum_init<core::option::Option::<(core::array::Array::<core::felt252>, core::box::Box::<core::felt252>)>, 0>([3]) -> ([4]); // 3
store_temp<core::option::Option::<(core::array::Array::<core::felt252>, core::box::Box::<core::felt252>)>>([4]) -> ([4]); // 4
return([4]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([5]); // 7
enum_init<core::option::Option::<(core::array::Array::<core::felt252>, core::box::Box::<core::felt252>)>, 1>([5]) -> ([6]); // 8
store_temp<core::option::Option::<(core::array::Array::<core::felt252>, core::box::Box::<core::felt252>)>>([6]) -> ([6]); // 9
return([6]); // 10

test::foo@0([0]: Array<felt252>) -> (core::option::Option::<(core::array::Array::<core::felt252>, core::box::Box::<core::felt252>)>);

//! > ==========================================================================

//! > array_snapshot_pop_front libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref arr: @Array::<felt252>) -> Option::<Box<@felt252>> {
    array::array_snapshot_pop_front::<felt252>(ref arr)
}

//! > casm
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 700})

//! > sierra_code
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Box<felt252> = Box<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<core::box::Box::<@core::felt252>> = Enum<ut@core::option::Option::<core::box::Box::<@core::felt252>>, Box<felt252>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc array_snapshot_pop_front<felt252> = array_snapshot_pop_front<felt252>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 0> = enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 0>;
libfunc store_temp<Snapshot<Array<felt252>>> = store_temp<Snapshot<Array<felt252>>>;
libfunc store_temp<core::option::Option::<core::box::Box::<@core::felt252>>> = store_temp<core::option::Option::<core::box::Box::<@core::felt252>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 1> = enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 1>;

array_snapshot_pop_front<felt252>([0]) { fallthrough([1], [2]) 6([3]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 0>([2]) -> ([4]); // 2
store_temp<Snapshot<Array<felt252>>>([1]) -> ([1]); // 3
store_temp<core::option::Option::<core::box::Box::<@core::felt252>>>([4]) -> ([4]); // 4
return([1], [4]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([5]); // 7
enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 1>([5]) -> ([6]); // 8
store_temp<Snapshot<Array<felt252>>>([3]) -> ([3]); // 9
store_temp<core::option::Option::<core::box::Box::<@core::felt252>>>([6]) -> ([6]); // 10
return([3], [6]); // 11

test::foo@0([0]: Snapshot<Array<felt252>>) -> (Snapshot<Array<felt252>>, core::option::Option::<core::box::Box::<@core::felt252>>);

//! > ==========================================================================

//! > array_snapshot_pop_back libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref arr: @Array::<felt252>) -> Option::<Box<@felt252>> {
    array::array_snapshot_pop_back::<felt252>(ref arr)
}

//! > casm
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4], ap++;
[fp + -3] = [ap + 0] + 1, ap++;
[ap + 0] = 0, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
ret;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 700})

//! > sierra_code
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Box<felt252> = Box<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<core::box::Box::<@core::felt252>> = Enum<ut@core::option::Option::<core::box::Box::<@core::felt252>>, Box<felt252>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc array_snapshot_pop_back<felt252> = array_snapshot_pop_back<felt252>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 0> = enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 0>;
libfunc store_temp<Snapshot<Array<felt252>>> = store_temp<Snapshot<Array<felt252>>>;
libfunc store_temp<core::option::Option::<core::box::Box::<@core::felt252>>> = store_temp<core::option::Option::<core::box::Box::<@core::felt252>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 1> = enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 1>;

array_snapshot_pop_back<felt252>([0]) { fallthrough([1], [2]) 6([3]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 0>([2]) -> ([4]); // 2
store_temp<Snapshot<Array<felt252>>>([1]) -> ([1]); // 3
store_temp<core::option::Option::<core::box::Box::<@core::felt252>>>([4]) -> ([4]); // 4
return([1], [4]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([5]); // 7
enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 1>([5]) -> ([6]); // 8
store_temp<Snapshot<Array<felt252>>>([3]) -> ([3]); // 9
store_temp<core::option::Option::<core::box::Box::<@core::felt252>>>([6]) -> ([6]); // 10
return([3], [6]); // 11

test::foo@0([0]: Snapshot<Array<felt252>>) -> (Snapshot<Array<felt252>>, core::option::Option::<core::box::Box::<@core::felt252>>);

//! > ==========================================================================

//! > array_get libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(arr: @Array::<felt252>, idx: usize) -> Option::<Box<@felt252>> {
    array::array_get(arr, idx)
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -5], ap++;
%{ memory[ap + 0] = memory[fp + -3] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 12;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + [fp + -3], ap++;
ret;
ap += 1;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 980})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Box<felt252> = Box<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<core::box::Box::<@core::felt252>> = Enum<ut@core::option::Option::<core::box::Box::<@core::felt252>>, Box<felt252>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc array_get<felt252> = array_get<felt252>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 0> = enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::box::Box::<@core::felt252>>> = store_temp<core::option::Option::<core::box::Box::<@core::felt252>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 1> = enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 1>;

array_get<felt252>([0], [1], [2]) { fallthrough([3], [4]) 6([5]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 0>([4]) -> ([6]); // 2
store_temp<RangeCheck>([3]) -> ([3]); // 3
store_temp<core::option::Option::<core::box::Box::<@core::felt252>>>([6]) -> ([6]); // 4
return([3], [6]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([7]); // 7
enum_init<core::option::Option::<core::box::Box::<@core::felt252>>, 1>([7]) -> ([8]); // 8
store_temp<RangeCheck>([5]) -> ([5]); // 9
store_temp<core::option::Option::<core::box::Box::<@core::felt252>>>([8]) -> ([8]); // 10
return([5], [8]); // 11

test::foo@0([0]: RangeCheck, [1]: Snapshot<Array<felt252>>, [2]: u32) -> (RangeCheck, core::option::Option::<core::box::Box::<@core::felt252>>);

//! > ==========================================================================

//! > array_get libfunc on larger element

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(arr: @Array::<u256>, idx: usize) -> Option::<Box<@u256>> {
    array::array_get(arr, idx)
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -5], ap++;
[ap + 0] = [fp + -3] * 2, ap++;
%{ memory[ap + 0] = memory[ap + -1] < memory[ap + -2] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 12;
[ap + 0] = [ap + -2] + 1, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + [ap + -6], ap++;
ret;
ap += 1;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1080})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Box<core::integer::u256> = Box<core::integer::u256> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<core::box::Box::<@core::integer::u256>> = Enum<ut@core::option::Option::<core::box::Box::<@core::integer::u256>>, Box<core::integer::u256>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type Array<core::integer::u256> = Array<core::integer::u256> [storable: true, drop: true, dup: false, zero_sized: false];
type Snapshot<Array<core::integer::u256>> = Snapshot<Array<core::integer::u256>> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc array_get<core::integer::u256> = array_get<core::integer::u256>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::box::Box::<@core::integer::u256>>, 0> = enum_init<core::option::Option::<core::box::Box::<@core::integer::u256>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::box::Box::<@core::integer::u256>>> = store_temp<core::option::Option::<core::box::Box::<@core::integer::u256>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::box::Box::<@core::integer::u256>>, 1> = enum_init<core::option::Option::<core::box::Box::<@core::integer::u256>>, 1>;

array_get<core::integer::u256>([0], [1], [2]) { fallthrough([3], [4]) 6([5]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<core::box::Box::<@core::integer::u256>>, 0>([4]) -> ([6]); // 2
store_temp<RangeCheck>([3]) -> ([3]); // 3
store_temp<core::option::Option::<core::box::Box::<@core::integer::u256>>>([6]) -> ([6]); // 4
return([3], [6]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([7]); // 7
enum_init<core::option::Option::<core::box::Box::<@core::integer::u256>>, 1>([7]) -> ([8]); // 8
store_temp<RangeCheck>([5]) -> ([5]); // 9
store_temp<core::option::Option::<core::box::Box::<@core::integer::u256>>>([8]) -> ([8]); // 10
return([5], [8]); // 11

test::foo@0([0]: RangeCheck, [1]: Snapshot<Array<core::integer::u256>>, [2]: u32) -> (RangeCheck, core::option::Option::<core::box::Box::<@core::integer::u256>>);

//! > ==========================================================================

//! > array_get libfunc on a non duppable type

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(arr: @Array::<Array::<felt252>>, idx: usize) -> Option::<Box<@Array::<felt252>>> {
    array::array_get(arr, idx)
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -5], ap++;
[ap + 0] = [fp + -3] * 2, ap++;
%{ memory[ap + 0] = memory[ap + -1] < memory[ap + -2] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 12;
[ap + 0] = [ap + -2] + 1, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + [ap + -6], ap++;
ret;
ap += 1;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1080})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Box<Snapshot<Array<felt252>>> = Box<Snapshot<Array<felt252>>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>> = Enum<ut@core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>, Box<Snapshot<Array<felt252>>>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Array<Array<felt252>> = Array<Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type Snapshot<Array<Array<felt252>>> = Snapshot<Array<Array<felt252>>> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc array_get<Array<felt252>> = array_get<Array<felt252>>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>, 0> = enum_init<core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>> = store_temp<core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>, 1> = enum_init<core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>, 1>;

array_get<Array<felt252>>([0], [1], [2]) { fallthrough([3], [4]) 6([5]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>, 0>([4]) -> ([6]); // 2
store_temp<RangeCheck>([3]) -> ([3]); // 3
store_temp<core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>>([6]) -> ([6]); // 4
return([3], [6]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([7]); // 7
enum_init<core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>, 1>([7]) -> ([8]); // 8
store_temp<RangeCheck>([5]) -> ([5]); // 9
store_temp<core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>>([8]) -> ([8]); // 10
return([5], [8]); // 11

test::foo@0([0]: RangeCheck, [1]: Snapshot<Array<Array<felt252>>>, [2]: u32) -> (RangeCheck, core::option::Option::<core::box::Box::<@core::array::Array::<core::felt252>>>);

//! > ==========================================================================

//! > array_slice libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(arr: @Array::<felt252>, start: usize, length: usize) -> Option::<@Array::<felt252>> {
    array::array_slice(arr, start, length)
}

//! > casm
[fp + -5] = [ap + 0] + [fp + -6], ap++;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -2] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 13;
[ap + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -7] + 0];
ap += 1;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6] + [fp + -4], ap++;
[ap + 0] = [fp + -6] + [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1170})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<@core::array::Array::<core::felt252>> = Enum<ut@core::option::Option::<@core::array::Array::<core::felt252>>, Snapshot<Array<felt252>>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc array_slice<felt252> = array_slice<felt252>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<@core::array::Array::<core::felt252>>, 0> = enum_init<core::option::Option::<@core::array::Array::<core::felt252>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<@core::array::Array::<core::felt252>>> = store_temp<core::option::Option::<@core::array::Array::<core::felt252>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<@core::array::Array::<core::felt252>>, 1> = enum_init<core::option::Option::<@core::array::Array::<core::felt252>>, 1>;

array_slice<felt252>([0], [1], [2], [3]) { fallthrough([4], [5]) 6([6]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<@core::array::Array::<core::felt252>>, 0>([5]) -> ([7]); // 2
store_temp<RangeCheck>([4]) -> ([4]); // 3
store_temp<core::option::Option::<@core::array::Array::<core::felt252>>>([7]) -> ([7]); // 4
return([4], [7]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([8]); // 7
enum_init<core::option::Option::<@core::array::Array::<core::felt252>>, 1>([8]) -> ([9]); // 8
store_temp<RangeCheck>([6]) -> ([6]); // 9
store_temp<core::option::Option::<@core::array::Array::<core::felt252>>>([9]) -> ([9]); // 10
return([6], [9]); // 11

test::foo@0([0]: RangeCheck, [1]: Snapshot<Array<felt252>>, [2]: u32, [3]: u32) -> (RangeCheck, core::option::Option::<@core::array::Array::<core::felt252>>);

//! > ==========================================================================

//! > array_slice libfunc on larger element

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(arr: @Array::<u256>, start: usize, length: usize) -> Option::<@Array::<u256>> {
    array::array_slice(arr, start, length)
}

//! > casm
[fp + -5] = [ap + 0] + [fp + -6], ap++;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -3] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 13;
[ap + -4] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -4] * 2, ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6] + [ap + -3], ap++;
[ap + 0] = [fp + -6] + [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1270})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Array<core::integer::u256> = Array<core::integer::u256> [storable: true, drop: true, dup: false, zero_sized: false];
type Snapshot<Array<core::integer::u256>> = Snapshot<Array<core::integer::u256>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<@core::array::Array::<core::integer::u256>> = Enum<ut@core::option::Option::<@core::array::Array::<core::integer::u256>>, Snapshot<Array<core::integer::u256>>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc array_slice<core::integer::u256> = array_slice<core::integer::u256>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<@core::array::Array::<core::integer::u256>>, 0> = enum_init<core::option::Option::<@core::array::Array::<core::integer::u256>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<@core::array::Array::<core::integer::u256>>> = store_temp<core::option::Option::<@core::array::Array::<core::integer::u256>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<@core::array::Array::<core::integer::u256>>, 1> = enum_init<core::option::Option::<@core::array::Array::<core::integer::u256>>, 1>;

array_slice<core::integer::u256>([0], [1], [2], [3]) { fallthrough([4], [5]) 6([6]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<@core::array::Array::<core::integer::u256>>, 0>([5]) -> ([7]); // 2
store_temp<RangeCheck>([4]) -> ([4]); // 3
store_temp<core::option::Option::<@core::array::Array::<core::integer::u256>>>([7]) -> ([7]); // 4
return([4], [7]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([8]); // 7
enum_init<core::option::Option::<@core::array::Array::<core::integer::u256>>, 1>([8]) -> ([9]); // 8
store_temp<RangeCheck>([6]) -> ([6]); // 9
store_temp<core::option::Option::<@core::array::Array::<core::integer::u256>>>([9]) -> ([9]); // 10
return([6], [9]); // 11

test::foo@0([0]: RangeCheck, [1]: Snapshot<Array<core::integer::u256>>, [2]: u32, [3]: u32) -> (RangeCheck, core::option::Option::<@core::array::Array::<core::integer::u256>>);

//! > ==========================================================================

//! > array_slice libfunc on a non duppable type

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(
    arr: @Array::<Array::<felt252>>, start: usize, length: usize,
) -> Option::<@Array::<Array::<felt252>>> {
    array::array_slice(arr, start, length)
}

//! > casm
[fp + -5] = [ap + 0] + [fp + -6], ap++;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -3] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 13;
[ap + -4] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -4] * 2, ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6] + [ap + -3], ap++;
[ap + 0] = [fp + -6] + [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1270})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Array<Array<felt252>> = Array<Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type Snapshot<Array<Array<felt252>>> = Snapshot<Array<Array<felt252>>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<@core::array::Array::<core::array::Array::<core::felt252>>> = Enum<ut@core::option::Option::<@core::array::Array::<core::array::Array::<core::felt252>>>, Snapshot<Array<Array<felt252>>>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc array_slice<Array<felt252>> = array_slice<Array<felt252>>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<@core::array::Array::<core::array::Array::<core::felt252>>>, 0> = enum_init<core::option::Option::<@core::array::Array::<core::array::Array::<core::felt252>>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<@core::array::Array::<core::array::Array::<core::felt252>>>> = store_temp<core::option::Option::<@core::array::Array::<core::array::Array::<core::felt252>>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<@core::array::Array::<core::array::Array::<core::felt252>>>, 1> = enum_init<core::option::Option::<@core::array::Array::<core::array::Array::<core::felt252>>>, 1>;

array_slice<Array<felt252>>([0], [1], [2], [3]) { fallthrough([4], [5]) 6([6]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<@core::array::Array::<core::array::Array::<core::felt252>>>, 0>([5]) -> ([7]); // 2
store_temp<RangeCheck>([4]) -> ([4]); // 3
store_temp<core::option::Option::<@core::array::Array::<core::array::Array::<core::felt252>>>>([7]) -> ([7]); // 4
return([4], [7]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([8]); // 7
enum_init<core::option::Option::<@core::array::Array::<core::array::Array::<core::felt252>>>, 1>([8]) -> ([9]); // 8
store_temp<RangeCheck>([6]) -> ([6]); // 9
store_temp<core::option::Option::<@core::array::Array::<core::array::Array::<core::felt252>>>>([9]) -> ([9]); // 10
return([6], [9]); // 11

test::foo@0([0]: RangeCheck, [1]: Snapshot<Array<Array<felt252>>>, [2]: u32, [3]: u32) -> (RangeCheck, core::option::Option::<@core::array::Array::<core::array::Array::<core::felt252>>>);

//! > ==========================================================================

//! > array_len libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref arr: Array::<felt252>) -> usize {
    array::array_len::<felt252>(@arr)
}

//! > casm
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc snapshot_take<Array<felt252>> = snapshot_take<Array<felt252>>;
libfunc array_len<felt252> = array_len<felt252>;
libfunc store_temp<Array<felt252>> = store_temp<Array<felt252>>;
libfunc store_temp<u32> = store_temp<u32>;

snapshot_take<Array<felt252>>([0]) -> ([1], [2]); // 0
array_len<felt252>([2]) -> ([3]); // 1
store_temp<Array<felt252>>([1]) -> ([1]); // 2
store_temp<u32>([3]) -> ([3]); // 3
return([1], [3]); // 4

test::foo@0([0]: Array<felt252>) -> (Array<felt252>, u32);

//! > ==========================================================================

//! > array_len libfunc on larger element

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref arr: Array::<u256>) -> usize {
    array::array_len::<u256>(@arr)
}

//! > casm
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -3] = [ap + 0] * 2, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 400})

//! > sierra_code
type Array<core::integer::u256> = Array<core::integer::u256> [storable: true, drop: true, dup: false, zero_sized: false];
type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type Snapshot<Array<core::integer::u256>> = Snapshot<Array<core::integer::u256>> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc snapshot_take<Array<core::integer::u256>> = snapshot_take<Array<core::integer::u256>>;
libfunc array_len<core::integer::u256> = array_len<core::integer::u256>;
libfunc store_temp<Array<core::integer::u256>> = store_temp<Array<core::integer::u256>>;
libfunc store_temp<u32> = store_temp<u32>;

snapshot_take<Array<core::integer::u256>>([0]) -> ([1], [2]); // 0
array_len<core::integer::u256>([2]) -> ([3]); // 1
store_temp<Array<core::integer::u256>>([1]) -> ([1]); // 2
store_temp<u32>([3]) -> ([3]); // 3
return([1], [3]); // 4

test::foo@0([0]: Array<core::integer::u256>) -> (Array<core::integer::u256>, u32);

//! > ==========================================================================

//! > span_from_tuple libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
extern fn span_from_tuple<T>(struct_like: Box<@T>) -> @Array<felt252> nopanic;
#[derive(Drop)]
struct A {
    a: felt252,
    b: felt252,
    c: felt252,
}
#[test]
fn foo() {
    let x1 = A { a: 10, b: 20, c: 30 };
    let x2 = A { a: 10, b: 25, c: 34 };
    let span = if (x1.a + x2.c == 3) {
        span_from_tuple(BoxTrait::new(@x1))
    } else {
        span_from_tuple(BoxTrait::new(@x2))
    }
}

//! > casm
[ap + 0] = 10, ap++;
[ap + 0] = 34, ap++;
[ap + 0] = [ap + -2] + [ap + -1], ap++;
[ap + -1] = [ap + 0] + 3, ap++;
[ap + 0] = 20, ap++;
[ap + 0] = 30, ap++;
[ap + 0] = 10, ap++;
[ap + 0] = 25, ap++;
jmp rel 13 if [ap + -5] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
%{
if '__boxed_segment' not in globals():
    __boxed_segment = segments.add()
memory[ap + 0] = __boxed_segment
__boxed_segment += 3
%}
[ap + -3] = [[ap + 0] + 0], ap++;
[ap + -3] = [[ap + -1] + 1];
[ap + -2] = [[ap + -1] + 2];
[ap + 0] = [ap + -1] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
ret;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
%{
if '__boxed_segment' not in globals():
    __boxed_segment = segments.add()
memory[ap + 0] = __boxed_segment
__boxed_segment += 3
%}
[ap + -3] = [[ap + 0] + 0], ap++;
[ap + -3] = [[ap + -1] + 1];
[ap + -2] = [[ap + -1] + 2];
[ap + 0] = [ap + -1] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1800})

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type Box<test::A> = Box<test::A> [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type test::A = Struct<ut@test::A, felt252, felt252, felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc felt252_const<10> = felt252_const<10>;
libfunc felt252_const<20> = felt252_const<20>;
libfunc felt252_const<30> = felt252_const<30>;
libfunc struct_construct<test::A> = struct_construct<test::A>;
libfunc struct_deconstruct<test::A> = struct_deconstruct<test::A>;
libfunc felt252_const<25> = felt252_const<25>;
libfunc felt252_const<34> = felt252_const<34>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc dup<felt252> = dup<felt252>;
libfunc felt252_add = felt252_add;
libfunc felt252_const<3> = felt252_const<3>;
libfunc felt252_sub = felt252_sub;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc drop<felt252> = drop<felt252>;
libfunc snapshot_take<test::A> = snapshot_take<test::A>;
libfunc drop<test::A> = drop<test::A>;
libfunc store_temp<test::A> = store_temp<test::A>;
libfunc into_box<test::A> = into_box<test::A>;
libfunc span_from_tuple<test::A> = span_from_tuple<test::A>;
libfunc store_temp<Snapshot<Array<felt252>>> = store_temp<Snapshot<Array<felt252>>>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;

felt252_const<10>() -> ([0]); // 0
felt252_const<20>() -> ([1]); // 1
felt252_const<30>() -> ([2]); // 2
struct_construct<test::A>([0], [1], [2]) -> ([3]); // 3
struct_deconstruct<test::A>([3]) -> ([4], [5], [6]); // 4
felt252_const<10>() -> ([7]); // 5
felt252_const<25>() -> ([8]); // 6
felt252_const<34>() -> ([9]); // 7
struct_construct<test::A>([7], [8], [9]) -> ([10]); // 8
struct_deconstruct<test::A>([10]) -> ([11], [12], [13]); // 9
store_temp<felt252>([4]) -> ([4]); // 10
dup<felt252>([4]) -> ([4], [14]); // 11
store_temp<felt252>([13]) -> ([13]); // 12
dup<felt252>([13]) -> ([13], [15]); // 13
felt252_add([14], [15]) -> ([16]); // 14
felt252_const<3>() -> ([17]); // 15
store_temp<felt252>([16]) -> ([16]); // 16
felt252_sub([16], [17]) -> ([18]); // 17
store_temp<felt252>([18]) -> ([18]); // 18
store_temp<felt252>([5]) -> ([5]); // 19
store_temp<felt252>([6]) -> ([6]); // 20
store_temp<felt252>([11]) -> ([11]); // 21
store_temp<felt252>([12]) -> ([12]); // 22
felt252_is_zero([18]) { fallthrough() 36([19]) }; // 23
branch_align() -> (); // 24
drop<felt252>([13]) -> (); // 25
drop<felt252>([12]) -> (); // 26
drop<felt252>([11]) -> (); // 27
struct_construct<test::A>([4], [5], [6]) -> ([20]); // 28
snapshot_take<test::A>([20]) -> ([21], [22]); // 29
drop<test::A>([21]) -> (); // 30
store_temp<test::A>([22]) -> ([22]); // 31
into_box<test::A>([22]) -> ([23]); // 32
span_from_tuple<test::A>([23]) -> ([24]); // 33
store_temp<Snapshot<Array<felt252>>>([24]) -> ([24]); // 34
return([24]); // 35
branch_align() -> (); // 36
drop<NonZero<felt252>>([19]) -> (); // 37
drop<felt252>([6]) -> (); // 38
drop<felt252>([5]) -> (); // 39
drop<felt252>([4]) -> (); // 40
struct_construct<test::A>([11], [12], [13]) -> ([25]); // 41
snapshot_take<test::A>([25]) -> ([26], [27]); // 42
drop<test::A>([26]) -> (); // 43
store_temp<test::A>([27]) -> ([27]); // 44
into_box<test::A>([27]) -> ([28]); // 45
span_from_tuple<test::A>([28]) -> ([29]); // 46
store_temp<Snapshot<Array<felt252>>>([29]) -> ([29]); // 47
return([29]); // 48

test::foo@0() -> (Snapshot<Array<felt252>>);
