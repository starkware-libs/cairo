//! > array_new libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo() -> Array::<felt> {
    array_new::<felt>()
}

//! > casm
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -2], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type felt = felt;
type Array<felt> = Array<felt>;

libfunc array_new<felt> = array_new<felt>;
libfunc store_temp<Array<felt>> = store_temp<Array<felt>>;

array_new<felt>() -> ([0]);
store_temp<Array<felt>>([0]) -> ([1]);
return([1]);

test::foo@0() -> (Array<felt>);

//! > ==========================================================================

//! > array_append libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref arr: Array::<felt>, value: felt) {
    array_append::<felt>(ref arr, value);
}

//! > casm
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type felt = felt;
type Array<felt> = Array<felt>;
type Unit = Struct<ut@Tuple>;

libfunc array_append<felt> = array_append<felt>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Array<felt>> = store_temp<Array<felt>>;
libfunc store_temp<Unit> = store_temp<Unit>;

array_append<felt>([0], [1]) -> ([2]);
struct_construct<Unit>() -> ([3]);
store_temp<Array<felt>>([2]) -> ([4]);
store_temp<Unit>([3]) -> ([5]);
return([4], [5]);

test::foo@0([0]: Array<felt>, [1]: felt) -> (Array<felt>, Unit);

//! > ==========================================================================

//! > array_append libfunc twice.

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref arr: Array::<felt>, value1: felt, value2: felt) {
    array_append::<felt>(ref arr, value1);
    array_append::<felt>(ref arr, value2);
}

//! > casm
[fp + -4] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 400})

//! > sierra_code
type felt = felt;
type Array<felt> = Array<felt>;
type Unit = Struct<ut@Tuple>;

libfunc array_append<felt> = array_append<felt>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Array<felt>> = store_temp<Array<felt>>;
libfunc store_temp<Unit> = store_temp<Unit>;

array_append<felt>([0], [1]) -> ([3]);
array_append<felt>([3], [2]) -> ([4]);
struct_construct<Unit>() -> ([5]);
store_temp<Array<felt>>([4]) -> ([6]);
store_temp<Unit>([5]) -> ([7]);
return([6], [7]);

test::foo@0([0]: Array<felt>, [1]: felt, [2]: felt) -> (Array<felt>, Unit);

//! > ==========================================================================

//! > array_pop_front libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref arr: Array::<felt>) -> Option::<felt> {
    array_pop_front::<felt>(ref arr)
}

//! > casm
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 10;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 2;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 800})

//! > sierra_code
type felt = felt;
type Array<felt> = Array<felt>;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<core::felt> = Enum<ut@core::option::Option::<core::felt>, felt, Unit>;

libfunc array_pop_front<felt> = array_pop_front<felt>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::felt>, 0> = enum_init<core::option::Option::<core::felt>, 0>;
libfunc store_temp<Array<felt>> = store_temp<Array<felt>>;
libfunc store_temp<core::option::Option::<core::felt>> = store_temp<core::option::Option::<core::felt>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::felt>, 1> = enum_init<core::option::Option::<core::felt>, 1>;
libfunc rename<Array<felt>> = rename<Array<felt>>;
libfunc rename<core::option::Option::<core::felt>> = rename<core::option::Option::<core::felt>>;

array_pop_front<felt>([0]) { fallthrough([1], [2]) 6([3]) };
branch_align() -> ();
enum_init<core::option::Option::<core::felt>, 0>([2]) -> ([4]);
store_temp<Array<felt>>([1]) -> ([5]);
store_temp<core::option::Option::<core::felt>>([4]) -> ([6]);
jump() { 12() };
branch_align() -> ();
struct_construct<Unit>() -> ([7]);
enum_init<core::option::Option::<core::felt>, 1>([7]) -> ([8]);
store_temp<Array<felt>>([3]) -> ([5]);
store_temp<core::option::Option::<core::felt>>([8]) -> ([6]);
jump() { 12() };
rename<Array<felt>>([5]) -> ([9]);
rename<core::option::Option::<core::felt>>([6]) -> ([10]);
return([9], [10]);

test::foo@0([0]: Array<felt>) -> (Array<felt>, core::option::Option::<core::felt>);

//! > ==========================================================================

//! > array_get libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(arr: @Array::<felt>, idx: usize) -> Option::<@felt> {
    array_get(arr, idx)
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -5], ap++;
%{ memory[ap + 0] = memory[fp + -3] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -3] = [[fp + -6] + 0];
jmp rel 14;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + -1] = [ap + 0] + [ap + -3], ap++;
[ap + -2] = [[fp + -6] + 0];
[ap + 0] = [fp + -5] + [fp + -3], ap++;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -3] + 0], ap++;
jmp rel 12;
ap += 2;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 2;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1090})

//! > sierra_code
type RangeCheck = RangeCheck;
type felt = felt;
type Array<felt> = Array<felt>;
type Snapshot<Array<felt>> = Snapshot<Array<felt>>;
type u32 = u32;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<@core::felt> = Enum<ut@core::option::Option::<@core::felt>, felt, Unit>;

libfunc array_get<felt> = array_get<felt>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<@core::felt>, 0> = enum_init<core::option::Option::<@core::felt>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<@core::felt>> = store_temp<core::option::Option::<@core::felt>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<@core::felt>, 1> = enum_init<core::option::Option::<@core::felt>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::option::Option::<@core::felt>> = rename<core::option::Option::<@core::felt>>;

array_get<felt>([0], [1], [2]) { fallthrough([3], [4]) 6([5]) };
branch_align() -> ();
enum_init<core::option::Option::<@core::felt>, 0>([4]) -> ([6]);
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<core::option::Option::<@core::felt>>([6]) -> ([8]);
jump() { 12() };
branch_align() -> ();
struct_construct<Unit>() -> ([9]);
enum_init<core::option::Option::<@core::felt>, 1>([9]) -> ([10]);
store_temp<RangeCheck>([5]) -> ([7]);
store_temp<core::option::Option::<@core::felt>>([10]) -> ([8]);
jump() { 12() };
rename<RangeCheck>([7]) -> ([11]);
rename<core::option::Option::<@core::felt>>([8]) -> ([12]);
return([11], [12]);

test::foo@0([0]: RangeCheck, [1]: Snapshot<Array<felt>>, [2]: u32) -> (RangeCheck, core::option::Option::<@core::felt>);

//! > ==========================================================================

//! > array_get libfunc on larger element

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(arr: @Array::<u256>, idx: usize) -> Option::<@u256> {
    array_get(arr, idx)
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -5], ap++;
[ap + 0] = [fp + -3] * 2, ap++;
%{ memory[ap + 0] = memory[ap + -1] < memory[ap + -2] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
[ap + -4] = [ap + 0] * 2, ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 15;
[ap + 0] = [ap + -2] + 1, ap++;
[ap + -1] = [ap + 0] + [ap + -4], ap++;
[ap + -2] = [[fp + -6] + 0];
[ap + 0] = [fp + -5] + [ap + -4], ap++;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -3] + 0], ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
jmp rel 14;
ap += 1;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 2;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1380})

//! > sierra_code
type RangeCheck = RangeCheck;
type u128 = u128;
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128>;
type Array<core::integer::u256> = Array<core::integer::u256>;
type Snapshot<Array<core::integer::u256>> = Snapshot<Array<core::integer::u256>>;
type u32 = u32;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<@core::integer::u256> = Enum<ut@core::option::Option::<@core::integer::u256>, core::integer::u256, Unit>;

libfunc array_get<core::integer::u256> = array_get<core::integer::u256>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<@core::integer::u256>, 0> = enum_init<core::option::Option::<@core::integer::u256>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<@core::integer::u256>> = store_temp<core::option::Option::<@core::integer::u256>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<@core::integer::u256>, 1> = enum_init<core::option::Option::<@core::integer::u256>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::option::Option::<@core::integer::u256>> = rename<core::option::Option::<@core::integer::u256>>;

array_get<core::integer::u256>([0], [1], [2]) { fallthrough([3], [4]) 6([5]) };
branch_align() -> ();
enum_init<core::option::Option::<@core::integer::u256>, 0>([4]) -> ([6]);
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<core::option::Option::<@core::integer::u256>>([6]) -> ([8]);
jump() { 12() };
branch_align() -> ();
struct_construct<Unit>() -> ([9]);
enum_init<core::option::Option::<@core::integer::u256>, 1>([9]) -> ([10]);
store_temp<RangeCheck>([5]) -> ([7]);
store_temp<core::option::Option::<@core::integer::u256>>([10]) -> ([8]);
jump() { 12() };
rename<RangeCheck>([7]) -> ([11]);
rename<core::option::Option::<@core::integer::u256>>([8]) -> ([12]);
return([11], [12]);

test::foo@0([0]: RangeCheck, [1]: Snapshot<Array<core::integer::u256>>, [2]: u32) -> (RangeCheck, core::option::Option::<@core::integer::u256>);

//! > ==========================================================================

//! > array_get libfunc on a non duppable type

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(arr: @Array::<Array::<felt>>, idx: usize) -> Option::<@Array::<felt>> {
    array_get(arr, idx)
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -5], ap++;
[ap + 0] = [fp + -3] * 2, ap++;
%{ memory[ap + 0] = memory[ap + -1] < memory[ap + -2] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
[ap + -4] = [ap + 0] * 2, ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 15;
[ap + 0] = [ap + -2] + 1, ap++;
[ap + -1] = [ap + 0] + [ap + -4], ap++;
[ap + -2] = [[fp + -6] + 0];
[ap + 0] = [fp + -5] + [ap + -4], ap++;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -3] + 0], ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
jmp rel 14;
ap += 1;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 2;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1380})

//! > sierra_code
type RangeCheck = RangeCheck;
type felt = felt;
type Array<felt> = Array<felt>;
type Array<Array<felt>> = Array<Array<felt>>;
type Snapshot<Array<Array<felt>>> = Snapshot<Array<Array<felt>>>;
type u32 = u32;
type Snapshot<Array<felt>> = Snapshot<Array<felt>>;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<@core::array::Array::<core::felt>> = Enum<ut@core::option::Option::<@core::array::Array::<core::felt>>, Snapshot<Array<felt>>, Unit>;

libfunc array_get<Array<felt>> = array_get<Array<felt>>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<@core::array::Array::<core::felt>>, 0> = enum_init<core::option::Option::<@core::array::Array::<core::felt>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<@core::array::Array::<core::felt>>> = store_temp<core::option::Option::<@core::array::Array::<core::felt>>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<@core::array::Array::<core::felt>>, 1> = enum_init<core::option::Option::<@core::array::Array::<core::felt>>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::option::Option::<@core::array::Array::<core::felt>>> = rename<core::option::Option::<@core::array::Array::<core::felt>>>;

array_get<Array<felt>>([0], [1], [2]) { fallthrough([3], [4]) 6([5]) };
branch_align() -> ();
enum_init<core::option::Option::<@core::array::Array::<core::felt>>, 0>([4]) -> ([6]);
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<core::option::Option::<@core::array::Array::<core::felt>>>([6]) -> ([8]);
jump() { 12() };
branch_align() -> ();
struct_construct<Unit>() -> ([9]);
enum_init<core::option::Option::<@core::array::Array::<core::felt>>, 1>([9]) -> ([10]);
store_temp<RangeCheck>([5]) -> ([7]);
store_temp<core::option::Option::<@core::array::Array::<core::felt>>>([10]) -> ([8]);
jump() { 12() };
rename<RangeCheck>([7]) -> ([11]);
rename<core::option::Option::<@core::array::Array::<core::felt>>>([8]) -> ([12]);
return([11], [12]);

test::foo@0([0]: RangeCheck, [1]: Snapshot<Array<Array<felt>>>, [2]: u32) -> (RangeCheck, core::option::Option::<@core::array::Array::<core::felt>>);

//! > ==========================================================================

//! > array_len libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref arr: Array::<felt>) -> usize {
    array_len::<felt>(@arr)
}

//! > casm
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type felt = felt;
type Array<felt> = Array<felt>;
type Snapshot<Array<felt>> = Snapshot<Array<felt>>;
type u32 = u32;

libfunc snapshot_take<Array<felt>> = snapshot_take<Array<felt>>;
libfunc array_len<felt> = array_len<felt>;
libfunc store_temp<Array<felt>> = store_temp<Array<felt>>;
libfunc store_temp<u32> = store_temp<u32>;

snapshot_take<Array<felt>>([0]) -> ([1], [2]);
array_len<felt>([2]) -> ([3]);
store_temp<Array<felt>>([1]) -> ([4]);
store_temp<u32>([3]) -> ([5]);
return([4], [5]);

test::foo@0([0]: Array<felt>) -> (Array<felt>, u32);

//! > ==========================================================================

//! > array_len libfunc on larger element

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref arr: Array::<u256>) -> usize {
    array_len::<u256>(@arr)
}

//! > casm
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -3] = [ap + 0] * 2, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 400})

//! > sierra_code
type u128 = u128;
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128>;
type Array<core::integer::u256> = Array<core::integer::u256>;
type Snapshot<Array<core::integer::u256>> = Snapshot<Array<core::integer::u256>>;
type u32 = u32;

libfunc snapshot_take<Array<core::integer::u256>> = snapshot_take<Array<core::integer::u256>>;
libfunc array_len<core::integer::u256> = array_len<core::integer::u256>;
libfunc store_temp<Array<core::integer::u256>> = store_temp<Array<core::integer::u256>>;
libfunc store_temp<u32> = store_temp<u32>;

snapshot_take<Array<core::integer::u256>>([0]) -> ([1], [2]);
array_len<core::integer::u256>([2]) -> ([3]);
store_temp<Array<core::integer::u256>>([1]) -> ([4]);
store_temp<u32>([3]) -> ([5]);
return([4], [5]);

test::foo@0([0]: Array<core::integer::u256>) -> (Array<core::integer::u256>, u32);
