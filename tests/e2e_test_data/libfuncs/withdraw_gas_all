//! > withdraw_gas_all use no builtins

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(costs: BuiltinCosts) -> Option::<()> {
    gas::withdraw_gas_all(costs)?;
    foo(costs)
}

//! > casm
%{ memory[ap + 0] = 870 <= memory[fp + -4] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[fp + -4] = [ap + 0] + 870, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 12;
[fp + -4] = [ap + 0] + 870, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -16;
ret;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 870})

//! > sierra_code
type BuiltinCosts = BuiltinCosts;
type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<()> = Enum<ut@core::option::Option::<()>, Unit, Unit>;

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<BuiltinCosts> = dup<BuiltinCosts>;
libfunc withdraw_gas_all = withdraw_gas_all;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc drop<Unit> = drop<Unit>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<BuiltinCosts> = store_temp<BuiltinCosts>;
libfunc function_call<user@test::foo> = function_call<user@test::foo>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc rename<core::option::Option::<()>> = rename<core::option::Option::<()>>;
libfunc drop<BuiltinCosts> = drop<BuiltinCosts>;
libfunc enum_init<core::option::Option::<()>, 1> = enum_init<core::option::Option::<()>, 1>;
libfunc store_temp<core::option::Option::<()>> = store_temp<core::option::Option::<()>>;

disable_ap_tracking() -> ();
dup<BuiltinCosts>([2]) -> ([2], [7]);
withdraw_gas_all([0], [1], [7]) { fallthrough([3], [4]) 14([5], [6]) };
branch_align() -> ();
struct_construct<Unit>() -> ([8]);
drop<Unit>([8]) -> ();
store_temp<RangeCheck>([3]) -> ([12]);
store_temp<GasBuiltin>([4]) -> ([13]);
store_temp<BuiltinCosts>([2]) -> ([14]);
function_call<user@test::foo>([12], [13], [14]) -> ([9], [10], [11]);
rename<RangeCheck>([9]) -> ([15]);
rename<GasBuiltin>([10]) -> ([16]);
rename<core::option::Option::<()>>([11]) -> ([17]);
return([15], [16], [17]);
branch_align() -> ();
drop<BuiltinCosts>([2]) -> ();
struct_construct<Unit>() -> ([18]);
enum_init<core::option::Option::<()>, 1>([18]) -> ([19]);
store_temp<RangeCheck>([5]) -> ([20]);
store_temp<GasBuiltin>([6]) -> ([21]);
store_temp<core::option::Option::<()>>([19]) -> ([22]);
return([20], [21], [22]);

test::foo@0([0]: RangeCheck, [1]: GasBuiltin, [2]: BuiltinCosts) -> (RangeCheck, GasBuiltin, core::option::Option::<()>);

//! > ==========================================================================

//! > withdraw_gas_all use pedersen builtin

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(costs: BuiltinCosts) -> Option::<()> {
    gas::withdraw_gas_all(costs)?;
    pedersen(1, 1);
    foo(costs)
}

//! > casm
[ap + 0] = [[fp + -3] + 0], ap++;
[ap + 0] = [ap + -1] + 1570, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 19;
[fp + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = 1, ap++;
[ap + -2] = [[fp + -4] + 0];
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = [fp + -3], ap++;
call rel -25;
ret;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1170})

//! > sierra_code
type BuiltinCosts = BuiltinCosts;
type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type Unit = Struct<ut@Tuple>;
type felt252 = felt252;
type Pedersen = Pedersen;
type core::option::Option::<()> = Enum<ut@core::option::Option::<()>, Unit, Unit>;

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<BuiltinCosts> = dup<BuiltinCosts>;
libfunc withdraw_gas_all = withdraw_gas_all;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc drop<Unit> = drop<Unit>;
libfunc felt252_const<1> = felt252_const<1>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc pedersen = pedersen;
libfunc drop<felt252> = drop<felt252>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<Pedersen> = store_temp<Pedersen>;
libfunc store_temp<BuiltinCosts> = store_temp<BuiltinCosts>;
libfunc function_call<user@test::foo> = function_call<user@test::foo>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc rename<Pedersen> = rename<Pedersen>;
libfunc rename<core::option::Option::<()>> = rename<core::option::Option::<()>>;
libfunc drop<BuiltinCosts> = drop<BuiltinCosts>;
libfunc enum_init<core::option::Option::<()>, 1> = enum_init<core::option::Option::<()>, 1>;
libfunc store_temp<core::option::Option::<()>> = store_temp<core::option::Option::<()>>;

disable_ap_tracking() -> ();
dup<BuiltinCosts>([3]) -> ([3], [8]);
withdraw_gas_all([0], [1], [8]) { fallthrough([4], [5]) 22([6], [7]) };
branch_align() -> ();
struct_construct<Unit>() -> ([9]);
drop<Unit>([9]) -> ();
felt252_const<1>() -> ([10]);
felt252_const<1>() -> ([11]);
store_temp<felt252>([10]) -> ([10]);
store_temp<felt252>([11]) -> ([11]);
pedersen([2], [10], [11]) -> ([12], [13]);
drop<felt252>([13]) -> ();
store_temp<RangeCheck>([4]) -> ([18]);
store_temp<GasBuiltin>([5]) -> ([19]);
store_temp<Pedersen>([12]) -> ([20]);
store_temp<BuiltinCosts>([3]) -> ([21]);
function_call<user@test::foo>([18], [19], [20], [21]) -> ([14], [15], [16], [17]);
rename<RangeCheck>([14]) -> ([22]);
rename<GasBuiltin>([15]) -> ([23]);
rename<Pedersen>([16]) -> ([24]);
rename<core::option::Option::<()>>([17]) -> ([25]);
return([22], [23], [24], [25]);
branch_align() -> ();
drop<BuiltinCosts>([3]) -> ();
struct_construct<Unit>() -> ([26]);
enum_init<core::option::Option::<()>, 1>([26]) -> ([27]);
store_temp<RangeCheck>([6]) -> ([28]);
store_temp<GasBuiltin>([7]) -> ([29]);
store_temp<Pedersen>([2]) -> ([30]);
store_temp<core::option::Option::<()>>([27]) -> ([31]);
return([28], [29], [30], [31]);

test::foo@0([0]: RangeCheck, [1]: GasBuiltin, [2]: Pedersen, [3]: BuiltinCosts) -> (RangeCheck, GasBuiltin, Pedersen, core::option::Option::<()>);

//! > ==========================================================================

//! > withdraw_gas_all use bitwise builtin

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(costs: BuiltinCosts) -> Option::<()> {
    gas::withdraw_gas_all(costs)?;
    integer::bitwise(1_u128, 1_u128);
    foo(costs)
}

//! > casm
[ap + 0] = [[fp + -3] + 1], ap++;
[ap + 0] = [ap + -1] + 1570, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 19;
[fp + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = 1, ap++;
[ap + -2] = [[fp + -4] + 0];
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4] + 5, ap++;
[ap + 0] = [fp + -3], ap++;
call rel -25;
ret;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1170})

//! > sierra_code
type BuiltinCosts = BuiltinCosts;
type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type Unit = Struct<ut@Tuple>;
type u128 = u128;
type Bitwise = Bitwise;
type core::option::Option::<()> = Enum<ut@core::option::Option::<()>, Unit, Unit>;

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<BuiltinCosts> = dup<BuiltinCosts>;
libfunc withdraw_gas_all = withdraw_gas_all;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc drop<Unit> = drop<Unit>;
libfunc u128_const<1> = u128_const<1>;
libfunc store_temp<u128> = store_temp<u128>;
libfunc bitwise = bitwise;
libfunc drop<u128> = drop<u128>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<Bitwise> = store_temp<Bitwise>;
libfunc store_temp<BuiltinCosts> = store_temp<BuiltinCosts>;
libfunc function_call<user@test::foo> = function_call<user@test::foo>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc rename<Bitwise> = rename<Bitwise>;
libfunc rename<core::option::Option::<()>> = rename<core::option::Option::<()>>;
libfunc drop<BuiltinCosts> = drop<BuiltinCosts>;
libfunc enum_init<core::option::Option::<()>, 1> = enum_init<core::option::Option::<()>, 1>;
libfunc store_temp<core::option::Option::<()>> = store_temp<core::option::Option::<()>>;

disable_ap_tracking() -> ();
dup<BuiltinCosts>([3]) -> ([3], [8]);
withdraw_gas_all([0], [1], [8]) { fallthrough([4], [5]) 24([6], [7]) };
branch_align() -> ();
struct_construct<Unit>() -> ([9]);
drop<Unit>([9]) -> ();
u128_const<1>() -> ([10]);
u128_const<1>() -> ([11]);
store_temp<u128>([10]) -> ([10]);
store_temp<u128>([11]) -> ([11]);
bitwise([2], [10], [11]) -> ([12], [13], [14], [15]);
drop<u128>([13]) -> ();
drop<u128>([14]) -> ();
drop<u128>([15]) -> ();
store_temp<RangeCheck>([4]) -> ([20]);
store_temp<GasBuiltin>([5]) -> ([21]);
store_temp<Bitwise>([12]) -> ([22]);
store_temp<BuiltinCosts>([3]) -> ([23]);
function_call<user@test::foo>([20], [21], [22], [23]) -> ([16], [17], [18], [19]);
rename<RangeCheck>([16]) -> ([24]);
rename<GasBuiltin>([17]) -> ([25]);
rename<Bitwise>([18]) -> ([26]);
rename<core::option::Option::<()>>([19]) -> ([27]);
return([24], [25], [26], [27]);
branch_align() -> ();
drop<BuiltinCosts>([3]) -> ();
struct_construct<Unit>() -> ([28]);
enum_init<core::option::Option::<()>, 1>([28]) -> ([29]);
store_temp<RangeCheck>([6]) -> ([30]);
store_temp<GasBuiltin>([7]) -> ([31]);
store_temp<Bitwise>([2]) -> ([32]);
store_temp<core::option::Option::<()>>([29]) -> ([33]);
return([30], [31], [32], [33]);

test::foo@0([0]: RangeCheck, [1]: GasBuiltin, [2]: Bitwise, [3]: BuiltinCosts) -> (RangeCheck, GasBuiltin, Bitwise, core::option::Option::<()>);

//! > ==========================================================================

//! > withdraw_gas_all use pedersen and bitwise builtins

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(costs: BuiltinCosts) -> Option::<()> {
    gas::withdraw_gas_all(costs)?;
    pedersen(1, 1);
    integer::bitwise(1_u128, 1_u128);
    foo(costs)
}

//! > casm
[ap + 0] = [[fp + -3] + 0], ap++;
[ap + 0] = [ap + -1] + 2270, ap++;
[ap + 0] = [[fp + -3] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -6] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 27;
[fp + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = 1, ap++;
[ap + -2] = [[fp + -5] + 0];
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = 1, ap++;
[ap + -2] = [[fp + -4] + 0];
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4] + 5, ap++;
[ap + 0] = [fp + -3], ap++;
call rel -35;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1470})

//! > sierra_code
type BuiltinCosts = BuiltinCosts;
type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type Unit = Struct<ut@Tuple>;
type felt252 = felt252;
type Pedersen = Pedersen;
type u128 = u128;
type Bitwise = Bitwise;
type core::option::Option::<()> = Enum<ut@core::option::Option::<()>, Unit, Unit>;

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<BuiltinCosts> = dup<BuiltinCosts>;
libfunc withdraw_gas_all = withdraw_gas_all;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc drop<Unit> = drop<Unit>;
libfunc felt252_const<1> = felt252_const<1>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc pedersen = pedersen;
libfunc drop<felt252> = drop<felt252>;
libfunc u128_const<1> = u128_const<1>;
libfunc store_temp<u128> = store_temp<u128>;
libfunc bitwise = bitwise;
libfunc drop<u128> = drop<u128>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<Pedersen> = store_temp<Pedersen>;
libfunc store_temp<Bitwise> = store_temp<Bitwise>;
libfunc store_temp<BuiltinCosts> = store_temp<BuiltinCosts>;
libfunc function_call<user@test::foo> = function_call<user@test::foo>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc rename<Pedersen> = rename<Pedersen>;
libfunc rename<Bitwise> = rename<Bitwise>;
libfunc rename<core::option::Option::<()>> = rename<core::option::Option::<()>>;
libfunc drop<BuiltinCosts> = drop<BuiltinCosts>;
libfunc enum_init<core::option::Option::<()>, 1> = enum_init<core::option::Option::<()>, 1>;
libfunc store_temp<core::option::Option::<()>> = store_temp<core::option::Option::<()>>;

disable_ap_tracking() -> ();
dup<BuiltinCosts>([4]) -> ([4], [9]);
withdraw_gas_all([0], [1], [9]) { fallthrough([5], [6]) 32([7], [8]) };
branch_align() -> ();
struct_construct<Unit>() -> ([10]);
drop<Unit>([10]) -> ();
felt252_const<1>() -> ([11]);
felt252_const<1>() -> ([12]);
store_temp<felt252>([11]) -> ([11]);
store_temp<felt252>([12]) -> ([12]);
pedersen([2], [11], [12]) -> ([13], [14]);
drop<felt252>([14]) -> ();
u128_const<1>() -> ([15]);
u128_const<1>() -> ([16]);
store_temp<u128>([15]) -> ([15]);
store_temp<u128>([16]) -> ([16]);
bitwise([3], [15], [16]) -> ([17], [18], [19], [20]);
drop<u128>([18]) -> ();
drop<u128>([19]) -> ();
drop<u128>([20]) -> ();
store_temp<RangeCheck>([5]) -> ([26]);
store_temp<GasBuiltin>([6]) -> ([27]);
store_temp<Pedersen>([13]) -> ([28]);
store_temp<Bitwise>([17]) -> ([29]);
store_temp<BuiltinCosts>([4]) -> ([30]);
function_call<user@test::foo>([26], [27], [28], [29], [30]) -> ([21], [22], [23], [24], [25]);
rename<RangeCheck>([21]) -> ([31]);
rename<GasBuiltin>([22]) -> ([32]);
rename<Pedersen>([23]) -> ([33]);
rename<Bitwise>([24]) -> ([34]);
rename<core::option::Option::<()>>([25]) -> ([35]);
return([31], [32], [33], [34], [35]);
branch_align() -> ();
drop<BuiltinCosts>([4]) -> ();
struct_construct<Unit>() -> ([36]);
enum_init<core::option::Option::<()>, 1>([36]) -> ([37]);
store_temp<RangeCheck>([7]) -> ([38]);
store_temp<GasBuiltin>([8]) -> ([39]);
store_temp<Pedersen>([2]) -> ([40]);
store_temp<Bitwise>([3]) -> ([41]);
store_temp<core::option::Option::<()>>([37]) -> ([42]);
return([38], [39], [40], [41], [42]);

test::foo@0([0]: RangeCheck, [1]: GasBuiltin, [2]: Pedersen, [3]: Bitwise, [4]: BuiltinCosts) -> (RangeCheck, GasBuiltin, Pedersen, Bitwise, core::option::Option::<()>);
