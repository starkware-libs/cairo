//! > i128_to_felt252 libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(v: i128) -> felt252 {
    integer::i128_to_felt252(v)
}

//! > casm
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type i128 = i128;
type felt252 = felt252;

libfunc i128_to_felt252 = i128_to_felt252;
libfunc store_temp<felt252> = store_temp<felt252>;

i128_to_felt252([0]) -> ([1]);
store_temp<felt252>([1]) -> ([2]);
return([2]);

test::foo@0([0]: i128) -> (felt252);

//! > ==========================================================================

//! > i128_try_from_felt252 libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(v: felt252) -> Option<i128> {
    integer::i128_try_from_felt252(v)
}

//! > casm
%{ memory[ap + 0] = (memory[fp + -3] + 170141183460469231731687303715884105728) % PRIME < 340282366920938463463374607431768211456 %}
jmp rel 20 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 170141183460469231731687303715884105728, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134079)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134079, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -4] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943297, ap++;
[ap + -1] = [[fp + -4] + 1], ap++;
[ap + -5] = [[fp + -4] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 18 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
jmp rel 14;
[ap + 0] = [fp + -3] + 170141183460469231731687303715884105728, ap++;
[ap + -1] = [[fp + -4] + 0];
ap += 5;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 8;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1710})

//! > sierra_code
type RangeCheck = RangeCheck;
type felt252 = felt252;
type i128 = i128;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<core::integer::i128> = Enum<ut@core::option::Option::<core::integer::i128>, i128, Unit>;

libfunc i128_try_from_felt252 = i128_try_from_felt252;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::integer::i128>, 0> = enum_init<core::option::Option::<core::integer::i128>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::integer::i128>> = store_temp<core::option::Option::<core::integer::i128>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::integer::i128>, 1> = enum_init<core::option::Option::<core::integer::i128>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::option::Option::<core::integer::i128>> = rename<core::option::Option::<core::integer::i128>>;

i128_try_from_felt252([0], [1]) { fallthrough([2], [3]) 6([4]) };
branch_align() -> ();
enum_init<core::option::Option::<core::integer::i128>, 0>([3]) -> ([5]);
store_temp<RangeCheck>([2]) -> ([6]);
store_temp<core::option::Option::<core::integer::i128>>([5]) -> ([7]);
jump() { 11() };
branch_align() -> ();
struct_construct<Unit>() -> ([8]);
enum_init<core::option::Option::<core::integer::i128>, 1>([8]) -> ([9]);
store_temp<RangeCheck>([4]) -> ([6]);
store_temp<core::option::Option::<core::integer::i128>>([9]) -> ([7]);
rename<RangeCheck>([6]) -> ([10]);
rename<core::option::Option::<core::integer::i128>>([7]) -> ([11]);
return([10], [11]);

test::foo@0([0]: RangeCheck, [1]: felt252) -> (RangeCheck, core::option::Option::<core::integer::i128>);

//! > ==========================================================================

//! > i128_eq libfunc (a deref, b deref)

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: i128, b: i128) -> bool {
    integer::i128_eq(a, b)
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 6;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 400})

//! > sierra_code
type i128 = i128;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc i128_eq = i128_eq;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc rename<core::bool> = rename<core::bool>;

i128_eq([0], [1]) { fallthrough() 6() };
branch_align() -> ();
struct_construct<Unit>() -> ([2]);
enum_init<core::bool, 0>([2]) -> ([3]);
store_temp<core::bool>([3]) -> ([4]);
jump() { 10() };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 1>([5]) -> ([6]);
store_temp<core::bool>([6]) -> ([4]);
rename<core::bool>([4]) -> ([7]);
return([7]);

test::foo@0([0]: i128, [1]: i128) -> (core::bool);

//! > ==========================================================================

//! > i128_eq libfunc (a immediate, b immediate)

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo() -> bool {
    integer::i128_eq(11_i128, 12_i128)
}

//! > casm
[ap + 0] = 11, ap++;
[ap + -1] = [ap + 0] + 12, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 6;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 500})

//! > sierra_code
type i128 = i128;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc i128_const<11> = i128_const<11>;
libfunc i128_const<12> = i128_const<12>;
libfunc store_temp<i128> = store_temp<i128>;
libfunc i128_eq = i128_eq;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc rename<core::bool> = rename<core::bool>;

i128_const<11>() -> ([0]);
i128_const<12>() -> ([1]);
store_temp<i128>([0]) -> ([0]);
i128_eq([0], [1]) { fallthrough() 9() };
branch_align() -> ();
struct_construct<Unit>() -> ([2]);
enum_init<core::bool, 0>([2]) -> ([3]);
store_temp<core::bool>([3]) -> ([4]);
jump() { 13() };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 1>([5]) -> ([6]);
store_temp<core::bool>([6]) -> ([4]);
rename<core::bool>([4]) -> ([7]);
return([7]);

test::foo@0() -> (core::bool);

//! > ==========================================================================

//! > i128_is_zero libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use zeroable::IsZeroResult;
use zeroable::NonZeroIntoImpl;
use traits::Into;
fn foo(a: i128) -> i128 {
    match integer::i128_is_zero(a) {
        IsZeroResult::Zero(()) => 123_i128,
        IsZeroResult::NonZero(x) => x.into(),
    }
}

//! > casm
jmp rel 6 if [fp + -3] != 0;
[ap + 0] = 123, ap++;
jmp rel 3;
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type i128 = i128;
type NonZero<i128> = NonZero<i128>;

libfunc i128_is_zero = i128_is_zero;
libfunc branch_align = branch_align;
libfunc i128_const<123> = i128_const<123>;
libfunc store_temp<i128> = store_temp<i128>;
libfunc jump = jump;
libfunc unwrap_non_zero<i128> = unwrap_non_zero<i128>;
libfunc rename<i128> = rename<i128>;

i128_is_zero([0]) { fallthrough() 5([1]) };
branch_align() -> ();
i128_const<123>() -> ([2]);
store_temp<i128>([2]) -> ([3]);
jump() { 8() };
branch_align() -> ();
unwrap_non_zero<i128>([1]) -> ([4]);
store_temp<i128>([4]) -> ([3]);
rename<i128>([3]) -> ([5]);
return([5]);

test::foo@0([0]: i128) -> (i128);
