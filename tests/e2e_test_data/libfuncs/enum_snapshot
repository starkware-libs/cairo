//! > match enum with a single variant

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
enum SingleVariant {
    Variant: felt,
}

fn foo(e: @SingleVariant) -> felt {
    match e {
        SingleVariant::Variant(_) => 0,
    }
}

//! > casm
jmp rel 2;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 200})

//! > sierra_code
type felt = felt;
type test::SingleVariant = Enum<ut@test::SingleVariant, felt>;

libfunc enum_match<test::SingleVariant> = enum_match<test::SingleVariant>;
libfunc branch_align = branch_align;
libfunc drop<felt> = drop<felt>;
libfunc felt_const<0> = felt_const<0>;
libfunc jump = jump;
libfunc store_temp<felt> = store_temp<felt>;

enum_match<test::SingleVariant>([0]) -> ([1]);
branch_align() -> ();
drop<felt>([1]) -> ();
felt_const<0>() -> ([2]);
jump() { 5() };
store_temp<felt>([2]) -> ([3]);
return([3]);

test::foo@0([0]: test::SingleVariant) -> (felt);

//! > ==========================================================================

//! > match enum with 2 variants

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
enum Option {
    Some: felt,
    None: (),
}

fn foo(e: @Option) -> felt {
    match e {
        Option::Some(_) => 0,
        Option::None(_) => 1,
    }
}

//! > casm
jmp rel 6 if [fp + -4] != 0;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = 1, ap++;
jmp rel 2;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type felt = felt;
type Unit = Struct<ut@Tuple>;
type test::Option = Enum<ut@test::Option, felt, Unit>;

libfunc enum_match<test::Option> = enum_match<test::Option>;
libfunc branch_align = branch_align;
libfunc drop<felt> = drop<felt>;
libfunc felt_const<0> = felt_const<0>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc jump = jump;
libfunc drop<Unit> = drop<Unit>;
libfunc felt_const<1> = felt_const<1>;
libfunc rename<felt> = rename<felt>;

enum_match<test::Option>([0]) { fallthrough([1]) 6([2]) };
branch_align() -> ();
drop<felt>([1]) -> ();
felt_const<0>() -> ([3]);
store_temp<felt>([3]) -> ([4]);
jump() { 11() };
branch_align() -> ();
drop<Unit>([2]) -> ();
felt_const<1>() -> ([5]);
store_temp<felt>([5]) -> ([4]);
jump() { 11() };
rename<felt>([4]) -> ([6]);
return([6]);

test::foo@0([0]: test::Option) -> (felt);

//! > ==========================================================================

//! > match enum with more than 2 variants

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
enum Color {
    Red: felt,
    Green: felt,
    Blue: felt,
}

fn foo(e: @Color) -> felt {
    match e {
        Color::Red(_) => 0,
        Color::Green(_) => 1,
        Color::Blue(_) => 2,
    }
}

//! > casm
jmp rel [fp + -4];
jmp rel 8;
jmp rel 10;
[ap + 0] = 0, ap++;
jmp rel 10;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = 2, ap++;
jmp rel 2;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 400})

//! > sierra_code
type felt = felt;
type test::Color = Enum<ut@test::Color, felt, felt, felt>;

libfunc enum_match<test::Color> = enum_match<test::Color>;
libfunc branch_align = branch_align;
libfunc drop<felt> = drop<felt>;
libfunc felt_const<0> = felt_const<0>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc jump = jump;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_const<2> = felt_const<2>;
libfunc rename<felt> = rename<felt>;

enum_match<test::Color>([0]) { fallthrough([1]) 6([2]) 11([3]) };
branch_align() -> ();
drop<felt>([1]) -> ();
felt_const<0>() -> ([4]);
store_temp<felt>([4]) -> ([5]);
jump() { 16() };
branch_align() -> ();
drop<felt>([2]) -> ();
felt_const<1>() -> ([6]);
store_temp<felt>([6]) -> ([5]);
jump() { 16() };
branch_align() -> ();
drop<felt>([3]) -> ();
felt_const<2>() -> ([7]);
store_temp<felt>([7]) -> ([5]);
jump() { 16() };
rename<felt>([5]) -> ([8]);
return([8]);

test::foo@0([0]: test::Color) -> (felt);

//! > ==========================================================================

//! > match non-duplicatable enum with more than 2 variants

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
enum Color {
    White: (),
    Black: (),
    Colorful: Array::<felt>,
}

fn foo(e: @Color) -> felt {
    match e {
        Color::White(_) => 0,
        Color::Black(_) => 1,
        Color::Colorful(_) => 2,
    }
}

//! > casm
jmp rel [fp + -5];
jmp rel 8;
jmp rel 10;
[ap + 0] = 0, ap++;
jmp rel 10;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = 2, ap++;
jmp rel 2;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 400})

//! > sierra_code
type Unit = Struct<ut@Tuple>;
type felt = felt;
type Array<felt> = Array<felt>;
type test::Color = Enum<ut@test::Color, Unit, Unit, Array<felt>>;
type Snapshot<test::Color> = Snapshot<test::Color>;
type Snapshot<Array<felt>> = Snapshot<Array<felt>>;

libfunc enum_snapshot_match<test::Color> = enum_snapshot_match<test::Color>;
libfunc branch_align = branch_align;
libfunc drop<Unit> = drop<Unit>;
libfunc felt_const<0> = felt_const<0>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc jump = jump;
libfunc felt_const<1> = felt_const<1>;
libfunc drop<Snapshot<Array<felt>>> = drop<Snapshot<Array<felt>>>;
libfunc felt_const<2> = felt_const<2>;
libfunc rename<felt> = rename<felt>;

enum_snapshot_match<test::Color>([0]) { fallthrough([1]) 6([2]) 11([3]) };
branch_align() -> ();
drop<Unit>([1]) -> ();
felt_const<0>() -> ([4]);
store_temp<felt>([4]) -> ([5]);
jump() { 16() };
branch_align() -> ();
drop<Unit>([2]) -> ();
felt_const<1>() -> ([6]);
store_temp<felt>([6]) -> ([5]);
jump() { 16() };
branch_align() -> ();
drop<Snapshot<Array<felt>>>([3]) -> ();
felt_const<2>() -> ([7]);
store_temp<felt>([7]) -> ([5]);
jump() { 16() };
rename<felt>([5]) -> ([8]);
return([8]);

test::foo@0([0]: Snapshot<test::Color>) -> (felt);
