//! > u64_overflowing_add libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
#[feature("corelib-internal-use")]
fn foo(a: u64, b: u64) -> u64 {
    a + b
}

//! > casm
%{ memory[ap + 0] = (memory[fp + -4] + memory[fp + -3]) % PRIME < 18446744073709551616 %}
jmp rel 8 if [ap + 0] != 0, ap++; // 0
[ap + 0] = [fp + -4] + [fp + -3], ap++; // 2
[ap + -1] = [ap + 0] + 18446744073709551616, ap++; // 3
[ap + -1] = [[fp + -5] + 0]; // 5
jmp rel 16; // 6
[ap + 1] = [fp + -4] + [fp + -3], ap++; // 8
[ap + -1] = [ap + 0] + 340282366920938463444927863358058659840, ap++; // 9
[ap + -2] = [[fp + -5] + 0]; // 11
ap += 6; // 12
[ap + 0] = [fp + -5] + 1, ap++; // 14
[ap + 0] = 0, ap++; // 16
[ap + 0] = 0, ap++; // 18
[ap + 0] = [ap + -10], ap++; // 20
ret; // 21
[ap + 0] = 155801121779312277930962096923588980599, ap++; // 22
call rel 9; // 24
[ap + 0] = [fp + -5] + 1, ap++; // 26
[ap + 0] = 1, ap++; // 28
[ap + 0] = [ap + -4], ap++; // 30
[ap + 0] = [ap + -4], ap++; // 31
ret; // 32
%{ memory[ap + 0] = segments.add() %}
ap += 1; // 33
[fp + -3] = [[ap + -1] + 0]; // 35
[ap + 0] = [ap + -1], ap++; // 36
[ap + 0] = [ap + -2] + 1, ap++; // 37
ret; // 39

//! > function_costs
test::foo: OrderedHashMap({Const: 1670})
core::panic_with_felt252: OrderedHashMap({Const: 400})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type core::panics::Panic = Struct<ut@core::panics::Panic> [storable: true, drop: true, dup: true, zero_sized: true];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Tuple<core::panics::Panic, Array<felt252>> = Struct<ut@Tuple, core::panics::Panic, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type Const<felt252, 155801121779312277930962096923588980599> = Const<felt252, 155801121779312277930962096923588980599> [storable: false, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<u64> = Struct<ut@Tuple, u64> [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::PanicResult::<(core::integer::u64,)> = Enum<ut@core::panics::PanicResult::<(core::integer::u64,)>, Tuple<u64>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];

libfunc u64_overflowing_add = u64_overflowing_add;
libfunc branch_align = branch_align;
libfunc struct_construct<Tuple<u64>> = struct_construct<Tuple<u64>>;
libfunc enum_init<core::panics::PanicResult::<(core::integer::u64,)>, 0> = enum_init<core::panics::PanicResult::<(core::integer::u64,)>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::panics::PanicResult::<(core::integer::u64,)>> = store_temp<core::panics::PanicResult::<(core::integer::u64,)>>;
libfunc drop<u64> = drop<u64>;
libfunc const_as_immediate<Const<felt252, 155801121779312277930962096923588980599>> = const_as_immediate<Const<felt252, 155801121779312277930962096923588980599>>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc function_call<user@core::panic_with_felt252> = function_call<user@core::panic_with_felt252>;
libfunc enum_init<core::panics::PanicResult::<(core::integer::u64,)>, 1> = enum_init<core::panics::PanicResult::<(core::integer::u64,)>, 1>;
libfunc array_new<felt252> = array_new<felt252>;
libfunc array_append<felt252> = array_append<felt252>;
libfunc struct_construct<core::panics::Panic> = struct_construct<core::panics::Panic>;
libfunc struct_construct<Tuple<core::panics::Panic, Array<felt252>>> = struct_construct<Tuple<core::panics::Panic, Array<felt252>>>;
libfunc store_temp<Tuple<core::panics::Panic, Array<felt252>>> = store_temp<Tuple<core::panics::Panic, Array<felt252>>>;

F0:
u64_overflowing_add([0], [1], [2]) { fallthrough([3], [4]) F0_B0([5], [6]) };
branch_align() -> ();
struct_construct<Tuple<u64>>([4]) -> ([7]);
enum_init<core::panics::PanicResult::<(core::integer::u64,)>, 0>([7]) -> ([8]);
store_temp<RangeCheck>([3]) -> ([3]);
store_temp<core::panics::PanicResult::<(core::integer::u64,)>>([8]) -> ([8]);
return([3], [8]);
F0_B0:
branch_align() -> ();
drop<u64>([6]) -> ();
const_as_immediate<Const<felt252, 155801121779312277930962096923588980599>>() -> ([9]);
store_temp<felt252>([9]) -> ([9]);
function_call<user@core::panic_with_felt252>([9]) -> ([10]);
enum_init<core::panics::PanicResult::<(core::integer::u64,)>, 1>([10]) -> ([11]);
store_temp<RangeCheck>([5]) -> ([5]);
store_temp<core::panics::PanicResult::<(core::integer::u64,)>>([11]) -> ([11]);
return([5], [11]);
F1:
array_new<felt252>() -> ([1]);
array_append<felt252>([1], [0]) -> ([2]);
struct_construct<core::panics::Panic>() -> ([3]);
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([3], [2]) -> ([4]);
store_temp<Tuple<core::panics::Panic, Array<felt252>>>([4]) -> ([4]);
return([4]);

test::foo@F0([0]: RangeCheck, [1]: u64, [2]: u64) -> (RangeCheck, core::panics::PanicResult::<(core::integer::u64,)>);
core::panic_with_felt252@F1([0]: felt252) -> (Tuple<core::panics::Panic, Array<felt252>>);

//! > ==========================================================================

//! > u64_overflowing_sub libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
#[feature("corelib-internal-use")]
fn foo(a: u64, b: u64) -> Result<u64, u64> {
    integer::u64_overflowing_sub(a, b)
}

//! > casm
[fp + -4] = [ap + 1] + [fp + -3], ap++; // 0
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++; // 1
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++; // 3
[ap + -1] = [[fp + -5] + 0]; // 5
jmp rel 11; // 6
[ap + -1] = [[fp + -5] + 0]; // 8
ap += 1; // 9
[ap + 0] = [fp + -5] + 1, ap++; // 11
[ap + 0] = 0, ap++; // 13
[ap + 0] = [ap + -4], ap++; // 15
ret; // 16
[ap + 0] = [fp + -5] + 1, ap++; // 17
[ap + 0] = 1, ap++; // 19
[ap + 0] = [ap + -4] + 18446744073709551616, ap++; // 21
ret; // 23

//! > function_costs
test::foo: OrderedHashMap({Const: 870})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type core::result::Result::<core::integer::u64, core::integer::u64> = Enum<ut@core::result::Result::<core::integer::u64, core::integer::u64>, u64, u64> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u64_overflowing_sub = u64_overflowing_sub;
libfunc branch_align = branch_align;
libfunc enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 0> = enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::result::Result::<core::integer::u64, core::integer::u64>> = store_temp<core::result::Result::<core::integer::u64, core::integer::u64>>;
libfunc enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 1> = enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 1>;

F0:
u64_overflowing_sub([0], [1], [2]) { fallthrough([3], [4]) F0_B0([5], [6]) };
branch_align() -> ();
enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 0>([4]) -> ([7]);
store_temp<RangeCheck>([3]) -> ([3]);
store_temp<core::result::Result::<core::integer::u64, core::integer::u64>>([7]) -> ([7]);
return([3], [7]);
F0_B0:
branch_align() -> ();
enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 1>([6]) -> ([8]);
store_temp<RangeCheck>([5]) -> ([5]);
store_temp<core::result::Result::<core::integer::u64, core::integer::u64>>([8]) -> ([8]);
return([5], [8]);

test::foo@F0([0]: RangeCheck, [1]: u64, [2]: u64) -> (RangeCheck, core::result::Result::<core::integer::u64, core::integer::u64>);

//! > ==========================================================================

//! > u64_eq libfunc (a deref, b deref)

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
fn foo(a: u64, b: u64) -> bool {
    integer::u64_eq(a, b)
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -3], ap++; // 0
jmp rel 4 if [ap + -1] != 0; // 1
jmp rel 5; // 3
[ap + 0] = 0, ap++; // 5
ret; // 7
[ap + 0] = 1, ap++; // 8
ret; // 10

//! > function_costs
test::foo: OrderedHashMap({Const: 400})

//! > sierra_code
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::bool = Enum<ut@core::bool, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u64_eq = u64_eq;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;

F0:
u64_eq([0], [1]) { fallthrough() F0_B0() };
branch_align() -> ();
struct_construct<Unit>() -> ([2]);
enum_init<core::bool, 0>([2]) -> ([3]);
store_temp<core::bool>([3]) -> ([3]);
return([3]);
F0_B0:
branch_align() -> ();
struct_construct<Unit>() -> ([4]);
enum_init<core::bool, 1>([4]) -> ([5]);
store_temp<core::bool>([5]) -> ([5]);
return([5]);

test::foo@F0([0]: u64, [1]: u64) -> (core::bool);

//! > ==========================================================================

//! > u64_eq libfunc (a immediate, b immediate)

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
fn foo() -> bool {
    integer::u64_eq(11_u64, 12_u64)
}

//! > casm
[ap + 0] = 11, ap++; // 0
[ap + -1] = [ap + 0] + 12, ap++; // 2
jmp rel 4 if [ap + -1] != 0; // 4
jmp rel 5; // 6
[ap + 0] = 0, ap++; // 8
ret; // 10
[ap + 0] = 1, ap++; // 11
ret; // 13

//! > function_costs
test::foo: OrderedHashMap({Const: 500})

//! > sierra_code
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::bool = Enum<ut@core::bool, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<u64, 12> = Const<u64, 12> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u64, 11> = Const<u64, 11> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<u64, 11>> = const_as_immediate<Const<u64, 11>>;
libfunc const_as_immediate<Const<u64, 12>> = const_as_immediate<Const<u64, 12>>;
libfunc store_temp<u64> = store_temp<u64>;
libfunc u64_eq = u64_eq;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;

F0:
const_as_immediate<Const<u64, 11>>() -> ([0]);
const_as_immediate<Const<u64, 12>>() -> ([1]);
store_temp<u64>([0]) -> ([0]);
u64_eq([0], [1]) { fallthrough() F0_B0() };
branch_align() -> ();
struct_construct<Unit>() -> ([2]);
enum_init<core::bool, 0>([2]) -> ([3]);
store_temp<core::bool>([3]) -> ([3]);
return([3]);
F0_B0:
branch_align() -> ();
struct_construct<Unit>() -> ([4]);
enum_init<core::bool, 1>([4]) -> ([5]);
store_temp<core::bool>([5]) -> ([5]);
return([5]);

test::foo@F0() -> (core::bool);

//! > ==========================================================================

//! > u64_try_from_felt252 libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
fn foo(v: felt252) -> Option<u64> {
    integer::u64_try_from_felt252(v)
}

//! > casm
%{ memory[ap + 0] = (memory[fp + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++; // 0
[fp + -3] = [ap + 0] + 18446744073709551616, ap++; // 2
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++; // 4
[ap + -2] = [ap + 1] + [ap + 0], ap++; // 6
[ap + -1] = [[fp + -4] + 0], ap++; // 7
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++; // 8
[ap + -1] = [[fp + -4] + 1], ap++; // 10
[ap + -5] = [[fp + -4] + 2]; // 11
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455; // 12
jmp rel 16 if [ap + -1] != 0; // 14
[fp + -1] = [fp + -1] + 1; // 16
[fp + -3] = [[fp + -4] + 0]; // 18
[ap + 0] = [fp + -3] + 340282366920938463444927863358058659840, ap++; // 19
[ap + -1] = [[fp + -4] + 1]; // 21
ap += 5; // 22
[ap + 0] = [fp + -4] + 2, ap++; // 24
[ap + 0] = 0, ap++; // 26
[ap + 0] = [fp + -3], ap++; // 28
ret; // 29
[ap + 0] = [fp + -4] + 3, ap++; // 30
[ap + 0] = 1, ap++; // 32
[ap + 0] = 0, ap++; // 34
ret; // 36

//! > function_costs
test::foo: OrderedHashMap({Const: 1510})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<core::integer::u64> = Enum<ut@core::option::Option::<core::integer::u64>, u64, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u64_try_from_felt252 = u64_try_from_felt252;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::integer::u64>, 0> = enum_init<core::option::Option::<core::integer::u64>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::integer::u64>> = store_temp<core::option::Option::<core::integer::u64>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::integer::u64>, 1> = enum_init<core::option::Option::<core::integer::u64>, 1>;

F0:
u64_try_from_felt252([0], [1]) { fallthrough([2], [3]) F0_B0([4]) };
branch_align() -> ();
enum_init<core::option::Option::<core::integer::u64>, 0>([3]) -> ([5]);
store_temp<RangeCheck>([2]) -> ([2]);
store_temp<core::option::Option::<core::integer::u64>>([5]) -> ([5]);
return([2], [5]);
F0_B0:
branch_align() -> ();
struct_construct<Unit>() -> ([6]);
enum_init<core::option::Option::<core::integer::u64>, 1>([6]) -> ([7]);
store_temp<RangeCheck>([4]) -> ([4]);
store_temp<core::option::Option::<core::integer::u64>>([7]) -> ([7]);
return([4], [7]);

test::foo@F0([0]: RangeCheck, [1]: felt252) -> (RangeCheck, core::option::Option::<core::integer::u64>);

//! > ==========================================================================

//! > u64_is_zero libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
use zeroable::IsZeroResult;
fn foo(a: u64) -> u64 {
    match integer::u64_is_zero(a) {
        IsZeroResult::Zero => 1234_u64,
        IsZeroResult::NonZero(x) => x.into(),
    }
}

//! > casm
jmp rel 5 if [fp + -3] != 0; // 0
[ap + 0] = 1234, ap++; // 2
ret; // 4
[ap + 0] = [fp + -3], ap++; // 5
ret; // 6

//! > function_costs
test::foo: OrderedHashMap({Const: 200})

//! > sierra_code
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type Const<u64, 1234> = Const<u64, 1234> [storable: false, drop: false, dup: false, zero_sized: false];
type NonZero<u64> = NonZero<u64> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u64_is_zero = u64_is_zero;
libfunc branch_align = branch_align;
libfunc const_as_immediate<Const<u64, 1234>> = const_as_immediate<Const<u64, 1234>>;
libfunc store_temp<u64> = store_temp<u64>;
libfunc unwrap_non_zero<u64> = unwrap_non_zero<u64>;

F0:
u64_is_zero([0]) { fallthrough() F0_B0([1]) };
branch_align() -> ();
const_as_immediate<Const<u64, 1234>>() -> ([2]);
store_temp<u64>([2]) -> ([2]);
return([2]);
F0_B0:
branch_align() -> ();
unwrap_non_zero<u64>([1]) -> ([3]);
store_temp<u64>([3]) -> ([3]);
return([3]);

test::foo@F0([0]: u64) -> (u64);

//! > ==========================================================================

//! > u64_safe_divmod libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
fn foo(a: u64, b: NonZero<u64>) -> (u64, u64) {
    integer::u64_safe_divmod(a, b)
}

//! > casm
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -4], memory[fp + -3]) %}
[ap + 4] = [[fp + -5] + 0], ap++; // 0
[ap + -1] = [ap + 3] + 1, ap++; // 1
[fp + -3] = [ap + -1] + [ap + -2], ap++; // 3
[ap + -2] = [[fp + -5] + 1], ap++; // 4
[ap + -1] = [[fp + -5] + 2], ap++; // 5
[ap + -3] = [fp + -3] * [ap + -2]; // 6
[fp + -4] = [ap + -3] + [ap + -1]; // 7
[ap + 0] = [fp + -5] + 3, ap++; // 8
[ap + 0] = [ap + -3], ap++; // 10
[ap + 0] = [ap + -3], ap++; // 11
ret; // 12

//! > function_costs
test::foo: OrderedHashMap({Const: 1210})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<u64, u64> = Struct<ut@Tuple, u64, u64> [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<u64> = NonZero<u64> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u64_safe_divmod = u64_safe_divmod;
libfunc struct_construct<Tuple<u64, u64>> = struct_construct<Tuple<u64, u64>>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<Tuple<u64, u64>> = store_temp<Tuple<u64, u64>>;

F0:
u64_safe_divmod([0], [1], [2]) -> ([3], [4], [5]);
struct_construct<Tuple<u64, u64>>([4], [5]) -> ([6]);
store_temp<RangeCheck>([3]) -> ([3]);
store_temp<Tuple<u64, u64>>([6]) -> ([6]);
return([3], [6]);

test::foo@F0([0]: RangeCheck, [1]: u64, [2]: NonZero<u64>) -> (RangeCheck, Tuple<u64, u64>);

//! > ==========================================================================

//! > u64_sqrt libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
#[feature("corelib-internal-use")]
fn foo(value: u64) -> u32 {
    integer::u64_sqrt(value)
}

//! > casm
%{
import math
memory[ap + 5] = math.isqrt(memory[fp + -3])
%}
[ap + 0] = [ap + 5] + 297747071055821155530452781502797185024, ap++; // 0
[ap + 4] = [[fp + -4] + 0], ap++; // 2
[ap + -2] = [[fp + -4] + 1], ap++; // 3
[ap + -2] = [ap + 2] * [ap + 2], ap++; // 4
[fp + -3] = [ap + -2] + [ap + -3], ap++; // 5
[ap + -3] = [[fp + -4] + 2], ap++; // 6
[ap + -3] = [ap + -1] + [ap + -1]; // 7
[ap + -3] = [ap + -2] + [ap + -4]; // 8
[ap + -2] = [[fp + -4] + 3]; // 9
[ap + 0] = [fp + -4] + 4, ap++; // 10
[ap + 0] = [ap + -2], ap++; // 12
ret; // 13

//! > function_costs
test::foo: OrderedHashMap({Const: 1380})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u64_sqrt = u64_sqrt;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<u32> = store_temp<u32>;

F0:
u64_sqrt([0], [1]) -> ([2], [3]);
store_temp<RangeCheck>([2]) -> ([2]);
store_temp<u32>([3]) -> ([3]);
return([2], [3]);

test::foo@F0([0]: RangeCheck, [1]: u64) -> (RangeCheck, u32);

//! > ==========================================================================

//! > u64_wide_mul libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
#[feature("corelib-internal-use")]
fn foo(a: u64, b: u64) -> u128 {
    integer::u64_wide_mul(a, b)
}

//! > casm
[ap + 0] = [fp + -4] * [fp + -3], ap++; // 0
ret; // 1

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u64_wide_mul = u64_wide_mul;
libfunc store_temp<u128> = store_temp<u128>;

F0:
u64_wide_mul([0], [1]) -> ([2]);
store_temp<u128>([2]) -> ([2]);
return([2]);

test::foo@F0([0]: u64, [1]: u64) -> (u128);
