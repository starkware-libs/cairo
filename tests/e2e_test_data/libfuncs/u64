//! > u64_overflowing_add libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u64, b: u64) -> Result::<u64, u64> {
    integer::u64_overflowing_add(a, b)
}

//! > casm
%{ memory[ap + 0] = (memory[fp + -4] + memory[fp + -3]) % PRIME < 18446744073709551616 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 13;
[ap + 1] = [fp + -4] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 870})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type core::result::Result::<core::integer::u64, core::integer::u64> = Enum<ut@core::result::Result::<core::integer::u64, core::integer::u64>, u64, u64> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u64_overflowing_add = u64_overflowing_add;
libfunc branch_align = branch_align;
libfunc enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 0> = enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::result::Result::<core::integer::u64, core::integer::u64>> = store_temp<core::result::Result::<core::integer::u64, core::integer::u64>>;
libfunc jump = jump;
libfunc enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 1> = enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::result::Result::<core::integer::u64, core::integer::u64>> = rename<core::result::Result::<core::integer::u64, core::integer::u64>>;

u64_overflowing_add([0], [1], [2]) { fallthrough([3], [4]) 6([5], [6]) }; // 0
branch_align() -> (); // 1
enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 0>([4]) -> ([7]); // 2
store_temp<RangeCheck>([3]) -> ([8]); // 3
store_temp<core::result::Result::<core::integer::u64, core::integer::u64>>([7]) -> ([9]); // 4
jump() { 10() }; // 5
branch_align() -> (); // 6
enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 1>([6]) -> ([10]); // 7
store_temp<RangeCheck>([5]) -> ([8]); // 8
store_temp<core::result::Result::<core::integer::u64, core::integer::u64>>([10]) -> ([9]); // 9
rename<RangeCheck>([8]) -> ([11]); // 10
rename<core::result::Result::<core::integer::u64, core::integer::u64>>([9]) -> ([12]); // 11
return([11], [12]); // 12

test::foo@0([0]: RangeCheck, [1]: u64, [2]: u64) -> (RangeCheck, core::result::Result::<core::integer::u64, core::integer::u64>);

//! > ==========================================================================

//! > u64_overflowing_sub libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u64, b: u64) -> Result::<u64, u64> {
    integer::u64_overflowing_sub(a, b)
}

//! > casm
[fp + -4] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 12;
[ap + -1] = [[fp + -5] + 0];
ap += 1;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 8;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4] + 18446744073709551616, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 880})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type core::result::Result::<core::integer::u64, core::integer::u64> = Enum<ut@core::result::Result::<core::integer::u64, core::integer::u64>, u64, u64> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u64_overflowing_sub = u64_overflowing_sub;
libfunc branch_align = branch_align;
libfunc enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 0> = enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::result::Result::<core::integer::u64, core::integer::u64>> = store_temp<core::result::Result::<core::integer::u64, core::integer::u64>>;
libfunc jump = jump;
libfunc enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 1> = enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::result::Result::<core::integer::u64, core::integer::u64>> = rename<core::result::Result::<core::integer::u64, core::integer::u64>>;

u64_overflowing_sub([0], [1], [2]) { fallthrough([3], [4]) 6([5], [6]) }; // 0
branch_align() -> (); // 1
enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 0>([4]) -> ([7]); // 2
store_temp<RangeCheck>([3]) -> ([8]); // 3
store_temp<core::result::Result::<core::integer::u64, core::integer::u64>>([7]) -> ([9]); // 4
jump() { 10() }; // 5
branch_align() -> (); // 6
enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 1>([6]) -> ([10]); // 7
store_temp<RangeCheck>([5]) -> ([8]); // 8
store_temp<core::result::Result::<core::integer::u64, core::integer::u64>>([10]) -> ([9]); // 9
rename<RangeCheck>([8]) -> ([11]); // 10
rename<core::result::Result::<core::integer::u64, core::integer::u64>>([9]) -> ([12]); // 11
return([11], [12]); // 12

test::foo@0([0]: RangeCheck, [1]: u64, [2]: u64) -> (RangeCheck, core::result::Result::<core::integer::u64, core::integer::u64>);

//! > ==========================================================================

//! > u64_eq libfunc (a deref, b deref)

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u64, b: u64) -> bool {
    integer::u64_eq(a, b)
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 6;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 400})

//! > sierra_code
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::bool = Enum<ut@core::bool, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u64_eq = u64_eq;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc rename<core::bool> = rename<core::bool>;

u64_eq([0], [1]) { fallthrough() 6() }; // 0
branch_align() -> (); // 1
struct_construct<Unit>() -> ([2]); // 2
enum_init<core::bool, 0>([2]) -> ([3]); // 3
store_temp<core::bool>([3]) -> ([4]); // 4
jump() { 10() }; // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([5]); // 7
enum_init<core::bool, 1>([5]) -> ([6]); // 8
store_temp<core::bool>([6]) -> ([4]); // 9
rename<core::bool>([4]) -> ([7]); // 10
return([7]); // 11

test::foo@0([0]: u64, [1]: u64) -> (core::bool);

//! > ==========================================================================

//! > u64_eq libfunc (a immediate, b immediate)

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo() -> bool {
    integer::u64_eq(11_u64, 12_u64)
}

//! > casm
[ap + 0] = 11, ap++;
[ap + -1] = [ap + 0] + 12, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 6;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 500})

//! > sierra_code
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::bool = Enum<ut@core::bool, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u64_const<11> = u64_const<11>;
libfunc u64_const<12> = u64_const<12>;
libfunc store_temp<u64> = store_temp<u64>;
libfunc u64_eq = u64_eq;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc rename<core::bool> = rename<core::bool>;

u64_const<11>() -> ([0]); // 0
u64_const<12>() -> ([1]); // 1
store_temp<u64>([0]) -> ([0]); // 2
u64_eq([0], [1]) { fallthrough() 9() }; // 3
branch_align() -> (); // 4
struct_construct<Unit>() -> ([2]); // 5
enum_init<core::bool, 0>([2]) -> ([3]); // 6
store_temp<core::bool>([3]) -> ([4]); // 7
jump() { 13() }; // 8
branch_align() -> (); // 9
struct_construct<Unit>() -> ([5]); // 10
enum_init<core::bool, 1>([5]) -> ([6]); // 11
store_temp<core::bool>([6]) -> ([4]); // 12
rename<core::bool>([4]) -> ([7]); // 13
return([7]); // 14

test::foo@0() -> (core::bool);

//! > ==========================================================================

//! > u64_try_from_felt252 libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(v: felt252) -> Option::<u64> {
    integer::u64_try_from_felt252(v)
}

//! > casm
%{ memory[ap + 0] = memory[fp + -3] < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -4] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[fp + -4] + 1], ap++;
[ap + -5] = [[fp + -4] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 17 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [fp + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -4] + 1];
ap += 5;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 8;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1510})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<core::integer::u64> = Enum<ut@core::option::Option::<core::integer::u64>, u64, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u64_try_from_felt252 = u64_try_from_felt252;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::integer::u64>, 0> = enum_init<core::option::Option::<core::integer::u64>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::integer::u64>> = store_temp<core::option::Option::<core::integer::u64>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::integer::u64>, 1> = enum_init<core::option::Option::<core::integer::u64>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::option::Option::<core::integer::u64>> = rename<core::option::Option::<core::integer::u64>>;

u64_try_from_felt252([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<core::integer::u64>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([6]); // 3
store_temp<core::option::Option::<core::integer::u64>>([5]) -> ([7]); // 4
jump() { 11() }; // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([8]); // 7
enum_init<core::option::Option::<core::integer::u64>, 1>([8]) -> ([9]); // 8
store_temp<RangeCheck>([4]) -> ([6]); // 9
store_temp<core::option::Option::<core::integer::u64>>([9]) -> ([7]); // 10
rename<RangeCheck>([6]) -> ([10]); // 11
rename<core::option::Option::<core::integer::u64>>([7]) -> ([11]); // 12
return([10], [11]); // 13

test::foo@0([0]: RangeCheck, [1]: felt252) -> (RangeCheck, core::option::Option::<core::integer::u64>);

//! > ==========================================================================

//! > u64_is_zero libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use zeroable::IsZeroResult;
fn foo(a: u64) -> u64 {
    match integer::u64_is_zero(a) {
        IsZeroResult::Zero => 1234_u64,
        IsZeroResult::NonZero(x) => x.into(),
    }
}

//! > casm
jmp rel 6 if [fp + -3] != 0;
[ap + 0] = 1234, ap++;
jmp rel 3;
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<u64> = NonZero<u64> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u64_is_zero = u64_is_zero;
libfunc branch_align = branch_align;
libfunc u64_const<1234> = u64_const<1234>;
libfunc store_temp<u64> = store_temp<u64>;
libfunc jump = jump;
libfunc unwrap_non_zero<u64> = unwrap_non_zero<u64>;
libfunc rename<u64> = rename<u64>;

u64_is_zero([0]) { fallthrough() 5([1]) }; // 0
branch_align() -> (); // 1
u64_const<1234>() -> ([2]); // 2
store_temp<u64>([2]) -> ([3]); // 3
jump() { 8() }; // 4
branch_align() -> (); // 5
unwrap_non_zero<u64>([1]) -> ([4]); // 6
store_temp<u64>([4]) -> ([3]); // 7
rename<u64>([3]) -> ([5]); // 8
return([5]); // 9

test::foo@0([0]: u64) -> (u64);

//! > ==========================================================================

//! > u64_safe_divmod libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u64, b: NonZero::<u64>) -> (u64, u64) {
    integer::u64_safe_divmod(a, b)
}

//! > casm
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -4], memory[fp + -3]) %}
[ap + 4] = [[fp + -5] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[fp + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[fp + -5] + 1], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + -3] = [fp + -3] * [ap + -2];
[fp + -4] = [ap + -3] + [ap + -1];
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1210})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<u64, u64> = Struct<ut@Tuple, u64, u64> [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<u64> = NonZero<u64> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u64_safe_divmod = u64_safe_divmod;
libfunc struct_construct<Tuple<u64, u64>> = struct_construct<Tuple<u64, u64>>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<Tuple<u64, u64>> = store_temp<Tuple<u64, u64>>;

u64_safe_divmod([0], [1], [2]) -> ([3], [4], [5]); // 0
struct_construct<Tuple<u64, u64>>([4], [5]) -> ([6]); // 1
store_temp<RangeCheck>([3]) -> ([7]); // 2
store_temp<Tuple<u64, u64>>([6]) -> ([8]); // 3
return([7], [8]); // 4

test::foo@0([0]: RangeCheck, [1]: u64, [2]: NonZero<u64>) -> (RangeCheck, Tuple<u64, u64>);

//! > ==========================================================================

//! > u64_sqrt libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(value: u64) -> u32 {
    integer::u64_sqrt(value)
}

//! > casm
%{
import math
memory[ap + 5] = math.isqrt(memory[fp + -3])
%}
[ap + 0] = [ap + 5] + 297747071055821155530452781502797185024, ap++;
[ap + 4] = [[fp + -4] + 0], ap++;
[ap + -2] = [[fp + -4] + 1], ap++;
[ap + -2] = [ap + 2] * [ap + 2], ap++;
[fp + -3] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[fp + -4] + 2], ap++;
[ap + -3] = [ap + -1] + [ap + -1];
[ap + -3] = [ap + -2] + [ap + -4];
[ap + -2] = [[fp + -4] + 3];
[ap + 0] = [fp + -4] + 4, ap++;
[ap + 0] = [ap + -2], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1380})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u64_sqrt = u64_sqrt;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<u32> = store_temp<u32>;

u64_sqrt([0], [1]) -> ([2], [3]); // 0
store_temp<RangeCheck>([2]) -> ([4]); // 1
store_temp<u32>([3]) -> ([5]); // 2
return([4], [5]); // 3

test::foo@0([0]: RangeCheck, [1]: u64) -> (RangeCheck, u32);
