//! > bool_xor libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(mut a: bool, b: bool) -> bool {
    a ^ b
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -3], ap++;
[ap + 0] = [ap + -1] * [ap + -1], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 200})

//! > sierra_code
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc bool_xor_impl = bool_xor_impl;
libfunc store_temp<core::bool> = store_temp<core::bool>;

bool_xor_impl([0], [1]) -> ([2]);
store_temp<core::bool>([2]) -> ([3]);
return([3]);

test::foo@0([0]: core::bool, [1]: core::bool) -> (core::bool);

//! > ==========================================================================

//! > bool_or libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: bool, b: bool) -> bool {
    a | b
}

//! > casm
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + 0] = [fp + -4] * [fp + -3], ap++;
[ap + -2] = [ap + 0] + [ap + -1], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc bool_or_impl = bool_or_impl;
libfunc store_temp<core::bool> = store_temp<core::bool>;

bool_or_impl([0], [1]) -> ([2]);
store_temp<core::bool>([2]) -> ([3]);
return([3]);

test::foo@0([0]: core::bool, [1]: core::bool) -> (core::bool);

//! > ==========================================================================

//! > bool_and libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: bool, b: bool) -> bool {
    a & b
}

//! > casm
[ap + 0] = [fp + -4] * [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc bool_and_impl = bool_and_impl;
libfunc store_temp<core::bool> = store_temp<core::bool>;

bool_and_impl([0], [1]) -> ([2]);
store_temp<core::bool>([2]) -> ([3]);
return([3]);

test::foo@0([0]: core::bool, [1]: core::bool) -> (core::bool);

//! > ==========================================================================

//! > bool_not libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: bool) -> bool {
    // TODO(orizi): When inlining is supported move to calling `bool_not` directly.
    !a
}

//! > casm
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 200})

//! > sierra_code
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc bool_not_impl = bool_not_impl;
libfunc store_temp<core::bool> = store_temp<core::bool>;

bool_not_impl([0]) -> ([1]);
store_temp<core::bool>([1]) -> ([2]);
return([2]);

test::foo@0([0]: core::bool) -> (core::bool);

//! > ==========================================================================

//! > bool_eq libfunc (a deref, b deref)

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: bool, b: bool) -> bool {
    a == b
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 6;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 400})

//! > sierra_code
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc snapshot_take<core::bool> = snapshot_take<core::bool>;
libfunc drop<core::bool> = drop<core::bool>;
libfunc rename<core::bool> = rename<core::bool>;
libfunc bool_eq = bool_eq;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;

snapshot_take<core::bool>([0]) -> ([2], [3]);
drop<core::bool>([2]) -> ();
snapshot_take<core::bool>([1]) -> ([4], [5]);
drop<core::bool>([4]) -> ();
rename<core::bool>([3]) -> ([6]);
rename<core::bool>([5]) -> ([7]);
bool_eq([6], [7]) { fallthrough() 12() };
branch_align() -> ();
struct_construct<Unit>() -> ([8]);
enum_init<core::bool, 0>([8]) -> ([9]);
store_temp<core::bool>([9]) -> ([10]);
jump() { 16() };
branch_align() -> ();
struct_construct<Unit>() -> ([11]);
enum_init<core::bool, 1>([11]) -> ([12]);
store_temp<core::bool>([12]) -> ([10]);
rename<core::bool>([10]) -> ([13]);
return([13]);

test::foo@0([0]: core::bool, [1]: core::bool) -> (core::bool);

//! > ==========================================================================

//! > bool_eq libfunc (a immediate, b deref)

//! > test_comments
//! see comment of: bool_eq libfunc (a deref, b deref)

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(b: bool) -> bool {
    true == b
}

//! > casm
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 6;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 500})

//! > sierra_code
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc snapshot_take<core::bool> = snapshot_take<core::bool>;
libfunc drop<core::bool> = drop<core::bool>;
libfunc rename<core::bool> = rename<core::bool>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc bool_eq = bool_eq;
libfunc branch_align = branch_align;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc jump = jump;

struct_construct<Unit>() -> ([1]);
enum_init<core::bool, 1>([1]) -> ([2]);
snapshot_take<core::bool>([2]) -> ([3], [4]);
drop<core::bool>([3]) -> ();
snapshot_take<core::bool>([0]) -> ([5], [6]);
drop<core::bool>([5]) -> ();
rename<core::bool>([4]) -> ([7]);
rename<core::bool>([6]) -> ([8]);
store_temp<core::bool>([7]) -> ([7]);
bool_eq([7], [8]) { fallthrough() 15() };
branch_align() -> ();
struct_construct<Unit>() -> ([9]);
enum_init<core::bool, 0>([9]) -> ([10]);
store_temp<core::bool>([10]) -> ([11]);
jump() { 19() };
branch_align() -> ();
struct_construct<Unit>() -> ([12]);
enum_init<core::bool, 1>([12]) -> ([13]);
store_temp<core::bool>([13]) -> ([11]);
rename<core::bool>([11]) -> ([14]);
return([14]);

test::foo@0([0]: core::bool) -> (core::bool);

//! > ==========================================================================

//! > bool_to_felt252 libfunc.

//! > test_comments
//! see comment of: bool_to_felt252 libfunc.

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: bool) -> felt252 {
    bool_to_felt252(a)
}

//! > casm
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;
type felt252 = felt252;

libfunc bool_to_felt252 = bool_to_felt252;
libfunc store_temp<felt252> = store_temp<felt252>;

bool_to_felt252([0]) -> ([1]);
store_temp<felt252>([1]) -> ([2]);
return([2]);

test::foo@0([0]: core::bool) -> (felt252);
