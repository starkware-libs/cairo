//! > bool_xor libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(mut a: bool, b: bool) -> bool {
    a ^ b
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -3], ap++;
[ap + 0] = [ap + -1] * [ap + -1], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 200})

//! > sierra_code
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc bool_xor_impl = bool_xor_impl;
libfunc store_temp<core::bool> = store_temp<core::bool>;

bool_xor_impl([0], [1]) -> ([2]);
store_temp<core::bool>([2]) -> ([3]);
return([3]);

test::foo@0([0]: core::bool, [1]: core::bool) -> (core::bool);

//! > ==========================================================================

//! > bool_or libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: bool, b: bool) -> bool {
    a | b
}

//! > casm
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + 0] = [fp + -4] * [fp + -3], ap++;
[ap + -2] = [ap + 0] + [ap + -1], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc bool_or_impl = bool_or_impl;
libfunc store_temp<core::bool> = store_temp<core::bool>;

bool_or_impl([0], [1]) -> ([2]);
store_temp<core::bool>([2]) -> ([3]);
return([3]);

test::foo@0([0]: core::bool, [1]: core::bool) -> (core::bool);

//! > ==========================================================================

//! > bool_and libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: bool, b: bool) -> bool {
    a & b
}

//! > casm
[ap + 0] = [fp + -4] * [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc bool_and_impl = bool_and_impl;
libfunc store_temp<core::bool> = store_temp<core::bool>;

bool_and_impl([0], [1]) -> ([2]);
store_temp<core::bool>([2]) -> ([3]);
return([3]);

test::foo@0([0]: core::bool, [1]: core::bool) -> (core::bool);

//! > ==========================================================================

//! > bool_not libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: bool) -> bool {
    // TODO(orizi): When inlining is supported move to calling `bool_not` directly.
    !a
}

//! > casm
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 200})

//! > sierra_code
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc bool_not_impl = bool_not_impl;
libfunc store_temp<core::bool> = store_temp<core::bool>;

bool_not_impl([0]) -> ([1]);
store_temp<core::bool>([1]) -> ([2]);
return([2]);

test::foo@0([0]: core::bool) -> (core::bool);

//! > ==========================================================================

//! > bool_eq libfunc (a deref, b deref)

//! > test_comments
//! Different cases of a,b produce different code. This is why bool_eq has multiple e2e tests.
//! This case produces the same code as the case (a deref, b immediate).

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: bool, b: bool) -> bool {
    a == b
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 6;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = 1, ap++;
jmp rel 2;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 500})

//! > sierra_code
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc bool_eq = bool_eq;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc rename<core::bool> = rename<core::bool>;

bool_eq([0], [1]) { fallthrough() 6() };
branch_align() -> ();
struct_construct<Unit>() -> ([2]);
enum_init<core::bool, 0>([2]) -> ([3]);
store_temp<core::bool>([3]) -> ([4]);
jump() { 11() };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 1>([5]) -> ([6]);
store_temp<core::bool>([6]) -> ([4]);
jump() { 11() };
rename<core::bool>([4]) -> ([7]);
return([7]);

test::foo@0([0]: core::bool, [1]: core::bool) -> (core::bool);

//! > ==========================================================================

//! > bool_eq libfunc (a immediate, b immediate)

//! > test_comments
//! see comment of: bool_eq libfunc (a deref, b deref)

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo() -> bool {
    true == true
}

//! > casm
[ap + 0] = 1, ap++;
[ap + 0] = 1, ap++;
[ap + -2] = [ap + 0] + [ap + -1], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 6;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = 1, ap++;
jmp rel 2;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 700})

//! > sierra_code
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc bool_eq = bool_eq;
libfunc branch_align = branch_align;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc jump = jump;
libfunc rename<core::bool> = rename<core::bool>;

struct_construct<Unit>() -> ([0]);
enum_init<core::bool, 1>([0]) -> ([1]);
struct_construct<Unit>() -> ([2]);
enum_init<core::bool, 1>([2]) -> ([3]);
store_temp<core::bool>([1]) -> ([1]);
store_temp<core::bool>([3]) -> ([3]);
bool_eq([1], [3]) { fallthrough() 12() };
branch_align() -> ();
struct_construct<Unit>() -> ([4]);
enum_init<core::bool, 0>([4]) -> ([5]);
store_temp<core::bool>([5]) -> ([6]);
jump() { 17() };
branch_align() -> ();
struct_construct<Unit>() -> ([7]);
enum_init<core::bool, 1>([7]) -> ([8]);
store_temp<core::bool>([8]) -> ([6]);
jump() { 17() };
rename<core::bool>([6]) -> ([9]);
return([9]);

test::foo@0() -> (core::bool);

//! > ==========================================================================

//! > bool_eq libfunc (a immediate, b deref)

//! > test_comments
//! see comment of: bool_eq libfunc (a deref, b deref)

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(b: bool) -> bool {
    true == b
}

//! > casm
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 6;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = 1, ap++;
jmp rel 2;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 600})

//! > sierra_code
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc bool_eq = bool_eq;
libfunc branch_align = branch_align;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc jump = jump;
libfunc rename<core::bool> = rename<core::bool>;

struct_construct<Unit>() -> ([1]);
enum_init<core::bool, 1>([1]) -> ([2]);
store_temp<core::bool>([2]) -> ([2]);
bool_eq([2], [0]) { fallthrough() 9() };
branch_align() -> ();
struct_construct<Unit>() -> ([3]);
enum_init<core::bool, 0>([3]) -> ([4]);
store_temp<core::bool>([4]) -> ([5]);
jump() { 14() };
branch_align() -> ();
struct_construct<Unit>() -> ([6]);
enum_init<core::bool, 1>([6]) -> ([7]);
store_temp<core::bool>([7]) -> ([5]);
jump() { 14() };
rename<core::bool>([5]) -> ([8]);
return([8]);

test::foo@0([0]: core::bool) -> (core::bool);
