//! > ec_point_zero libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo() -> EcPoint {
    ec_point_zero()
}

//! > casm
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 200})

//! > sierra_code
type EcPoint = EcPoint;

libfunc ec_point_zero = ec_point_zero;
libfunc store_temp<EcPoint> = store_temp<EcPoint>;

ec_point_zero() -> ([0]);
store_temp<EcPoint>([0]) -> ([1]);
return([1]);

test::foo@0() -> (EcPoint);

//! > ==========================================================================

//! > ec_point_try_new_nz libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: felt252, b: felt252) -> Option::<NonZeroEcPoint> {
    ec_point_try_new_nz(a, b)
}

//! > casm
[ap + 0] = [fp + -3] * [fp + -3], ap++;
[ap + 1] = [fp + -4] * [fp + -4], ap++;
[ap + 1] = [ap + 0] * [fp + -4], ap++;
[ap + 1] = [fp + -4] + 3141592653589793238462643383279502884197169399375105820974944592307816406665, ap++;
[ap + -3] = [ap + -1] + [ap + 0], ap++;
[ap + -5] = [ap + 0] + [ap + -4], ap++;
jmp rel 8 if [ap + -1] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 8;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1100})

//! > sierra_code
type felt252 = felt252;
type EcPoint = EcPoint;
type NonZero<EcPoint> = NonZero<EcPoint>;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<core::NonZero::<core::ec::EcPoint>> = Enum<ut@core::option::Option::<core::NonZero::<core::ec::EcPoint>>, NonZero<EcPoint>, Unit>;

libfunc ec_point_try_new_nz = ec_point_try_new_nz;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::NonZero::<core::ec::EcPoint>>, 0> = enum_init<core::option::Option::<core::NonZero::<core::ec::EcPoint>>, 0>;
libfunc store_temp<core::option::Option::<core::NonZero::<core::ec::EcPoint>>> = store_temp<core::option::Option::<core::NonZero::<core::ec::EcPoint>>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::NonZero::<core::ec::EcPoint>>, 1> = enum_init<core::option::Option::<core::NonZero::<core::ec::EcPoint>>, 1>;
libfunc rename<core::option::Option::<core::NonZero::<core::ec::EcPoint>>> = rename<core::option::Option::<core::NonZero::<core::ec::EcPoint>>>;

ec_point_try_new_nz([0], [1]) { fallthrough([2]) 5() };
branch_align() -> ();
enum_init<core::option::Option::<core::NonZero::<core::ec::EcPoint>>, 0>([2]) -> ([3]);
store_temp<core::option::Option::<core::NonZero::<core::ec::EcPoint>>>([3]) -> ([4]);
jump() { 9() };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::option::Option::<core::NonZero::<core::ec::EcPoint>>, 1>([5]) -> ([6]);
store_temp<core::option::Option::<core::NonZero::<core::ec::EcPoint>>>([6]) -> ([4]);
rename<core::option::Option::<core::NonZero::<core::ec::EcPoint>>>([4]) -> ([7]);
return([7]);

test::foo@0([0]: felt252, [1]: felt252) -> (core::option::Option::<core::NonZero::<core::ec::EcPoint>>);

//! > ==========================================================================

//! > ec_point_from_x_nz libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::ec::ec_point_from_x_nz;

fn foo(x: felt252) -> Option::<NonZeroEcPoint> {
    ec_point_from_x_nz(x)
}

//! > casm
[ap + 1] = [fp + -3] * [fp + -3], ap++;
[ap + 1] = [ap + 0] * [fp + -3], ap++;
[ap + 1] = [fp + -3] + 3141592653589793238462643383279502884197169399375105820974944592307816406665, ap++;
[ap + -3] = [ap + -1] + [ap + 0], ap++;
%{
from starkware.crypto.signature.signature import FIELD_PRIME
from starkware.python.math_utils import is_quad_residue, sqrt

val = memory[ap + -4]
if is_quad_residue(val, FIELD_PRIME):
    memory[ap + 0] = sqrt(val, FIELD_PRIME)
else:
    memory[ap + 0] = sqrt(val * 3, FIELD_PRIME)
%}
[ap + 1] = [ap + 0] * [ap + 0], ap++;
[ap + 0] = [ap + 1] + [ap + -5], ap++;
jmp rel 4 if [ap + 0] != 0, ap++;
jmp rel 6;
[ap + -2] = [ap + -7] * 3;
jmp rel 18;
%{
(value, scalar) = (memory[ap + -3], 5316911983139663648412552867652567040)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 5316911983139663648412552867652567040, ap++;
[ap + -4] = [ap + 1] + [ap + 0], ap++;
[ap + -2] = [[fp + -4] + 0], ap++;
[ap + -2] = [[fp + -4] + 1], ap++;
[ap + -1] = [ap + -3] + 334965454937798799814962054564115644415;
[ap + -1] = [[fp + -4] + 2];
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -10], ap++;
jmp rel 11;
ap += 4;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 2110})

//! > sierra_code
type RangeCheck = RangeCheck;
type felt252 = felt252;
type EcPoint = EcPoint;
type NonZero<EcPoint> = NonZero<EcPoint>;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<core::NonZero::<core::ec::EcPoint>> = Enum<ut@core::option::Option::<core::NonZero::<core::ec::EcPoint>>, NonZero<EcPoint>, Unit>;

libfunc ec_point_from_x_nz = ec_point_from_x_nz;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::NonZero::<core::ec::EcPoint>>, 0> = enum_init<core::option::Option::<core::NonZero::<core::ec::EcPoint>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::NonZero::<core::ec::EcPoint>>> = store_temp<core::option::Option::<core::NonZero::<core::ec::EcPoint>>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::NonZero::<core::ec::EcPoint>>, 1> = enum_init<core::option::Option::<core::NonZero::<core::ec::EcPoint>>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::option::Option::<core::NonZero::<core::ec::EcPoint>>> = rename<core::option::Option::<core::NonZero::<core::ec::EcPoint>>>;

ec_point_from_x_nz([0], [1]) { fallthrough([2], [3]) 6([4]) };
branch_align() -> ();
enum_init<core::option::Option::<core::NonZero::<core::ec::EcPoint>>, 0>([3]) -> ([5]);
store_temp<RangeCheck>([2]) -> ([6]);
store_temp<core::option::Option::<core::NonZero::<core::ec::EcPoint>>>([5]) -> ([7]);
jump() { 11() };
branch_align() -> ();
struct_construct<Unit>() -> ([8]);
enum_init<core::option::Option::<core::NonZero::<core::ec::EcPoint>>, 1>([8]) -> ([9]);
store_temp<RangeCheck>([4]) -> ([6]);
store_temp<core::option::Option::<core::NonZero::<core::ec::EcPoint>>>([9]) -> ([7]);
rename<RangeCheck>([6]) -> ([10]);
rename<core::option::Option::<core::NonZero::<core::ec::EcPoint>>>([7]) -> ([11]);
return([10], [11]);

test::foo@0([0]: RangeCheck, [1]: felt252) -> (RangeCheck, core::option::Option::<core::NonZero::<core::ec::EcPoint>>);

//! > ==========================================================================

//! > ec_point_unwrap libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(p: NonZeroEcPoint) -> (felt252, felt252) {
    ec_point_unwrap(p)
}

//! > casm
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 200})

//! > sierra_code
type EcPoint = EcPoint;
type NonZero<EcPoint> = NonZero<EcPoint>;
type felt252 = felt252;
type Tuple<felt252, felt252> = Struct<ut@Tuple, felt252, felt252>;

libfunc ec_point_unwrap = ec_point_unwrap;
libfunc struct_construct<Tuple<felt252, felt252>> = struct_construct<Tuple<felt252, felt252>>;
libfunc store_temp<Tuple<felt252, felt252>> = store_temp<Tuple<felt252, felt252>>;

ec_point_unwrap([0]) -> ([1], [2]);
struct_construct<Tuple<felt252, felt252>>([1], [2]) -> ([3]);
store_temp<Tuple<felt252, felt252>>([3]) -> ([4]);
return([4]);

test::foo@0([0]: NonZero<EcPoint>) -> (Tuple<felt252, felt252>);

//! > ==========================================================================

//! > ec_point_is_zero libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(p: EcPoint) -> felt252 {
    match ec_point_is_zero(p) {
        IsZeroResult::Zero(()) => 1,
        IsZeroResult::NonZero(p_nz) => {
            let (x, y) = ec_point_unwrap(p_nz);
            x
        },
    }
}

//! > casm
jmp rel 6 if [fp + -3] != 0;
[ap + 0] = 1, ap++;
jmp rel 3;
[ap + 0] = [fp + -4], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type EcPoint = EcPoint;
type NonZero<EcPoint> = NonZero<EcPoint>;
type felt252 = felt252;

libfunc ec_point_is_zero = ec_point_is_zero;
libfunc branch_align = branch_align;
libfunc felt252_const<1> = felt252_const<1>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc jump = jump;
libfunc ec_point_unwrap = ec_point_unwrap;
libfunc drop<felt252> = drop<felt252>;
libfunc rename<felt252> = rename<felt252>;

ec_point_is_zero([0]) { fallthrough() 5([1]) };
branch_align() -> ();
felt252_const<1>() -> ([2]);
store_temp<felt252>([2]) -> ([3]);
jump() { 9() };
branch_align() -> ();
ec_point_unwrap([1]) -> ([4], [5]);
drop<felt252>([5]) -> ();
store_temp<felt252>([4]) -> ([3]);
rename<felt252>([3]) -> ([6]);
return([6]);

test::foo@0([0]: EcPoint) -> (felt252);

//! > ==========================================================================

//! > ec_neg libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: EcPoint) -> EcPoint {
    ec_neg(a)
}

//! > casm
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] * -1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 200})

//! > sierra_code
type EcPoint = EcPoint;

libfunc ec_neg = ec_neg;
libfunc store_temp<EcPoint> = store_temp<EcPoint>;

ec_neg([0]) -> ([1]);
store_temp<EcPoint>([1]) -> ([2]);
return([2]);

test::foo@0([0]: EcPoint) -> (EcPoint);

//! > ==========================================================================

//! > ec_state_init libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo() -> EcState {
    ec_state_init()
}

//! > casm
%{
from starkware.crypto.signature.signature import ALPHA, BETA, FIELD_PRIME
from starkware.python.math_utils import random_ec_point
(memory[ap + 0], memory[ap + 1]) = random_ec_point(FIELD_PRIME, ALPHA, BETA)
%}
[ap + 2] = [ap + 1] * [ap + 1], ap++;
[ap + 3] = [ap + -1] * [ap + -1], ap++;
[ap + 3] = [ap + 2] * [ap + -2], ap++;
[ap + 3] = [ap + -3] + 3141592653589793238462643383279502884197169399375105820974944592307816406665, ap++;
[ap + -1] = [ap + 1] + [ap + 2], ap++;
[ap + -3] = [ap + -2], ap++;
%{ memory[ap + 1] = segments.add() %}
[ap + -6] = [[ap + 1] + 0], ap++;
[ap + -6] = [[ap + 0] + 1], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1100})

//! > sierra_code
type EcState = EcState;

libfunc ec_state_init = ec_state_init;
libfunc store_temp<EcState> = store_temp<EcState>;

ec_state_init() -> ([0]);
store_temp<EcState>([0]) -> ([1]);
return([1]);

test::foo@0() -> (EcState);

//! > ==========================================================================

//! > ec_state_add libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref s: EcState, p: NonZeroEcPoint) {
    ec_state_add(ref s, p);
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -3] = [ap + 0] + [fp + -6], ap++;
[ap + -1] = [ap + 0] * [ap + -2], ap++;
[ap + 0] = [ap + -1] * [ap + -1], ap++;
[ap + 0] = [fp + -4] + [fp + -7], ap++;
[ap + -2] = [ap + 0] + [ap + -1], ap++;
[fp + -4] = [ap + 0] + [ap + -1], ap++;
[ap + 0] = [ap + -5] * [ap + -1], ap++;
[ap + -1] = [ap + 0] + [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1300})

//! > sierra_code
type EcState = EcState;
type EcPoint = EcPoint;
type NonZero<EcPoint> = NonZero<EcPoint>;
type Unit = Struct<ut@Tuple>;

libfunc ec_state_add = ec_state_add;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<EcState> = store_temp<EcState>;
libfunc store_temp<Unit> = store_temp<Unit>;

ec_state_add([0], [1]) -> ([2]);
struct_construct<Unit>() -> ([3]);
store_temp<EcState>([2]) -> ([4]);
store_temp<Unit>([3]) -> ([5]);
return([4], [5]);

test::foo@0([0]: EcState, [1]: NonZero<EcPoint>) -> (EcState, Unit);

//! > ==========================================================================

//! > ec_state_try_finalize_nz libfunc and ec_state_finalize

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(s: EcState) -> EcPoint {
    ec_state_finalize(s)
}

//! > casm
[ap + 0] = [[fp + -3] + 0], ap++;
[ap + 0] = [[fp + -3] + 1], ap++;
[fp + -5] = [ap + 0] + [ap + -2], ap++;
jmp rel 5 if [ap + -1] != 0;
[fp + -4] = [ap + -2];
jmp rel 14;
[ap + 0] = [fp + -4] + [ap + -2], ap++;
[ap + -1] = [ap + 0] * [ap + -2], ap++;
[ap + 0] = [ap + -1] * [ap + -1], ap++;
[ap + 0] = [fp + -5] + [ap + -6], ap++;
[ap + -2] = [ap + 0] + [ap + -1], ap++;
[fp + -5] = [ap + 0] + [ap + -1], ap++;
[ap + 0] = [ap + -5] * [ap + -1], ap++;
[ap + -1] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 8;
ap += 8;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1500})

//! > sierra_code
type EcState = EcState;
type EcPoint = EcPoint;
type NonZero<EcPoint> = NonZero<EcPoint>;

libfunc ec_state_try_finalize_nz = ec_state_try_finalize_nz;
libfunc branch_align = branch_align;
libfunc store_temp<NonZero<EcPoint>> = store_temp<NonZero<EcPoint>>;
libfunc unwrap_non_zero<EcPoint> = unwrap_non_zero<EcPoint>;
libfunc rename<EcPoint> = rename<EcPoint>;
libfunc jump = jump;
libfunc ec_point_zero = ec_point_zero;
libfunc store_temp<EcPoint> = store_temp<EcPoint>;

ec_state_try_finalize_nz([0]) { fallthrough([1]) 6() };
branch_align() -> ();
store_temp<NonZero<EcPoint>>([1]) -> ([1]);
unwrap_non_zero<EcPoint>([1]) -> ([2]);
rename<EcPoint>([2]) -> ([3]);
jump() { 9() };
branch_align() -> ();
ec_point_zero() -> ([4]);
store_temp<EcPoint>([4]) -> ([3]);
rename<EcPoint>([3]) -> ([5]);
return([5]);

test::foo@0([0]: EcState) -> (EcPoint);

//! > ==========================================================================

//! > ec_state_add_mul libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref s: EcState, m: felt252, p: NonZeroEcPoint) {
    ec_state_add_mul(ref s, m, p);
}

//! > casm
[fp + -8] = [[fp + -9] + 0];
[fp + -7] = [[fp + -9] + 1];
[fp + -4] = [[fp + -9] + 2];
[fp + -3] = [[fp + -9] + 3];
[fp + -5] = [[fp + -9] + 4];
[ap + 0] = [fp + -9] + 7, ap++;
[ap + 0] = [[fp + -9] + 5], ap++;
[ap + 0] = [[fp + -9] + 6], ap++;
[ap + 0] = [fp + -6], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({EcOp: 1, Const: 900})

//! > sierra_code
type EcOp = EcOp;
type EcState = EcState;
type felt252 = felt252;
type EcPoint = EcPoint;
type NonZero<EcPoint> = NonZero<EcPoint>;
type Unit = Struct<ut@Tuple>;

libfunc ec_state_add_mul = ec_state_add_mul;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<EcOp> = store_temp<EcOp>;
libfunc store_temp<EcState> = store_temp<EcState>;
libfunc store_temp<Unit> = store_temp<Unit>;

ec_state_add_mul([0], [1], [2], [3]) -> ([4], [5]);
struct_construct<Unit>() -> ([6]);
store_temp<EcOp>([4]) -> ([7]);
store_temp<EcState>([5]) -> ([8]);
store_temp<Unit>([6]) -> ([9]);
return([7], [8], [9]);

test::foo@0([0]: EcOp, [1]: EcState, [2]: felt252, [3]: NonZero<EcPoint>) -> (EcOp, EcState, Unit);
