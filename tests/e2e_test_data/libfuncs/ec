//! > ec_point_try_create libfunc

//! > test_comments

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo(a: felt, b: felt) -> Option::<EcPoint> {
    ec_point_try_create(a, b)
}

//! > casm
[ap + 0] = [fp + -3] * [fp + -3], ap++;
[ap + 1] = [fp + -4] * [fp + -4], ap++;
[ap + 1] = [ap + 0] * [fp + -4], ap++;
[ap + 1] = [fp + -4] + 3141592653589793238462643383279502884197169399375105820974944592307816406665, ap++;
[ap + -3] = [ap + -1] + [ap + 0], ap++;
[ap + -5] = [ap + 0] + [ap + -4], ap++;
jmp rel 8 if [ap + -1] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 8;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 12})

//! > sierra_code
type felt = felt;
type EcPoint = EcPoint;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<core::ec::EcPoint> = Enum<ut@core::option::Option::<core::ec::EcPoint>, EcPoint, Unit>;

libfunc ec_point_try_create = ec_point_try_create;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::ec::EcPoint>, 0> = enum_init<core::option::Option::<core::ec::EcPoint>, 0>;
libfunc store_temp<core::option::Option::<core::ec::EcPoint>> = store_temp<core::option::Option::<core::ec::EcPoint>>;
libfunc rename<core::option::Option::<core::ec::EcPoint>> = rename<core::option::Option::<core::ec::EcPoint>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::ec::EcPoint>, 1> = enum_init<core::option::Option::<core::ec::EcPoint>, 1>;

ec_point_try_create([0], [1]) { fallthrough([2]) 6() };
branch_align() -> ();
enum_init<core::option::Option::<core::ec::EcPoint>, 0>([2]) -> ([3]);
store_temp<core::option::Option::<core::ec::EcPoint>>([3]) -> ([3]);
rename<core::option::Option::<core::ec::EcPoint>>([3]) -> ([4]);
jump() { 11() };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::option::Option::<core::ec::EcPoint>, 1>([5]) -> ([6]);
store_temp<core::option::Option::<core::ec::EcPoint>>([6]) -> ([6]);
rename<core::option::Option::<core::ec::EcPoint>>([6]) -> ([4]);
rename<core::option::Option::<core::ec::EcPoint>>([4]) -> ([7]);
return([7]);

test::foo@0([0]: felt, [1]: felt) -> (core::option::Option::<core::ec::EcPoint>);

//! > ==========================================================================

//! > ec_point_unwrap libfunc

//! > test_comments

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo(p: EcPoint) -> (felt, felt) {
    ec_point_unwrap(p)
}

//! > casm
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 2})

//! > sierra_code
type EcPoint = EcPoint;
type felt = felt;
type Tuple<felt, felt> = Struct<ut@Tuple, felt, felt>;

libfunc ec_point_unwrap = ec_point_unwrap;
libfunc struct_construct<Tuple<felt, felt>> = struct_construct<Tuple<felt, felt>>;
libfunc store_temp<Tuple<felt, felt>> = store_temp<Tuple<felt, felt>>;
libfunc rename<Tuple<felt, felt>> = rename<Tuple<felt, felt>>;

ec_point_unwrap([0]) -> ([1], [2]);
struct_construct<Tuple<felt, felt>>([1], [2]) -> ([3]);
store_temp<Tuple<felt, felt>>([3]) -> ([3]);
rename<Tuple<felt, felt>>([3]) -> ([4]);
return([4]);

test::foo@0([0]: EcPoint) -> (Tuple<felt, felt>);

//! > ==========================================================================

//! > ec_init_state libfunc

//! > test_comments

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo() -> EcState {
    ec_init_state()
}

//! > casm
%{
from starkware.crypto.signature.signature import ALPHA, BETA, FIELD_PRIME
from starkware.python.math_utils import random_ec_point
(memory[ap + 0], memory[ap + 1]) = random_ec_point(FIELD_PRIME, ALPHA, BETA)
%}
[ap + 2] = [ap + 1] * [ap + 1], ap++;
[ap + 3] = [ap + -1] * [ap + -1], ap++;
[ap + 3] = [ap + 2] * [ap + -2], ap++;
[ap + 3] = [ap + -3] + 3141592653589793238462643383279502884197169399375105820974944592307816406665, ap++;
[ap + -1] = [ap + 1] + [ap + 2], ap++;
[ap + -3] = [ap + -2], ap++;
%{ memory[ap + 1] = segments.add() %}
[ap + -6] = [[ap + 1] + 0], ap++;
[ap + -6] = [[ap + 0] + 1], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 11})

//! > sierra_code
type EcState = EcState;

libfunc ec_init_state = ec_init_state;
libfunc store_temp<EcState> = store_temp<EcState>;
libfunc rename<EcState> = rename<EcState>;

ec_init_state() -> ([0]);
store_temp<EcState>([0]) -> ([0]);
rename<EcState>([0]) -> ([1]);
return([1]);

test::foo@0() -> (EcState);

//! > ==========================================================================

//! > ec_add_to_state libfunc

//! > test_comments

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo(s: EcState, p: EcPoint) -> EcState {
    ec_add_to_state(s, p)
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 0;
[fp + -3] = [ap + 0] + [fp + -6], ap++;
[ap + -1] = [ap + 0] * [ap + -2], ap++;
[ap + 0] = [ap + -1] * [ap + -1], ap++;
[ap + 0] = [fp + -4] + [fp + -7], ap++;
[ap + -2] = [ap + 0] + [ap + -1], ap++;
[fp + -4] = [ap + 0] + [ap + -1], ap++;
[ap + 0] = [ap + -5] * [ap + -1], ap++;
[ap + -1] = [ap + 0] + [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 12})

//! > sierra_code
type EcState = EcState;
type EcPoint = EcPoint;

libfunc ec_add_to_state = ec_add_to_state;
libfunc store_temp<EcState> = store_temp<EcState>;
libfunc rename<EcState> = rename<EcState>;

ec_add_to_state([0], [1]) -> ([2]);
store_temp<EcState>([2]) -> ([2]);
rename<EcState>([2]) -> ([3]);
return([3]);

test::foo@0([0]: EcState, [1]: EcPoint) -> (EcState);

//! > ==========================================================================

//! > ec_try_finalize_state libfunc

//! > test_comments

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo(s: EcState) -> Option::<EcPoint> {
    ec_try_finalize_state(s)
}

//! > casm
[ap + 0] = [[fp + -3] + 0], ap++;
[ap + 0] = [[fp + -3] + 1], ap++;
[fp + -5] = [ap + 0] + [ap + -2], ap++;
jmp rel 5 if [ap + -1] != 0;
[fp + -4] = [ap + -2];
jmp rel 16;
[ap + 0] = [fp + -4] + [ap + -2], ap++;
[ap + -1] = [ap + 0] * [ap + -2], ap++;
[ap + 0] = [ap + -1] * [ap + -1], ap++;
[ap + 0] = [fp + -5] + [ap + -6], ap++;
[ap + -2] = [ap + 0] + [ap + -1], ap++;
[fp + -5] = [ap + 0] + [ap + -1], ap++;
[ap + 0] = [ap + -5] * [ap + -1], ap++;
[ap + -1] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 10;
ap += 8;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 19})

//! > sierra_code
type EcState = EcState;
type EcPoint = EcPoint;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<core::ec::EcPoint> = Enum<ut@core::option::Option::<core::ec::EcPoint>, EcPoint, Unit>;

libfunc ec_try_finalize_state = ec_try_finalize_state;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::ec::EcPoint>, 0> = enum_init<core::option::Option::<core::ec::EcPoint>, 0>;
libfunc store_temp<core::option::Option::<core::ec::EcPoint>> = store_temp<core::option::Option::<core::ec::EcPoint>>;
libfunc rename<core::option::Option::<core::ec::EcPoint>> = rename<core::option::Option::<core::ec::EcPoint>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::ec::EcPoint>, 1> = enum_init<core::option::Option::<core::ec::EcPoint>, 1>;

ec_try_finalize_state([0]) { fallthrough([1]) 6() };
branch_align() -> ();
enum_init<core::option::Option::<core::ec::EcPoint>, 0>([1]) -> ([2]);
store_temp<core::option::Option::<core::ec::EcPoint>>([2]) -> ([2]);
rename<core::option::Option::<core::ec::EcPoint>>([2]) -> ([3]);
jump() { 11() };
branch_align() -> ();
struct_construct<Unit>() -> ([4]);
enum_init<core::option::Option::<core::ec::EcPoint>, 1>([4]) -> ([5]);
store_temp<core::option::Option::<core::ec::EcPoint>>([5]) -> ([5]);
rename<core::option::Option::<core::ec::EcPoint>>([5]) -> ([3]);
rename<core::option::Option::<core::ec::EcPoint>>([3]) -> ([6]);
return([6]);

test::foo@0([0]: EcState) -> (core::option::Option::<core::ec::EcPoint>);

//! > ==========================================================================

//! > ec_op_builtin libfunc

//! > test_comments

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo(s: EcState, m: felt, p: EcPoint) -> EcState {
    ec_op_builtin(s, m, p)
}

//! > casm
[fp + -8] = [[fp + -9] + 0];
[fp + -7] = [[fp + -9] + 1];
[fp + -4] = [[fp + -9] + 2];
[fp + -3] = [[fp + -9] + 3];
[fp + -5] = [[fp + -9] + 4];
[ap + 0] = [fp + -9] + 7, ap++;
[ap + 0] = [[fp + -9] + 5], ap++;
[ap + 0] = [[fp + -9] + 6], ap++;
[ap + 0] = [fp + -6], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 9, EcOp: 1})

//! > sierra_code
type EcOp = EcOp;
type EcState = EcState;
type felt = felt;
type EcPoint = EcPoint;

libfunc ec_op_builtin = ec_op_builtin;
libfunc store_temp<EcOp> = store_temp<EcOp>;
libfunc rename<EcOp> = rename<EcOp>;
libfunc store_temp<EcState> = store_temp<EcState>;
libfunc rename<EcState> = rename<EcState>;

ec_op_builtin([0], [1], [2], [3]) -> ([4], [5]);
store_temp<EcOp>([4]) -> ([4]);
rename<EcOp>([4]) -> ([6]);
store_temp<EcState>([5]) -> ([5]);
rename<EcState>([5]) -> ([7]);
return([6], [7]);

test::foo@0([0]: EcOp, [1]: EcState, [2]: felt, [3]: EcPoint) -> (EcOp, EcState);
