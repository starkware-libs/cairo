//! > Array snapshot.

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: Array::<felt252>) -> Array::<felt252> {
    bar(@a);
    a
}
fn bar(a: @Array::<felt252>) {
}

//! > casm
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 5;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 600})
test::bar: OrderedHashMap({})

//! > sierra_code
type felt252 = felt252;
type Array<felt252> = Array<felt252>;
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>>;
type Unit = Struct<ut@Tuple>;

libfunc snapshot_take<Array<felt252>> = snapshot_take<Array<felt252>>;
libfunc store_temp<Snapshot<Array<felt252>>> = store_temp<Snapshot<Array<felt252>>>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc drop<Unit> = drop<Unit>;
libfunc store_temp<Array<felt252>> = store_temp<Array<felt252>>;
libfunc drop<Snapshot<Array<felt252>>> = drop<Snapshot<Array<felt252>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;

snapshot_take<Array<felt252>>([0]) -> ([1], [2]);
store_temp<Snapshot<Array<felt252>>>([2]) -> ([4]);
function_call<user@test::bar>([4]) -> ([3]);
drop<Unit>([3]) -> ();
store_temp<Array<felt252>>([1]) -> ([5]);
return([5]);
drop<Snapshot<Array<felt252>>>([0]) -> ();
struct_construct<Unit>() -> ([1]);
store_temp<Unit>([1]) -> ([2]);
return([2]);

test::foo@0([0]: Array<felt252>) -> (Array<felt252>);
test::bar@6([0]: Snapshot<Array<felt252>>) -> (Unit);

//! > ==========================================================================

//! > struct snapshot.

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
struct A {
    a: Array::<felt252>,
    b: felt252,
}
fn foo(orig: @A) -> @A{
    bar(orig.a, orig.b);
    let A {a, b} = orig;
    bar(a, b);
    orig
}
fn bar(a: @Array::<felt252>, b: @felt252) {
}

//! > casm
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 11;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 6;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1300})
test::bar: OrderedHashMap({})

//! > sierra_code
type felt252 = felt252;
type Array<felt252> = Array<felt252>;
type test::A = Struct<ut@test::A, Array<felt252>, felt252>;
type Snapshot<test::A> = Snapshot<test::A>;
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>>;
type Unit = Struct<ut@Tuple>;

libfunc dup<Snapshot<test::A>> = dup<Snapshot<test::A>>;
libfunc struct_snapshot_deconstruct<test::A> = struct_snapshot_deconstruct<test::A>;
libfunc drop<felt252> = drop<felt252>;
libfunc drop<Snapshot<Array<felt252>>> = drop<Snapshot<Array<felt252>>>;
libfunc store_temp<Snapshot<Array<felt252>>> = store_temp<Snapshot<Array<felt252>>>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc drop<Unit> = drop<Unit>;
libfunc store_temp<Snapshot<test::A>> = store_temp<Snapshot<test::A>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;

dup<Snapshot<test::A>>([0]) -> ([0], [1]);
struct_snapshot_deconstruct<test::A>([1]) -> ([2], [3]);
drop<felt252>([3]) -> ();
dup<Snapshot<test::A>>([0]) -> ([0], [4]);
struct_snapshot_deconstruct<test::A>([4]) -> ([5], [6]);
drop<Snapshot<Array<felt252>>>([5]) -> ();
store_temp<Snapshot<Array<felt252>>>([2]) -> ([8]);
store_temp<felt252>([6]) -> ([9]);
function_call<user@test::bar>([8], [9]) -> ([7]);
drop<Unit>([7]) -> ();
dup<Snapshot<test::A>>([0]) -> ([0], [10]);
struct_snapshot_deconstruct<test::A>([10]) -> ([11], [12]);
store_temp<Snapshot<Array<felt252>>>([11]) -> ([14]);
store_temp<felt252>([12]) -> ([15]);
function_call<user@test::bar>([14], [15]) -> ([13]);
drop<Unit>([13]) -> ();
store_temp<Snapshot<test::A>>([0]) -> ([16]);
return([16]);
drop<Snapshot<Array<felt252>>>([0]) -> ();
drop<felt252>([1]) -> ();
struct_construct<Unit>() -> ([2]);
store_temp<Unit>([2]) -> ([3]);
return([3]);

test::foo@0([0]: Snapshot<test::A>) -> (Snapshot<test::A>);
test::bar@18([0]: Snapshot<Array<felt252>>, [1]: felt252) -> (Unit);

//! > ==========================================================================

//! > enum snapshot.

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
enum A {
    A: Array::<felt252>,
    B: felt252,
}
fn bar0(a: @Array::<felt252>) {
}
fn bar1(b: @felt252) {
}
fn foo(orig: @A) -> @A {
    match orig {
      A::A(a) => bar0(a),
      A::B(b) => bar1(b),
    }
    orig
  }

//! > casm
ret;
ret;
jmp rel 8 if [fp + -5] != 0;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -6;
jmp rel 7;
ap += 1;
[ap + 0] = [fp + -3], ap++;
call rel -12;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::bar0: OrderedHashMap({})
test::bar1: OrderedHashMap({})
test::foo: OrderedHashMap({Const: 900})

//! > sierra_code
type felt252 = felt252;
type Array<felt252> = Array<felt252>;
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>>;
type Unit = Struct<ut@Tuple>;
type test::A = Enum<ut@test::A, Array<felt252>, felt252>;
type Snapshot<test::A> = Snapshot<test::A>;

libfunc drop<Snapshot<Array<felt252>>> = drop<Snapshot<Array<felt252>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc drop<felt252> = drop<felt252>;
libfunc dup<Snapshot<test::A>> = dup<Snapshot<test::A>>;
libfunc enum_snapshot_match<test::A> = enum_snapshot_match<test::A>;
libfunc branch_align = branch_align;
libfunc store_temp<Snapshot<Array<felt252>>> = store_temp<Snapshot<Array<felt252>>>;
libfunc function_call<user@test::bar0> = function_call<user@test::bar0>;
libfunc drop<Unit> = drop<Unit>;
libfunc jump = jump;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc function_call<user@test::bar1> = function_call<user@test::bar1>;
libfunc store_temp<Snapshot<test::A>> = store_temp<Snapshot<test::A>>;

drop<Snapshot<Array<felt252>>>([0]) -> ();
struct_construct<Unit>() -> ([1]);
store_temp<Unit>([1]) -> ([2]);
return([2]);
drop<felt252>([0]) -> ();
struct_construct<Unit>() -> ([1]);
store_temp<Unit>([1]) -> ([2]);
return([2]);
dup<Snapshot<test::A>>([0]) -> ([0], [3]);
enum_snapshot_match<test::A>([3]) { fallthrough([1]) 15([2]) };
branch_align() -> ();
store_temp<Snapshot<Array<felt252>>>([1]) -> ([5]);
function_call<user@test::bar0>([5]) -> ([4]);
drop<Unit>([4]) -> ();
jump() { 19() };
branch_align() -> ();
store_temp<felt252>([2]) -> ([7]);
function_call<user@test::bar1>([7]) -> ([6]);
drop<Unit>([6]) -> ();
store_temp<Snapshot<test::A>>([0]) -> ([8]);
return([8]);

test::bar0@0([0]: Snapshot<Array<felt252>>) -> (Unit);
test::bar1@4([0]: felt252) -> (Unit);
test::foo@8([0]: Snapshot<test::A>) -> (Snapshot<test::A>);
