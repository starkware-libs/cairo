//! > Array snapshot.

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: Array::<felt252>) -> Array::<felt252> {
    bar(@a);
    a
}
#[inline(never)]
fn bar(a: @Array::<felt252>) {
}

//! > casm
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 5;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 600})
test::bar: OrderedHashMap({})

//! > sierra_code
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc snapshot_take<Array<felt252>> = snapshot_take<Array<felt252>>;
libfunc store_temp<Snapshot<Array<felt252>>> = store_temp<Snapshot<Array<felt252>>>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc drop<Unit> = drop<Unit>;
libfunc store_temp<Array<felt252>> = store_temp<Array<felt252>>;
libfunc drop<Snapshot<Array<felt252>>> = drop<Snapshot<Array<felt252>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;

snapshot_take<Array<felt252>>([0]) -> ([1], [2]); // 0
store_temp<Snapshot<Array<felt252>>>([2]) -> ([2]); // 1
function_call<user@test::bar>([2]) -> ([3]); // 2
drop<Unit>([3]) -> (); // 3
store_temp<Array<felt252>>([1]) -> ([1]); // 4
return([1]); // 5
drop<Snapshot<Array<felt252>>>([0]) -> (); // 6
struct_construct<Unit>() -> ([1]); // 7
return([1]); // 8

test::foo@0([0]: Array<felt252>) -> (Array<felt252>);
test::bar@6([0]: Snapshot<Array<felt252>>) -> (Unit);

//! > ==========================================================================

//! > struct snapshot.

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
struct A {
    a: Array::<felt252>,
    b: felt252,
}
fn foo(orig: @A) -> @A{
    bar(orig.a, orig.b);
    let A {a, b} = orig;
    bar(a, b);
    orig
}
#[inline(never)]
fn bar(a: @Array::<felt252>, b: @felt252) {
}

//! > casm
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 11;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 6;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1300})
test::bar: OrderedHashMap({})

//! > sierra_code
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type test::A = Struct<ut@test::A, Array<felt252>, felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Snapshot<test::A> = Snapshot<test::A> [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc dup<Snapshot<test::A>> = dup<Snapshot<test::A>>;
libfunc struct_snapshot_deconstruct<test::A> = struct_snapshot_deconstruct<test::A>;
libfunc drop<felt252> = drop<felt252>;
libfunc drop<Snapshot<Array<felt252>>> = drop<Snapshot<Array<felt252>>>;
libfunc store_temp<Snapshot<Array<felt252>>> = store_temp<Snapshot<Array<felt252>>>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc drop<Unit> = drop<Unit>;
libfunc store_temp<Snapshot<test::A>> = store_temp<Snapshot<test::A>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;

dup<Snapshot<test::A>>([0]) -> ([0], [1]); // 0
struct_snapshot_deconstruct<test::A>([1]) -> ([2], [3]); // 1
drop<felt252>([3]) -> (); // 2
dup<Snapshot<test::A>>([0]) -> ([0], [4]); // 3
struct_snapshot_deconstruct<test::A>([4]) -> ([5], [6]); // 4
drop<Snapshot<Array<felt252>>>([5]) -> (); // 5
store_temp<Snapshot<Array<felt252>>>([2]) -> ([2]); // 6
store_temp<felt252>([6]) -> ([6]); // 7
function_call<user@test::bar>([2], [6]) -> ([7]); // 8
drop<Unit>([7]) -> (); // 9
dup<Snapshot<test::A>>([0]) -> ([0], [8]); // 10
struct_snapshot_deconstruct<test::A>([8]) -> ([9], [10]); // 11
store_temp<Snapshot<Array<felt252>>>([9]) -> ([9]); // 12
store_temp<felt252>([10]) -> ([10]); // 13
function_call<user@test::bar>([9], [10]) -> ([11]); // 14
drop<Unit>([11]) -> (); // 15
store_temp<Snapshot<test::A>>([0]) -> ([0]); // 16
return([0]); // 17
drop<Snapshot<Array<felt252>>>([0]) -> (); // 18
drop<felt252>([1]) -> (); // 19
struct_construct<Unit>() -> ([2]); // 20
return([2]); // 21

test::foo@0([0]: Snapshot<test::A>) -> (Snapshot<test::A>);
test::bar@18([0]: Snapshot<Array<felt252>>, [1]: felt252) -> (Unit);

//! > ==========================================================================

//! > enum snapshot.

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
enum A {
    A: Array::<felt252>,
    B: felt252,
}
#[inline(never)]
fn bar0(a: @Array::<felt252>) {
}
#[inline(never)]
fn bar1(b: @felt252) {
}
fn foo(orig: @A) -> @A {
    match orig {
      A::A(a) => bar0(a),
      A::B(b) => bar1(b),
    }
    orig
  }

//! > casm
ret;
ret;
jmp rel 10 if [fp + -5] != 0;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -6;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
ap += 1;
[ap + 0] = [fp + -3], ap++;
call rel -14;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::bar0: OrderedHashMap({})
test::bar1: OrderedHashMap({})
test::foo: OrderedHashMap({Const: 810})

//! > sierra_code
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type test::A = Enum<ut@test::A, Array<felt252>, felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Snapshot<test::A> = Snapshot<test::A> [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];

libfunc drop<Snapshot<Array<felt252>>> = drop<Snapshot<Array<felt252>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc drop<felt252> = drop<felt252>;
libfunc dup<Snapshot<test::A>> = dup<Snapshot<test::A>>;
libfunc enum_snapshot_match<test::A> = enum_snapshot_match<test::A>;
libfunc branch_align = branch_align;
libfunc store_temp<Snapshot<Array<felt252>>> = store_temp<Snapshot<Array<felt252>>>;
libfunc function_call<user@test::bar0> = function_call<user@test::bar0>;
libfunc drop<Unit> = drop<Unit>;
libfunc store_temp<Snapshot<test::A>> = store_temp<Snapshot<test::A>>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc function_call<user@test::bar1> = function_call<user@test::bar1>;

drop<Snapshot<Array<felt252>>>([0]) -> (); // 0
struct_construct<Unit>() -> ([1]); // 1
return([1]); // 2
drop<felt252>([0]) -> (); // 3
struct_construct<Unit>() -> ([1]); // 4
return([1]); // 5
dup<Snapshot<test::A>>([0]) -> ([0], [1]); // 6
enum_snapshot_match<test::A>([1]) { fallthrough([2]) 14([3]) }; // 7
branch_align() -> (); // 8
store_temp<Snapshot<Array<felt252>>>([2]) -> ([2]); // 9
function_call<user@test::bar0>([2]) -> ([4]); // 10
drop<Unit>([4]) -> (); // 11
store_temp<Snapshot<test::A>>([0]) -> ([0]); // 12
return([0]); // 13
branch_align() -> (); // 14
store_temp<felt252>([3]) -> ([3]); // 15
function_call<user@test::bar1>([3]) -> ([5]); // 16
drop<Unit>([5]) -> (); // 17
store_temp<Snapshot<test::A>>([0]) -> ([0]); // 18
return([0]); // 19

test::bar0@0([0]: Snapshot<Array<felt252>>) -> (Unit);
test::bar1@3([0]: felt252) -> (Unit);
test::foo@6([0]: Snapshot<test::A>) -> (Snapshot<test::A>);
