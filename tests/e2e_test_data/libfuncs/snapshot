//! > array_new libfunc

//! > test_comments

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo(a: Array::<felt>) -> Array::<felt> {
    bar(@a);
    a
}
fn bar(a: @Array::<felt>) {
}

//! > casm
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 5;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 600})
test::bar: OrderedHashMap({})

//! > sierra_code
type felt = felt;
type Array<felt> = Array<felt>;
type Snapshot<Array<felt>> = Snapshot<Array<felt>>;
type Unit = Struct<ut@Tuple>;

libfunc snapshot_take<Array<felt>> = snapshot_take<Array<felt>>;
libfunc store_temp<Snapshot<Array<felt>>> = store_temp<Snapshot<Array<felt>>>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc drop<Unit> = drop<Unit>;
libfunc store_temp<Array<felt>> = store_temp<Array<felt>>;
libfunc drop<Snapshot<Array<felt>>> = drop<Snapshot<Array<felt>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;

snapshot_take<Array<felt>>([0]) -> ([0], [1]);
store_temp<Snapshot<Array<felt>>>([1]) -> ([3]);
function_call<user@test::bar>([3]) -> ([2]);
drop<Unit>([2]) -> ();
store_temp<Array<felt>>([0]) -> ([4]);
return([4]);
drop<Snapshot<Array<felt>>>([0]) -> ();
struct_construct<Unit>() -> ([1]);
store_temp<Unit>([1]) -> ([2]);
return([2]);

test::foo@0([0]: Array<felt>) -> (Array<felt>);
test::bar@6([0]: Snapshot<Array<felt>>) -> (Unit);
