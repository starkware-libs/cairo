//! > const felt252

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
extern type Const<T, const VALUE: T>;
extern fn const_as_box<T>() -> Box<felt252> nopanic;

fn foo() -> Box<felt252> {
    const_as_box::<Const<felt252, 100>>()
}

//! > casm
call rel 5;
[ap + 0] = [ap + -1] + 4, ap++;
ret;
ret;
dw 100;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type Box<felt252> = Box<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 100> = Const<felt252, 100> [storable: false, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc const_as_box<Const<felt252, 100>> = const_as_box<Const<felt252, 100>>;

const_as_box<Const<felt252, 100>>() -> ([0]); // 0
return([0]); // 1

test::foo@0() -> (Box<felt252>);

//! > ==========================================================================

//! > const u8

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
extern type Const<T, const VALUE: T>;
extern fn const_as_box<T>() -> Box<u8> nopanic;

fn foo() -> Box<u8> {
    const_as_box::<Const<u8, 100>>()
}

//! > casm
call rel 5;
[ap + 0] = [ap + -1] + 4, ap++;
ret;
ret;
dw 100;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type Box<u8> = Box<u8> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<u8, 100> = Const<u8, 100> [storable: false, drop: false, dup: false, zero_sized: false];
type u8 = u8 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc const_as_box<Const<u8, 100>> = const_as_box<Const<u8, 100>>;

const_as_box<Const<u8, 100>>() -> ([0]); // 0
return([0]); // 1

test::foo@0() -> (Box<u8>);

//! > ==========================================================================

//! > const i16

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
extern type Const<T, const VALUE: T>;
extern fn const_as_box<T>() -> Box<i16> nopanic;

fn foo() -> Box<i16> {
    const_as_box::<Const<i16, -1000>>()
}

//! > casm
call rel 5;
[ap + 0] = [ap + -1] + 4, ap++;
ret;
ret;
dw -1000;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type Box<i16> = Box<i16> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<i16, -1000> = Const<i16, -1000> [storable: false, drop: false, dup: false, zero_sized: false];
type i16 = i16 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc const_as_box<Const<i16, -1000>> = const_as_box<Const<i16, -1000>>;

const_as_box<Const<i16, -1000>>() -> ([0]); // 0
return([0]); // 1

test::foo@0() -> (Box<i16>);

//! > ==========================================================================

//! > const u256

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
mod value { extern type Const<T, const VALUE: T>; }
mod struct2 { extern type Const<T, C0, C1>; }
extern fn const_as_box<T>() -> Box<u256> nopanic;

fn foo() -> Box<u256> {
    const_as_box::<struct2::Const<
        u256,
        value::Const<u128, 0x10>,
        value::Const<u128, 0x20>,
    >>()
}

//! > casm
call rel 5;
[ap + 0] = [ap + -1] + 4, ap++;
ret;
ret;
dw 16;
dw 32;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type Box<core::integer::u256> = Box<core::integer::u256> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>> = Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>> [storable: false, drop: false, dup: false, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<u128, 32> = Const<u128, 32> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 16> = Const<u128, 16> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_box<Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>>> = const_as_box<Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>>>;

const_as_box<Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>>>() -> ([0]); // 0
return([0]); // 1

test::foo@0() -> (Box<core::integer::u256>);

//! > ==========================================================================

//! > const bool

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
mod struct0 { extern type Const<T>; }
mod enum_value { extern type Const<T, const VARIANT_INDEX: felt252, V>; }
extern fn const_as_box<T>() -> Box<bool> nopanic;

fn foo() -> Box<bool> {
    const_as_box::<enum_value::Const<
        bool,
        0,
        struct0::Const<()>,
    >>()
}

//! > casm
call rel 5;
[ap + 0] = [ap + -1] + 4, ap++;
ret;
ret;
dw 0;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type Box<core::bool> = Box<core::bool> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<core::bool, 0, Const<Unit>> = Const<core::bool, 0, Const<Unit>> [storable: false, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::bool = Enum<ut@core::bool, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<Unit> = Const<Unit> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_box<Const<core::bool, 0, Const<Unit>>> = const_as_box<Const<core::bool, 0, Const<Unit>>>;

const_as_box<Const<core::bool, 0, Const<Unit>>>() -> ([0]); // 0
return([0]); // 1

test::foo@0() -> (Box<core::bool>);

//! > ==========================================================================

//! > const complex

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
mod enum_value { extern type Const<T, const VARIANT_INDEX: felt252, V>; }
mod value { extern type Const<T, const VALUE: T>; }
mod struct2 { extern type Const<T, C0, C1>; }
extern fn const_as_box<T>() -> Box<ThreeOptions> nopanic;

enum ThreeOptions {
    A: felt252,
    B: u256,
    C,
}

fn foo() -> Box<ThreeOptions> {
    const_as_box::<enum_value::Const<
    ThreeOptions,
        1,
        struct2::Const<
            u256,
            value::Const<u128, 0x10>,
            value::Const<u128, 0x20>,
        >,
    >>()
}

//! > casm
call rel 5;
[ap + 0] = [ap + -1] + 4, ap++;
ret;
ret;
dw 3;
dw 16;
dw 32;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type Box<test::ThreeOptions> = Box<test::ThreeOptions> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<test::ThreeOptions, 1, Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>>> = Const<test::ThreeOptions, 1, Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>>> [storable: false, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type test::ThreeOptions = Enum<ut@test::ThreeOptions, felt252, core::integer::u256, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>> = Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 32> = Const<u128, 32> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 16> = Const<u128, 16> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_box<Const<test::ThreeOptions, 1, Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>>>> = const_as_box<Const<test::ThreeOptions, 1, Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>>>>;

const_as_box<Const<test::ThreeOptions, 1, Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>>>>() -> ([0]); // 0
return([0]); // 1

test::foo@0() -> (Box<test::ThreeOptions>);

//! > ==========================================================================

//! > const complex with padding

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
mod enum_value { extern type Const<T, const VARIANT_INDEX: felt252, V>; }
mod value { extern type Const<T, const VALUE: T>; }
extern fn const_as_box<T>() -> Box<ThreeOptions> nopanic;

enum ThreeOptions {
    A: felt252,
    B: u256,
    C,
}

fn foo() -> Box<ThreeOptions> {
    const_as_box::<enum_value::Const<
    ThreeOptions,
        0,
        value::Const<felt252, 1337>,
    >>()
}

//! > casm
call rel 5;
[ap + 0] = [ap + -1] + 4, ap++;
ret;
ret;
dw 5;
dw 0;
dw 1337;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type Box<test::ThreeOptions> = Box<test::ThreeOptions> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<test::ThreeOptions, 0, Const<felt252, 1337>> = Const<test::ThreeOptions, 0, Const<felt252, 1337>> [storable: false, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type test::ThreeOptions = Enum<ut@test::ThreeOptions, felt252, core::integer::u256, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 1337> = Const<felt252, 1337> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_box<Const<test::ThreeOptions, 0, Const<felt252, 1337>>> = const_as_box<Const<test::ThreeOptions, 0, Const<felt252, 1337>>>;

const_as_box<Const<test::ThreeOptions, 0, Const<felt252, 1337>>>() -> ([0]); // 0
return([0]); // 1

test::foo@0() -> (Box<test::ThreeOptions>);
