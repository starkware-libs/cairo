//! > const felt252

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
extern type Const<T, const VALUE: T>;
extern fn const_as_box<T, const SEGMENT_INDEX: felt252>() -> Box<felt252> nopanic;

fn foo() -> Box<felt252> {
    const_as_box::<Const<felt252, 100>, 0>()
}

//! > casm
call rel 5;
[ap + 0] = [ap + -1] + 4, ap++;
ret;
ret;
dw 100;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type Box<felt252> = Box<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 100> = Const<felt252, 100> [storable: false, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc const_as_box<Const<felt252, 100>, 0> = const_as_box<Const<felt252, 100>, 0>;

const_as_box<Const<felt252, 100>, 0>() -> ([0]); // 0
return([0]); // 1

test::foo@0() -> (Box<felt252>);

//! > ==========================================================================

//! > const u8

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
extern type Const<T, const VALUE: T>;
extern fn const_as_box<T, const SEGMENT_INDEX: felt252>() -> Box<u8> nopanic;

fn foo() -> Box<u8> {
    const_as_box::<Const<u8, 100>, 0>()
}

//! > casm
call rel 5;
[ap + 0] = [ap + -1] + 4, ap++;
ret;
ret;
dw 100;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type Box<u8> = Box<u8> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<u8, 100> = Const<u8, 100> [storable: false, drop: false, dup: false, zero_sized: false];
type u8 = u8 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc const_as_box<Const<u8, 100>, 0> = const_as_box<Const<u8, 100>, 0>;

const_as_box<Const<u8, 100>, 0>() -> ([0]); // 0
return([0]); // 1

test::foo@0() -> (Box<u8>);

//! > ==========================================================================

//! > const i16

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
extern type Const<T, const VALUE: T>;
extern fn const_as_box<T, const SEGMENT_INDEX: felt252>() -> Box<i16> nopanic;

fn foo() -> Box<i16> {
    const_as_box::<Const<i16, -1000>, 0>()
}

//! > casm
call rel 5;
[ap + 0] = [ap + -1] + 4, ap++;
ret;
ret;
dw -1000;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type Box<i16> = Box<i16> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<i16, -1000> = Const<i16, -1000> [storable: false, drop: false, dup: false, zero_sized: false];
type i16 = i16 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc const_as_box<Const<i16, -1000>, 0> = const_as_box<Const<i16, -1000>, 0>;

const_as_box<Const<i16, -1000>, 0>() -> ([0]); // 0
return([0]); // 1

test::foo@0() -> (Box<i16>);

//! > ==========================================================================

//! > const u256

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
mod value { extern type Const<T, const VALUE: T>; }
mod struct2 { extern type Const<T, C0, C1>; }
extern fn const_as_box<T, const SEGMENT_INDEX: felt252>() -> Box<u256> nopanic;

fn foo() -> Box<u256> {
    const_as_box::<
        struct2::Const<u256, value::Const<u128, 0x10>, value::Const<u128, 0x20>>,
        0
    >()
}

//! > casm
call rel 5;
[ap + 0] = [ap + -1] + 4, ap++;
ret;
ret;
dw 16;
dw 32;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type Box<core::integer::u256> = Box<core::integer::u256> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>> = Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>> [storable: false, drop: false, dup: false, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<u128, 32> = Const<u128, 32> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 16> = Const<u128, 16> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_box<Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>>, 0> = const_as_box<Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>>, 0>;

const_as_box<Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>>, 0>() -> ([0]); // 0
return([0]); // 1

test::foo@0() -> (Box<core::integer::u256>);

//! > ==========================================================================

//! > const bool

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
mod struct0 { extern type Const<T>; }
mod enum_value { extern type Const<T, const VARIANT_INDEX: felt252, V>; }
extern fn const_as_box<T, const SEGMENT_INDEX: felt252>() -> Box<bool> nopanic;

fn foo() -> Box<bool> {
    const_as_box::<enum_value::Const<bool, 0, struct0::Const<()>>, 0>()
}

//! > casm
call rel 5;
[ap + 0] = [ap + -1] + 4, ap++;
ret;
ret;
dw 0;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type Box<core::bool> = Box<core::bool> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<core::bool, 0, Const<Unit>> = Const<core::bool, 0, Const<Unit>> [storable: false, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::bool = Enum<ut@core::bool, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<Unit> = Const<Unit> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_box<Const<core::bool, 0, Const<Unit>>, 0> = const_as_box<Const<core::bool, 0, Const<Unit>>, 0>;

const_as_box<Const<core::bool, 0, Const<Unit>>, 0>() -> ([0]); // 0
return([0]); // 1

test::foo@0() -> (Box<core::bool>);

//! > ==========================================================================

//! > const complex

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
mod enum_value { extern type Const<T, const VARIANT_INDEX: felt252, V>; }
mod value { extern type Const<T, const VALUE: T>; }
mod struct2 { extern type Const<T, C0, C1>; }
extern fn const_as_box<T, const SEGMENT_INDEX: felt252>() -> Box<ThreeOptions> nopanic;

enum ThreeOptions {
    A: felt252,
    B: u256,
    C,
}

fn foo() -> Box<ThreeOptions> {
    const_as_box::<
        enum_value::Const<
            ThreeOptions,
            1,
            struct2::Const<u256, value::Const<u128, 0x10>, value::Const<u128, 0x20>>,
        >,
        0
    >()
}

//! > casm
call rel 5;
[ap + 0] = [ap + -1] + 4, ap++;
ret;
ret;
dw 3;
dw 16;
dw 32;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type Box<test::ThreeOptions> = Box<test::ThreeOptions> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<test::ThreeOptions, 1, Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>>> = Const<test::ThreeOptions, 1, Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>>> [storable: false, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type test::ThreeOptions = Enum<ut@test::ThreeOptions, felt252, core::integer::u256, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>> = Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 32> = Const<u128, 32> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 16> = Const<u128, 16> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_box<Const<test::ThreeOptions, 1, Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>>>, 0> = const_as_box<Const<test::ThreeOptions, 1, Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>>>, 0>;

const_as_box<Const<test::ThreeOptions, 1, Const<core::integer::u256, Const<u128, 16>, Const<u128, 32>>>, 0>() -> ([0]); // 0
return([0]); // 1

test::foo@0() -> (Box<test::ThreeOptions>);

//! > ==========================================================================

//! > const complex with padding

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
mod enum_value { extern type Const<T, const VARIANT_INDEX: felt252, V>; }
mod value { extern type Const<T, const VALUE: T>; }
extern fn const_as_box<T, const SEGMENT_INDEX: felt252>() -> Box<ThreeOptions> nopanic;

enum ThreeOptions {
    A: felt252,
    B: u256,
    C,
}

fn foo() -> Box<ThreeOptions> {
    const_as_box::<enum_value::Const<ThreeOptions, 0, value::Const<felt252, 1337>>, 0>()
}

//! > casm
call rel 5;
[ap + 0] = [ap + -1] + 4, ap++;
ret;
ret;
dw 5;
dw 0;
dw 1337;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type Box<test::ThreeOptions> = Box<test::ThreeOptions> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<test::ThreeOptions, 0, Const<felt252, 1337>> = Const<test::ThreeOptions, 0, Const<felt252, 1337>> [storable: false, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type test::ThreeOptions = Enum<ut@test::ThreeOptions, felt252, core::integer::u256, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 1337> = Const<felt252, 1337> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_box<Const<test::ThreeOptions, 0, Const<felt252, 1337>>, 0> = const_as_box<Const<test::ThreeOptions, 0, Const<felt252, 1337>>, 0>;

const_as_box<Const<test::ThreeOptions, 0, Const<felt252, 1337>>, 0>() -> ([0]); // 0
return([0]); // 1

test::foo@0() -> (Box<test::ThreeOptions>);

//! > ==========================================================================

//! > const several complex enums

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
mod enum_value { extern type Const<T, const VARIANT_INDEX: felt252, V>; }
mod value { extern type Const<T, const VALUE: T>; }
mod struct0 { extern type Const<T>; }
mod struct2 { extern type Const<T, C0, C1>; }
extern fn const_as_box<T, const SEGMENT_INDEX: felt252>() -> Box<
    (ThreeOptions, ThreeOptions)
> nopanic;

enum ThreeOptions {
    A: felt252,
    B: (u256, u256),
    C,
}

fn foo() -> Box<(ThreeOptions, ThreeOptions)> {
    const_as_box::<
        struct2::Const<
            (ThreeOptions, ThreeOptions),
            enum_value::Const<ThreeOptions, 0, value::Const<felt252, 1337>>,
            enum_value::Const<ThreeOptions, 2, struct0::Const<()>>,
        >,
        0
    >()
}

//! > casm
call rel 5;
[ap + 0] = [ap + -1] + 4, ap++;
ret;
ret;
dw 5;
dw 0;
dw 0;
dw 0;
dw 1337;
dw 1;
dw 0;
dw 0;
dw 0;
dw 0;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type Box<Tuple<test::ThreeOptions, test::ThreeOptions>> = Box<Tuple<test::ThreeOptions, test::ThreeOptions>> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<Tuple<test::ThreeOptions, test::ThreeOptions>, Const<test::ThreeOptions, 0, Const<felt252, 1337>>, Const<test::ThreeOptions, 2, Const<Unit>>> = Const<Tuple<test::ThreeOptions, test::ThreeOptions>, Const<test::ThreeOptions, 0, Const<felt252, 1337>>, Const<test::ThreeOptions, 2, Const<Unit>>> [storable: false, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<core::integer::u256, core::integer::u256> = Struct<ut@Tuple, core::integer::u256, core::integer::u256> [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type test::ThreeOptions = Enum<ut@test::ThreeOptions, felt252, Tuple<core::integer::u256, core::integer::u256>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<test::ThreeOptions, test::ThreeOptions> = Struct<ut@Tuple, test::ThreeOptions, test::ThreeOptions> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<test::ThreeOptions, 2, Const<Unit>> = Const<test::ThreeOptions, 2, Const<Unit>> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<test::ThreeOptions, 0, Const<felt252, 1337>> = Const<test::ThreeOptions, 0, Const<felt252, 1337>> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<Unit> = Const<Unit> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 1337> = Const<felt252, 1337> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_box<Const<Tuple<test::ThreeOptions, test::ThreeOptions>, Const<test::ThreeOptions, 0, Const<felt252, 1337>>, Const<test::ThreeOptions, 2, Const<Unit>>>, 0> = const_as_box<Const<Tuple<test::ThreeOptions, test::ThreeOptions>, Const<test::ThreeOptions, 0, Const<felt252, 1337>>, Const<test::ThreeOptions, 2, Const<Unit>>>, 0>;

const_as_box<Const<Tuple<test::ThreeOptions, test::ThreeOptions>, Const<test::ThreeOptions, 0, Const<felt252, 1337>>, Const<test::ThreeOptions, 2, Const<Unit>>>, 0>() -> ([0]); // 0
return([0]); // 1

test::foo@0() -> (Box<Tuple<test::ThreeOptions, test::ThreeOptions>>);

//! > ==========================================================================

//! > const and builtin costs

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
extern type Const<T, const VALUE: T>;
extern fn const_as_box<T, const SEGMENT_INDEX: felt252>() -> Box<felt252> nopanic;

fn foo() -> (Box<felt252>, BuiltinCosts) {
    (const_as_box::<Const<felt252, 100>, 0>(), get_builtin_costs())
}

//! > casm
call rel 11;
[ap + 0] = [ap + -1] + 10, ap++;
call rel 9;
[ap + 0] = [ap + -1] + 8, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
ret;
ret;
dw 100;

//! > function_costs
test::foo: OrderedHashMap({Const: 800})

//! > sierra_code
type Box<felt252> = Box<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type BuiltinCosts = BuiltinCosts [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<Box<felt252>, BuiltinCosts> = Struct<ut@Tuple, Box<felt252>, BuiltinCosts> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 100> = Const<felt252, 100> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_box<Const<felt252, 100>, 0> = const_as_box<Const<felt252, 100>, 0>;
libfunc get_builtin_costs = get_builtin_costs;
libfunc struct_construct<Tuple<Box<felt252>, BuiltinCosts>> = struct_construct<Tuple<Box<felt252>, BuiltinCosts>>;
libfunc store_temp<Tuple<Box<felt252>, BuiltinCosts>> = store_temp<Tuple<Box<felt252>, BuiltinCosts>>;

const_as_box<Const<felt252, 100>, 0>() -> ([0]); // 0
get_builtin_costs() -> ([1]); // 1
struct_construct<Tuple<Box<felt252>, BuiltinCosts>>([0], [1]) -> ([2]); // 2
store_temp<Tuple<Box<felt252>, BuiltinCosts>>([2]) -> ([2]); // 3
return([2]); // 4

test::foo@0() -> (Tuple<Box<felt252>, BuiltinCosts>);

//! > ==========================================================================

//! > const segmentation

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
extern type Const<T, const VALUE: T>;
extern fn const_as_box<T, const SEGMENT_INDEX: felt252>() -> Box<felt252> nopanic;

fn foo() -> (Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>) {
    (
        const_as_box::<Const<felt252, 100>, 0>(),
        const_as_box::<Const<felt252, 200>, 1>(),
        const_as_box::<Const<felt252, 300>, 2>(),
        const_as_box::<Const<felt252, 300>, 2>(),
        const_as_box::<Const<felt252, 400>, 0>(),
        const_as_box::<Const<felt252, 300>, 1>(),
    )
}

//! > casm
call rel 31;
[ap + 0] = [ap + -1] + 30, ap++;
call rel 30;
[ap + 0] = [ap + -1] + 29, ap++;
call rel 29;
[ap + 0] = [ap + -1] + 28, ap++;
call rel 25;
[ap + 0] = [ap + -1] + 24, ap++;
call rel 15;
[ap + 0] = [ap + -1] + 15, ap++;
call rel 14;
[ap + 0] = [ap + -1] + 14, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ret;
dw 100;
dw 400;
ret;
dw 200;
dw 300;
ret;
dw 300;

//! > function_costs
test::foo: OrderedHashMap({Const: 2400})

//! > sierra_code
type Box<felt252> = Box<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>> = Struct<ut@Tuple, Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 400> = Const<felt252, 400> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 300> = Const<felt252, 300> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 200> = Const<felt252, 200> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 100> = Const<felt252, 100> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_box<Const<felt252, 100>, 0> = const_as_box<Const<felt252, 100>, 0>;
libfunc const_as_box<Const<felt252, 200>, 1> = const_as_box<Const<felt252, 200>, 1>;
libfunc const_as_box<Const<felt252, 300>, 2> = const_as_box<Const<felt252, 300>, 2>;
libfunc const_as_box<Const<felt252, 400>, 0> = const_as_box<Const<felt252, 400>, 0>;
libfunc const_as_box<Const<felt252, 300>, 1> = const_as_box<Const<felt252, 300>, 1>;
libfunc struct_construct<Tuple<Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>>> = struct_construct<Tuple<Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>>>;
libfunc store_temp<Tuple<Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>>> = store_temp<Tuple<Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>>>;

const_as_box<Const<felt252, 100>, 0>() -> ([0]); // 0
const_as_box<Const<felt252, 200>, 1>() -> ([1]); // 1
const_as_box<Const<felt252, 300>, 2>() -> ([2]); // 2
const_as_box<Const<felt252, 300>, 2>() -> ([3]); // 3
const_as_box<Const<felt252, 400>, 0>() -> ([4]); // 4
const_as_box<Const<felt252, 300>, 1>() -> ([5]); // 5
struct_construct<Tuple<Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>>>([0], [1], [2], [3], [4], [5]) -> ([6]); // 6
store_temp<Tuple<Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>>>([6]) -> ([6]); // 7
return([6]); // 8

test::foo@0() -> (Tuple<Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>, Box<felt252>>);

//! > ==========================================================================

//! > const felt252 span

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::box::BoxTrait;
mod value { extern type Const<T, const VALUE: T>; }
mod struct4 { extern type Const<T, C0, C1, C2, C3>; }
extern fn const_as_box<T, const SEGMENT_INDEX: felt252>()
 -> Box<(felt252, felt252, felt252, felt252)> nopanic;
pub extern fn span_from_tuple<T>(struct_like: Box<@T>) -> @Array<felt252> nopanic;

fn foo() -> @Array<felt252> {
    span_from_tuple(const_as_box::<
        struct4::Const<
            (felt252, felt252, felt252, felt252),
            value::Const<felt252, 100>,
            value::Const<felt252, 200>,
            value::Const<felt252, 300>,
            value::Const<felt252, 400>,
        >,
        0,
    >().as_snapshot())
}

//! > casm
call rel 8;
[ap + 0] = [ap + -1] + 7, ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -2] + 4, ap++;
ret;
ret;
dw 100;
dw 200;
dw 300;
dw 400;

//! > sierra_code
type Box<Tuple<felt252, felt252, felt252, felt252>> = Box<Tuple<felt252, felt252, felt252, felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<felt252, felt252, felt252, felt252> = Struct<ut@Tuple, felt252, felt252, felt252, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 100>, Const<felt252, 200>, Const<felt252, 300>, Const<felt252, 400>> = Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 100>, Const<felt252, 200>, Const<felt252, 300>, Const<felt252, 400>> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 400> = Const<felt252, 400> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 300> = Const<felt252, 300> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 200> = Const<felt252, 200> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 100> = Const<felt252, 100> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_box<Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 100>, Const<felt252, 200>, Const<felt252, 300>, Const<felt252, 400>>, 0> = const_as_box<Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 100>, Const<felt252, 200>, Const<felt252, 300>, Const<felt252, 400>>, 0>;
libfunc snapshot_take<Box<Tuple<felt252, felt252, felt252, felt252>>> = snapshot_take<Box<Tuple<felt252, felt252, felt252, felt252>>>;
libfunc drop<Box<Tuple<felt252, felt252, felt252, felt252>>> = drop<Box<Tuple<felt252, felt252, felt252, felt252>>>;
libfunc box_forward_snapshot<Tuple<felt252, felt252, felt252, felt252>> = box_forward_snapshot<Tuple<felt252, felt252, felt252, felt252>>;
libfunc span_from_tuple<Tuple<felt252, felt252, felt252, felt252>> = span_from_tuple<Tuple<felt252, felt252, felt252, felt252>>;
libfunc store_temp<Snapshot<Array<felt252>>> = store_temp<Snapshot<Array<felt252>>>;

const_as_box<Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 100>, Const<felt252, 200>, Const<felt252, 300>, Const<felt252, 400>>, 0>() -> ([0]); // 0
snapshot_take<Box<Tuple<felt252, felt252, felt252, felt252>>>([0]) -> ([1], [2]); // 1
drop<Box<Tuple<felt252, felt252, felt252, felt252>>>([1]) -> (); // 2
box_forward_snapshot<Tuple<felt252, felt252, felt252, felt252>>([2]) -> ([3]); // 3
span_from_tuple<Tuple<felt252, felt252, felt252, felt252>>([3]) -> ([4]); // 4
store_temp<Snapshot<Array<felt252>>>([4]) -> ([4]); // 5
return([4]); // 6

test::foo@0() -> (Snapshot<Array<felt252>>);

//! > function_costs
test::foo: OrderedHashMap({Const: 500})

//! > ==========================================================================

//! > const felt252 quad span

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::box::BoxTrait;
mod value { extern type Const<T, const VALUE: T>; }
mod struct4 { extern type Const<T, C0, C1, C2, C3>; }
type quad_felt252 = (felt252, felt252, felt252, felt252);
extern fn const_as_box<T, const SEGMENT_INDEX: felt252>()
 -> Box<(quad_felt252, quad_felt252, quad_felt252, quad_felt252)> nopanic;
pub extern fn span_from_tuple<T>(struct_like: Box<@T>) -> @Array<quad_felt252> nopanic;

type C100 = value::Const<felt252, 100>;
type C200 = value::Const<felt252, 200>;
type C300 = value::Const<felt252, 300>;
type C400 = value::Const<felt252, 400>;

fn foo() -> @Array<quad_felt252> {
    span_from_tuple(const_as_box::<
        struct4::Const<
            (quad_felt252, quad_felt252, quad_felt252, quad_felt252),
            struct4::Const<quad_felt252, C100, C200, C300, C400>,
            struct4::Const<quad_felt252, C200, C300, C400, C100>,
            struct4::Const<quad_felt252, C300, C400, C100, C200>,
            struct4::Const<quad_felt252, C400, C100, C200, C300>,
        >,
        0,
    >().as_snapshot())
}

//! > casm
call rel 8;
[ap + 0] = [ap + -1] + 7, ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -2] + 16, ap++;
ret;
ret;
dw 100;
dw 200;
dw 300;
dw 400;
dw 200;
dw 300;
dw 400;
dw 100;
dw 300;
dw 400;
dw 100;
dw 200;
dw 400;
dw 100;
dw 200;
dw 300;

//! > sierra_code
type Box<Tuple<Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>>> = Box<Tuple<Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>>> [storable: true, drop: true, dup: true, zero_sized: false];
type Array<Tuple<felt252, felt252, felt252, felt252>> = Array<Tuple<felt252, felt252, felt252, felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type Snapshot<Array<Tuple<felt252, felt252, felt252, felt252>>> = Snapshot<Array<Tuple<felt252, felt252, felt252, felt252>>> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<felt252, felt252, felt252, felt252> = Struct<ut@Tuple, felt252, felt252, felt252, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>> = Struct<ut@Tuple, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<Tuple<Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>>, Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 100>, Const<felt252, 200>, Const<felt252, 300>, Const<felt252, 400>>, Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 200>, Const<felt252, 300>, Const<felt252, 400>, Const<felt252, 100>>, Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 300>, Const<felt252, 400>, Const<felt252, 100>, Const<felt252, 200>>, Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 400>, Const<felt252, 100>, Const<felt252, 200>, Const<felt252, 300>>> = Const<Tuple<Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>>, Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 100>, Const<felt252, 200>, Const<felt252, 300>, Const<felt252, 400>>, Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 200>, Const<felt252, 300>, Const<felt252, 400>, Const<felt252, 100>>, Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 300>, Const<felt252, 400>, Const<felt252, 100>, Const<felt252, 200>>, Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 400>, Const<felt252, 100>, Const<felt252, 200>, Const<felt252, 300>>> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 400>, Const<felt252, 100>, Const<felt252, 200>, Const<felt252, 300>> = Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 400>, Const<felt252, 100>, Const<felt252, 200>, Const<felt252, 300>> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 300>, Const<felt252, 400>, Const<felt252, 100>, Const<felt252, 200>> = Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 300>, Const<felt252, 400>, Const<felt252, 100>, Const<felt252, 200>> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 300> = Const<felt252, 300> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 200> = Const<felt252, 200> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 100> = Const<felt252, 100> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 400> = Const<felt252, 400> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 200>, Const<felt252, 300>, Const<felt252, 400>, Const<felt252, 100>> = Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 200>, Const<felt252, 300>, Const<felt252, 400>, Const<felt252, 100>> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 100>, Const<felt252, 200>, Const<felt252, 300>, Const<felt252, 400>> = Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 100>, Const<felt252, 200>, Const<felt252, 300>, Const<felt252, 400>> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_box<Const<Tuple<Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>>, Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 100>, Const<felt252, 200>, Const<felt252, 300>, Const<felt252, 400>>, Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 200>, Const<felt252, 300>, Const<felt252, 400>, Const<felt252, 100>>, Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 300>, Const<felt252, 400>, Const<felt252, 100>, Const<felt252, 200>>, Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 400>, Const<felt252, 100>, Const<felt252, 200>, Const<felt252, 300>>>, 0> = const_as_box<Const<Tuple<Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>>, Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 100>, Const<felt252, 200>, Const<felt252, 300>, Const<felt252, 400>>, Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 200>, Const<felt252, 300>, Const<felt252, 400>, Const<felt252, 100>>, Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 300>, Const<felt252, 400>, Const<felt252, 100>, Const<felt252, 200>>, Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 400>, Const<felt252, 100>, Const<felt252, 200>, Const<felt252, 300>>>, 0>;
libfunc snapshot_take<Box<Tuple<Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>>>> = snapshot_take<Box<Tuple<Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>>>>;
libfunc drop<Box<Tuple<Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>>>> = drop<Box<Tuple<Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>>>>;
libfunc box_forward_snapshot<Tuple<Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>>> = box_forward_snapshot<Tuple<Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>>>;
libfunc span_from_tuple<Tuple<Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>>> = span_from_tuple<Tuple<Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>>>;
libfunc store_temp<Snapshot<Array<Tuple<felt252, felt252, felt252, felt252>>>> = store_temp<Snapshot<Array<Tuple<felt252, felt252, felt252, felt252>>>>;

const_as_box<Const<Tuple<Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>>, Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 100>, Const<felt252, 200>, Const<felt252, 300>, Const<felt252, 400>>, Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 200>, Const<felt252, 300>, Const<felt252, 400>, Const<felt252, 100>>, Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 300>, Const<felt252, 400>, Const<felt252, 100>, Const<felt252, 200>>, Const<Tuple<felt252, felt252, felt252, felt252>, Const<felt252, 400>, Const<felt252, 100>, Const<felt252, 200>, Const<felt252, 300>>>, 0>() -> ([0]); // 0
snapshot_take<Box<Tuple<Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>>>>([0]) -> ([1], [2]); // 1
drop<Box<Tuple<Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>>>>([1]) -> (); // 2
box_forward_snapshot<Tuple<Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>>>([2]) -> ([3]); // 3
span_from_tuple<Tuple<Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>, Tuple<felt252, felt252, felt252, felt252>>>([3]) -> ([4]); // 4
store_temp<Snapshot<Array<Tuple<felt252, felt252, felt252, felt252>>>>([4]) -> ([4]); // 5
return([4]); // 6

test::foo@0() -> (Snapshot<Array<Tuple<felt252, felt252, felt252, felt252>>>);

//! > function_costs
test::foo: OrderedHashMap({Const: 500})

//! > ==========================================================================

//! > const NonZero<felt252>

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
mod value { extern type Const<T, const VALUE: T>; }
mod nz { extern type Const<T, C>; }
extern fn const_as_box<T, const SEGMENT_INDEX: felt252>() -> Box<NonZero<felt252>> nopanic;

fn foo() -> Box<NonZero<felt252>> {
    const_as_box::<
        nz::Const<NonZero<felt252>, value::Const<felt252, 100>>,
        0,
    >()
}

//! > casm
call rel 5;
[ap + 0] = [ap + -1] + 4, ap++;
ret;
ret;
dw 100;

//! > sierra_code
type Box<NonZero<felt252>> = Box<NonZero<felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<NonZero<felt252>, Const<felt252, 100>> = Const<NonZero<felt252>, Const<felt252, 100>> [storable: false, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 100> = Const<felt252, 100> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_box<Const<NonZero<felt252>, Const<felt252, 100>>, 0> = const_as_box<Const<NonZero<felt252>, Const<felt252, 100>>, 0>;

const_as_box<Const<NonZero<felt252>, Const<felt252, 100>>, 0>() -> ([0]); // 0
return([0]); // 1

test::foo@0() -> (Box<NonZero<felt252>>);

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > ==========================================================================

//! > const NonZero<u8>

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
mod value { extern type Const<T, const VALUE: T>; }
mod nz { extern type Const<T, C>; }
extern fn const_as_box<T, const SEGMENT_INDEX: felt252>() -> Box<NonZero<u8>> nopanic;

fn foo() -> Box<NonZero<u8>> {
    const_as_box::<
        nz::Const<NonZero<u8>, value::Const<u8, 100>>,
        0,
    >()
}

//! > casm
call rel 5;
[ap + 0] = [ap + -1] + 4, ap++;
ret;
ret;
dw 100;

//! > sierra_code
type Box<NonZero<u8>> = Box<NonZero<u8>> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<NonZero<u8>, Const<u8, 100>> = Const<NonZero<u8>, Const<u8, 100>> [storable: false, drop: false, dup: false, zero_sized: false];
type u8 = u8 [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<u8> = NonZero<u8> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<u8, 100> = Const<u8, 100> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_box<Const<NonZero<u8>, Const<u8, 100>>, 0> = const_as_box<Const<NonZero<u8>, Const<u8, 100>>, 0>;

const_as_box<Const<NonZero<u8>, Const<u8, 100>>, 0>() -> ([0]); // 0
return([0]); // 1

test::foo@0() -> (Box<NonZero<u8>>);

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > ==========================================================================

//! > const NonZero<u256> 0 low.

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
mod value { extern type Const<T, const VALUE: T>; }
mod struct2 { extern type Const<T, C0, C1>; }
mod nz { extern type Const<T, C>; }
extern fn const_as_box<T, const SEGMENT_INDEX: felt252>() -> Box<NonZero<u256>> nopanic;

fn foo() -> Box<NonZero<u256>> {
    const_as_box::<
        nz::Const<
            NonZero<u256>,
            struct2::Const<u256, value::Const<u128, 0>, value::Const<u128, 32>>,
        >,
        0,
    >()
}

//! > casm
call rel 5;
[ap + 0] = [ap + -1] + 4, ap++;
ret;
ret;
dw 0;
dw 32;

//! > sierra_code
type Box<NonZero<core::integer::u256>> = Box<NonZero<core::integer::u256>> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<NonZero<core::integer::u256>, Const<core::integer::u256, Const<u128, 0>, Const<u128, 32>>> = Const<NonZero<core::integer::u256>, Const<core::integer::u256, Const<u128, 0>, Const<u128, 32>>> [storable: false, drop: false, dup: false, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<core::integer::u256> = NonZero<core::integer::u256> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<core::integer::u256, Const<u128, 0>, Const<u128, 32>> = Const<core::integer::u256, Const<u128, 0>, Const<u128, 32>> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 32> = Const<u128, 32> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 0> = Const<u128, 0> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_box<Const<NonZero<core::integer::u256>, Const<core::integer::u256, Const<u128, 0>, Const<u128, 32>>>, 0> = const_as_box<Const<NonZero<core::integer::u256>, Const<core::integer::u256, Const<u128, 0>, Const<u128, 32>>>, 0>;

const_as_box<Const<NonZero<core::integer::u256>, Const<core::integer::u256, Const<u128, 0>, Const<u128, 32>>>, 0>() -> ([0]); // 0
return([0]); // 1

test::foo@0() -> (Box<NonZero<core::integer::u256>>);

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > ==========================================================================

//! > const NonZero<u256> 0 high.

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
mod value { extern type Const<T, const VALUE: T>; }
mod struct2 { extern type Const<T, C0, C1>; }
mod nz { extern type Const<T, C>; }
extern fn const_as_box<T, const SEGMENT_INDEX: felt252>() -> Box<NonZero<u256>> nopanic;

fn foo() -> Box<NonZero<u256>> {
    const_as_box::<
        nz::Const<
            NonZero<u256>,
            struct2::Const<u256, value::Const<u128, 16>, value::Const<u128, 0>>,
        >,
        0,
    >()
}

//! > casm
call rel 5;
[ap + 0] = [ap + -1] + 4, ap++;
ret;
ret;
dw 16;
dw 0;

//! > sierra_code
type Box<NonZero<core::integer::u256>> = Box<NonZero<core::integer::u256>> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<NonZero<core::integer::u256>, Const<core::integer::u256, Const<u128, 16>, Const<u128, 0>>> = Const<NonZero<core::integer::u256>, Const<core::integer::u256, Const<u128, 16>, Const<u128, 0>>> [storable: false, drop: false, dup: false, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<core::integer::u256> = NonZero<core::integer::u256> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<core::integer::u256, Const<u128, 16>, Const<u128, 0>> = Const<core::integer::u256, Const<u128, 16>, Const<u128, 0>> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 0> = Const<u128, 0> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 16> = Const<u128, 16> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_box<Const<NonZero<core::integer::u256>, Const<core::integer::u256, Const<u128, 16>, Const<u128, 0>>>, 0> = const_as_box<Const<NonZero<core::integer::u256>, Const<core::integer::u256, Const<u128, 16>, Const<u128, 0>>>, 0>;

const_as_box<Const<NonZero<core::integer::u256>, Const<core::integer::u256, Const<u128, 16>, Const<u128, 0>>>, 0>() -> ([0]); // 0
return([0]); // 1

test::foo@0() -> (Box<NonZero<core::integer::u256>>);

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > ==========================================================================

//! > const NonZero<u512> 0 high.

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::integer::u512;

mod value { extern type Const<T, const VALUE: T>; }
mod struct4 { extern type Const<T, C0, C1, C2, C3>; }
mod nz { extern type Const<T, C>; }
extern fn const_as_box<T, const SEGMENT_INDEX: felt252>() -> Box<NonZero<u512>> nopanic;

fn foo() -> Box<NonZero<u512>> {
    const_as_box::<
        nz::Const<
            NonZero<u512>,
            struct4::Const<
                u512,
                value::Const<u128, 0>,
                value::Const<u128, 0>,
                value::Const<u128, 16>,
                value::Const<u128, 0>,
            >,
        >,
        0,
    >()
}

//! > casm
call rel 5;
[ap + 0] = [ap + -1] + 4, ap++;
ret;
ret;
dw 0;
dw 0;
dw 16;
dw 0;

//! > sierra_code
type Box<NonZero<core::integer::u512>> = Box<NonZero<core::integer::u512>> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<NonZero<core::integer::u512>, Const<core::integer::u512, Const<u128, 0>, Const<u128, 0>, Const<u128, 16>, Const<u128, 0>>> = Const<NonZero<core::integer::u512>, Const<core::integer::u512, Const<u128, 0>, Const<u128, 0>, Const<u128, 16>, Const<u128, 0>>> [storable: false, drop: false, dup: false, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u512 = Struct<ut@core::integer::u512, u128, u128, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<core::integer::u512> = NonZero<core::integer::u512> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<core::integer::u512, Const<u128, 0>, Const<u128, 0>, Const<u128, 16>, Const<u128, 0>> = Const<core::integer::u512, Const<u128, 0>, Const<u128, 0>, Const<u128, 16>, Const<u128, 0>> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 16> = Const<u128, 16> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 0> = Const<u128, 0> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_box<Const<NonZero<core::integer::u512>, Const<core::integer::u512, Const<u128, 0>, Const<u128, 0>, Const<u128, 16>, Const<u128, 0>>>, 0> = const_as_box<Const<NonZero<core::integer::u512>, Const<core::integer::u512, Const<u128, 0>, Const<u128, 0>, Const<u128, 16>, Const<u128, 0>>>, 0>;

const_as_box<Const<NonZero<core::integer::u512>, Const<core::integer::u512, Const<u128, 0>, Const<u128, 0>, Const<u128, 16>, Const<u128, 0>>>, 0>() -> ([0]); // 0
return([0]); // 1

test::foo@0() -> (Box<NonZero<core::integer::u512>>);

//! > function_costs
test::foo: OrderedHashMap({Const: 300})
