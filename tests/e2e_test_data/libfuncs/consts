//! > const felt252

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
const bar: [felt252; 5] = [3_felt252; 5];

fn main() {
    foo(bar.span());
}

#[inline(never)]
fn foo(bar: Span<felt252>) -> felt252 {
    // let barspan = bar.unbox().span();
    return *bar[0];
}

//! > casm
call rel 61;
[ap + 0] = [ap + -1] + 60, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 5, ap++;
call rel 18;
jmp rel 10 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = 0, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
%{ memory[ap + 0] = memory[ap + -2] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 15;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -4] + [ap + -5], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
ret;
dw 3;
dw 3;
dw 3;
dw 3;
dw 3;

//! > function_costs
test::main: OrderedHashMap({Const: 2670})
test::foo: OrderedHashMap({Const: 1370})

//! > sierra_code
type Box<Tuple<felt252, felt252, felt252, felt252, felt252>> = Box<Tuple<felt252, felt252, felt252, felt252, felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::Panic = Struct<ut@core::panics::Panic> [storable: true, drop: true, dup: true, zero_sized: true];
type Const<felt252, 1637570914057682275393755530660268060279989363> = Const<felt252, 1637570914057682275393755530660268060279989363> [storable: false, drop: false, dup: false, zero_sized: false];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Box<felt252> = Box<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<u32, 0> = Const<u32, 0> [storable: false, drop: false, dup: false, zero_sized: false];
type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Tuple<Unit> = Struct<ut@Tuple, Unit> [storable: true, drop: true, dup: true, zero_sized: true];
type Tuple<core::panics::Panic, Array<felt252>> = Struct<ut@Tuple, core::panics::Panic, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type core::panics::PanicResult::<((),)> = Enum<ut@core::panics::PanicResult::<((),)>, Tuple<Unit>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type Tuple<felt252> = Struct<ut@Tuple, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::PanicResult::<(core::felt252,)> = Enum<ut@core::panics::PanicResult::<(core::felt252,)>, Tuple<felt252>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::array::Span::<core::felt252> = Struct<ut@core::array::Span::<core::felt252>, Snapshot<Array<felt252>>> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<felt252, felt252, felt252, felt252, felt252> = Struct<ut@Tuple, felt252, felt252, felt252, felt252, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<Tuple<felt252, felt252, felt252, felt252, felt252>, Const<felt252, 3>, Const<felt252, 3>, Const<felt252, 3>, Const<felt252, 3>, Const<felt252, 3>> = Const<Tuple<felt252, felt252, felt252, felt252, felt252>, Const<felt252, 3>, Const<felt252, 3>, Const<felt252, 3>, Const<felt252, 3>, Const<felt252, 3>> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 3> = Const<felt252, 3> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_box<Const<Tuple<felt252, felt252, felt252, felt252, felt252>, Const<felt252, 3>, Const<felt252, 3>, Const<felt252, 3>, Const<felt252, 3>, Const<felt252, 3>>, 0> = const_as_box<Const<Tuple<felt252, felt252, felt252, felt252, felt252>, Const<felt252, 3>, Const<felt252, 3>, Const<felt252, 3>, Const<felt252, 3>, Const<felt252, 3>>, 0>;
libfunc span_from_tuple<Tuple<felt252, felt252, felt252, felt252, felt252>> = span_from_tuple<Tuple<felt252, felt252, felt252, felt252, felt252>>;
libfunc struct_construct<core::array::Span::<core::felt252>> = struct_construct<core::array::Span::<core::felt252>>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::array::Span::<core::felt252>> = store_temp<core::array::Span::<core::felt252>>;
libfunc function_call<user@test::foo> = function_call<user@test::foo>;
libfunc enum_match<core::panics::PanicResult::<(core::felt252,)>> = enum_match<core::panics::PanicResult::<(core::felt252,)>>;
libfunc branch_align = branch_align;
libfunc drop<Tuple<felt252>> = drop<Tuple<felt252>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc struct_construct<Tuple<Unit>> = struct_construct<Tuple<Unit>>;
libfunc enum_init<core::panics::PanicResult::<((),)>, 0> = enum_init<core::panics::PanicResult::<((),)>, 0>;
libfunc store_temp<core::panics::PanicResult::<((),)>> = store_temp<core::panics::PanicResult::<((),)>>;
libfunc enum_init<core::panics::PanicResult::<((),)>, 1> = enum_init<core::panics::PanicResult::<((),)>, 1>;
libfunc snapshot_take<core::array::Span::<core::felt252>> = snapshot_take<core::array::Span::<core::felt252>>;
libfunc drop<core::array::Span::<core::felt252>> = drop<core::array::Span::<core::felt252>>;
libfunc const_as_immediate<Const<u32, 0>> = const_as_immediate<Const<u32, 0>>;
libfunc struct_deconstruct<core::array::Span::<core::felt252>> = struct_deconstruct<core::array::Span::<core::felt252>>;
libfunc rename<Snapshot<Array<felt252>>> = rename<Snapshot<Array<felt252>>>;
libfunc store_temp<u32> = store_temp<u32>;
libfunc array_get<felt252> = array_get<felt252>;
libfunc store_temp<Box<felt252>> = store_temp<Box<felt252>>;
libfunc unbox<felt252> = unbox<felt252>;
libfunc rename<felt252> = rename<felt252>;
libfunc struct_construct<Tuple<felt252>> = struct_construct<Tuple<felt252>>;
libfunc enum_init<core::panics::PanicResult::<(core::felt252,)>, 0> = enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>;
libfunc store_temp<core::panics::PanicResult::<(core::felt252,)>> = store_temp<core::panics::PanicResult::<(core::felt252,)>>;
libfunc array_new<felt252> = array_new<felt252>;
libfunc const_as_immediate<Const<felt252, 1637570914057682275393755530660268060279989363>> = const_as_immediate<Const<felt252, 1637570914057682275393755530660268060279989363>>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc array_append<felt252> = array_append<felt252>;
libfunc struct_construct<core::panics::Panic> = struct_construct<core::panics::Panic>;
libfunc struct_construct<Tuple<core::panics::Panic, Array<felt252>>> = struct_construct<Tuple<core::panics::Panic, Array<felt252>>>;
libfunc enum_init<core::panics::PanicResult::<(core::felt252,)>, 1> = enum_init<core::panics::PanicResult::<(core::felt252,)>, 1>;

const_as_box<Const<Tuple<felt252, felt252, felt252, felt252, felt252>, Const<felt252, 3>, Const<felt252, 3>, Const<felt252, 3>, Const<felt252, 3>, Const<felt252, 3>>, 0>() -> ([1]); // 0
span_from_tuple<Tuple<felt252, felt252, felt252, felt252, felt252>>([1]) -> ([2]); // 1
struct_construct<core::array::Span::<core::felt252>>([2]) -> ([3]); // 2
store_temp<RangeCheck>([0]) -> ([0]); // 3
store_temp<core::array::Span::<core::felt252>>([3]) -> ([3]); // 4
function_call<user@test::foo>([0], [3]) -> ([4], [5]); // 5
enum_match<core::panics::PanicResult::<(core::felt252,)>>([5]) { fallthrough([6]) 15([7]) }; // 6
branch_align() -> (); // 7
drop<Tuple<felt252>>([6]) -> (); // 8
struct_construct<Unit>() -> ([8]); // 9
struct_construct<Tuple<Unit>>([8]) -> ([9]); // 10
enum_init<core::panics::PanicResult::<((),)>, 0>([9]) -> ([10]); // 11
store_temp<RangeCheck>([4]) -> ([4]); // 12
store_temp<core::panics::PanicResult::<((),)>>([10]) -> ([10]); // 13
return([4], [10]); // 14
branch_align() -> (); // 15
enum_init<core::panics::PanicResult::<((),)>, 1>([7]) -> ([11]); // 16
store_temp<RangeCheck>([4]) -> ([4]); // 17
store_temp<core::panics::PanicResult::<((),)>>([11]) -> ([11]); // 18
return([4], [11]); // 19
snapshot_take<core::array::Span::<core::felt252>>([1]) -> ([2], [3]); // 20
drop<core::array::Span::<core::felt252>>([2]) -> (); // 21
const_as_immediate<Const<u32, 0>>() -> ([4]); // 22
struct_deconstruct<core::array::Span::<core::felt252>>([3]) -> ([5]); // 23
rename<Snapshot<Array<felt252>>>([5]) -> ([6]); // 24
store_temp<u32>([4]) -> ([4]); // 25
array_get<felt252>([0], [6], [4]) { fallthrough([7], [8]) 36([9]) }; // 26
branch_align() -> (); // 27
store_temp<Box<felt252>>([8]) -> ([8]); // 28
unbox<felt252>([8]) -> ([10]); // 29
rename<felt252>([10]) -> ([11]); // 30
struct_construct<Tuple<felt252>>([11]) -> ([12]); // 31
enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>([12]) -> ([13]); // 32
store_temp<RangeCheck>([7]) -> ([7]); // 33
store_temp<core::panics::PanicResult::<(core::felt252,)>>([13]) -> ([13]); // 34
return([7], [13]); // 35
branch_align() -> (); // 36
array_new<felt252>() -> ([14]); // 37
const_as_immediate<Const<felt252, 1637570914057682275393755530660268060279989363>>() -> ([15]); // 38
store_temp<felt252>([15]) -> ([15]); // 39
array_append<felt252>([14], [15]) -> ([16]); // 40
struct_construct<core::panics::Panic>() -> ([17]); // 41
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([17], [16]) -> ([18]); // 42
enum_init<core::panics::PanicResult::<(core::felt252,)>, 1>([18]) -> ([19]); // 43
store_temp<RangeCheck>([9]) -> ([9]); // 44
store_temp<core::panics::PanicResult::<(core::felt252,)>>([19]) -> ([19]); // 45
return([9], [19]); // 46

test::main@0([0]: RangeCheck) -> (RangeCheck, core::panics::PanicResult::<((),)>);
test::foo@20([0]: RangeCheck, [1]: core::array::Span::<core::felt252>) -> (RangeCheck, core::panics::PanicResult::<(core::felt252,)>);
