//! > i32_to_felt252 libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(v: i32) -> felt252 {
    integer::i32_to_felt252(v)
}

//! > casm
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type i32 = i32;
type felt252 = felt252;

libfunc i32_to_felt252 = i32_to_felt252;
libfunc store_temp<felt252> = store_temp<felt252>;

i32_to_felt252([0]) -> ([1]);
store_temp<felt252>([1]) -> ([2]);
return([2]);

test::foo@0([0]: i32) -> (felt252);

//! > ==========================================================================

//! > i32_eq libfunc (a deref, b deref)

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: i32, b: i32) -> bool {
    integer::i32_eq(a, b)
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 6;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 400})

//! > sierra_code
type i32 = i32;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc i32_eq = i32_eq;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc rename<core::bool> = rename<core::bool>;

i32_eq([0], [1]) { fallthrough() 6() };
branch_align() -> ();
struct_construct<Unit>() -> ([2]);
enum_init<core::bool, 0>([2]) -> ([3]);
store_temp<core::bool>([3]) -> ([4]);
jump() { 10() };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 1>([5]) -> ([6]);
store_temp<core::bool>([6]) -> ([4]);
rename<core::bool>([4]) -> ([7]);
return([7]);

test::foo@0([0]: i32, [1]: i32) -> (core::bool);

//! > ==========================================================================

//! > i32_eq libfunc (a immediate, b immediate)

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo() -> bool {
    integer::i32_eq(11_i32, 12_i32)
}

//! > casm
[ap + 0] = 11, ap++;
[ap + -1] = [ap + 0] + 12, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 6;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 500})

//! > sierra_code
type i32 = i32;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc i32_const<11> = i32_const<11>;
libfunc i32_const<12> = i32_const<12>;
libfunc store_temp<i32> = store_temp<i32>;
libfunc i32_eq = i32_eq;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc rename<core::bool> = rename<core::bool>;

i32_const<11>() -> ([0]);
i32_const<12>() -> ([1]);
store_temp<i32>([0]) -> ([0]);
i32_eq([0], [1]) { fallthrough() 9() };
branch_align() -> ();
struct_construct<Unit>() -> ([2]);
enum_init<core::bool, 0>([2]) -> ([3]);
store_temp<core::bool>([3]) -> ([4]);
jump() { 13() };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 1>([5]) -> ([6]);
store_temp<core::bool>([6]) -> ([4]);
rename<core::bool>([4]) -> ([7]);
return([7]);

test::foo@0() -> (core::bool);

//! > ==========================================================================

//! > i32_is_zero libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use zeroable::IsZeroResult;
use zeroable::NonZeroIntoImpl;
use traits::Into;
fn foo(a: i32) -> i32 {
    match integer::i32_is_zero(a) {
        IsZeroResult::Zero => 123_i32,
        IsZeroResult::NonZero(x) => x.into(),
    }
}

//! > casm
jmp rel 6 if [fp + -3] != 0;
[ap + 0] = 123, ap++;
jmp rel 3;
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type i32 = i32;
type NonZero<i32> = NonZero<i32>;

libfunc i32_is_zero = i32_is_zero;
libfunc branch_align = branch_align;
libfunc i32_const<123> = i32_const<123>;
libfunc store_temp<i32> = store_temp<i32>;
libfunc jump = jump;
libfunc unwrap_non_zero<i32> = unwrap_non_zero<i32>;
libfunc rename<i32> = rename<i32>;

i32_is_zero([0]) { fallthrough() 5([1]) };
branch_align() -> ();
i32_const<123>() -> ([2]);
store_temp<i32>([2]) -> ([3]);
jump() { 8() };
branch_align() -> ();
unwrap_non_zero<i32>([1]) -> ([4]);
store_temp<i32>([4]) -> ([3]);
rename<i32>([3]) -> ([5]);
return([5]);

test::foo@0([0]: i32) -> (i32);
