//! > felt252_bounded_from_felt

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
extern type Felt252Bounded<const LOWER: felt252, const UPPER: felt252>;

extern fn felt252_bounded_from_felt252<
    const LOWER: felt252,
    const UPPER: felt252,
>(index: felt252) -> Option<Felt252Bounded<0, 7>> implicits(RangeCheck) nopanic;

fn foo(index:felt252) -> Option<Felt252Bounded<0,7>> {
    felt252_bounded_from_felt252::<0, 7>(index)
}

//! > casm
%{ memory[ap + 0] = memory[fp + -3] < 7 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 7, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -4] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943302, ap++;
[ap + -1] = [[fp + -4] + 1], ap++;
[ap + -5] = [[fp + -4] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 17 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211448, ap++;
[ap + -1] = [[fp + -4] + 1];
ap += 5;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 8;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1510})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Felt252Bounded<0, 7> = Felt252Bounded<0, 7> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<test::Felt252Bounded::<0, 7>> = Enum<ut@core::option::Option::<test::Felt252Bounded::<0, 7>>, Felt252Bounded<0, 7>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc felt252_bounded_from_felt252<0, 7> = felt252_bounded_from_felt252<0, 7>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<test::Felt252Bounded::<0, 7>>, 0> = enum_init<core::option::Option::<test::Felt252Bounded::<0, 7>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<test::Felt252Bounded::<0, 7>>> = store_temp<core::option::Option::<test::Felt252Bounded::<0, 7>>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<test::Felt252Bounded::<0, 7>>, 1> = enum_init<core::option::Option::<test::Felt252Bounded::<0, 7>>, 1>;

felt252_bounded_from_felt252<0, 7>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<test::Felt252Bounded::<0, 7>>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([6]); // 3
store_temp<core::option::Option::<test::Felt252Bounded::<0, 7>>>([5]) -> ([7]); // 4
jump() { 11() }; // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([8]); // 7
enum_init<core::option::Option::<test::Felt252Bounded::<0, 7>>, 1>([8]) -> ([9]); // 8
store_temp<RangeCheck>([4]) -> ([6]); // 9
store_temp<core::option::Option::<test::Felt252Bounded::<0, 7>>>([9]) -> ([7]); // 10
return([6], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: felt252) -> (RangeCheck, core::option::Option::<test::Felt252Bounded::<0, 7>>);

//! > ==========================================================================

//! > felt252_bounded_from_felt<3>

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
extern type Felt252Bounded<const LOWER: felt252, const UPPER: felt252>;

extern fn felt252_bounded_from_felt252<
    const LOWER: felt252,
    const UPPER: felt252,
>(index: felt252) -> Option<Felt252Bounded<0, 3>> implicits(RangeCheck) nopanic;

fn foo(index:felt252) -> Option<Felt252Bounded<0,3>> {
    felt252_bounded_from_felt252::<0, 3>(index)
}

//! > casm
%{ memory[ap + 0] = memory[fp + -3] < 3 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 3, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -4] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943298, ap++;
[ap + -1] = [[fp + -4] + 1], ap++;
[ap + -5] = [[fp + -4] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 17 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211452, ap++;
[ap + -1] = [[fp + -4] + 1];
ap += 5;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 8;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1510})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Felt252Bounded<0, 3> = Felt252Bounded<0, 3> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<test::Felt252Bounded::<0, 3>> = Enum<ut@core::option::Option::<test::Felt252Bounded::<0, 3>>, Felt252Bounded<0, 3>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc felt252_bounded_from_felt252<0, 3> = felt252_bounded_from_felt252<0, 3>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<test::Felt252Bounded::<0, 3>>, 0> = enum_init<core::option::Option::<test::Felt252Bounded::<0, 3>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<test::Felt252Bounded::<0, 3>>> = store_temp<core::option::Option::<test::Felt252Bounded::<0, 3>>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<test::Felt252Bounded::<0, 3>>, 1> = enum_init<core::option::Option::<test::Felt252Bounded::<0, 3>>, 1>;

felt252_bounded_from_felt252<0, 3>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<test::Felt252Bounded::<0, 3>>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([6]); // 3
store_temp<core::option::Option::<test::Felt252Bounded::<0, 3>>>([5]) -> ([7]); // 4
jump() { 11() }; // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([8]); // 7
enum_init<core::option::Option::<test::Felt252Bounded::<0, 3>>, 1>([8]) -> ([9]); // 8
store_temp<RangeCheck>([4]) -> ([6]); // 9
store_temp<core::option::Option::<test::Felt252Bounded::<0, 3>>>([9]) -> ([7]); // 10
return([6], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: felt252) -> (RangeCheck, core::option::Option::<test::Felt252Bounded::<0, 3>>);

//! > ==========================================================================

//! > felt252_bounded_from_felt<2>

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
extern type Felt252Bounded<const LOWER: felt252, const UPPER: felt252>;

extern fn felt252_bounded_from_felt252<
    const LOWER: felt252,
    const UPPER: felt252,
>(index: felt252) -> Option<Felt252Bounded<0, 2>> implicits(RangeCheck) nopanic;

fn foo(index:felt252) -> Option<Felt252Bounded<0,2>> {
    felt252_bounded_from_felt252::<0, 2>(index)
}

//! > casm
%{ memory[ap + 0] = memory[fp + -3] < 2 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 2, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -4] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943297, ap++;
[ap + -1] = [[fp + -4] + 1], ap++;
[ap + -5] = [[fp + -4] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 17 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211453, ap++;
[ap + -1] = [[fp + -4] + 1];
ap += 5;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 8;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1510})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Felt252Bounded<0, 2> = Felt252Bounded<0, 2> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<test::Felt252Bounded::<0, 2>> = Enum<ut@core::option::Option::<test::Felt252Bounded::<0, 2>>, Felt252Bounded<0, 2>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc felt252_bounded_from_felt252<0, 2> = felt252_bounded_from_felt252<0, 2>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<test::Felt252Bounded::<0, 2>>, 0> = enum_init<core::option::Option::<test::Felt252Bounded::<0, 2>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<test::Felt252Bounded::<0, 2>>> = store_temp<core::option::Option::<test::Felt252Bounded::<0, 2>>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<test::Felt252Bounded::<0, 2>>, 1> = enum_init<core::option::Option::<test::Felt252Bounded::<0, 2>>, 1>;

felt252_bounded_from_felt252<0, 2>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<test::Felt252Bounded::<0, 2>>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([6]); // 3
store_temp<core::option::Option::<test::Felt252Bounded::<0, 2>>>([5]) -> ([7]); // 4
jump() { 11() }; // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([8]); // 7
enum_init<core::option::Option::<test::Felt252Bounded::<0, 2>>, 1>([8]) -> ([9]); // 8
store_temp<RangeCheck>([4]) -> ([6]); // 9
store_temp<core::option::Option::<test::Felt252Bounded::<0, 2>>>([9]) -> ([7]); // 10
return([6], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: felt252) -> (RangeCheck, core::option::Option::<test::Felt252Bounded::<0, 2>>);

//! > ==========================================================================

//! > felt252_bounded_from_felt<1>

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
extern type Felt252Bounded<const LOWER: felt252, const UPPER: felt252>;

extern fn felt252_bounded_from_felt252<
    const LOWER: felt252,
    const UPPER: felt252,
>(index: felt252) -> Option<Felt252Bounded<0, 1>> implicits(RangeCheck) nopanic;

fn foo(index:felt252) -> Option<Felt252Bounded<0,1>> {
    felt252_bounded_from_felt252::<0, 1>(index)
}

//! > casm
%{ memory[ap + 0] = memory[fp + -3] < 1 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -4] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943296, ap++;
[ap + -1] = [[fp + -4] + 1], ap++;
[ap + -5] = [[fp + -4] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 17 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211454, ap++;
[ap + -1] = [[fp + -4] + 1];
ap += 5;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 8;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1510})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Felt252Bounded<0, 1> = Felt252Bounded<0, 1> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<test::Felt252Bounded::<0, 1>> = Enum<ut@core::option::Option::<test::Felt252Bounded::<0, 1>>, Felt252Bounded<0, 1>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc felt252_bounded_from_felt252<0, 1> = felt252_bounded_from_felt252<0, 1>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<test::Felt252Bounded::<0, 1>>, 0> = enum_init<core::option::Option::<test::Felt252Bounded::<0, 1>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<test::Felt252Bounded::<0, 1>>> = store_temp<core::option::Option::<test::Felt252Bounded::<0, 1>>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<test::Felt252Bounded::<0, 1>>, 1> = enum_init<core::option::Option::<test::Felt252Bounded::<0, 1>>, 1>;

felt252_bounded_from_felt252<0, 1>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<test::Felt252Bounded::<0, 1>>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([6]); // 3
store_temp<core::option::Option::<test::Felt252Bounded::<0, 1>>>([5]) -> ([7]); // 4
jump() { 11() }; // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([8]); // 7
enum_init<core::option::Option::<test::Felt252Bounded::<0, 1>>, 1>([8]) -> ([9]); // 8
store_temp<RangeCheck>([4]) -> ([6]); // 9
store_temp<core::option::Option::<test::Felt252Bounded::<0, 1>>>([9]) -> ([7]); // 10
return([6], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: felt252) -> (RangeCheck, core::option::Option::<test::Felt252Bounded::<0, 1>>);
