//! > u16_overflowing_add libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u16, b: u16) -> Result::<u16, u16> {
    integer::u16_overflowing_add(a, b)
}

//! > casm
[ap + 2] = [fp + -4] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 1] < 65536 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 65536, ap++;
[ap + -2] = [[fp + -5] + 0];
jmp rel 12;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768145920, ap++;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 870})

//! > sierra_code
type RangeCheck = RangeCheck;
type u16 = u16;
type core::result::Result::<core::integer::u16, core::integer::u16> = Enum<ut@core::result::Result::<core::integer::u16, core::integer::u16>, u16, u16>;

libfunc u16_overflowing_add = u16_overflowing_add;
libfunc branch_align = branch_align;
libfunc enum_init<core::result::Result::<core::integer::u16, core::integer::u16>, 0> = enum_init<core::result::Result::<core::integer::u16, core::integer::u16>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::result::Result::<core::integer::u16, core::integer::u16>> = store_temp<core::result::Result::<core::integer::u16, core::integer::u16>>;
libfunc jump = jump;
libfunc enum_init<core::result::Result::<core::integer::u16, core::integer::u16>, 1> = enum_init<core::result::Result::<core::integer::u16, core::integer::u16>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::result::Result::<core::integer::u16, core::integer::u16>> = rename<core::result::Result::<core::integer::u16, core::integer::u16>>;

u16_overflowing_add([0], [1], [2]) { fallthrough([3], [4]) 6([5], [6]) };
branch_align() -> ();
enum_init<core::result::Result::<core::integer::u16, core::integer::u16>, 0>([4]) -> ([7]);
store_temp<RangeCheck>([3]) -> ([8]);
store_temp<core::result::Result::<core::integer::u16, core::integer::u16>>([7]) -> ([9]);
jump() { 10() };
branch_align() -> ();
enum_init<core::result::Result::<core::integer::u16, core::integer::u16>, 1>([6]) -> ([10]);
store_temp<RangeCheck>([5]) -> ([8]);
store_temp<core::result::Result::<core::integer::u16, core::integer::u16>>([10]) -> ([9]);
rename<RangeCheck>([8]) -> ([11]);
rename<core::result::Result::<core::integer::u16, core::integer::u16>>([9]) -> ([12]);
return([11], [12]);

test::foo@0([0]: RangeCheck, [1]: u16, [2]: u16) -> (RangeCheck, core::result::Result::<core::integer::u16, core::integer::u16>);

//! > ==========================================================================

//! > u16_overflowing_sub libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u16, b: u16) -> Result::<u16, u16> {
    integer::u16_overflowing_sub(a, b)
}

//! > casm
[fp + -4] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 65536 %}
jmp rel 9 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 65536, ap++;
jmp rel 12;
[ap + -1] = [[fp + -5] + 0];
ap += 2;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 7;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 970})

//! > sierra_code
type RangeCheck = RangeCheck;
type u16 = u16;
type core::result::Result::<core::integer::u16, core::integer::u16> = Enum<ut@core::result::Result::<core::integer::u16, core::integer::u16>, u16, u16>;

libfunc u16_overflowing_sub = u16_overflowing_sub;
libfunc branch_align = branch_align;
libfunc enum_init<core::result::Result::<core::integer::u16, core::integer::u16>, 0> = enum_init<core::result::Result::<core::integer::u16, core::integer::u16>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::result::Result::<core::integer::u16, core::integer::u16>> = store_temp<core::result::Result::<core::integer::u16, core::integer::u16>>;
libfunc jump = jump;
libfunc enum_init<core::result::Result::<core::integer::u16, core::integer::u16>, 1> = enum_init<core::result::Result::<core::integer::u16, core::integer::u16>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::result::Result::<core::integer::u16, core::integer::u16>> = rename<core::result::Result::<core::integer::u16, core::integer::u16>>;

u16_overflowing_sub([0], [1], [2]) { fallthrough([3], [4]) 6([5], [6]) };
branch_align() -> ();
enum_init<core::result::Result::<core::integer::u16, core::integer::u16>, 0>([4]) -> ([7]);
store_temp<RangeCheck>([3]) -> ([8]);
store_temp<core::result::Result::<core::integer::u16, core::integer::u16>>([7]) -> ([9]);
jump() { 10() };
branch_align() -> ();
enum_init<core::result::Result::<core::integer::u16, core::integer::u16>, 1>([6]) -> ([10]);
store_temp<RangeCheck>([5]) -> ([8]);
store_temp<core::result::Result::<core::integer::u16, core::integer::u16>>([10]) -> ([9]);
rename<RangeCheck>([8]) -> ([11]);
rename<core::result::Result::<core::integer::u16, core::integer::u16>>([9]) -> ([12]);
return([11], [12]);

test::foo@0([0]: RangeCheck, [1]: u16, [2]: u16) -> (RangeCheck, core::result::Result::<core::integer::u16, core::integer::u16>);

//! > ==========================================================================

//! > u16_lt libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u16, b: u16) -> bool {
    integer::u16_lt(a, b)
}

//! > casm
[fp + -4] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 11;
[ap + -1] = [[fp + -5] + 0];
ap += 1;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 780})

//! > sierra_code
type RangeCheck = RangeCheck;
type u16 = u16;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc u16_lt = u16_lt;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::bool> = rename<core::bool>;

u16_lt([0], [1], [2]) { fallthrough([3]) 7([4]) };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 0>([5]) -> ([6]);
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<core::bool>([6]) -> ([8]);
jump() { 12() };
branch_align() -> ();
struct_construct<Unit>() -> ([9]);
enum_init<core::bool, 1>([9]) -> ([10]);
store_temp<RangeCheck>([4]) -> ([7]);
store_temp<core::bool>([10]) -> ([8]);
rename<RangeCheck>([7]) -> ([11]);
rename<core::bool>([8]) -> ([12]);
return([11], [12]);

test::foo@0([0]: RangeCheck, [1]: u16, [2]: u16) -> (RangeCheck, core::bool);

//! > ==========================================================================

//! > u16_le libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u16, b: u16) -> bool {
    integer::u16_le(a, b)
}

//! > casm
[fp + -3] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = 340282366920938463463374607431768211456 <= memory[ap + 0] %}
jmp rel 5 if [ap + -1] != 0, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 11;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 780})

//! > sierra_code
type RangeCheck = RangeCheck;
type u16 = u16;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc u16_le = u16_le;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::bool> = rename<core::bool>;

u16_le([0], [1], [2]) { fallthrough([3]) 7([4]) };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 0>([5]) -> ([6]);
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<core::bool>([6]) -> ([8]);
jump() { 12() };
branch_align() -> ();
struct_construct<Unit>() -> ([9]);
enum_init<core::bool, 1>([9]) -> ([10]);
store_temp<RangeCheck>([4]) -> ([7]);
store_temp<core::bool>([10]) -> ([8]);
rename<RangeCheck>([7]) -> ([11]);
rename<core::bool>([8]) -> ([12]);
return([11], [12]);

test::foo@0([0]: RangeCheck, [1]: u16, [2]: u16) -> (RangeCheck, core::bool);

//! > ==========================================================================

//! > u16_eq libfunc (a deref, b deref)

//! > test_comments
//! Different cases of a,b produce different code. This is why u16_eq has multiple e2e tests.
//! This case produces the same code as the case (a deref, b immediate).

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u16, b: u16) -> bool {
    integer::u16_eq(a, b)
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 6;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 400})

//! > sierra_code
type u16 = u16;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc u16_eq = u16_eq;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc rename<core::bool> = rename<core::bool>;

u16_eq([0], [1]) { fallthrough() 6() };
branch_align() -> ();
struct_construct<Unit>() -> ([2]);
enum_init<core::bool, 0>([2]) -> ([3]);
store_temp<core::bool>([3]) -> ([4]);
jump() { 10() };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 1>([5]) -> ([6]);
store_temp<core::bool>([6]) -> ([4]);
rename<core::bool>([4]) -> ([7]);
return([7]);

test::foo@0([0]: u16, [1]: u16) -> (core::bool);

//! > ==========================================================================

//! > u16_eq libfunc (a immediate, b immediate)

//! > test_comments
//! see the comment for: u16_eq libfunc (a deref, b deref).

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo() -> bool {
    integer::u16_eq(11_u16, 12_u16)
}

//! > casm
[ap + 0] = -1, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 6;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 400})

//! > sierra_code
type u16 = u16;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc u16_const<11> = u16_const<11>;
libfunc u16_const<12> = u16_const<12>;
libfunc u16_eq = u16_eq;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc rename<core::bool> = rename<core::bool>;

u16_const<11>() -> ([0]);
u16_const<12>() -> ([1]);
u16_eq([0], [1]) { fallthrough() 8() };
branch_align() -> ();
struct_construct<Unit>() -> ([2]);
enum_init<core::bool, 0>([2]) -> ([3]);
store_temp<core::bool>([3]) -> ([4]);
jump() { 12() };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 1>([5]) -> ([6]);
store_temp<core::bool>([6]) -> ([4]);
rename<core::bool>([4]) -> ([7]);
return([7]);

test::foo@0() -> (core::bool);

//! > ==========================================================================

//! > u16_eq libfunc (a immediate, b deref)

//! > test_comments
//! see the comment for: u16_eq libfunc (a deref, b deref).

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(b: u16) -> bool {
    integer::u16_eq(11_u16, b)
}

//! > casm
[fp + -3] = [ap + 0] + 11, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 6;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 400})

//! > sierra_code
type u16 = u16;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc u16_const<11> = u16_const<11>;
libfunc u16_eq = u16_eq;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc rename<core::bool> = rename<core::bool>;

u16_const<11>() -> ([1]);
u16_eq([1], [0]) { fallthrough() 7() };
branch_align() -> ();
struct_construct<Unit>() -> ([2]);
enum_init<core::bool, 0>([2]) -> ([3]);
store_temp<core::bool>([3]) -> ([4]);
jump() { 11() };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 1>([5]) -> ([6]);
store_temp<core::bool>([6]) -> ([4]);
rename<core::bool>([4]) -> ([7]);
return([7]);

test::foo@0([0]: u16) -> (core::bool);

//! > ==========================================================================

//! > u16_try_from_felt252 libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(v: felt252) -> Option::<u16> {
    integer::u16_try_from_felt252(v)
}

//! > casm
%{ memory[ap + 0] = memory[fp + -3] < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -4] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -4] + 1], ap++;
[ap + -5] = [[fp + -4] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 17 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [fp + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -4] + 1];
ap += 5;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 8;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1510})

//! > sierra_code
type RangeCheck = RangeCheck;
type felt252 = felt252;
type u16 = u16;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<core::integer::u16> = Enum<ut@core::option::Option::<core::integer::u16>, u16, Unit>;

libfunc u16_try_from_felt252 = u16_try_from_felt252;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::integer::u16>, 0> = enum_init<core::option::Option::<core::integer::u16>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::integer::u16>> = store_temp<core::option::Option::<core::integer::u16>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::integer::u16>, 1> = enum_init<core::option::Option::<core::integer::u16>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::option::Option::<core::integer::u16>> = rename<core::option::Option::<core::integer::u16>>;

u16_try_from_felt252([0], [1]) { fallthrough([2], [3]) 6([4]) };
branch_align() -> ();
enum_init<core::option::Option::<core::integer::u16>, 0>([3]) -> ([5]);
store_temp<RangeCheck>([2]) -> ([6]);
store_temp<core::option::Option::<core::integer::u16>>([5]) -> ([7]);
jump() { 11() };
branch_align() -> ();
struct_construct<Unit>() -> ([8]);
enum_init<core::option::Option::<core::integer::u16>, 1>([8]) -> ([9]);
store_temp<RangeCheck>([4]) -> ([6]);
store_temp<core::option::Option::<core::integer::u16>>([9]) -> ([7]);
rename<RangeCheck>([6]) -> ([10]);
rename<core::option::Option::<core::integer::u16>>([7]) -> ([11]);
return([10], [11]);

test::foo@0([0]: RangeCheck, [1]: felt252) -> (RangeCheck, core::option::Option::<core::integer::u16>);

//! > ==========================================================================

//! > u16_is_zero libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u16) -> u16 {
    match integer::u16_is_zero(a) {
        IsZeroResult::Zero(()) => 1234_u16,
        IsZeroResult::NonZero(x) => unwrap_non_zero(x),
    }
}

//! > casm
jmp rel 6 if [fp + -3] != 0;
[ap + 0] = 1234, ap++;
jmp rel 3;
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type u16 = u16;
type NonZero<u16> = NonZero<u16>;

libfunc u16_is_zero = u16_is_zero;
libfunc branch_align = branch_align;
libfunc u16_const<1234> = u16_const<1234>;
libfunc store_temp<u16> = store_temp<u16>;
libfunc jump = jump;
libfunc unwrap_non_zero<u16> = unwrap_non_zero<u16>;
libfunc rename<u16> = rename<u16>;

u16_is_zero([0]) { fallthrough() 5([1]) };
branch_align() -> ();
u16_const<1234>() -> ([2]);
store_temp<u16>([2]) -> ([3]);
jump() { 8() };
branch_align() -> ();
unwrap_non_zero<u16>([1]) -> ([4]);
store_temp<u16>([4]) -> ([3]);
rename<u16>([3]) -> ([5]);
return([5]);

test::foo@0([0]: u16) -> (u16);

//! > ==========================================================================

//! > u16_safe_divmod libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u16, b: NonZero::<u16>) -> (u16, u16) {
    integer::u16_safe_divmod(a, b)
}

//! > casm
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -4], memory[fp + -3]) %}
[ap + 4] = [[fp + -5] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[fp + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[fp + -5] + 1], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + -3] = [fp + -3] * [ap + -2];
[fp + -4] = [ap + -3] + [ap + -1];
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1210})

//! > sierra_code
type RangeCheck = RangeCheck;
type u16 = u16;
type NonZero<u16> = NonZero<u16>;
type Tuple<u16, u16> = Struct<ut@Tuple, u16, u16>;

libfunc u16_safe_divmod = u16_safe_divmod;
libfunc struct_construct<Tuple<u16, u16>> = struct_construct<Tuple<u16, u16>>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<Tuple<u16, u16>> = store_temp<Tuple<u16, u16>>;

u16_safe_divmod([0], [1], [2]) -> ([3], [4], [5]);
struct_construct<Tuple<u16, u16>>([4], [5]) -> ([6]);
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<Tuple<u16, u16>>([6]) -> ([8]);
return([7], [8]);

test::foo@0([0]: RangeCheck, [1]: u16, [2]: NonZero<u16>) -> (RangeCheck, Tuple<u16, u16>);
