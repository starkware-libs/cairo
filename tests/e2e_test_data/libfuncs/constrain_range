//! > constrain_range::<felt252, BoundedInt<0, 7>> libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
extern type BoundedInt<const MIN: felt252, const MAX: felt252>;

extern fn constrain_range<T, S>(
    index: T
) -> Option<S> implicits(RangeCheck) nopanic;

fn foo(index: felt252) -> Option<BoundedInt<0, 7>> {
    constrain_range::<felt252, BoundedInt<0, 7>>(index)
}

//! > casm
%{ memory[ap + 0] = memory[fp + -3] < 8 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 8, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -4] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943303, ap++;
[ap + -1] = [[fp + -4] + 1], ap++;
[ap + -5] = [[fp + -4] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 16 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211448, ap++;
[ap + -1] = [[fp + -4] + 1];
ap += 5;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1510})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type BoundedInt<0, 7> = BoundedInt<0, 7> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<test::BoundedInt::<0, 7>> = Enum<ut@core::option::Option::<test::BoundedInt::<0, 7>>, BoundedInt<0, 7>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc constrain_range<felt252, BoundedInt<0, 7>> = constrain_range<felt252, BoundedInt<0, 7>>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<test::BoundedInt::<0, 7>>, 0> = enum_init<core::option::Option::<test::BoundedInt::<0, 7>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<test::BoundedInt::<0, 7>>> = store_temp<core::option::Option::<test::BoundedInt::<0, 7>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<test::BoundedInt::<0, 7>>, 1> = enum_init<core::option::Option::<test::BoundedInt::<0, 7>>, 1>;

constrain_range<felt252, BoundedInt<0, 7>>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<test::BoundedInt::<0, 7>>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([2]); // 3
store_temp<core::option::Option::<test::BoundedInt::<0, 7>>>([5]) -> ([5]); // 4
return([2], [5]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([6]); // 7
enum_init<core::option::Option::<test::BoundedInt::<0, 7>>, 1>([6]) -> ([7]); // 8
store_temp<RangeCheck>([4]) -> ([4]); // 9
store_temp<core::option::Option::<test::BoundedInt::<0, 7>>>([7]) -> ([7]); // 10
return([4], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: felt252) -> (RangeCheck, core::option::Option::<test::BoundedInt::<0, 7>>);

//! > ==========================================================================

//! > bounded_int<0,1>_from_felt

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
extern type BoundedInt<const MIN: felt252, const MAX: felt252>;


extern fn constrain_range<T, S>(
    index: T
) -> Option<S> implicits(RangeCheck) nopanic;

fn foo(index: felt252) -> Option<BoundedInt<0, 1>> {
    constrain_range::<felt252, BoundedInt<0, 1>>(index)
}

//! > casm
%{ memory[ap + 0] = memory[fp + -3] < 2 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 2, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -4] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943297, ap++;
[ap + -1] = [[fp + -4] + 1], ap++;
[ap + -5] = [[fp + -4] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 16 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211454, ap++;
[ap + -1] = [[fp + -4] + 1];
ap += 5;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1510})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type BoundedInt<0, 1> = BoundedInt<0, 1> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<test::BoundedInt::<0, 1>> = Enum<ut@core::option::Option::<test::BoundedInt::<0, 1>>, BoundedInt<0, 1>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc constrain_range<felt252, BoundedInt<0, 1>> = constrain_range<felt252, BoundedInt<0, 1>>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<test::BoundedInt::<0, 1>>, 0> = enum_init<core::option::Option::<test::BoundedInt::<0, 1>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<test::BoundedInt::<0, 1>>> = store_temp<core::option::Option::<test::BoundedInt::<0, 1>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<test::BoundedInt::<0, 1>>, 1> = enum_init<core::option::Option::<test::BoundedInt::<0, 1>>, 1>;

constrain_range<felt252, BoundedInt<0, 1>>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<test::BoundedInt::<0, 1>>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([2]); // 3
store_temp<core::option::Option::<test::BoundedInt::<0, 1>>>([5]) -> ([5]); // 4
return([2], [5]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([6]); // 7
enum_init<core::option::Option::<test::BoundedInt::<0, 1>>, 1>([6]) -> ([7]); // 8
store_temp<RangeCheck>([4]) -> ([4]); // 9
store_temp<core::option::Option::<test::BoundedInt::<0, 1>>>([7]) -> ([7]); // 10
return([4], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: felt252) -> (RangeCheck, core::option::Option::<test::BoundedInt::<0, 1>>);

//! > ==========================================================================

//! > constrain_range::<felt252, BoundedInt<0, 0>> libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
extern type BoundedInt<const MIN: felt252, const MAX: felt252>;


extern fn constrain_range<T, S>(
    index: T
) -> Option<S> implicits(RangeCheck) nopanic;

fn foo(index: felt252) -> Option<BoundedInt<0, 0>> {
    constrain_range::<felt252, BoundedInt<0, 0>>(index)
}

//! > casm
%{ memory[ap + 0] = memory[fp + -3] < 1 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -4] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943296, ap++;
[ap + -1] = [[fp + -4] + 1], ap++;
[ap + -5] = [[fp + -4] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 16 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211455, ap++;
[ap + -1] = [[fp + -4] + 1];
ap += 5;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1510})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type BoundedInt<0, 0> = BoundedInt<0, 0> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<test::BoundedInt::<0, 0>> = Enum<ut@core::option::Option::<test::BoundedInt::<0, 0>>, BoundedInt<0, 0>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc constrain_range<felt252, BoundedInt<0, 0>> = constrain_range<felt252, BoundedInt<0, 0>>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<test::BoundedInt::<0, 0>>, 0> = enum_init<core::option::Option::<test::BoundedInt::<0, 0>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<test::BoundedInt::<0, 0>>> = store_temp<core::option::Option::<test::BoundedInt::<0, 0>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<test::BoundedInt::<0, 0>>, 1> = enum_init<core::option::Option::<test::BoundedInt::<0, 0>>, 1>;

constrain_range<felt252, BoundedInt<0, 0>>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<test::BoundedInt::<0, 0>>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([2]); // 3
store_temp<core::option::Option::<test::BoundedInt::<0, 0>>>([5]) -> ([5]); // 4
return([2], [5]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([6]); // 7
enum_init<core::option::Option::<test::BoundedInt::<0, 0>>, 1>([6]) -> ([7]); // 8
store_temp<RangeCheck>([4]) -> ([4]); // 9
store_temp<core::option::Option::<test::BoundedInt::<0, 0>>>([7]) -> ([7]); // 10
return([4], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: felt252) -> (RangeCheck, core::option::Option::<test::BoundedInt::<0, 0>>);

//! > ==========================================================================

//! > constrain_range::<felt252, BoundedInt<0, 10633823966279327296825105735305134080>> libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
extern type BoundedInt<const MIN: felt252, const MAX: felt252>;


extern fn constrain_range<T, S>(
    index: T
) -> Option<S> implicits(RangeCheck) nopanic;

fn foo(index: felt252) -> Option<BoundedInt<0, 10633823966279327296825105735305134080>> {
    constrain_range::<
        felt252, BoundedInt<0, 10633823966279327296825105735305134080>
    >(index)
}

//! > casm
%{ memory[ap + 0] = memory[fp + -3] < 10633823966279327296825105735305134081 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 10633823966279327296825105735305134081, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -4] + 0], ap++;
[ap + 0] = [ap + -2] + 329648542954659136166549501696463077376, ap++;
[ap + -1] = [[fp + -4] + 1], ap++;
[ap + -5] = [[fp + -4] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 16 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [fp + -3] + 329648542954659136166549501696463077375, ap++;
[ap + -1] = [[fp + -4] + 1];
ap += 5;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1510})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type BoundedInt<0, 10633823966279327296825105735305134080> = BoundedInt<0, 10633823966279327296825105735305134080> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<test::BoundedInt::<0, 10633823966279327296825105735305134080>> = Enum<ut@core::option::Option::<test::BoundedInt::<0, 10633823966279327296825105735305134080>>, BoundedInt<0, 10633823966279327296825105735305134080>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc constrain_range<felt252, BoundedInt<0, 10633823966279327296825105735305134080>> = constrain_range<felt252, BoundedInt<0, 10633823966279327296825105735305134080>>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<test::BoundedInt::<0, 10633823966279327296825105735305134080>>, 0> = enum_init<core::option::Option::<test::BoundedInt::<0, 10633823966279327296825105735305134080>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<test::BoundedInt::<0, 10633823966279327296825105735305134080>>> = store_temp<core::option::Option::<test::BoundedInt::<0, 10633823966279327296825105735305134080>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<test::BoundedInt::<0, 10633823966279327296825105735305134080>>, 1> = enum_init<core::option::Option::<test::BoundedInt::<0, 10633823966279327296825105735305134080>>, 1>;

constrain_range<felt252, BoundedInt<0, 10633823966279327296825105735305134080>>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<test::BoundedInt::<0, 10633823966279327296825105735305134080>>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([2]); // 3
store_temp<core::option::Option::<test::BoundedInt::<0, 10633823966279327296825105735305134080>>>([5]) -> ([5]); // 4
return([2], [5]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([6]); // 7
enum_init<core::option::Option::<test::BoundedInt::<0, 10633823966279327296825105735305134080>>, 1>([6]) -> ([7]); // 8
store_temp<RangeCheck>([4]) -> ([4]); // 9
store_temp<core::option::Option::<test::BoundedInt::<0, 10633823966279327296825105735305134080>>>([7]) -> ([7]); // 10
return([4], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: felt252) -> (RangeCheck, core::option::Option::<test::BoundedInt::<0, 10633823966279327296825105735305134080>>);
