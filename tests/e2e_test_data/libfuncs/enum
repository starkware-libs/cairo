//! > init enum with a single variant

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
enum SingleVariant {
    Variant: felt252,
}

fn foo() -> SingleVariant {
    SingleVariant::Variant(5)
}

//! > casm
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 200})

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type test::SingleVariant = Enum<ut@test::SingleVariant, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 5> = Const<felt252, 5> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<felt252, 5>> = const_as_immediate<Const<felt252, 5>>;
libfunc enum_init<test::SingleVariant, 0> = enum_init<test::SingleVariant, 0>;
libfunc store_temp<test::SingleVariant> = store_temp<test::SingleVariant>;

const_as_immediate<Const<felt252, 5>>() -> ([0]); // 0
enum_init<test::SingleVariant, 0>([0]) -> ([1]); // 1
store_temp<test::SingleVariant>([1]) -> ([1]); // 2
return([1]); // 3

test::foo@0() -> (test::SingleVariant);

//! > ==========================================================================

//! > match enum with a single variant

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
enum SingleVariant {
    Variant: felt252,
}

fn foo(e: SingleVariant) -> felt252 {
    match e {
        SingleVariant::Variant(_) => 0,
    }
}

//! > casm
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type test::SingleVariant = Enum<ut@test::SingleVariant, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 0> = Const<felt252, 0> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc enum_match<test::SingleVariant> = enum_match<test::SingleVariant>;
libfunc branch_align = branch_align;
libfunc drop<felt252> = drop<felt252>;
libfunc const_as_immediate<Const<felt252, 0>> = const_as_immediate<Const<felt252, 0>>;
libfunc store_temp<felt252> = store_temp<felt252>;

enum_match<test::SingleVariant>([0]) -> ([1]); // 0
branch_align() -> (); // 1
drop<felt252>([1]) -> (); // 2
const_as_immediate<Const<felt252, 0>>() -> ([2]); // 3
store_temp<felt252>([2]) -> ([2]); // 4
return([2]); // 5

test::foo@0([0]: test::SingleVariant) -> (felt252);

//! > ==========================================================================

//! > init enum with 2 variants

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
enum Option {
    Some: felt252,
    None: (),
}

fn foo() -> Option {
    Option::Some(5)
}

//! > casm
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 200})

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type test::Option = Enum<ut@test::Option, felt252, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 5> = Const<felt252, 5> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<felt252, 5>> = const_as_immediate<Const<felt252, 5>>;
libfunc enum_init<test::Option, 0> = enum_init<test::Option, 0>;
libfunc store_temp<test::Option> = store_temp<test::Option>;

const_as_immediate<Const<felt252, 5>>() -> ([0]); // 0
enum_init<test::Option, 0>([0]) -> ([1]); // 1
store_temp<test::Option>([1]) -> ([1]); // 2
return([1]); // 3

test::foo@0() -> (test::Option);

//! > ==========================================================================

//! > match enum with 2 variants

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
enum Option {
    Some: felt252,
    None: (),
}

fn foo(e: Option) -> felt252 {
    match e {
        Option::Some(_) => 0,
        Option::None => 1,
    }
}

//! > casm
jmp rel 5 if [fp + -4] != 0;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 200})

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type test::Option = Enum<ut@test::Option, felt252, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 1> = Const<felt252, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 0> = Const<felt252, 0> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc enum_match<test::Option> = enum_match<test::Option>;
libfunc branch_align = branch_align;
libfunc drop<felt252> = drop<felt252>;
libfunc const_as_immediate<Const<felt252, 0>> = const_as_immediate<Const<felt252, 0>>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc drop<Unit> = drop<Unit>;
libfunc const_as_immediate<Const<felt252, 1>> = const_as_immediate<Const<felt252, 1>>;

enum_match<test::Option>([0]) { fallthrough([1]) 6([2]) }; // 0
branch_align() -> (); // 1
drop<felt252>([1]) -> (); // 2
const_as_immediate<Const<felt252, 0>>() -> ([3]); // 3
store_temp<felt252>([3]) -> ([3]); // 4
return([3]); // 5
branch_align() -> (); // 6
drop<Unit>([2]) -> (); // 7
const_as_immediate<Const<felt252, 1>>() -> ([4]); // 8
store_temp<felt252>([4]) -> ([4]); // 9
return([4]); // 10

test::foo@0([0]: test::Option) -> (felt252);

//! > ==========================================================================

//! > init a non-first variant in an enum with more than 2 variants

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
enum Color {
    Red: felt252,
    Green: felt252,
    Blue: felt252,
}

fn foo() -> Color {
    Color::Blue(10)
}

//! > casm
[ap + 0] = 1, ap++;
[ap + 0] = 10, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 200})

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type test::Color = Enum<ut@test::Color, felt252, felt252, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 10> = Const<felt252, 10> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<felt252, 10>> = const_as_immediate<Const<felt252, 10>>;
libfunc enum_init<test::Color, 2> = enum_init<test::Color, 2>;
libfunc store_temp<test::Color> = store_temp<test::Color>;

const_as_immediate<Const<felt252, 10>>() -> ([0]); // 0
enum_init<test::Color, 2>([0]) -> ([1]); // 1
store_temp<test::Color>([1]) -> ([1]); // 2
return([1]); // 3

test::foo@0() -> (test::Color);

//! > ==========================================================================

//! > init the first variant in an enum with more than 2 variants

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
enum Color {
    Red: felt252,
    Green: felt252,
    Blue: felt252,
}

fn foo() -> Color {
    Color::Red(10)
}

//! > casm
[ap + 0] = 5, ap++;
[ap + 0] = 10, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 200})

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type test::Color = Enum<ut@test::Color, felt252, felt252, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 10> = Const<felt252, 10> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<felt252, 10>> = const_as_immediate<Const<felt252, 10>>;
libfunc enum_init<test::Color, 0> = enum_init<test::Color, 0>;
libfunc store_temp<test::Color> = store_temp<test::Color>;

const_as_immediate<Const<felt252, 10>>() -> ([0]); // 0
enum_init<test::Color, 0>([0]) -> ([1]); // 1
store_temp<test::Color>([1]) -> ([1]); // 2
return([1]); // 3

test::foo@0() -> (test::Color);

//! > ==========================================================================

//! > match enum with more than 2 variants

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
enum Color {
    Red: felt252,
    Green: felt252,
    Blue: felt252,
}

fn foo(e: Color) -> felt252 {
    match e {
        Color::Red(_) => 0,
        Color::Green(_) => 1,
        Color::Blue(_) => 2,
    }
}

//! > casm
jmp rel [fp + -4];
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 2, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type test::Color = Enum<ut@test::Color, felt252, felt252, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 2> = Const<felt252, 2> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 1> = Const<felt252, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 0> = Const<felt252, 0> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc enum_match<test::Color> = enum_match<test::Color>;
libfunc branch_align = branch_align;
libfunc drop<felt252> = drop<felt252>;
libfunc const_as_immediate<Const<felt252, 0>> = const_as_immediate<Const<felt252, 0>>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc const_as_immediate<Const<felt252, 1>> = const_as_immediate<Const<felt252, 1>>;
libfunc const_as_immediate<Const<felt252, 2>> = const_as_immediate<Const<felt252, 2>>;

enum_match<test::Color>([0]) { fallthrough([1]) 6([2]) 11([3]) }; // 0
branch_align() -> (); // 1
drop<felt252>([1]) -> (); // 2
const_as_immediate<Const<felt252, 0>>() -> ([4]); // 3
store_temp<felt252>([4]) -> ([4]); // 4
return([4]); // 5
branch_align() -> (); // 6
drop<felt252>([2]) -> (); // 7
const_as_immediate<Const<felt252, 1>>() -> ([5]); // 8
store_temp<felt252>([5]) -> ([5]); // 9
return([5]); // 10
branch_align() -> (); // 11
drop<felt252>([3]) -> (); // 12
const_as_immediate<Const<felt252, 2>>() -> ([6]); // 13
store_temp<felt252>([6]) -> ([6]); // 14
return([6]); // 15

test::foo@0([0]: test::Color) -> (felt252);

//! > ==========================================================================

//! > long enum from BoundedInt<4>

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
enum IndexEnum5 {
    Zero,
    One,
    Two,
    Three,
    Four,
}
extern type BoundedInt<const MIN: felt252, const MAX: felt252>;


extern fn enum_from_bounded_int<T>(index: BoundedInt<0, 4>) -> T nopanic;

// This wrapper is required so that the compiler won't assume extern `enum_from_bounded_int` is a
// branch function.
fn gen_foo<T>(index: BoundedInt<0, 4>) -> T {
    enum_from_bounded_int(index)
}

fn foo(index: BoundedInt<0, 4>) -> IndexEnum5 {
    gen_foo(index)
}

//! > casm
[fp + -3] = [ap + 0] + 1809251394333065606848661391547535052811553607665798349986546028067936010245, ap++;
[ap + 0] = [ap + -1] * -2, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 200})

//! > sierra_code
type BoundedInt<0, 4> = BoundedInt<0, 4> [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type test::IndexEnum5 = Enum<ut@test::IndexEnum5, Unit, Unit, Unit, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc enum_from_bounded_int<test::IndexEnum5> = enum_from_bounded_int<test::IndexEnum5>;
libfunc store_temp<test::IndexEnum5> = store_temp<test::IndexEnum5>;

enum_from_bounded_int<test::IndexEnum5>([0]) -> ([1]); // 0
store_temp<test::IndexEnum5>([1]) -> ([1]); // 1
return([1]); // 2

test::foo@0([0]: BoundedInt<0, 4>) -> (test::IndexEnum5);

//! > ==========================================================================

//! > short enum from BoundedInt<0, 1>

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
enum IndexEnum2 {
    Zero,
    One,
}
extern type BoundedInt<const MIN: felt252, const MAX: felt252>;


extern fn enum_from_bounded_int<T>(index: BoundedInt<0, 1>) -> T nopanic;

// This wrapper is required so that the compiler won't assume extern `enum_from_bounded_int` is a
// branch function.
fn gen_foo<T>(index: BoundedInt<0, 1>) -> T {
    enum_from_bounded_int(index)
}

fn foo(index: BoundedInt<0, 1>) -> IndexEnum2 {
    gen_foo(index)
}

//! > casm
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type BoundedInt<0, 1> = BoundedInt<0, 1> [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type test::IndexEnum2 = Enum<ut@test::IndexEnum2, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc enum_from_bounded_int<test::IndexEnum2> = enum_from_bounded_int<test::IndexEnum2>;
libfunc store_temp<test::IndexEnum2> = store_temp<test::IndexEnum2>;

enum_from_bounded_int<test::IndexEnum2>([0]) -> ([1]); // 0
store_temp<test::IndexEnum2>([1]) -> ([1]); // 1
return([1]); // 2

test::foo@0([0]: BoundedInt<0, 1>) -> (test::IndexEnum2);

//! > ==========================================================================

//! > long enum from BoundedInt<0>

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
enum IndexEnum1 {
    Zero,
}
extern type BoundedInt<const MIN: felt252, const MAX: felt252>;


extern fn enum_from_bounded_int<T>(index: BoundedInt<0, 0>) -> T nopanic;

// This wrapper is required so that the compiler won't assume extern `enum_from_bounded_int` is a
// branch function.
fn gen_foo<T>(index: BoundedInt<0, 0>) -> T {
    enum_from_bounded_int(index)
}

fn foo(index: BoundedInt<0, 0>) -> IndexEnum1 {
    gen_foo(index)
}

//! > casm
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type BoundedInt<0, 0> = BoundedInt<0, 0> [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type test::IndexEnum1 = Enum<ut@test::IndexEnum1, Unit> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc enum_from_bounded_int<test::IndexEnum1> = enum_from_bounded_int<test::IndexEnum1>;
libfunc store_temp<test::IndexEnum1> = store_temp<test::IndexEnum1>;

enum_from_bounded_int<test::IndexEnum1>([0]) -> ([1]); // 0
store_temp<test::IndexEnum1>([1]) -> ([1]); // 1
return([1]); // 2

test::foo@0([0]: BoundedInt<0, 0>) -> (test::IndexEnum1);
