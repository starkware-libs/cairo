//! > u16 to u64 upcast

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u16) -> u64 {
    integer::upcast(a)
}

//! > casm
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type u16 = u16 [storable: true, drop: true, dup: true, zero_sized: false];
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc upcast<u16, u64> = upcast<u16, u64>;
libfunc store_temp<u64> = store_temp<u64>;

upcast<u16, u64>([0]) -> ([1]); // 0
store_temp<u64>([1]) -> ([1]); // 1
return([1]); // 2

test::foo@0([0]: u16) -> (u64);

//! > ==========================================================================

//! > u64 to u64 upcast

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u64) -> u64 {
    integer::upcast(a)
}

//! > casm
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc upcast<u64, u64> = upcast<u64, u64>;
libfunc store_temp<u64> = store_temp<u64>;

upcast<u64, u64>([0]) -> ([1]); // 0
store_temp<u64>([1]) -> ([1]); // 1
return([1]); // 2

test::foo@0([0]: u64) -> (u64);

//! > ==========================================================================

//! > u64 to u16 downcast

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u64) -> Option::<u16> {
    integer::downcast(a)
}

//! > casm
%{ memory[ap + 0] = memory[fp + -3] < 65536 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 65536, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 11;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 770})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type u16 = u16 [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<core::integer::u16> = Enum<ut@core::option::Option::<core::integer::u16>, u16, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc downcast<u64, u16> = downcast<u64, u16>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::integer::u16>, 0> = enum_init<core::option::Option::<core::integer::u16>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::integer::u16>> = store_temp<core::option::Option::<core::integer::u16>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::integer::u16>, 1> = enum_init<core::option::Option::<core::integer::u16>, 1>;

downcast<u64, u16>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<core::integer::u16>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([2]); // 3
store_temp<core::option::Option::<core::integer::u16>>([5]) -> ([5]); // 4
return([2], [5]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([6]); // 7
enum_init<core::option::Option::<core::integer::u16>, 1>([6]) -> ([7]); // 8
store_temp<RangeCheck>([4]) -> ([4]); // 9
store_temp<core::option::Option::<core::integer::u16>>([7]) -> ([7]); // 10
return([4], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: u64) -> (RangeCheck, core::option::Option::<core::integer::u16>);

//! > ==========================================================================

//! > u64 to u64 downcast

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u64) -> Option::<u64> {
    integer::downcast(a)
}

//! > casm
%{ memory[ap + 0] = memory[fp + -3] < 18446744073709551616 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 11;
[ap + 0] = [fp + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 770})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<core::integer::u64> = Enum<ut@core::option::Option::<core::integer::u64>, u64, Unit> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc downcast<u64, u64> = downcast<u64, u64>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::integer::u64>, 0> = enum_init<core::option::Option::<core::integer::u64>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::integer::u64>> = store_temp<core::option::Option::<core::integer::u64>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::integer::u64>, 1> = enum_init<core::option::Option::<core::integer::u64>, 1>;

downcast<u64, u64>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<core::integer::u64>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([2]); // 3
store_temp<core::option::Option::<core::integer::u64>>([5]) -> ([5]); // 4
return([2], [5]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([6]); // 7
enum_init<core::option::Option::<core::integer::u64>, 1>([6]) -> ([7]); // 8
store_temp<RangeCheck>([4]) -> ([4]); // 9
store_temp<core::option::Option::<core::integer::u64>>([7]) -> ([7]); // 10
return([4], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: u64) -> (RangeCheck, core::option::Option::<core::integer::u64>);

//! > ==========================================================================

//! > i64 to i64 downcast

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: i64) -> Option::<i64> {
    integer::downcast(a)
}

//! > casm
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type i64 = i64 [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<core::integer::i64> = Enum<ut@core::option::Option::<core::integer::i64>, i64, Unit> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc downcast<i64, i64> = downcast<i64, i64>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::integer::i64>, 0> = enum_init<core::option::Option::<core::integer::i64>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::integer::i64>> = store_temp<core::option::Option::<core::integer::i64>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::integer::i64>, 1> = enum_init<core::option::Option::<core::integer::i64>, 1>;

downcast<i64, i64>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<core::integer::i64>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([2]); // 3
store_temp<core::option::Option::<core::integer::i64>>([5]) -> ([5]); // 4
return([2], [5]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([6]); // 7
enum_init<core::option::Option::<core::integer::i64>, 1>([6]) -> ([7]); // 8
store_temp<RangeCheck>([4]) -> ([4]); // 9
store_temp<core::option::Option::<core::integer::i64>>([7]) -> ([7]); // 10
return([4], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: i64) -> (RangeCheck, core::option::Option::<core::integer::i64>);

//! > ==========================================================================

//! > u32 to u64 downcast

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u32) -> Option::<u64> {
    integer::downcast(a)
}

//! > casm
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<core::integer::u64> = Enum<ut@core::option::Option::<core::integer::u64>, u64, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc downcast<u32, u64> = downcast<u32, u64>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::integer::u64>, 0> = enum_init<core::option::Option::<core::integer::u64>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::integer::u64>> = store_temp<core::option::Option::<core::integer::u64>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::integer::u64>, 1> = enum_init<core::option::Option::<core::integer::u64>, 1>;

downcast<u32, u64>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<core::integer::u64>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([2]); // 3
store_temp<core::option::Option::<core::integer::u64>>([5]) -> ([5]); // 4
return([2], [5]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([6]); // 7
enum_init<core::option::Option::<core::integer::u64>, 1>([6]) -> ([7]); // 8
store_temp<RangeCheck>([4]) -> ([4]); // 9
store_temp<core::option::Option::<core::integer::u64>>([7]) -> ([7]); // 10
return([4], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: u32) -> (RangeCheck, core::option::Option::<core::integer::u64>);

//! > ==========================================================================

//! > i64 to u16 downcast

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: i64) -> Option::<u16> {
    integer::downcast(a)
}

//! > casm
%{ memory[ap + 0] = (memory[fp + -3] + 0) % PRIME < 65536 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + 0) % PRIME < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 19;
[fp + -3] = [ap + 0] + 65536, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 14;
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [fp + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -4] + 1];
ap += 1;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 950})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type u16 = u16 [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<core::integer::u16> = Enum<ut@core::option::Option::<core::integer::u16>, u16, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type i64 = i64 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc downcast<i64, u16> = downcast<i64, u16>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::integer::u16>, 0> = enum_init<core::option::Option::<core::integer::u16>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::integer::u16>> = store_temp<core::option::Option::<core::integer::u16>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::integer::u16>, 1> = enum_init<core::option::Option::<core::integer::u16>, 1>;

downcast<i64, u16>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<core::integer::u16>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([2]); // 3
store_temp<core::option::Option::<core::integer::u16>>([5]) -> ([5]); // 4
return([2], [5]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([6]); // 7
enum_init<core::option::Option::<core::integer::u16>, 1>([6]) -> ([7]); // 8
store_temp<RangeCheck>([4]) -> ([4]); // 9
store_temp<core::option::Option::<core::integer::u16>>([7]) -> ([7]); // 10
return([4], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: i64) -> (RangeCheck, core::option::Option::<core::integer::u16>);

//! > ==========================================================================

//! > u64 to i16 downcast

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u64) -> Option::<i16> {
    integer::downcast(a)
}

//! > casm
%{ memory[ap + 0] = memory[fp + -3] < 32768 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 32768, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 11;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 770})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type i16 = i16 [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<core::integer::i16> = Enum<ut@core::option::Option::<core::integer::i16>, i16, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc downcast<u64, i16> = downcast<u64, i16>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::integer::i16>, 0> = enum_init<core::option::Option::<core::integer::i16>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::integer::i16>> = store_temp<core::option::Option::<core::integer::i16>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::integer::i16>, 1> = enum_init<core::option::Option::<core::integer::i16>, 1>;

downcast<u64, i16>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<core::integer::i16>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([2]); // 3
store_temp<core::option::Option::<core::integer::i16>>([5]) -> ([5]); // 4
return([2], [5]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([6]); // 7
enum_init<core::option::Option::<core::integer::i16>, 1>([6]) -> ([7]); // 8
store_temp<RangeCheck>([4]) -> ([4]); // 9
store_temp<core::option::Option::<core::integer::i16>>([7]) -> ([7]); // 10
return([4], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: u64) -> (RangeCheck, core::option::Option::<core::integer::i16>);

//! > ==========================================================================

//! > i64 to i16 downcast

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: i64) -> Option::<i16> {
    integer::downcast(a)
}

//! > casm
%{ memory[ap + 0] = (memory[fp + -3] + 32768) % PRIME < 65536 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + 32768) % PRIME < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768244224, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 19;
[fp + -3] = [ap + 0] + 32768, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 14;
[fp + -3] = [ap + 0] + -32768, ap++;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = [fp + -3] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 940})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type i16 = i16 [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<core::integer::i16> = Enum<ut@core::option::Option::<core::integer::i16>, i16, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type i64 = i64 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc downcast<i64, i16> = downcast<i64, i16>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::integer::i16>, 0> = enum_init<core::option::Option::<core::integer::i16>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::integer::i16>> = store_temp<core::option::Option::<core::integer::i16>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::integer::i16>, 1> = enum_init<core::option::Option::<core::integer::i16>, 1>;

downcast<i64, i16>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<core::integer::i16>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([2]); // 3
store_temp<core::option::Option::<core::integer::i16>>([5]) -> ([5]); // 4
return([2], [5]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([6]); // 7
enum_init<core::option::Option::<core::integer::i16>, 1>([6]) -> ([7]); // 8
store_temp<RangeCheck>([4]) -> ([4]); // 9
store_temp<core::option::Option::<core::integer::i16>>([7]) -> ([7]); // 10
return([4], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: i64) -> (RangeCheck, core::option::Option::<core::integer::i16>);

//! > ==========================================================================

//! > i16 to u64 downcast

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: i16) -> Option::<u64> {
    integer::downcast(a)
}

//! > casm
%{ memory[ap + 0] = (memory[fp + -3] + 0) % PRIME < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 11;
[fp + -3] = [[fp + -4] + 0];
ap += 1;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 770})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<core::integer::u64> = Enum<ut@core::option::Option::<core::integer::u64>, u64, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type i16 = i16 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc downcast<i16, u64> = downcast<i16, u64>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::integer::u64>, 0> = enum_init<core::option::Option::<core::integer::u64>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::integer::u64>> = store_temp<core::option::Option::<core::integer::u64>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::integer::u64>, 1> = enum_init<core::option::Option::<core::integer::u64>, 1>;

downcast<i16, u64>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<core::integer::u64>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([2]); // 3
store_temp<core::option::Option::<core::integer::u64>>([5]) -> ([5]); // 4
return([2], [5]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([6]); // 7
enum_init<core::option::Option::<core::integer::u64>, 1>([6]) -> ([7]); // 8
store_temp<RangeCheck>([4]) -> ([4]); // 9
store_temp<core::option::Option::<core::integer::u64>>([7]) -> ([7]); // 10
return([4], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: i16) -> (RangeCheck, core::option::Option::<core::integer::u64>);

//! > ==========================================================================

//! > i16 to u16 downcast

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: i16) -> Option::<u16> {
    integer::downcast(a)
}

//! > casm
%{ memory[ap + 0] = (memory[fp + -3] + 0) % PRIME < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 11;
[fp + -3] = [[fp + -4] + 0];
ap += 1;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 770})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type u16 = u16 [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<core::integer::u16> = Enum<ut@core::option::Option::<core::integer::u16>, u16, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type i16 = i16 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc downcast<i16, u16> = downcast<i16, u16>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::integer::u16>, 0> = enum_init<core::option::Option::<core::integer::u16>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::integer::u16>> = store_temp<core::option::Option::<core::integer::u16>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::integer::u16>, 1> = enum_init<core::option::Option::<core::integer::u16>, 1>;

downcast<i16, u16>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<core::integer::u16>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([2]); // 3
store_temp<core::option::Option::<core::integer::u16>>([5]) -> ([5]); // 4
return([2], [5]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([6]); // 7
enum_init<core::option::Option::<core::integer::u16>, 1>([6]) -> ([7]); // 8
store_temp<RangeCheck>([4]) -> ([4]); // 9
store_temp<core::option::Option::<core::integer::u16>>([7]) -> ([7]); // 10
return([4], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: i16) -> (RangeCheck, core::option::Option::<core::integer::u16>);

//! > ==========================================================================

//! > u16 to i16 downcast

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u16) -> Option::<i16> {
    integer::downcast(a)
}

//! > casm
%{ memory[ap + 0] = memory[fp + -3] < 32768 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 32768, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 11;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 770})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type i16 = i16 [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<core::integer::i16> = Enum<ut@core::option::Option::<core::integer::i16>, i16, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type u16 = u16 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc downcast<u16, i16> = downcast<u16, i16>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::integer::i16>, 0> = enum_init<core::option::Option::<core::integer::i16>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::integer::i16>> = store_temp<core::option::Option::<core::integer::i16>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::integer::i16>, 1> = enum_init<core::option::Option::<core::integer::i16>, 1>;

downcast<u16, i16>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<core::integer::i16>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([2]); // 3
store_temp<core::option::Option::<core::integer::i16>>([5]) -> ([5]); // 4
return([2], [5]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([6]); // 7
enum_init<core::option::Option::<core::integer::i16>, 1>([6]) -> ([7]); // 8
store_temp<RangeCheck>([4]) -> ([4]); // 9
store_temp<core::option::Option::<core::integer::i16>>([7]) -> ([7]); // 10
return([4], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: u16) -> (RangeCheck, core::option::Option::<core::integer::i16>);

//! > ==========================================================================

//! > i8 to BoundedInt<-3, 5> downcast

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
extern type BoundedInt<const MIN: felt252, const MAX: felt252>;

fn foo(a: i8) -> Option::<BoundedInt<-3, 5>> {
    integer::downcast(a)
}

//! > casm
%{ memory[ap + 0] = (memory[fp + -3] + 3) % PRIME < 9 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + 3) % PRIME < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211459, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 19;
[fp + -3] = [ap + 0] + 6, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 14;
[fp + -3] = [ap + 0] + -3, ap++;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211450, ap++;
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 940})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type BoundedInt<-3, 5> = BoundedInt<-3, 5> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<test::BoundedInt::<-3, 5>> = Enum<ut@core::option::Option::<test::BoundedInt::<-3, 5>>, BoundedInt<-3, 5>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type i8 = i8 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc downcast<i8, BoundedInt<-3, 5>> = downcast<i8, BoundedInt<-3, 5>>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<test::BoundedInt::<-3, 5>>, 0> = enum_init<core::option::Option::<test::BoundedInt::<-3, 5>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<test::BoundedInt::<-3, 5>>> = store_temp<core::option::Option::<test::BoundedInt::<-3, 5>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<test::BoundedInt::<-3, 5>>, 1> = enum_init<core::option::Option::<test::BoundedInt::<-3, 5>>, 1>;

downcast<i8, BoundedInt<-3, 5>>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<test::BoundedInt::<-3, 5>>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([2]); // 3
store_temp<core::option::Option::<test::BoundedInt::<-3, 5>>>([5]) -> ([5]); // 4
return([2], [5]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([6]); // 7
enum_init<core::option::Option::<test::BoundedInt::<-3, 5>>, 1>([6]) -> ([7]); // 8
store_temp<RangeCheck>([4]) -> ([4]); // 9
store_temp<core::option::Option::<test::BoundedInt::<-3, 5>>>([7]) -> ([7]); // 10
return([4], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: i8) -> (RangeCheck, core::option::Option::<test::BoundedInt::<-3, 5>>);

//! > ==========================================================================

//! > i8 to BoundedInt<0, 5> downcast

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
extern type BoundedInt<const MIN: felt252, const MAX: felt252>;

fn foo(a: i8) -> Option::<BoundedInt<0, 5>> {
    integer::downcast(a)
}

//! > casm
%{ memory[ap + 0] = (memory[fp + -3] + 0) % PRIME < 6 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + 0) % PRIME < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 19;
[fp + -3] = [ap + 0] + 6, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 14;
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211450, ap++;
[ap + -1] = [[fp + -4] + 1];
ap += 1;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 950})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type BoundedInt<0, 5> = BoundedInt<0, 5> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<test::BoundedInt::<0, 5>> = Enum<ut@core::option::Option::<test::BoundedInt::<0, 5>>, BoundedInt<0, 5>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type i8 = i8 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc downcast<i8, BoundedInt<0, 5>> = downcast<i8, BoundedInt<0, 5>>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<test::BoundedInt::<0, 5>>, 0> = enum_init<core::option::Option::<test::BoundedInt::<0, 5>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<test::BoundedInt::<0, 5>>> = store_temp<core::option::Option::<test::BoundedInt::<0, 5>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<test::BoundedInt::<0, 5>>, 1> = enum_init<core::option::Option::<test::BoundedInt::<0, 5>>, 1>;

downcast<i8, BoundedInt<0, 5>>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<test::BoundedInt::<0, 5>>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([2]); // 3
store_temp<core::option::Option::<test::BoundedInt::<0, 5>>>([5]) -> ([5]); // 4
return([2], [5]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([6]); // 7
enum_init<core::option::Option::<test::BoundedInt::<0, 5>>, 1>([6]) -> ([7]); // 8
store_temp<RangeCheck>([4]) -> ([4]); // 9
store_temp<core::option::Option::<test::BoundedInt::<0, 5>>>([7]) -> ([7]); // 10
return([4], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: i8) -> (RangeCheck, core::option::Option::<test::BoundedInt::<0, 5>>);

//! > ==========================================================================

//! > i8 to BoundedInt<-5, 0> downcast

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
extern type BoundedInt<const MIN: felt252, const MAX: felt252>;

fn foo(a: i8) -> Option::<BoundedInt<-5, 0>> {
    integer::downcast(a)
}

//! > casm
%{ memory[ap + 0] = (memory[fp + -3] + 5) % PRIME < 6 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + 5) % PRIME < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211461, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 19;
[fp + -3] = [ap + 0] + 1, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 14;
[fp + -3] = [ap + 0] + -5, ap++;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211455, ap++;
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 940})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type BoundedInt<-5, 0> = BoundedInt<-5, 0> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<test::BoundedInt::<-5, 0>> = Enum<ut@core::option::Option::<test::BoundedInt::<-5, 0>>, BoundedInt<-5, 0>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type i8 = i8 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc downcast<i8, BoundedInt<-5, 0>> = downcast<i8, BoundedInt<-5, 0>>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<test::BoundedInt::<-5, 0>>, 0> = enum_init<core::option::Option::<test::BoundedInt::<-5, 0>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<test::BoundedInt::<-5, 0>>> = store_temp<core::option::Option::<test::BoundedInt::<-5, 0>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<test::BoundedInt::<-5, 0>>, 1> = enum_init<core::option::Option::<test::BoundedInt::<-5, 0>>, 1>;

downcast<i8, BoundedInt<-5, 0>>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<test::BoundedInt::<-5, 0>>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([2]); // 3
store_temp<core::option::Option::<test::BoundedInt::<-5, 0>>>([5]) -> ([5]); // 4
return([2], [5]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([6]); // 7
enum_init<core::option::Option::<test::BoundedInt::<-5, 0>>, 1>([6]) -> ([7]); // 8
store_temp<RangeCheck>([4]) -> ([4]); // 9
store_temp<core::option::Option::<test::BoundedInt::<-5, 0>>>([7]) -> ([7]); // 10
return([4], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: i8) -> (RangeCheck, core::option::Option::<test::BoundedInt::<-5, 0>>);

//! > ==========================================================================

//! > i8 to BoundedInt<-5, -1> downcast

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
extern type BoundedInt<const MIN: felt252, const MAX: felt252>;

fn foo(a: i8) -> Option::<BoundedInt<-5, -1>> {
    integer::downcast(a)
}

//! > casm
%{ memory[ap + 0] = (memory[fp + -3] + 5) % PRIME < 5 %}
jmp rel 12 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + 5) % PRIME < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211461, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 17;
[fp + -3] = [[fp + -4] + 0];
jmp rel 14, ap++;
[fp + -3] = [ap + 0] + -5, ap++;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 940})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type BoundedInt<-5, -1> = BoundedInt<-5, -1> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<test::BoundedInt::<-5, -1>> = Enum<ut@core::option::Option::<test::BoundedInt::<-5, -1>>, BoundedInt<-5, -1>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type i8 = i8 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc downcast<i8, BoundedInt<-5, -1>> = downcast<i8, BoundedInt<-5, -1>>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<test::BoundedInt::<-5, -1>>, 0> = enum_init<core::option::Option::<test::BoundedInt::<-5, -1>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<test::BoundedInt::<-5, -1>>> = store_temp<core::option::Option::<test::BoundedInt::<-5, -1>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<test::BoundedInt::<-5, -1>>, 1> = enum_init<core::option::Option::<test::BoundedInt::<-5, -1>>, 1>;

downcast<i8, BoundedInt<-5, -1>>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<test::BoundedInt::<-5, -1>>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([2]); // 3
store_temp<core::option::Option::<test::BoundedInt::<-5, -1>>>([5]) -> ([5]); // 4
return([2], [5]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([6]); // 7
enum_init<core::option::Option::<test::BoundedInt::<-5, -1>>, 1>([6]) -> ([7]); // 8
store_temp<RangeCheck>([4]) -> ([4]); // 9
store_temp<core::option::Option::<test::BoundedInt::<-5, -1>>>([7]) -> ([7]); // 10
return([4], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: i8) -> (RangeCheck, core::option::Option::<test::BoundedInt::<-5, -1>>);

//! > ==========================================================================

//! > BoundedInt<100, 200> to BoundedInt<120, 180> downcast

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
extern type BoundedInt<const MIN: felt252, const MAX: felt252>;

fn foo(a: BoundedInt<100, 200>) -> Option::<BoundedInt<120, 180>> {
    integer::downcast(a)
}

//! > casm
%{ memory[ap + 0] = (memory[fp + -3] + -120) % PRIME < 61 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + -120) % PRIME < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211336, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 19;
[fp + -3] = [ap + 0] + 181, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 14;
[fp + -3] = [ap + 0] + 120, ap++;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211275, ap++;
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type BoundedInt<120, 180> = BoundedInt<120, 180> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<test::BoundedInt::<120, 180>> = Enum<ut@core::option::Option::<test::BoundedInt::<120, 180>>, BoundedInt<120, 180>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type BoundedInt<100, 200> = BoundedInt<100, 200> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc downcast<BoundedInt<100, 200>, BoundedInt<120, 180>> = downcast<BoundedInt<100, 200>, BoundedInt<120, 180>>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<test::BoundedInt::<120, 180>>, 0> = enum_init<core::option::Option::<test::BoundedInt::<120, 180>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<test::BoundedInt::<120, 180>>> = store_temp<core::option::Option::<test::BoundedInt::<120, 180>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<test::BoundedInt::<120, 180>>, 1> = enum_init<core::option::Option::<test::BoundedInt::<120, 180>>, 1>;

downcast<BoundedInt<100, 200>, BoundedInt<120, 180>>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<test::BoundedInt::<120, 180>>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([2]); // 3
store_temp<core::option::Option::<test::BoundedInt::<120, 180>>>([5]) -> ([5]); // 4
return([2], [5]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([6]); // 7
enum_init<core::option::Option::<test::BoundedInt::<120, 180>>, 1>([6]) -> ([7]); // 8
store_temp<RangeCheck>([4]) -> ([4]); // 9
store_temp<core::option::Option::<test::BoundedInt::<120, 180>>>([7]) -> ([7]); // 10
return([4], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: BoundedInt<100, 200>) -> (RangeCheck, core::option::Option::<test::BoundedInt::<120, 180>>);

//! > function_costs
test::foo: OrderedHashMap({Const: 940})

//! > ==========================================================================

//! > BoundedInt<2**128 + 100, 2**128 + 200> to BoundedInt<2**128 + 120, 2**128 + 180> downcast

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
extern type BoundedInt<const MIN: felt252, const MAX: felt252>;

fn foo(a: BoundedInt<0x100000000000000000000000000000064, 0x1000000000000000000000000000000c8>)
 -> Option::<BoundedInt<0x100000000000000000000000000000078, 0x1000000000000000000000000000000b4>> {
    integer::downcast(a)
}

//! > casm
%{ memory[ap + 0] = (memory[fp + -3] + -340282366920938463463374607431768211576) % PRIME < 61 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + -340282366920938463463374607431768211576) % PRIME < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + -120, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 19;
[fp + -3] = [ap + 0] + 340282366920938463463374607431768211637, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 14;
[fp + -3] = [ap + 0] + 340282366920938463463374607431768211576, ap++;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = [fp + -3] + -181, ap++;
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type BoundedInt<340282366920938463463374607431768211576, 340282366920938463463374607431768211636> = BoundedInt<340282366920938463463374607431768211576, 340282366920938463463374607431768211636> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<test::BoundedInt::<340282366920938463463374607431768211576, 340282366920938463463374607431768211636>> = Enum<ut@core::option::Option::<test::BoundedInt::<340282366920938463463374607431768211576, 340282366920938463463374607431768211636>>, BoundedInt<340282366920938463463374607431768211576, 340282366920938463463374607431768211636>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type BoundedInt<340282366920938463463374607431768211556, 340282366920938463463374607431768211656> = BoundedInt<340282366920938463463374607431768211556, 340282366920938463463374607431768211656> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc downcast<BoundedInt<340282366920938463463374607431768211556, 340282366920938463463374607431768211656>, BoundedInt<340282366920938463463374607431768211576, 340282366920938463463374607431768211636>> = downcast<BoundedInt<340282366920938463463374607431768211556, 340282366920938463463374607431768211656>, BoundedInt<340282366920938463463374607431768211576, 340282366920938463463374607431768211636>>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<test::BoundedInt::<340282366920938463463374607431768211576, 340282366920938463463374607431768211636>>, 0> = enum_init<core::option::Option::<test::BoundedInt::<340282366920938463463374607431768211576, 340282366920938463463374607431768211636>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<test::BoundedInt::<340282366920938463463374607431768211576, 340282366920938463463374607431768211636>>> = store_temp<core::option::Option::<test::BoundedInt::<340282366920938463463374607431768211576, 340282366920938463463374607431768211636>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<test::BoundedInt::<340282366920938463463374607431768211576, 340282366920938463463374607431768211636>>, 1> = enum_init<core::option::Option::<test::BoundedInt::<340282366920938463463374607431768211576, 340282366920938463463374607431768211636>>, 1>;

downcast<BoundedInt<340282366920938463463374607431768211556, 340282366920938463463374607431768211656>, BoundedInt<340282366920938463463374607431768211576, 340282366920938463463374607431768211636>>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<test::BoundedInt::<340282366920938463463374607431768211576, 340282366920938463463374607431768211636>>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([2]); // 3
store_temp<core::option::Option::<test::BoundedInt::<340282366920938463463374607431768211576, 340282366920938463463374607431768211636>>>([5]) -> ([5]); // 4
return([2], [5]); // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([6]); // 7
enum_init<core::option::Option::<test::BoundedInt::<340282366920938463463374607431768211576, 340282366920938463463374607431768211636>>, 1>([6]) -> ([7]); // 8
store_temp<RangeCheck>([4]) -> ([4]); // 9
store_temp<core::option::Option::<test::BoundedInt::<340282366920938463463374607431768211576, 340282366920938463463374607431768211636>>>([7]) -> ([7]); // 10
return([4], [7]); // 11

test::foo@0([0]: RangeCheck, [1]: BoundedInt<340282366920938463463374607431768211556, 340282366920938463463374607431768211656>) -> (RangeCheck, core::option::Option::<test::BoundedInt::<340282366920938463463374607431768211576, 340282366920938463463374607431768211636>>);

//! > function_costs
test::foo: OrderedHashMap({Const: 940})
