//! > u16 to u64 upcast

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u16) -> u64 {
    integer::upcast(a)
}

//! > casm
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type u16 = u16 [storable: true, drop: true, dup: true, zero_sized: false];
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc upcast<u16, u64> = upcast<u16, u64>;
libfunc store_temp<u64> = store_temp<u64>;

upcast<u16, u64>([0]) -> ([1]); // 0
store_temp<u64>([1]) -> ([2]); // 1
return([2]); // 2

test::foo@0([0]: u16) -> (u64);

//! > ==========================================================================

//! > u64 to u16 downcast

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u64) -> Option::<u16> {
    integer::downcast(a)
}

//! > casm
%{ memory[ap + 0] = memory[fp + -3] < 65536 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 65536, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 12;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 8;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 770})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type u16 = u16 [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<core::integer::u16> = Enum<ut@core::option::Option::<core::integer::u16>, u16, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc downcast<u64, u16> = downcast<u64, u16>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::integer::u16>, 0> = enum_init<core::option::Option::<core::integer::u16>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::integer::u16>> = store_temp<core::option::Option::<core::integer::u16>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::integer::u16>, 1> = enum_init<core::option::Option::<core::integer::u16>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::option::Option::<core::integer::u16>> = rename<core::option::Option::<core::integer::u16>>;

downcast<u64, u16>([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<core::integer::u16>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([6]); // 3
store_temp<core::option::Option::<core::integer::u16>>([5]) -> ([7]); // 4
jump() { 11() }; // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([8]); // 7
enum_init<core::option::Option::<core::integer::u16>, 1>([8]) -> ([9]); // 8
store_temp<RangeCheck>([4]) -> ([6]); // 9
store_temp<core::option::Option::<core::integer::u16>>([9]) -> ([7]); // 10
rename<RangeCheck>([6]) -> ([10]); // 11
rename<core::option::Option::<core::integer::u16>>([7]) -> ([11]); // 12
return([10], [11]); // 13

test::foo@0([0]: RangeCheck, [1]: u64) -> (RangeCheck, core::option::Option::<core::integer::u16>);
