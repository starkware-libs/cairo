//! > init_circuit_data

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::circuit::{AddModGate, CircuitInput, CircuitInputAccumulator, init_circuit_data, Circuit};
type MyCircuit = Circuit<(AddModGate<CircuitInput<0>, CircuitInput<1>>, CircuitInput<2>,)>;

fn foo() -> CircuitInputAccumulator<MyCircuit> {
    init_circuit_data::<MyCircuit>()
}

//! > casm
[ap + 0] = [fp + -3] + 32, ap++;
[ap + 0] = [fp + -3] + 4, ap++;
[ap + 0] = [fp + -3] + 16, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({RangeCheck96: 32, Const: 300})

//! > sierra_code
type RangeCheck96 = RangeCheck96 [storable: true, drop: false, dup: false, zero_sized: false];
type Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)> = Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)> [storable: true, drop: true, dup: true, zero_sized: false];
type CircuitInputAccumulator<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = CircuitInputAccumulator<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> [storable: true, drop: true, dup: false, zero_sized: false];
type core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>> = AddModGate<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<2> = CircuitInput<2> [storable: false, drop: false, dup: false, zero_sized: false];
type (core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>) = Struct<ut@Tuple, core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<1> = CircuitInput<1> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<0> = CircuitInput<0> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc init_circuit_data<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = init_circuit_data<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>;
libfunc store_temp<RangeCheck96> = store_temp<RangeCheck96>;
libfunc store_temp<CircuitInputAccumulator<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>> = store_temp<CircuitInputAccumulator<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>>;

init_circuit_data<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>([0]) -> ([1], [2]); // 0
store_temp<RangeCheck96>([1]) -> ([1]); // 1
store_temp<CircuitInputAccumulator<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>>([2]) -> ([2]); // 2
return([1], [2]); // 3

test::foo@0([0]: RangeCheck96) -> (RangeCheck96, CircuitInputAccumulator<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>);

//! > ==========================================================================

//! > fill_input

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::circuit::{
    U96Guarantee, AddModGate, fill_circuit_input, FillInputResult, CircuitInput, CircuitInputAccumulator,
    init_circuit_data, Circuit
};
type MyCircuit = Circuit<(AddModGate<CircuitInput<0>, CircuitInput<1>>, CircuitInput<2>,)>;

fn foo(
    accumulator: CircuitInputAccumulator<MyCircuit>, val: [U96Guarantee; 4]
) -> FillInputResult<MyCircuit> {
    fill_circuit_input(accumulator, val)
}

//! > casm
[fp + -6] = [[fp + -8] + 0];
[fp + -5] = [[fp + -8] + 1];
[fp + -4] = [[fp + -8] + 2];
[fp + -3] = [[fp + -8] + 3];
[ap + 0] = [fp + -8] + 4, ap++;
[fp + -7] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
ret;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -7], ap++;
ret;

//! > sierra_code
type CircuitInputAccumulator<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = CircuitInputAccumulator<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> [storable: true, drop: true, dup: false, zero_sized: false];
type CircuitData<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = CircuitData<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> [storable: true, drop: true, dup: false, zero_sized: false];
type core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = Enum<ut@core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, CircuitData<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, CircuitInputAccumulator<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>> [storable: true, drop: true, dup: false, zero_sized: false];
type Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)> = Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)> [storable: true, drop: true, dup: true, zero_sized: false];
type core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>> = AddModGate<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<2> = CircuitInput<2> [storable: false, drop: false, dup: false, zero_sized: false];
type (core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>) = Struct<ut@Tuple, core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>> [storable: false, drop: false, dup: false, zero_sized: false];
type U96Guarantee = U96Guarantee [storable: true, drop: false, dup: false, zero_sized: false];
type Tuple<U96Guarantee, U96Guarantee, U96Guarantee, U96Guarantee> = Struct<ut@Tuple, U96Guarantee, U96Guarantee, U96Guarantee, U96Guarantee> [storable: true, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<1> = CircuitInput<1> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<0> = CircuitInput<0> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc fill_circuit_input<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = fill_circuit_input<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>;
libfunc branch_align = branch_align;
libfunc enum_init<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 0> = enum_init<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 0>;
libfunc store_temp<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>> = store_temp<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>>;
libfunc enum_init<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 1> = enum_init<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 1>;

fill_circuit_input<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>([0], [1]) { fallthrough([2]) 5([3]) }; // 0
branch_align() -> (); // 1
enum_init<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 0>([2]) -> ([4]); // 2
store_temp<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>>([4]) -> ([4]); // 3
return([4]); // 4
branch_align() -> (); // 5
enum_init<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 1>([3]) -> ([5]); // 6
store_temp<core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>>([5]) -> ([5]); // 7
return([5]); // 8

test::foo@0([0]: CircuitInputAccumulator<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, [1]: Tuple<U96Guarantee, U96Guarantee, U96Guarantee, U96Guarantee>) -> (core::circuit::FillInputResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>);

//! > function_costs
test::foo: OrderedHashMap({Const: 1000})

//! > ==========================================================================

//! > get_circuit_descriptor

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::circuit::{
    AddModGate, get_circuit_descriptor, CircuitInput, CircuitDescriptor, Circuit, InverseGate,
    MulModGate, SubModGate,
};
type MyCircuit =
    Circuit<(AddModGate<CircuitInput<0>, CircuitInput<1>>, InverseGate<CircuitInput<2>>,
        MulModGate<CircuitInput<1>, CircuitInput<2>>,
        SubModGate<CircuitInput<2>, CircuitInput<0>>)>;

fn foo() -> CircuitDescriptor<MyCircuit> {
    get_circuit_descriptor::<MyCircuit>()
}

//! > casm
call rel 11;
[ap + 0] = [ap + -1] + 10, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -2] + 6, ap++;
[ap + 0] = 5, ap++;
ret;
ret;
dw 32;
dw 16;
dw 24;
dw 16;
dw 20;
dw 44;
dw 0;
dw 4;
dw 16;
dw 0;
dw 8;
dw 20;
dw 0;
dw 12;
dw 24;
dw 20;
dw 24;
dw 36;
dw 40;
dw 24;
dw 0;

//! > sierra_code
type CircuitDescriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::InverseGate::<core::circuit::CircuitInput::<2>>, core::circuit::MulModGate::<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>>, core::circuit::SubModGate::<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>>)>> = CircuitDescriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::InverseGate::<core::circuit::CircuitInput::<2>>, core::circuit::MulModGate::<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>>, core::circuit::SubModGate::<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>>)>> [storable: true, drop: true, dup: true, zero_sized: false];
type Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::InverseGate::<core::circuit::CircuitInput::<2>>, core::circuit::MulModGate::<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>>, core::circuit::SubModGate::<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>>)> = Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::InverseGate::<core::circuit::CircuitInput::<2>>, core::circuit::MulModGate::<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>>, core::circuit::SubModGate::<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>>)> [storable: true, drop: true, dup: true, zero_sized: false];
type core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>> = AddModGate<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::InverseGate::<core::circuit::CircuitInput::<2>> = InverseGate<core::circuit::CircuitInput::<2>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::MulModGate::<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>> = MulModGate<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::SubModGate::<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>> = SubModGate<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>> [storable: false, drop: false, dup: false, zero_sized: false];
type (core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::InverseGate::<core::circuit::CircuitInput::<2>>, core::circuit::MulModGate::<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>>, core::circuit::SubModGate::<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>>) = Struct<ut@Tuple, core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::InverseGate::<core::circuit::CircuitInput::<2>>, core::circuit::MulModGate::<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>>, core::circuit::SubModGate::<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<0> = CircuitInput<0> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<2> = CircuitInput<2> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<1> = CircuitInput<1> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc get_circuit_descriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::InverseGate::<core::circuit::CircuitInput::<2>>, core::circuit::MulModGate::<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>>, core::circuit::SubModGate::<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>>)>> = get_circuit_descriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::InverseGate::<core::circuit::CircuitInput::<2>>, core::circuit::MulModGate::<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>>, core::circuit::SubModGate::<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>>)>>;

get_circuit_descriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::InverseGate::<core::circuit::CircuitInput::<2>>, core::circuit::MulModGate::<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>>, core::circuit::SubModGate::<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>>)>>() -> ([0]); // 0
return([0]); // 1

test::foo@0() -> (CircuitDescriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::InverseGate::<core::circuit::CircuitInput::<2>>, core::circuit::MulModGate::<core::circuit::CircuitInput::<1>, core::circuit::CircuitInput::<2>>, core::circuit::SubModGate::<core::circuit::CircuitInput::<2>, core::circuit::CircuitInput::<0>>)>>);

//! > function_costs
test::foo: OrderedHashMap({Const: 600})

//! > ==========================================================================

//! > u348_is_zero

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::zeroable::IsZeroResult;
use core::circuit::{u384, u384_is_zero};

fn foo(a: u384) -> IsZeroResult::<u384> {
    u384_is_zero(a)
}

//! > casm
jmp rel 19 if [fp + -6] != 0;
jmp rel 17 if [fp + -5] != 0;
jmp rel 15 if [fp + -4] != 0;
jmp rel 13 if [fp + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;

//! > sierra_code
type BoundedInt<0, 79228162514264337593543950335> = BoundedInt<0, 79228162514264337593543950335> [storable: true, drop: true, dup: true, zero_sized: false];
type core::circuit::u384 = Struct<ut@core::circuit::u384, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>> [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type NonZero<core::circuit::u384> = NonZero<core::circuit::u384> [storable: true, drop: true, dup: true, zero_sized: false];
type core::zeroable::IsZeroResult::<core::circuit::u384> = Enum<ut@core::zeroable::IsZeroResult::<core::circuit::u384>, Unit, NonZero<core::circuit::u384>> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u384_is_zero = u384_is_zero;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::zeroable::IsZeroResult::<core::circuit::u384>, 0> = enum_init<core::zeroable::IsZeroResult::<core::circuit::u384>, 0>;
libfunc store_temp<core::zeroable::IsZeroResult::<core::circuit::u384>> = store_temp<core::zeroable::IsZeroResult::<core::circuit::u384>>;
libfunc enum_init<core::zeroable::IsZeroResult::<core::circuit::u384>, 1> = enum_init<core::zeroable::IsZeroResult::<core::circuit::u384>, 1>;

u384_is_zero([0]) { fallthrough() 6([1]) }; // 0
branch_align() -> (); // 1
struct_construct<Unit>() -> ([2]); // 2
enum_init<core::zeroable::IsZeroResult::<core::circuit::u384>, 0>([2]) -> ([3]); // 3
store_temp<core::zeroable::IsZeroResult::<core::circuit::u384>>([3]) -> ([3]); // 4
return([3]); // 5
branch_align() -> (); // 6
enum_init<core::zeroable::IsZeroResult::<core::circuit::u384>, 1>([1]) -> ([4]); // 7
store_temp<core::zeroable::IsZeroResult::<core::circuit::u384>>([4]) -> ([4]); // 8
return([4]); // 9

test::foo@0([0]: core::circuit::u384) -> (core::zeroable::IsZeroResult::<core::circuit::u384>);

//! > function_costs
test::foo: OrderedHashMap({Const: 900})

//! > ==========================================================================

//! > eval_circuit

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::circuit::{
    AddModGate, Circuit, CircuitData, CircuitInput, CircuitDescriptor, EvalCircuitResult,
    eval_circuit, u384
};
type MyCircuit = Circuit<(AddModGate<CircuitInput<0>, CircuitInput<1>>, CircuitInput<2>,)>;

fn foo(
    desc: CircuitDescriptor<MyCircuit>, data: CircuitData<MyCircuit>, modulus: NonZero<u384>
) -> EvalCircuitResult<MyCircuit> {
    eval_circuit::<MyCircuit>(desc, data, modulus, 0, 1)
}

//! > casm
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[fp + -7] = [ap + 0] + 16, ap++;
[ap + -2] = [[ap + -1] + 0];
[ap + -3] = [[ap + -1] + 1];
[ap + -3] = [[ap + -1] + 2];
[ap + -3] = [[ap + -1] + 3];
[fp + -6] = [[fp + -13] + 0];
[fp + -5] = [[fp + -13] + 1];
[fp + -4] = [[fp + -13] + 2];
[fp + -3] = [[fp + -13] + 3];
[ap + -1] = [[fp + -13] + 4];
[fp + -11] = [[fp + -13] + 5];
[fp + -10] = [[fp + -13] + 6];
%{ raise NotImplementedError %}
[fp + -6] = [[fp + -12] + 0], ap++;
[fp + -5] = [[fp + -12] + 1];
[fp + -4] = [[fp + -12] + 2];
[fp + -3] = [[fp + -12] + 3];
[ap + -2] = [[fp + -12] + 4];
[fp + -9] = [[fp + -12] + 5];
[ap + -1] = [[fp + -12] + 6];
[fp + -8] = [ap + 0] + [ap + -1], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 24;
[ap + 0] = [ap + -2] * 7, ap++;
[ap + 0] = [fp + -13] + 7, ap++;
[ap + 0] = [fp + -12] + [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
ap += 1;
[ap + 0] = [fp + -13] + 7, ap++;
[ap + 0] = [fp + -12] + 21, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;

//! > sierra_code
type BoundedInt<0, 0> = BoundedInt<0, 0> [storable: true, drop: true, dup: true, zero_sized: false];
type CircuitPartialOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = CircuitPartialOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> [storable: true, drop: true, dup: false, zero_sized: false];
type CircuitFailureGuarantee = CircuitFailureGuarantee [storable: true, drop: false, dup: false, zero_sized: false];
type Tuple<CircuitPartialOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, CircuitFailureGuarantee> = Struct<ut@Tuple, CircuitPartialOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, CircuitFailureGuarantee> [storable: true, drop: false, dup: false, zero_sized: false];
type CircuitOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = CircuitOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> [storable: true, drop: true, dup: false, zero_sized: false];
type core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = Enum<ut@core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, Tuple<CircuitPartialOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, CircuitFailureGuarantee>, CircuitOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>> [storable: true, drop: false, dup: false, zero_sized: false];
type Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)> = Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)> [storable: true, drop: true, dup: true, zero_sized: false];
type core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>> = AddModGate<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<2> = CircuitInput<2> [storable: false, drop: false, dup: false, zero_sized: false];
type (core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>) = Struct<ut@Tuple, core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<1> = CircuitInput<1> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<0> = CircuitInput<0> [storable: false, drop: false, dup: false, zero_sized: false];
type BoundedInt<0, 79228162514264337593543950335> = BoundedInt<0, 79228162514264337593543950335> [storable: true, drop: true, dup: true, zero_sized: false];
type core::circuit::u384 = Struct<ut@core::circuit::u384, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>> [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<core::circuit::u384> = NonZero<core::circuit::u384> [storable: true, drop: true, dup: true, zero_sized: false];
type CircuitData<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = CircuitData<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> [storable: true, drop: true, dup: false, zero_sized: false];
type CircuitDescriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = CircuitDescriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> [storable: true, drop: true, dup: true, zero_sized: false];
type MulMod = MulMod [storable: true, drop: false, dup: false, zero_sized: false];
type AddMod = AddMod [storable: true, drop: false, dup: false, zero_sized: false];
type Const<BoundedInt<1, 1>, 1> = Const<BoundedInt<1, 1>, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type BoundedInt<1, 1> = BoundedInt<1, 1> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<BoundedInt<0, 0>, 0> = Const<BoundedInt<0, 0>, 0> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<BoundedInt<0, 0>, 0>> = const_as_immediate<Const<BoundedInt<0, 0>, 0>>;
libfunc const_as_immediate<Const<BoundedInt<1, 1>, 1>> = const_as_immediate<Const<BoundedInt<1, 1>, 1>>;
libfunc store_temp<BoundedInt<0, 0>> = store_temp<BoundedInt<0, 0>>;
libfunc store_temp<BoundedInt<1, 1>> = store_temp<BoundedInt<1, 1>>;
libfunc eval_circuit<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = eval_circuit<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>;
libfunc branch_align = branch_align;
libfunc struct_construct<Tuple<CircuitPartialOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, CircuitFailureGuarantee>> = struct_construct<Tuple<CircuitPartialOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, CircuitFailureGuarantee>>;
libfunc enum_init<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 0> = enum_init<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 0>;
libfunc store_temp<AddMod> = store_temp<AddMod>;
libfunc store_temp<MulMod> = store_temp<MulMod>;
libfunc store_temp<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>> = store_temp<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>>;
libfunc enum_init<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 1> = enum_init<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 1>;

const_as_immediate<Const<BoundedInt<0, 0>, 0>>() -> ([5]); // 0
const_as_immediate<Const<BoundedInt<1, 1>, 1>>() -> ([6]); // 1
store_temp<BoundedInt<0, 0>>([5]) -> ([5]); // 2
store_temp<BoundedInt<1, 1>>([6]) -> ([6]); // 3
eval_circuit<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>([0], [1], [2], [3], [4], [5], [6]) { fallthrough([7], [8], [9], [10]) 12([11], [12], [13]) }; // 4
branch_align() -> (); // 5
struct_construct<Tuple<CircuitPartialOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, CircuitFailureGuarantee>>([9], [10]) -> ([14]); // 6
enum_init<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 0>([14]) -> ([15]); // 7
store_temp<AddMod>([7]) -> ([7]); // 8
store_temp<MulMod>([8]) -> ([8]); // 9
store_temp<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>>([15]) -> ([15]); // 10
return([7], [8], [15]); // 11
branch_align() -> (); // 12
enum_init<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, 1>([13]) -> ([16]); // 13
store_temp<AddMod>([11]) -> ([11]); // 14
store_temp<MulMod>([12]) -> ([12]); // 15
store_temp<core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>>([16]) -> ([16]); // 16
return([11], [12], [16]); // 17

test::foo@0([0]: AddMod, [1]: MulMod, [2]: CircuitDescriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, [3]: CircuitData<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>, [4]: NonZero<core::circuit::u384>) -> (AddMod, MulMod, core::circuit::EvalCircuitResult::<core::circuit::Circuit::<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>);

//! > function_costs
test::foo: OrderedHashMap({AddMod: 1, MulMod: 3, Const: 4210})

//! > ==========================================================================

//! > circuit_failure_guarantee_verify

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::circuit::{CircuitFailureGuarantee, U384LessThanGuarantee,
    circuit_failure_guarantee_verify};

fn foo(
    guarantee: CircuitFailureGuarantee,
) -> U384LessThanGuarantee {
    circuit_failure_guarantee_verify(guarantee, 0, 1)
}

//! > casm
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -8] * 3, ap++;
[ap + 0] = [fp + -10] + [ap + -1], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -2] + 1], ap++;
[ap + -6] = [[ap + -3] + 2];
[fp + -11] = [ap + 0] + [fp + -7], ap++;
[ap + -7] = [[fp + -11] + 0];
[ap + -7] = [[fp + -11] + 1];
[ap + -7] = [[fp + -11] + 2];
[ap + -7] = [[fp + -11] + 3];
%{ memory[ap + 0] = segments.add() %}
[ap + -3] = [[ap + 0] + 0], ap++;
[ap + -3] = [[ap + -1] + 1];
[ap + -2] = [[ap + -1] + 2];
[fp + -8] = [[fp + -11] + 4];
[fp + -9] = [ap + 0] + [fp + -8], ap++;
[ap + -1] = [[fp + -11] + 5];
[fp + -6] = [[fp + -12] + 0];
[fp + -5] = [[fp + -12] + 1];
[fp + -4] = [[fp + -12] + 2];
[fp + -3] = [[fp + -12] + 3];
[fp + -7] = [[fp + -12] + 4];
[ap + -2] = [[fp + -12] + 5];
[ap + -8] = [[fp + -12] + 6];
[ap + 0] = [fp + -7] + [ap + -5], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -2] + 1], ap++;
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + 0] = [[ap + -4] + 3], ap++;
jmp rel 9 if [ap + -4] != 0;
jmp rel 7 if [ap + -3] != 0;
jmp rel 5 if [ap + -2] != 0;
jmp rel 3 if [ap + -1] != 0;
[ap + -13] = [ap + -14];
[ap + 0] = [fp + -12] + 7, ap++;
[ap + 0] = [fp + -11] + 6, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;

//! > sierra_code
type BoundedInt<0, 0> = BoundedInt<0, 0> [storable: true, drop: true, dup: true, zero_sized: false];
type U384LessThanGuarantee = U384LessThanGuarantee [storable: true, drop: true, dup: false, zero_sized: false];
type CircuitFailureGuarantee = CircuitFailureGuarantee [storable: true, drop: false, dup: false, zero_sized: false];
type MulMod = MulMod [storable: true, drop: false, dup: false, zero_sized: false];
type RangeCheck96 = RangeCheck96 [storable: true, drop: false, dup: false, zero_sized: false];
type Const<BoundedInt<1, 1>, 1> = Const<BoundedInt<1, 1>, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type BoundedInt<1, 1> = BoundedInt<1, 1> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<BoundedInt<0, 0>, 0> = Const<BoundedInt<0, 0>, 0> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<BoundedInt<0, 0>, 0>> = const_as_immediate<Const<BoundedInt<0, 0>, 0>>;
libfunc const_as_immediate<Const<BoundedInt<1, 1>, 1>> = const_as_immediate<Const<BoundedInt<1, 1>, 1>>;
libfunc store_temp<BoundedInt<0, 0>> = store_temp<BoundedInt<0, 0>>;
libfunc store_temp<BoundedInt<1, 1>> = store_temp<BoundedInt<1, 1>>;
libfunc circuit_failure_guarantee_verify = circuit_failure_guarantee_verify;
libfunc store_temp<MulMod> = store_temp<MulMod>;
libfunc store_temp<RangeCheck96> = store_temp<RangeCheck96>;
libfunc store_temp<U384LessThanGuarantee> = store_temp<U384LessThanGuarantee>;

const_as_immediate<Const<BoundedInt<0, 0>, 0>>() -> ([3]); // 0
const_as_immediate<Const<BoundedInt<1, 1>, 1>>() -> ([4]); // 1
store_temp<BoundedInt<0, 0>>([3]) -> ([3]); // 2
store_temp<BoundedInt<1, 1>>([4]) -> ([4]); // 3
circuit_failure_guarantee_verify([1], [0], [2], [3], [4]) -> ([5], [6], [7]); // 4
store_temp<MulMod>([6]) -> ([6]); // 5
store_temp<RangeCheck96>([5]) -> ([5]); // 6
store_temp<U384LessThanGuarantee>([7]) -> ([7]); // 7
return([6], [5], [7]); // 8

test::foo@0([0]: MulMod, [1]: RangeCheck96, [2]: CircuitFailureGuarantee) -> (MulMod, RangeCheck96, U384LessThanGuarantee);

//! > function_costs
test::foo: OrderedHashMap({RangeCheck96: 6, Const: 4500})

//! > ==========================================================================

//! > get_circuit_output

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::circuit::{u384, AddModGate, CircuitInput, Circuit, CircuitOutputs, get_circuit_output,
 U384LessThanGuarantee};


type MyCircuit = Circuit<(AddModGate<CircuitInput<0>, CircuitInput<1>>, CircuitInput<2>,)>;

fn foo(
    outputs: CircuitOutputs<MyCircuit>,
) -> (u384, U384LessThanGuarantee) {
    get_circuit_output::<MyCircuit, CircuitInput::<1>>(outputs)
}

//! > casm
[ap + 0] = [fp + -7] + 20, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -2] + 1], ap++;
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + 0] = [[ap + -4] + 3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;

//! > sierra_code
type CircuitOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = CircuitOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> [storable: true, drop: true, dup: false, zero_sized: false];
type BoundedInt<0, 79228162514264337593543950335> = BoundedInt<0, 79228162514264337593543950335> [storable: true, drop: true, dup: true, zero_sized: false];
type core::circuit::u384 = Struct<ut@core::circuit::u384, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>, BoundedInt<0, 79228162514264337593543950335>> [storable: true, drop: true, dup: true, zero_sized: false];
type U384LessThanGuarantee = U384LessThanGuarantee [storable: true, drop: true, dup: false, zero_sized: false];
type Tuple<core::circuit::u384, U384LessThanGuarantee> = Struct<ut@Tuple, core::circuit::u384, U384LessThanGuarantee> [storable: true, drop: true, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<1> = CircuitInput<1> [storable: false, drop: false, dup: false, zero_sized: false];
type Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)> = Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)> [storable: true, drop: true, dup: true, zero_sized: false];
type core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>> = AddModGate<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<2> = CircuitInput<2> [storable: false, drop: false, dup: false, zero_sized: false];
type (core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>) = Struct<ut@Tuple, core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<0> = CircuitInput<0> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc get_circuit_output<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>, core::circuit::CircuitInput::<1>> = get_circuit_output<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>, core::circuit::CircuitInput::<1>>;
libfunc struct_construct<Tuple<core::circuit::u384, U384LessThanGuarantee>> = struct_construct<Tuple<core::circuit::u384, U384LessThanGuarantee>>;
libfunc store_temp<Tuple<core::circuit::u384, U384LessThanGuarantee>> = store_temp<Tuple<core::circuit::u384, U384LessThanGuarantee>>;

get_circuit_output<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>, core::circuit::CircuitInput::<1>>([0]) -> ([1], [2]); // 0
struct_construct<Tuple<core::circuit::u384, U384LessThanGuarantee>>([1], [2]) -> ([3]); // 1
store_temp<Tuple<core::circuit::u384, U384LessThanGuarantee>>([3]) -> ([3]); // 2
return([3]); // 3

test::foo@0([0]: CircuitOutputs<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>) -> (Tuple<core::circuit::u384, U384LessThanGuarantee>);

//! > function_costs
test::foo: OrderedHashMap({Const: 1700})

//! > ==========================================================================

//! > into_u96_guarantee

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use core::circuit::{U96Guarantee, into_u96_guarantee};


fn foo(val: u8) -> U96Guarantee {
    into_u96_guarantee(val)
}

//! > casm
[ap + 0] = [fp + -3], ap++;
ret;

//! > sierra_code
type u8 = u8 [storable: true, drop: true, dup: true, zero_sized: false];
type U96Guarantee = U96Guarantee [storable: true, drop: false, dup: false, zero_sized: false];

libfunc into_u96_guarantee<u8> = into_u96_guarantee<u8>;
libfunc store_temp<U96Guarantee> = store_temp<U96Guarantee>;

into_u96_guarantee<u8>([0]) -> ([1]); // 0
store_temp<U96Guarantee>([1]) -> ([1]); // 1
return([1]); // 2

test::foo@0([0]: u8) -> (U96Guarantee);

//! > function_costs
test::foo: OrderedHashMap({Const: 100})
