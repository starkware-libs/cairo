//! > null libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo() -> Nullable::<felt252> {
    null::<felt252>()
}

//! > casm
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type Nullable<felt252> = Nullable<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc null<felt252> = null<felt252>;
libfunc store_temp<Nullable<felt252>> = store_temp<Nullable<felt252>>;

null<felt252>() -> ([0]); // 0
store_temp<Nullable<felt252>>([0]) -> ([1]); // 1
return([1]); // 2

test::foo@0() -> (Nullable<felt252>);

//! > ==========================================================================

//! > nullable_from_box libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(x: Box::<felt252>) -> Nullable::<felt252> {
    nullable_from_box::<felt252>(x)
}

//! > casm
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type Box<felt252> = Box<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Nullable<felt252> = Nullable<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc nullable_from_box<felt252> = nullable_from_box<felt252>;
libfunc store_temp<Nullable<felt252>> = store_temp<Nullable<felt252>>;

nullable_from_box<felt252>([0]) -> ([1]); // 0
store_temp<Nullable<felt252>>([1]) -> ([2]); // 1
return([2]); // 2

test::foo@0([0]: Box<felt252>) -> (Nullable<felt252>);

//! > ==========================================================================

//! > match_nullable libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(x: Nullable::<felt252>, y: Box::<felt252>) -> Box::<felt252> {
    match match_nullable::<felt252>(x) {
        nullable::FromNullableResult::Null(_) => y,
        nullable::FromNullableResult::NotNull(x) => x,
    }
}

//! > casm
jmp rel 5 if [fp + -4] != 0;
[ap + 0] = [fp + -3], ap++;
jmp rel 3;
[ap + 0] = [fp + -4], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type Nullable<felt252> = Nullable<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Box<felt252> = Box<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc match_nullable<felt252> = match_nullable<felt252>;
libfunc branch_align = branch_align;
libfunc store_temp<Box<felt252>> = store_temp<Box<felt252>>;
libfunc jump = jump;
libfunc drop<Box<felt252>> = drop<Box<felt252>>;
libfunc rename<Box<felt252>> = rename<Box<felt252>>;

match_nullable<felt252>([0]) { fallthrough() 4([2]) }; // 0
branch_align() -> (); // 1
store_temp<Box<felt252>>([1]) -> ([3]); // 2
jump() { 7() }; // 3
branch_align() -> (); // 4
drop<Box<felt252>>([1]) -> (); // 5
store_temp<Box<felt252>>([2]) -> ([3]); // 6
rename<Box<felt252>>([3]) -> ([4]); // 7
return([4]); // 8

test::foo@0([0]: Nullable<felt252>, [1]: Box<felt252>) -> (Box<felt252>);

//! > ==========================================================================

//! > nullable libfuncs

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo() -> felt252 {
    match match_nullable::<felt252>(nullable_from_box::<felt252>(BoxTrait::new(1234))) {
        nullable::FromNullableResult::Null(_) => 555,
        nullable::FromNullableResult::NotNull(x) => x.unbox(),
    }
}

//! > casm
[ap + 0] = 1234, ap++;
%{
if '__boxed_segment' not in globals():
    __boxed_segment = segments.add()
memory[ap + 0] = __boxed_segment
__boxed_segment += 1
%}
[ap + -1] = [[ap + 0] + 0], ap++;
jmp rel 6 if [ap + -1] != 0;
[ap + 0] = 555, ap++;
jmp rel 3;
[ap + 0] = [[ap + -1] + 0], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 500})

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Nullable<felt252> = Nullable<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Box<felt252> = Box<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc felt252_const<1234> = felt252_const<1234>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc into_box<felt252> = into_box<felt252>;
libfunc nullable_from_box<felt252> = nullable_from_box<felt252>;
libfunc match_nullable<felt252> = match_nullable<felt252>;
libfunc branch_align = branch_align;
libfunc felt252_const<555> = felt252_const<555>;
libfunc jump = jump;
libfunc unbox<felt252> = unbox<felt252>;
libfunc rename<felt252> = rename<felt252>;

felt252_const<1234>() -> ([0]); // 0
store_temp<felt252>([0]) -> ([0]); // 1
into_box<felt252>([0]) -> ([1]); // 2
nullable_from_box<felt252>([1]) -> ([2]); // 3
match_nullable<felt252>([2]) { fallthrough() 9([3]) }; // 4
branch_align() -> (); // 5
felt252_const<555>() -> ([4]); // 6
store_temp<felt252>([4]) -> ([5]); // 7
jump() { 12() }; // 8
branch_align() -> (); // 9
unbox<felt252>([3]) -> ([6]); // 10
store_temp<felt252>([6]) -> ([5]); // 11
rename<felt252>([5]) -> ([7]); // 12
return([7]); // 13

test::foo@0() -> (felt252);

//! > ==========================================================================

//! > nullable libfuncs for size zero inner types

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo() -> felt252 {
    match match_nullable(nullable_from_box(BoxTrait::new(()))) {
        nullable::FromNullableResult::Null(_) => 0,
        nullable::FromNullableResult::NotNull(x) => 1,
    }
}

//! > casm
[ap + 0] = 1, ap++;
jmp rel 6 if [ap + -1] != 0;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 400})

//! > sierra_code
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Nullable<Unit> = Nullable<Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Box<Unit> = Box<Unit> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc into_box<Unit> = into_box<Unit>;
libfunc nullable_from_box<Unit> = nullable_from_box<Unit>;
libfunc match_nullable<Unit> = match_nullable<Unit>;
libfunc branch_align = branch_align;
libfunc felt252_const<0> = felt252_const<0>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc jump = jump;
libfunc drop<Box<Unit>> = drop<Box<Unit>>;
libfunc felt252_const<1> = felt252_const<1>;
libfunc rename<felt252> = rename<felt252>;

struct_construct<Unit>() -> ([0]); // 0
store_temp<Unit>([0]) -> ([0]); // 1
into_box<Unit>([0]) -> ([1]); // 2
nullable_from_box<Unit>([1]) -> ([2]); // 3
match_nullable<Unit>([2]) { fallthrough() 9([3]) }; // 4
branch_align() -> (); // 5
felt252_const<0>() -> ([4]); // 6
store_temp<felt252>([4]) -> ([5]); // 7
jump() { 13() }; // 8
branch_align() -> (); // 9
drop<Box<Unit>>([3]) -> (); // 10
felt252_const<1>() -> ([6]); // 11
store_temp<felt252>([6]) -> ([5]); // 12
rename<felt252>([5]) -> ([7]); // 13
return([7]); // 14

test::foo@0() -> (felt252);
