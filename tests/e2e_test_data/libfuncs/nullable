//! > null libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo() -> Nullable::<felt> {
    null::<felt>()
}

//! > casm
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type felt = felt;
type Nullable<felt> = Nullable<felt>;

libfunc null<felt> = null<felt>;
libfunc store_temp<Nullable<felt>> = store_temp<Nullable<felt>>;

null<felt>() -> ([0]);
store_temp<Nullable<felt>>([0]) -> ([1]);
return([1]);

test::foo@0() -> (Nullable<felt>);

//! > ==========================================================================

//! > into_nullable libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(x: Box::<felt>) -> Nullable::<felt> {
    into_nullable::<felt>(x)
}

//! > casm
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type felt = felt;
type Box<felt> = Box<felt>;
type Nullable<felt> = Nullable<felt>;

libfunc into_nullable<felt> = into_nullable<felt>;
libfunc store_temp<Nullable<felt>> = store_temp<Nullable<felt>>;

into_nullable<felt>([0]) -> ([1]);
store_temp<Nullable<felt>>([1]) -> ([2]);
return([2]);

test::foo@0([0]: Box<felt>) -> (Nullable<felt>);

//! > ==========================================================================

//! > from_nullable libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(x: Nullable::<felt>, y: Box::<felt>) -> Box::<felt> {
    match from_nullable::<felt>(x) {
        FromNullableResult::Null(_) => y,
        FromNullableResult::NotNull(x) => x,
    }
}

//! > casm
jmp rel 5 if [fp + -4] != 0;
[ap + 0] = [fp + -3], ap++;
jmp rel 5;
[ap + 0] = [fp + -4], ap++;
jmp rel 2;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type felt = felt;
type Nullable<felt> = Nullable<felt>;
type Box<felt> = Box<felt>;

libfunc from_nullable<felt> = from_nullable<felt>;
libfunc branch_align = branch_align;
libfunc store_temp<Box<felt>> = store_temp<Box<felt>>;
libfunc jump = jump;
libfunc drop<Box<felt>> = drop<Box<felt>>;
libfunc rename<Box<felt>> = rename<Box<felt>>;

from_nullable<felt>([0]) { fallthrough() 4([2]) };
branch_align() -> ();
store_temp<Box<felt>>([1]) -> ([3]);
jump() { 8() };
branch_align() -> ();
drop<Box<felt>>([1]) -> ();
store_temp<Box<felt>>([2]) -> ([3]);
jump() { 8() };
rename<Box<felt>>([3]) -> ([4]);
return([4]);

test::foo@0([0]: Nullable<felt>, [1]: Box<felt>) -> (Box<felt>);

//! > ==========================================================================

//! > nullable libfuncs

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo() -> felt {
    match from_nullable::<felt>(into_nullable::<felt>(into_box::<felt>(1234))) {
        FromNullableResult::Null(_) => 555,
        FromNullableResult::NotNull(x) => unbox::<felt>(x),
    }
}

//! > casm
[ap + 0] = 1234, ap++;
%{
if '__boxed_segment' not in globals():
    __boxed_segment = segments.add()
memory[ap + 0] = __boxed_segment
__boxed_segment += 1
%}
[ap + -1] = [[ap + 0] + 0], ap++;
jmp rel 6 if [ap + -1] != 0;
[ap + 0] = 555, ap++;
jmp rel 5;
[ap + 0] = [[ap + -1] + 0], ap++;
jmp rel 2;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 500})

//! > sierra_code
type felt = felt;
type Box<felt> = Box<felt>;
type Nullable<felt> = Nullable<felt>;

libfunc felt_const<1234> = felt_const<1234>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc into_box<felt> = into_box<felt>;
libfunc into_nullable<felt> = into_nullable<felt>;
libfunc from_nullable<felt> = from_nullable<felt>;
libfunc branch_align = branch_align;
libfunc felt_const<555> = felt_const<555>;
libfunc jump = jump;
libfunc unbox<felt> = unbox<felt>;
libfunc rename<felt> = rename<felt>;

felt_const<1234>() -> ([0]);
store_temp<felt>([0]) -> ([0]);
into_box<felt>([0]) -> ([1]);
into_nullable<felt>([1]) -> ([2]);
from_nullable<felt>([2]) { fallthrough() 9([3]) };
branch_align() -> ();
felt_const<555>() -> ([4]);
store_temp<felt>([4]) -> ([5]);
jump() { 13() };
branch_align() -> ();
unbox<felt>([3]) -> ([6]);
store_temp<felt>([6]) -> ([5]);
jump() { 13() };
rename<felt>([5]) -> ([7]);
return([7]);

test::foo@0() -> (felt);
