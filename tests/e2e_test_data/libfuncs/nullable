//! > null libfunc

//! > test_comments
// TODO(lior): Cost should be 2 rather than 1.

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo() -> Nullable::<felt> {
    null::<felt>()
}

//! > casm
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 1})

//! > sierra_code
type felt = felt;
type Nullable<felt> = Nullable<felt>;

libfunc null<felt> = null<felt>;
libfunc store_temp<Nullable<felt>> = store_temp<Nullable<felt>>;
libfunc rename<Nullable<felt>> = rename<Nullable<felt>>;

null<felt>() -> ([0]);
store_temp<Nullable<felt>>([0]) -> ([0]);
rename<Nullable<felt>>([0]) -> ([1]);
return([1]);

test::foo@0() -> (Nullable<felt>);

//! > ==========================================================================

//! > into_nullable libfunc

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo(x: Box::<felt>) -> Nullable::<felt> {
    into_nullable::<felt>(x)
}

//! > casm
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 1})

//! > sierra_code
type felt = felt;
type Box<felt> = Box<felt>;
type Nullable<felt> = Nullable<felt>;

libfunc into_nullable<felt> = into_nullable<felt>;
libfunc store_temp<Nullable<felt>> = store_temp<Nullable<felt>>;

into_nullable<felt>([0]) -> ([1]);
store_temp<Nullable<felt>>([1]) -> ([2]);
return([2]);

test::foo@0([0]: Box<felt>) -> (Nullable<felt>);

//! > ==========================================================================

//! > from_nullable libfunc

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo(x: Nullable::<felt>, y: Box::<felt>) -> Box::<felt> {
    match from_nullable::<felt>(x) {
        FromNullableResult::Null(_) => y,
        FromNullableResult::NotNull(x) => x,
    }
}

//! > casm
jmp rel 5 if [fp + -4] != 0;
[ap + 0] = [fp + -3], ap++;
jmp rel 3;
[ap + 0] = [fp + -4], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 4})

//! > sierra_code
type felt = felt;
type Nullable<felt> = Nullable<felt>;
type Box<felt> = Box<felt>;

libfunc from_nullable<felt> = from_nullable<felt>;
libfunc branch_align = branch_align;
libfunc store_temp<Box<felt>> = store_temp<Box<felt>>;
libfunc jump = jump;
libfunc drop<Box<felt>> = drop<Box<felt>>;
libfunc rename<Box<felt>> = rename<Box<felt>>;

from_nullable<felt>([0]) { fallthrough() 4([2]) };
branch_align() -> ();
store_temp<Box<felt>>([1]) -> ([3]);
jump() { 7() };
drop<Box<felt>>([1]) -> ();
branch_align() -> ();
store_temp<Box<felt>>([2]) -> ([3]);
rename<Box<felt>>([3]) -> ([4]);
return([4]);

test::foo@0([0]: Nullable<felt>, [1]: Box<felt>) -> (Box<felt>);
