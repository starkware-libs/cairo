//! > u128_overflowing_add libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u128, b: u128) -> Result::<u128, u128> {
    integer::u128_overflowing_add(a, b)
}

//! > casm
[ap + 1] = [fp + -4] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 12;
[ap + -1] = [[fp + -5] + 0];
ap += 1;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 880})

//! > sierra_code
type RangeCheck = RangeCheck;
type u128 = u128;
type core::result::Result::<core::integer::u128, core::integer::u128> = Enum<ut@core::result::Result::<core::integer::u128, core::integer::u128>, u128, u128>;

libfunc u128_overflowing_add = u128_overflowing_add;
libfunc branch_align = branch_align;
libfunc enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 0> = enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::result::Result::<core::integer::u128, core::integer::u128>> = store_temp<core::result::Result::<core::integer::u128, core::integer::u128>>;
libfunc jump = jump;
libfunc enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 1> = enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::result::Result::<core::integer::u128, core::integer::u128>> = rename<core::result::Result::<core::integer::u128, core::integer::u128>>;

u128_overflowing_add([0], [1], [2]) { fallthrough([3], [4]) 6([5], [6]) };
branch_align() -> ();
enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 0>([4]) -> ([7]);
store_temp<RangeCheck>([3]) -> ([8]);
store_temp<core::result::Result::<core::integer::u128, core::integer::u128>>([7]) -> ([9]);
jump() { 10() };
branch_align() -> ();
enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 1>([6]) -> ([10]);
store_temp<RangeCheck>([5]) -> ([8]);
store_temp<core::result::Result::<core::integer::u128, core::integer::u128>>([10]) -> ([9]);
rename<RangeCheck>([8]) -> ([11]);
rename<core::result::Result::<core::integer::u128, core::integer::u128>>([9]) -> ([12]);
return([11], [12]);

test::foo@0([0]: RangeCheck, [1]: u128, [2]: u128) -> (RangeCheck, core::result::Result::<core::integer::u128, core::integer::u128>);

//! > ==========================================================================

//! > u128_overflowing_sub libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u128, b: u128) -> Result::<u128, u128> {
    integer::u128_overflowing_sub(a, b)
}

//! > casm
[fp + -4] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 12;
[ap + -1] = [[fp + -5] + 0];
ap += 1;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 880})

//! > sierra_code
type RangeCheck = RangeCheck;
type u128 = u128;
type core::result::Result::<core::integer::u128, core::integer::u128> = Enum<ut@core::result::Result::<core::integer::u128, core::integer::u128>, u128, u128>;

libfunc u128_overflowing_sub = u128_overflowing_sub;
libfunc branch_align = branch_align;
libfunc enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 0> = enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::result::Result::<core::integer::u128, core::integer::u128>> = store_temp<core::result::Result::<core::integer::u128, core::integer::u128>>;
libfunc jump = jump;
libfunc enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 1> = enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::result::Result::<core::integer::u128, core::integer::u128>> = rename<core::result::Result::<core::integer::u128, core::integer::u128>>;

u128_overflowing_sub([0], [1], [2]) { fallthrough([3], [4]) 6([5], [6]) };
branch_align() -> ();
enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 0>([4]) -> ([7]);
store_temp<RangeCheck>([3]) -> ([8]);
store_temp<core::result::Result::<core::integer::u128, core::integer::u128>>([7]) -> ([9]);
jump() { 10() };
branch_align() -> ();
enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 1>([6]) -> ([10]);
store_temp<RangeCheck>([5]) -> ([8]);
store_temp<core::result::Result::<core::integer::u128, core::integer::u128>>([10]) -> ([9]);
rename<RangeCheck>([8]) -> ([11]);
rename<core::result::Result::<core::integer::u128, core::integer::u128>>([9]) -> ([12]);
return([11], [12]);

test::foo@0([0]: RangeCheck, [1]: u128, [2]: u128) -> (RangeCheck, core::result::Result::<core::integer::u128, core::integer::u128>);

//! > ==========================================================================

//! > u128_wide_mul libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u128, b: u128) -> (u128, u128) {
    integer::u128_wide_mul(a, b)
}

//! > casm
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -4], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -5] + 0], ap++;
[ap + -2] = [[fp + -5] + 1], ap++;
[ap + -2] = [[fp + -5] + 2];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -4] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [fp + -3], ap++;
[ap + 0] = [ap + -4] * [fp + -3], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -5] + 3], ap++;
[ap + -1] = [[fp + -5] + 4], ap++;
[ap + -3] = [[fp + -5] + 5];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + 4]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -5] + 6], ap++;
[ap + -3] = [[fp + -5] + 7], ap++;
[ap + 1] = [[fp + -5] + 8], ap++;
[ap + -3] = [ap + -5] * 340282366920938463463374607431768211456, ap++;
[ap + -3] = [ap + -4] + [ap + -1];
[ap + -2] = [ap + -11] + [ap + -6];
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 3230})

//! > sierra_code
type RangeCheck = RangeCheck;
type u128 = u128;
type Tuple<u128, u128> = Struct<ut@Tuple, u128, u128>;

libfunc u128_wide_mul = u128_wide_mul;
libfunc struct_construct<Tuple<u128, u128>> = struct_construct<Tuple<u128, u128>>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<Tuple<u128, u128>> = store_temp<Tuple<u128, u128>>;

u128_wide_mul([0], [1], [2]) -> ([3], [4], [5]);
struct_construct<Tuple<u128, u128>>([4], [5]) -> ([6]);
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<Tuple<u128, u128>>([6]) -> ([8]);
return([7], [8]);

test::foo@0([0]: RangeCheck, [1]: u128, [2]: u128) -> (RangeCheck, Tuple<u128, u128>);

//! > ==========================================================================

//! > u128_divmod libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u128, b: NonZero::<u128>) -> (u128, u128) {
    integer::u128_safe_divmod(a, b)
}

//! > casm
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -4], memory[fp + -3]) %}
[ap + 5] = [[fp + -5] + 0], ap++;
[ap + 5] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[fp + -3] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[fp + -5] + 2], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [fp + -3] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[fp + -5] + 3];
[ap + -3] = [fp + -3] * [ap + -2];
[fp + -4] = [ap + -3] + [ap + -1];
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1680})

//! > sierra_code
type RangeCheck = RangeCheck;
type u128 = u128;
type NonZero<u128> = NonZero<u128>;
type Tuple<u128, u128> = Struct<ut@Tuple, u128, u128>;

libfunc u128_safe_divmod = u128_safe_divmod;
libfunc struct_construct<Tuple<u128, u128>> = struct_construct<Tuple<u128, u128>>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<Tuple<u128, u128>> = store_temp<Tuple<u128, u128>>;

u128_safe_divmod([0], [1], [2]) -> ([3], [4], [5]);
struct_construct<Tuple<u128, u128>>([4], [5]) -> ([6]);
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<Tuple<u128, u128>>([6]) -> ([8]);
return([7], [8]);

test::foo@0([0]: RangeCheck, [1]: u128, [2]: NonZero<u128>) -> (RangeCheck, Tuple<u128, u128>);

//! > ==========================================================================

//! > u128s_from_felt252 libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(v: felt252) -> integer::U128sFromFelt252Result {
    integer::u128s_from_felt252(v)
}

//! > casm
%{ memory[ap + 0] = memory[fp + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -4] + 0], ap++;
[ap + 3] = [[fp + -4] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + -3] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -4] + 2];
jmp rel 16 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -3] = [[fp + -4] + 0];
ap += 5;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 8;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1710})

//! > sierra_code
type RangeCheck = RangeCheck;
type felt252 = felt252;
type u128 = u128;
type Tuple<u128, u128> = Struct<ut@Tuple, u128, u128>;
type core::integer::U128sFromFelt252Result = Enum<ut@core::integer::U128sFromFelt252Result, u128, Tuple<u128, u128>>;

libfunc u128s_from_felt252 = u128s_from_felt252;
libfunc branch_align = branch_align;
libfunc enum_init<core::integer::U128sFromFelt252Result, 0> = enum_init<core::integer::U128sFromFelt252Result, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::integer::U128sFromFelt252Result> = store_temp<core::integer::U128sFromFelt252Result>;
libfunc jump = jump;
libfunc struct_construct<Tuple<u128, u128>> = struct_construct<Tuple<u128, u128>>;
libfunc enum_init<core::integer::U128sFromFelt252Result, 1> = enum_init<core::integer::U128sFromFelt252Result, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::integer::U128sFromFelt252Result> = rename<core::integer::U128sFromFelt252Result>;

u128s_from_felt252([0], [1]) { fallthrough([2], [3]) 6([4], [5], [6]) };
branch_align() -> ();
enum_init<core::integer::U128sFromFelt252Result, 0>([3]) -> ([7]);
store_temp<RangeCheck>([2]) -> ([8]);
store_temp<core::integer::U128sFromFelt252Result>([7]) -> ([9]);
jump() { 11() };
branch_align() -> ();
struct_construct<Tuple<u128, u128>>([5], [6]) -> ([10]);
enum_init<core::integer::U128sFromFelt252Result, 1>([10]) -> ([11]);
store_temp<RangeCheck>([4]) -> ([8]);
store_temp<core::integer::U128sFromFelt252Result>([11]) -> ([9]);
rename<RangeCheck>([8]) -> ([12]);
rename<core::integer::U128sFromFelt252Result>([9]) -> ([13]);
return([12], [13]);

test::foo@0([0]: RangeCheck, [1]: felt252) -> (RangeCheck, core::integer::U128sFromFelt252Result);

//! > ==========================================================================

//! > u128_lt libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u128, b: u128) -> bool {
    integer::u128_lt(a, b)
}

//! > casm
[fp + -4] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 11;
[ap + -1] = [[fp + -5] + 0];
ap += 1;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 780})

//! > sierra_code
type RangeCheck = RangeCheck;
type u128 = u128;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc u128_lt = u128_lt;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::bool> = rename<core::bool>;

u128_lt([0], [1], [2]) { fallthrough([3]) 7([4]) };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 0>([5]) -> ([6]);
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<core::bool>([6]) -> ([8]);
jump() { 12() };
branch_align() -> ();
struct_construct<Unit>() -> ([9]);
enum_init<core::bool, 1>([9]) -> ([10]);
store_temp<RangeCheck>([4]) -> ([7]);
store_temp<core::bool>([10]) -> ([8]);
rename<RangeCheck>([7]) -> ([11]);
rename<core::bool>([8]) -> ([12]);
return([11], [12]);

test::foo@0([0]: RangeCheck, [1]: u128, [2]: u128) -> (RangeCheck, core::bool);

//! > ==========================================================================

//! > u128_le libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u128, b: u128) -> bool {
    integer::u128_le(a, b)
}

//! > casm
[fp + -3] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = 340282366920938463463374607431768211456 <= memory[ap + 0] %}
jmp rel 5 if [ap + -1] != 0, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 11;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 780})

//! > sierra_code
type RangeCheck = RangeCheck;
type u128 = u128;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc u128_le = u128_le;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::bool> = rename<core::bool>;

u128_le([0], [1], [2]) { fallthrough([3]) 7([4]) };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 0>([5]) -> ([6]);
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<core::bool>([6]) -> ([8]);
jump() { 12() };
branch_align() -> ();
struct_construct<Unit>() -> ([9]);
enum_init<core::bool, 1>([9]) -> ([10]);
store_temp<RangeCheck>([4]) -> ([7]);
store_temp<core::bool>([10]) -> ([8]);
rename<RangeCheck>([7]) -> ([11]);
rename<core::bool>([8]) -> ([12]);
return([11], [12]);

test::foo@0([0]: RangeCheck, [1]: u128, [2]: u128) -> (RangeCheck, core::bool);

//! > ==========================================================================

//! > u128_eq libfunc (a deref, b deref)

//! > test_comments
//! Different cases of a,b produce different code. This is why u128_eq has multiple e2e tests.
//! This case produces the same code as the case (a deref, b immediate).

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u128, b: u128) -> bool {
    integer::u128_eq(a, b)
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 6;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 400})

//! > sierra_code
type u128 = u128;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc u128_eq = u128_eq;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc rename<core::bool> = rename<core::bool>;

u128_eq([0], [1]) { fallthrough() 6() };
branch_align() -> ();
struct_construct<Unit>() -> ([2]);
enum_init<core::bool, 0>([2]) -> ([3]);
store_temp<core::bool>([3]) -> ([4]);
jump() { 10() };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 1>([5]) -> ([6]);
store_temp<core::bool>([6]) -> ([4]);
rename<core::bool>([4]) -> ([7]);
return([7]);

test::foo@0([0]: u128, [1]: u128) -> (core::bool);

//! > ==========================================================================

//! > u128_eq libfunc (a immediate, b immediate)

//! > test_comments
//! see the comment for: u128_eq libfunc (a deref, b deref).

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo() -> bool {
    integer::u128_eq(11_u128, 12_u128)
}

//! > casm
[ap + 0] = -1, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 6;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 400})

//! > sierra_code
type u128 = u128;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc u128_const<11> = u128_const<11>;
libfunc u128_const<12> = u128_const<12>;
libfunc u128_eq = u128_eq;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc rename<core::bool> = rename<core::bool>;

u128_const<11>() -> ([0]);
u128_const<12>() -> ([1]);
u128_eq([0], [1]) { fallthrough() 8() };
branch_align() -> ();
struct_construct<Unit>() -> ([2]);
enum_init<core::bool, 0>([2]) -> ([3]);
store_temp<core::bool>([3]) -> ([4]);
jump() { 12() };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 1>([5]) -> ([6]);
store_temp<core::bool>([6]) -> ([4]);
rename<core::bool>([4]) -> ([7]);
return([7]);

test::foo@0() -> (core::bool);

//! > ==========================================================================

//! > u128_eq libfunc (a immediate, b deref)

//! > test_comments
//! see the comment for: u128_eq libfunc (a deref, b deref).

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(b: u128) -> bool {
    integer::u128_eq(11_u128, b)
}

//! > casm
[fp + -3] = [ap + 0] + 11, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 6;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 400})

//! > sierra_code
type u128 = u128;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc u128_const<11> = u128_const<11>;
libfunc u128_eq = u128_eq;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc rename<core::bool> = rename<core::bool>;

u128_const<11>() -> ([1]);
u128_eq([1], [0]) { fallthrough() 7() };
branch_align() -> ();
struct_construct<Unit>() -> ([2]);
enum_init<core::bool, 0>([2]) -> ([3]);
store_temp<core::bool>([3]) -> ([4]);
jump() { 11() };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 1>([5]) -> ([6]);
store_temp<core::bool>([6]) -> ([4]);
rename<core::bool>([4]) -> ([7]);
return([7]);

test::foo@0([0]: u128) -> (core::bool);

//! > ==========================================================================

//! > u128_sqrt libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(value: u128) -> u128 {
    integer::u128_sqrt(value)
}

//! > casm
%{ (memory[ap + 5]) = sqrt(memory[fp + -3]) %}
[ap + 0] = [ap + 5] + 297747071055821155530452781502797185024, ap++;
[ap + 4] = [[fp + -4] + 0], ap++;
[ap + -2] = [[fp + -4] + 1], ap++;
[ap + -2] = [ap + 2] * [ap + 2], ap++;
[fp + -3] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[fp + -4] + 2], ap++;
[ap + -3] = [ap + -1] + [ap + -1];
[ap + -3] = [ap + -2] + [ap + -4];
[ap + -2] = [[fp + -4] + 3];
[ap + 0] = [fp + -4] + 4, ap++;
[ap + 0] = [ap + -2], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1380})

//! > sierra_code
type RangeCheck = RangeCheck;
type u128 = u128;

libfunc u128_sqrt = u128_sqrt;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<u128> = store_temp<u128>;

u128_sqrt([0], [1]) -> ([2], [3]);
store_temp<RangeCheck>([2]) -> ([4]);
store_temp<u128>([3]) -> ([5]);
return([4], [5]);

test::foo@0([0]: RangeCheck, [1]: u128) -> (RangeCheck, u128);
