//! > i16_to_felt252 libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(v: i16) -> felt252 {
    integer::i16_to_felt252(v)
}

//! > casm
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type i16 = i16 [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc i16_to_felt252 = i16_to_felt252;
libfunc store_temp<felt252> = store_temp<felt252>;

i16_to_felt252([0]) -> ([1]); // 0
store_temp<felt252>([1]) -> ([2]); // 1
return([2]); // 2

test::foo@0([0]: i16) -> (felt252);

//! > ==========================================================================

//! > i16_try_from_felt252 libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(v: felt252) -> Option<i16> {
    integer::i16_try_from_felt252(v)
}

//! > casm
%{ memory[ap + 0] = (memory[fp + -3] + 32768) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 32768, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -4] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -4] + 1], ap++;
[ap + -5] = [[fp + -4] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 19 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -3] + 32768, ap++;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = [fp + -3] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -4] + 1];
ap += 4;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 8;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1510})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type i16 = i16 [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<core::integer::i16> = Enum<ut@core::option::Option::<core::integer::i16>, i16, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc i16_try_from_felt252 = i16_try_from_felt252;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::integer::i16>, 0> = enum_init<core::option::Option::<core::integer::i16>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::integer::i16>> = store_temp<core::option::Option::<core::integer::i16>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::integer::i16>, 1> = enum_init<core::option::Option::<core::integer::i16>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::option::Option::<core::integer::i16>> = rename<core::option::Option::<core::integer::i16>>;

i16_try_from_felt252([0], [1]) { fallthrough([2], [3]) 6([4]) }; // 0
branch_align() -> (); // 1
enum_init<core::option::Option::<core::integer::i16>, 0>([3]) -> ([5]); // 2
store_temp<RangeCheck>([2]) -> ([6]); // 3
store_temp<core::option::Option::<core::integer::i16>>([5]) -> ([7]); // 4
jump() { 11() }; // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([8]); // 7
enum_init<core::option::Option::<core::integer::i16>, 1>([8]) -> ([9]); // 8
store_temp<RangeCheck>([4]) -> ([6]); // 9
store_temp<core::option::Option::<core::integer::i16>>([9]) -> ([7]); // 10
rename<RangeCheck>([6]) -> ([10]); // 11
rename<core::option::Option::<core::integer::i16>>([7]) -> ([11]); // 12
return([10], [11]); // 13

test::foo@0([0]: RangeCheck, [1]: felt252) -> (RangeCheck, core::option::Option::<core::integer::i16>);

//! > ==========================================================================

//! > i16_eq libfunc (a deref, b deref)

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: i16, b: i16) -> bool {
    integer::i16_eq(a, b)
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 6;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 400})

//! > sierra_code
type i16 = i16 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::bool = Enum<ut@core::bool, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc i16_eq = i16_eq;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc rename<core::bool> = rename<core::bool>;

i16_eq([0], [1]) { fallthrough() 6() }; // 0
branch_align() -> (); // 1
struct_construct<Unit>() -> ([2]); // 2
enum_init<core::bool, 0>([2]) -> ([3]); // 3
store_temp<core::bool>([3]) -> ([4]); // 4
jump() { 10() }; // 5
branch_align() -> (); // 6
struct_construct<Unit>() -> ([5]); // 7
enum_init<core::bool, 1>([5]) -> ([6]); // 8
store_temp<core::bool>([6]) -> ([4]); // 9
rename<core::bool>([4]) -> ([7]); // 10
return([7]); // 11

test::foo@0([0]: i16, [1]: i16) -> (core::bool);

//! > ==========================================================================

//! > i16_eq libfunc (a immediate, b immediate)

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo() -> bool {
    integer::i16_eq(11_i16, 12_i16)
}

//! > casm
[ap + 0] = 11, ap++;
[ap + -1] = [ap + 0] + 12, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 6;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 500})

//! > sierra_code
type i16 = i16 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::bool = Enum<ut@core::bool, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc i16_const<11> = i16_const<11>;
libfunc i16_const<12> = i16_const<12>;
libfunc store_temp<i16> = store_temp<i16>;
libfunc i16_eq = i16_eq;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc rename<core::bool> = rename<core::bool>;

i16_const<11>() -> ([0]); // 0
i16_const<12>() -> ([1]); // 1
store_temp<i16>([0]) -> ([0]); // 2
i16_eq([0], [1]) { fallthrough() 9() }; // 3
branch_align() -> (); // 4
struct_construct<Unit>() -> ([2]); // 5
enum_init<core::bool, 0>([2]) -> ([3]); // 6
store_temp<core::bool>([3]) -> ([4]); // 7
jump() { 13() }; // 8
branch_align() -> (); // 9
struct_construct<Unit>() -> ([5]); // 10
enum_init<core::bool, 1>([5]) -> ([6]); // 11
store_temp<core::bool>([6]) -> ([4]); // 12
rename<core::bool>([4]) -> ([7]); // 13
return([7]); // 14

test::foo@0() -> (core::bool);

//! > ==========================================================================

//! > i16_overflowing_add_impl libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: i16, b: i16) -> integer::SignedIntegerResult<i16> {
    integer::i16_overflowing_add_impl(a, b)
}

//! > casm
[ap + 0] = [fp + -4] + [fp + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 32768) % PRIME < 65536 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + 340282366920938463463374607431768244224, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 20;
[ap + -3] = [ap + 0] + 32768, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 23;
[ap + 0] = [ap + -2] + 32768, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [ap + -6], ap++;
jmp rel 16;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -6] + 65536, ap++;
jmp rel 8;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + -6] = [ap + 0] + 65536, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1140})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type i16 = i16 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::SignedIntegerResult::<core::integer::i16> = Enum<ut@core::integer::SignedIntegerResult::<core::integer::i16>, i16, i16, i16> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc i16_overflowing_add_impl = i16_overflowing_add_impl;
libfunc branch_align = branch_align;
libfunc enum_init<core::integer::SignedIntegerResult::<core::integer::i16>, 0> = enum_init<core::integer::SignedIntegerResult::<core::integer::i16>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::integer::SignedIntegerResult::<core::integer::i16>> = store_temp<core::integer::SignedIntegerResult::<core::integer::i16>>;
libfunc jump = jump;
libfunc enum_init<core::integer::SignedIntegerResult::<core::integer::i16>, 1> = enum_init<core::integer::SignedIntegerResult::<core::integer::i16>, 1>;
libfunc enum_init<core::integer::SignedIntegerResult::<core::integer::i16>, 2> = enum_init<core::integer::SignedIntegerResult::<core::integer::i16>, 2>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::integer::SignedIntegerResult::<core::integer::i16>> = rename<core::integer::SignedIntegerResult::<core::integer::i16>>;

i16_overflowing_add_impl([0], [1], [2]) { fallthrough([3], [4]) 6([5], [6]) 11([7], [8]) }; // 0
branch_align() -> (); // 1
enum_init<core::integer::SignedIntegerResult::<core::integer::i16>, 0>([4]) -> ([9]); // 2
store_temp<RangeCheck>([3]) -> ([10]); // 3
store_temp<core::integer::SignedIntegerResult::<core::integer::i16>>([9]) -> ([11]); // 4
jump() { 15() }; // 5
branch_align() -> (); // 6
enum_init<core::integer::SignedIntegerResult::<core::integer::i16>, 1>([6]) -> ([12]); // 7
store_temp<RangeCheck>([5]) -> ([10]); // 8
store_temp<core::integer::SignedIntegerResult::<core::integer::i16>>([12]) -> ([11]); // 9
jump() { 15() }; // 10
branch_align() -> (); // 11
enum_init<core::integer::SignedIntegerResult::<core::integer::i16>, 2>([8]) -> ([13]); // 12
store_temp<RangeCheck>([7]) -> ([10]); // 13
store_temp<core::integer::SignedIntegerResult::<core::integer::i16>>([13]) -> ([11]); // 14
rename<RangeCheck>([10]) -> ([14]); // 15
rename<core::integer::SignedIntegerResult::<core::integer::i16>>([11]) -> ([15]); // 16
return([14], [15]); // 17

test::foo@0([0]: RangeCheck, [1]: i16, [2]: i16) -> (RangeCheck, core::integer::SignedIntegerResult::<core::integer::i16>);

//! > ==========================================================================

//! > i16_overflowing_sub_impl libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: i16, b: i16) -> integer::SignedIntegerResult<i16> {
    integer::i16_overflowing_sub_impl(a, b)
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 32768) % PRIME < 65536 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + 340282366920938463463374607431768244224, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 20;
[ap + -3] = [ap + 0] + 32768, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 23;
[ap + 0] = [ap + -2] + 32768, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [ap + -6], ap++;
jmp rel 16;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -6] + 65536, ap++;
jmp rel 8;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + -6] = [ap + 0] + 65536, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1140})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type i16 = i16 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::SignedIntegerResult::<core::integer::i16> = Enum<ut@core::integer::SignedIntegerResult::<core::integer::i16>, i16, i16, i16> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc i16_overflowing_sub_impl = i16_overflowing_sub_impl;
libfunc branch_align = branch_align;
libfunc enum_init<core::integer::SignedIntegerResult::<core::integer::i16>, 0> = enum_init<core::integer::SignedIntegerResult::<core::integer::i16>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::integer::SignedIntegerResult::<core::integer::i16>> = store_temp<core::integer::SignedIntegerResult::<core::integer::i16>>;
libfunc jump = jump;
libfunc enum_init<core::integer::SignedIntegerResult::<core::integer::i16>, 1> = enum_init<core::integer::SignedIntegerResult::<core::integer::i16>, 1>;
libfunc enum_init<core::integer::SignedIntegerResult::<core::integer::i16>, 2> = enum_init<core::integer::SignedIntegerResult::<core::integer::i16>, 2>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::integer::SignedIntegerResult::<core::integer::i16>> = rename<core::integer::SignedIntegerResult::<core::integer::i16>>;

i16_overflowing_sub_impl([0], [1], [2]) { fallthrough([3], [4]) 6([5], [6]) 11([7], [8]) }; // 0
branch_align() -> (); // 1
enum_init<core::integer::SignedIntegerResult::<core::integer::i16>, 0>([4]) -> ([9]); // 2
store_temp<RangeCheck>([3]) -> ([10]); // 3
store_temp<core::integer::SignedIntegerResult::<core::integer::i16>>([9]) -> ([11]); // 4
jump() { 15() }; // 5
branch_align() -> (); // 6
enum_init<core::integer::SignedIntegerResult::<core::integer::i16>, 1>([6]) -> ([12]); // 7
store_temp<RangeCheck>([5]) -> ([10]); // 8
store_temp<core::integer::SignedIntegerResult::<core::integer::i16>>([12]) -> ([11]); // 9
jump() { 15() }; // 10
branch_align() -> (); // 11
enum_init<core::integer::SignedIntegerResult::<core::integer::i16>, 2>([8]) -> ([13]); // 12
store_temp<RangeCheck>([7]) -> ([10]); // 13
store_temp<core::integer::SignedIntegerResult::<core::integer::i16>>([13]) -> ([11]); // 14
rename<RangeCheck>([10]) -> ([14]); // 15
rename<core::integer::SignedIntegerResult::<core::integer::i16>>([11]) -> ([15]); // 16
return([14], [15]); // 17

test::foo@0([0]: RangeCheck, [1]: i16, [2]: i16) -> (RangeCheck, core::integer::SignedIntegerResult::<core::integer::i16>);

//! > ==========================================================================

//! > i16_is_zero libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use zeroable::IsZeroResult;
fn foo(a: i16) -> i16 {
    match integer::i16_is_zero(a) {
        IsZeroResult::Zero => 123_i16,
        IsZeroResult::NonZero(x) => x.into(),
    }
}

//! > casm
jmp rel 6 if [fp + -3] != 0;
[ap + 0] = 123, ap++;
jmp rel 3;
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > sierra_code
type i16 = i16 [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<i16> = NonZero<i16> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc i16_is_zero = i16_is_zero;
libfunc branch_align = branch_align;
libfunc i16_const<123> = i16_const<123>;
libfunc store_temp<i16> = store_temp<i16>;
libfunc jump = jump;
libfunc unwrap_non_zero<i16> = unwrap_non_zero<i16>;
libfunc rename<i16> = rename<i16>;

i16_is_zero([0]) { fallthrough() 5([1]) }; // 0
branch_align() -> (); // 1
i16_const<123>() -> ([2]); // 2
store_temp<i16>([2]) -> ([3]); // 3
jump() { 8() }; // 4
branch_align() -> (); // 5
unwrap_non_zero<i16>([1]) -> ([4]); // 6
store_temp<i16>([4]) -> ([3]); // 7
rename<i16>([3]) -> ([5]); // 8
return([5]); // 9

test::foo@0([0]: i16) -> (i16);

//! > ==========================================================================

//! > i16_diff libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: i16, b: i16) -> Result<u16, u16> {
    integer::i16_diff(a, b)
}

//! > casm
[fp + -4] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 65536 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 12;
[ap + -1] = [[fp + -5] + 0];
ap += 1;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 8;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4] + 65536, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 880})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type u16 = u16 [storable: true, drop: true, dup: true, zero_sized: false];
type core::result::Result::<core::integer::u16, core::integer::u16> = Enum<ut@core::result::Result::<core::integer::u16, core::integer::u16>, u16, u16> [storable: true, drop: true, dup: true, zero_sized: false];
type i16 = i16 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc i16_diff = i16_diff;
libfunc branch_align = branch_align;
libfunc enum_init<core::result::Result::<core::integer::u16, core::integer::u16>, 0> = enum_init<core::result::Result::<core::integer::u16, core::integer::u16>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::result::Result::<core::integer::u16, core::integer::u16>> = store_temp<core::result::Result::<core::integer::u16, core::integer::u16>>;
libfunc jump = jump;
libfunc enum_init<core::result::Result::<core::integer::u16, core::integer::u16>, 1> = enum_init<core::result::Result::<core::integer::u16, core::integer::u16>, 1>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::result::Result::<core::integer::u16, core::integer::u16>> = rename<core::result::Result::<core::integer::u16, core::integer::u16>>;

i16_diff([0], [1], [2]) { fallthrough([3], [4]) 6([5], [6]) }; // 0
branch_align() -> (); // 1
enum_init<core::result::Result::<core::integer::u16, core::integer::u16>, 0>([4]) -> ([7]); // 2
store_temp<RangeCheck>([3]) -> ([8]); // 3
store_temp<core::result::Result::<core::integer::u16, core::integer::u16>>([7]) -> ([9]); // 4
jump() { 10() }; // 5
branch_align() -> (); // 6
enum_init<core::result::Result::<core::integer::u16, core::integer::u16>, 1>([6]) -> ([10]); // 7
store_temp<RangeCheck>([5]) -> ([8]); // 8
store_temp<core::result::Result::<core::integer::u16, core::integer::u16>>([10]) -> ([9]); // 9
rename<RangeCheck>([8]) -> ([11]); // 10
rename<core::result::Result::<core::integer::u16, core::integer::u16>>([9]) -> ([12]); // 11
return([11], [12]); // 12

test::foo@0([0]: RangeCheck, [1]: i16, [2]: i16) -> (RangeCheck, core::result::Result::<core::integer::u16, core::integer::u16>);

//! > ==========================================================================

//! > i16_wide_mul libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: i16, b: i16) -> i32 {
    integer::i16_wide_mul(a, b)
}

//! > casm
[ap + 0] = [fp + -4] * [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type i16 = i16 [storable: true, drop: true, dup: true, zero_sized: false];
type i32 = i32 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc i16_wide_mul = i16_wide_mul;
libfunc store_temp<i32> = store_temp<i32>;

i16_wide_mul([0], [1]) -> ([2]); // 0
store_temp<i32>([2]) -> ([3]); // 1
return([3]); // 2

test::foo@0([0]: i16, [1]: i16) -> (i32);
