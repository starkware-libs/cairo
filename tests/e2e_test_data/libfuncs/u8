//! > u8_overflowing_add libfunc

//! > test_comments

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo(a: u8, b: u8) -> Result::<u8, u8> {
    integer::u8_overflowing_add(a, b)
}

//! > casm
[ap + 2] = [fp + -4] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 1] < 256 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 256, ap++;
[ap + -2] = [[fp + -5] + 0];
jmp rel 12;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 10})

//! > sierra_code
type RangeCheck = RangeCheck;
type u8 = u8;
type core::result::Result::<core::integer::u8, core::integer::u8> = Enum<ut@core::result::Result::<core::integer::u8, core::integer::u8>, u8, u8>;

libfunc u8_overflowing_add = u8_overflowing_add;
libfunc branch_align = branch_align;
libfunc enum_init<core::result::Result::<core::integer::u8, core::integer::u8>, 0> = enum_init<core::result::Result::<core::integer::u8, core::integer::u8>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc store_temp<core::result::Result::<core::integer::u8, core::integer::u8>> = store_temp<core::result::Result::<core::integer::u8, core::integer::u8>>;
libfunc rename<core::result::Result::<core::integer::u8, core::integer::u8>> = rename<core::result::Result::<core::integer::u8, core::integer::u8>>;
libfunc jump = jump;
libfunc enum_init<core::result::Result::<core::integer::u8, core::integer::u8>, 1> = enum_init<core::result::Result::<core::integer::u8, core::integer::u8>, 1>;

u8_overflowing_add([0], [1], [2]) { fallthrough([3], [4]) 8([5], [6]) };
branch_align() -> ();
enum_init<core::result::Result::<core::integer::u8, core::integer::u8>, 0>([4]) -> ([7]);
store_temp<RangeCheck>([3]) -> ([3]);
rename<RangeCheck>([3]) -> ([8]);
store_temp<core::result::Result::<core::integer::u8, core::integer::u8>>([7]) -> ([7]);
rename<core::result::Result::<core::integer::u8, core::integer::u8>>([7]) -> ([9]);
jump() { 14() };
branch_align() -> ();
enum_init<core::result::Result::<core::integer::u8, core::integer::u8>, 1>([6]) -> ([10]);
store_temp<RangeCheck>([5]) -> ([5]);
rename<RangeCheck>([5]) -> ([8]);
store_temp<core::result::Result::<core::integer::u8, core::integer::u8>>([10]) -> ([10]);
rename<core::result::Result::<core::integer::u8, core::integer::u8>>([10]) -> ([9]);
rename<RangeCheck>([8]) -> ([11]);
rename<core::result::Result::<core::integer::u8, core::integer::u8>>([9]) -> ([12]);
return([11], [12]);

test::foo@0([0]: RangeCheck, [1]: u8, [2]: u8) -> (RangeCheck, core::result::Result::<core::integer::u8, core::integer::u8>);

//! > ==========================================================================

//! > u8_overflowing_sub libfunc

//! > test_comments

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo(a: u8, b: u8) -> Result::<u8, u8> {
    integer::u8_overflowing_sub(a, b)
}

//! > casm
[fp + -4] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 256 %}
jmp rel 9 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 256, ap++;
jmp rel 12;
[ap + -1] = [[fp + -5] + 0];
ap += 2;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 7;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 10})

//! > sierra_code
type RangeCheck = RangeCheck;
type u8 = u8;
type core::result::Result::<core::integer::u8, core::integer::u8> = Enum<ut@core::result::Result::<core::integer::u8, core::integer::u8>, u8, u8>;

libfunc u8_overflowing_sub = u8_overflowing_sub;
libfunc branch_align = branch_align;
libfunc enum_init<core::result::Result::<core::integer::u8, core::integer::u8>, 0> = enum_init<core::result::Result::<core::integer::u8, core::integer::u8>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc store_temp<core::result::Result::<core::integer::u8, core::integer::u8>> = store_temp<core::result::Result::<core::integer::u8, core::integer::u8>>;
libfunc rename<core::result::Result::<core::integer::u8, core::integer::u8>> = rename<core::result::Result::<core::integer::u8, core::integer::u8>>;
libfunc jump = jump;
libfunc enum_init<core::result::Result::<core::integer::u8, core::integer::u8>, 1> = enum_init<core::result::Result::<core::integer::u8, core::integer::u8>, 1>;

u8_overflowing_sub([0], [1], [2]) { fallthrough([3], [4]) 8([5], [6]) };
branch_align() -> ();
enum_init<core::result::Result::<core::integer::u8, core::integer::u8>, 0>([4]) -> ([7]);
store_temp<RangeCheck>([3]) -> ([3]);
rename<RangeCheck>([3]) -> ([8]);
store_temp<core::result::Result::<core::integer::u8, core::integer::u8>>([7]) -> ([7]);
rename<core::result::Result::<core::integer::u8, core::integer::u8>>([7]) -> ([9]);
jump() { 14() };
branch_align() -> ();
enum_init<core::result::Result::<core::integer::u8, core::integer::u8>, 1>([6]) -> ([10]);
store_temp<RangeCheck>([5]) -> ([5]);
rename<RangeCheck>([5]) -> ([8]);
store_temp<core::result::Result::<core::integer::u8, core::integer::u8>>([10]) -> ([10]);
rename<core::result::Result::<core::integer::u8, core::integer::u8>>([10]) -> ([9]);
rename<RangeCheck>([8]) -> ([11]);
rename<core::result::Result::<core::integer::u8, core::integer::u8>>([9]) -> ([12]);
return([11], [12]);

test::foo@0([0]: RangeCheck, [1]: u8, [2]: u8) -> (RangeCheck, core::result::Result::<core::integer::u8, core::integer::u8>);

//! > ==========================================================================

//! > u8_lt libfunc

//! > test_comments

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo(a: u8, b: u8) -> bool {
    integer::u8_lt(a, b)
}

//! > casm
[fp + -4] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 11;
[ap + -1] = [[fp + -5] + 0];
ap += 1;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 9})

//! > sierra_code
type RangeCheck = RangeCheck;
type u8 = u8;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc u8_lt = u8_lt;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc rename<core::bool> = rename<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;

u8_lt([0], [1], [2]) { fallthrough([3]) 9([4]) };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 0>([5]) -> ([6]);
store_temp<RangeCheck>([3]) -> ([3]);
rename<RangeCheck>([3]) -> ([7]);
store_temp<core::bool>([6]) -> ([6]);
rename<core::bool>([6]) -> ([8]);
jump() { 16() };
branch_align() -> ();
struct_construct<Unit>() -> ([9]);
enum_init<core::bool, 1>([9]) -> ([10]);
store_temp<RangeCheck>([4]) -> ([4]);
rename<RangeCheck>([4]) -> ([7]);
store_temp<core::bool>([10]) -> ([10]);
rename<core::bool>([10]) -> ([8]);
rename<RangeCheck>([7]) -> ([11]);
rename<core::bool>([8]) -> ([12]);
return([11], [12]);

test::foo@0([0]: RangeCheck, [1]: u8, [2]: u8) -> (RangeCheck, core::bool);

//! > ==========================================================================

//! > u8_le libfunc

//! > test_comments

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo(a: u8, b: u8) -> bool {
    integer::u8_le(a, b)
}

//! > casm
[fp + -3] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = 340282366920938463463374607431768211456 <= memory[ap + 0] %}
jmp rel 5 if [ap + -1] != 0, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 11;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 8})

//! > sierra_code
type RangeCheck = RangeCheck;
type u8 = u8;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc u8_le = u8_le;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc rename<core::bool> = rename<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;

u8_le([0], [1], [2]) { fallthrough([3]) 9([4]) };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 0>([5]) -> ([6]);
store_temp<RangeCheck>([3]) -> ([3]);
rename<RangeCheck>([3]) -> ([7]);
store_temp<core::bool>([6]) -> ([6]);
rename<core::bool>([6]) -> ([8]);
jump() { 16() };
branch_align() -> ();
struct_construct<Unit>() -> ([9]);
enum_init<core::bool, 1>([9]) -> ([10]);
store_temp<RangeCheck>([4]) -> ([4]);
rename<RangeCheck>([4]) -> ([7]);
store_temp<core::bool>([10]) -> ([10]);
rename<core::bool>([10]) -> ([8]);
rename<RangeCheck>([7]) -> ([11]);
rename<core::bool>([8]) -> ([12]);
return([11], [12]);

test::foo@0([0]: RangeCheck, [1]: u8, [2]: u8) -> (RangeCheck, core::bool);

//! > ==========================================================================

//! > u8_eq libfunc

//! > test_comments

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo(a: u8, b: u8) -> bool {
    integer::u8_eq(a, b)
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 6;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 6})

//! > sierra_code
type u8 = u8;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc u8_eq = u8_eq;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc rename<core::bool> = rename<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;

u8_eq([0], [1]) { fallthrough() 7() };
branch_align() -> ();
struct_construct<Unit>() -> ([2]);
enum_init<core::bool, 0>([2]) -> ([3]);
store_temp<core::bool>([3]) -> ([3]);
rename<core::bool>([3]) -> ([4]);
jump() { 12() };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 1>([5]) -> ([6]);
store_temp<core::bool>([6]) -> ([6]);
rename<core::bool>([6]) -> ([4]);
rename<core::bool>([4]) -> ([7]);
return([7]);

test::foo@0([0]: u8, [1]: u8) -> (core::bool);

//! > ==========================================================================

//! > u8_try_from_felt libfunc

//! > test_comments

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo(v: felt) -> Option::<u8> {
    integer::u8_try_from_felt(v)
}

//! > casm
%{ memory[ap + 0] = memory[fp + -3] < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -4] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -4] = [ap + 0] + 340282366920938463463374607431768211455, ap++;
jmp rel 17 if [ap + -1] != 0;
jmp rel 0;
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -4] + 1];
ap += 5;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 8;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 13})

//! > sierra_code
type RangeCheck = RangeCheck;
type felt = felt;
type u8 = u8;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<core::integer::u8> = Enum<ut@core::option::Option::<core::integer::u8>, u8, Unit>;

libfunc u8_try_from_felt = u8_try_from_felt;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::integer::u8>, 0> = enum_init<core::option::Option::<core::integer::u8>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc store_temp<core::option::Option::<core::integer::u8>> = store_temp<core::option::Option::<core::integer::u8>>;
libfunc rename<core::option::Option::<core::integer::u8>> = rename<core::option::Option::<core::integer::u8>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::integer::u8>, 1> = enum_init<core::option::Option::<core::integer::u8>, 1>;

u8_try_from_felt([0], [1]) { fallthrough([2], [3]) 8([4]) };
branch_align() -> ();
enum_init<core::option::Option::<core::integer::u8>, 0>([3]) -> ([5]);
store_temp<RangeCheck>([2]) -> ([2]);
rename<RangeCheck>([2]) -> ([6]);
store_temp<core::option::Option::<core::integer::u8>>([5]) -> ([5]);
rename<core::option::Option::<core::integer::u8>>([5]) -> ([7]);
jump() { 15() };
branch_align() -> ();
struct_construct<Unit>() -> ([8]);
enum_init<core::option::Option::<core::integer::u8>, 1>([8]) -> ([9]);
store_temp<RangeCheck>([4]) -> ([4]);
rename<RangeCheck>([4]) -> ([6]);
store_temp<core::option::Option::<core::integer::u8>>([9]) -> ([9]);
rename<core::option::Option::<core::integer::u8>>([9]) -> ([7]);
rename<RangeCheck>([6]) -> ([10]);
rename<core::option::Option::<core::integer::u8>>([7]) -> ([11]);
return([10], [11]);

test::foo@0([0]: RangeCheck, [1]: felt) -> (RangeCheck, core::option::Option::<core::integer::u8>);
