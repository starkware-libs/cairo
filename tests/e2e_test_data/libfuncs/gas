//! > redeposit_gas libfunc

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    if x == 0 {
        bar();
        bar();
        bar();
        return ();
    } else {
        redeposit_gas();
        return ();
    }
}

#[inline(never)]
fn bar() {
}

//! > casm
jmp rel 10 if [fp + -3] != 0;
call rel 13;
call rel 11;
call rel 9;
[ap + 0] = [fp + -4], ap++;
ret;
ap += 6;
[ap + 0] = [fp + -4] + 440, ap++;
ret;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 800})
test::bar: OrderedHashMap({})

//! > sierra_code
type felt252 = felt252;
type NonZero<felt252> = NonZero<felt252>;
type Unit = Struct<ut@Tuple>;
type GasBuiltin = GasBuiltin;

libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc drop<Unit> = drop<Unit>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc redeposit_gas = redeposit_gas;

felt252_is_zero([1]) { fallthrough() 12([2]) };
branch_align() -> ();
function_call<user@test::bar>() -> ([3]);
drop<Unit>([3]) -> ();
function_call<user@test::bar>() -> ([4]);
drop<Unit>([4]) -> ();
function_call<user@test::bar>() -> ([5]);
drop<Unit>([5]) -> ();
struct_construct<Unit>() -> ([6]);
store_temp<GasBuiltin>([0]) -> ([7]);
store_temp<Unit>([6]) -> ([8]);
return([7], [8]);
branch_align() -> ();
drop<NonZero<felt252>>([2]) -> ();
redeposit_gas([0]) -> ([9]);
struct_construct<Unit>() -> ([10]);
store_temp<GasBuiltin>([9]) -> ([11]);
store_temp<Unit>([10]) -> ([12]);
return([11], [12]);
struct_construct<Unit>() -> ([0]);
store_temp<Unit>([0]) -> ([1]);
return([1]);

test::foo@0([0]: GasBuiltin, [1]: felt252) -> (GasBuiltin, Unit);
test::bar@19() -> (Unit);
