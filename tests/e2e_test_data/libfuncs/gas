//! > redeposit_gas libfunc

//! > test_runner_name
SmallE2ETestRunnerSkipAddGas

//! > cairo_code
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    if x == 0 {
        bar();
        bar();
        bar();
        return ();
    } else {
        redeposit_gas();
        return ();
    }
}

#[inline(never)]
fn bar() {}

//! > casm
[fp + -3] = [ap + 0] + 0, ap++;
jmp rel 10 if [ap + -1] != 0;
call rel 13;
call rel 11;
call rel 9;
[ap + 0] = [fp + -4], ap++;
ret;
ap += 6;
[ap + 0] = [fp + -4] + 440, ap++;
ret;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 900})
test::bar: OrderedHashMap({})

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 0> = Const<felt252, 0> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<felt252, 0>> = const_as_immediate<Const<felt252, 0>>;
libfunc felt252_sub = felt252_sub;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc redeposit_gas = redeposit_gas;

F0:
const_as_immediate<Const<felt252, 0>>() -> ([2]);
felt252_sub([1], [2]) -> ([3]);
store_temp<felt252>([3]) -> ([3]);
felt252_is_zero([3]) { fallthrough() F0_B0([4]) };
branch_align() -> ();
function_call<user@test::bar>() -> ();
function_call<user@test::bar>() -> ();
function_call<user@test::bar>() -> ();
store_temp<GasBuiltin>([0]) -> ([0]);
return([0]);
F0_B0:
branch_align() -> ();
drop<NonZero<felt252>>([4]) -> ();
redeposit_gas([0]) -> ([5]);
store_temp<GasBuiltin>([5]) -> ([5]);
return([5]);
F1:
return();

test::foo@F0([0]: GasBuiltin, [1]: felt252) -> (GasBuiltin);
test::bar@F1() -> ();

//! > ==========================================================================

//! > redeposit_gas libfunc with builtin costs

//! > test_runner_name
SmallE2ETestRunnerSkipAddGas

//! > cairo_code
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    if x == 0 {
        1 & 2_u128;
        1 & 2_u128;
        pedersen::pedersen(1, 1);
        return ();
    } else {
        redeposit_gas();
        return ();
    }
}

//! > casm
[fp + -3] = [ap + 0] + 0, ap++;
jmp rel 28 if [ap + -1] != 0;
ap += 3;
[ap + 0] = 1, ap++;
[ap + 0] = 2, ap++;
[ap + -2] = [[fp + -5] + 0];
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = 2, ap++;
[ap + -2] = [[fp + -5] + 5];
[ap + -1] = [[fp + -5] + 6];
[ap + 0] = 1, ap++;
[ap + 0] = 1, ap++;
[ap + -2] = [[fp + -4] + 0];
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 10, ap++;
[ap + 0] = [fp + -4] + 3, ap++;
ret;
call rel 16;
[ap + 0] = [ap + -1] + 15, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 430, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + [ap + -3], ap++;
[ap + 0] = [fp + -6] + [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Bitwise: 2, Pedersen: 1, Const: 1830})

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type Pedersen = Pedersen [storable: true, drop: false, dup: false, zero_sized: false];
type Const<felt252, 1> = Const<felt252, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type Bitwise = Bitwise [storable: true, drop: false, dup: false, zero_sized: false];
type Const<u128, 2> = Const<u128, 2> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 1> = Const<u128, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 0> = Const<felt252, 0> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<felt252, 0>> = const_as_immediate<Const<felt252, 0>>;
libfunc felt252_sub = felt252_sub;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc const_as_immediate<Const<u128, 1>> = const_as_immediate<Const<u128, 1>>;
libfunc const_as_immediate<Const<u128, 2>> = const_as_immediate<Const<u128, 2>>;
libfunc store_temp<u128> = store_temp<u128>;
libfunc bitwise = bitwise;
libfunc drop<u128> = drop<u128>;
libfunc const_as_immediate<Const<felt252, 1>> = const_as_immediate<Const<felt252, 1>>;
libfunc pedersen = pedersen;
libfunc drop<felt252> = drop<felt252>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<Bitwise> = store_temp<Bitwise>;
libfunc store_temp<Pedersen> = store_temp<Pedersen>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc redeposit_gas = redeposit_gas;

F0:
const_as_immediate<Const<felt252, 0>>() -> ([4]);
felt252_sub([3], [4]) -> ([5]);
store_temp<felt252>([5]) -> ([5]);
felt252_is_zero([5]) { fallthrough() F0_B0([6]) };
branch_align() -> ();
const_as_immediate<Const<u128, 1>>() -> ([7]);
const_as_immediate<Const<u128, 2>>() -> ([8]);
store_temp<u128>([7]) -> ([7]);
store_temp<u128>([8]) -> ([8]);
bitwise([1], [7], [8]) -> ([9], [10], [11], [12]);
drop<u128>([10]) -> ();
drop<u128>([11]) -> ();
drop<u128>([12]) -> ();
const_as_immediate<Const<u128, 1>>() -> ([13]);
const_as_immediate<Const<u128, 2>>() -> ([14]);
store_temp<u128>([13]) -> ([13]);
store_temp<u128>([14]) -> ([14]);
bitwise([9], [13], [14]) -> ([15], [16], [17], [18]);
drop<u128>([16]) -> ();
drop<u128>([17]) -> ();
drop<u128>([18]) -> ();
const_as_immediate<Const<felt252, 1>>() -> ([19]);
const_as_immediate<Const<felt252, 1>>() -> ([20]);
store_temp<felt252>([19]) -> ([19]);
store_temp<felt252>([20]) -> ([20]);
pedersen([2], [19], [20]) -> ([21], [22]);
drop<felt252>([22]) -> ();
store_temp<GasBuiltin>([0]) -> ([0]);
store_temp<Bitwise>([15]) -> ([15]);
store_temp<Pedersen>([21]) -> ([21]);
return([0], [15], [21]);
F0_B0:
branch_align() -> ();
drop<NonZero<felt252>>([6]) -> ();
redeposit_gas([0]) -> ([23]);
store_temp<GasBuiltin>([23]) -> ([23]);
store_temp<Bitwise>([1]) -> ([1]);
store_temp<Pedersen>([2]) -> ([2]);
return([23], [1], [2]);

test::foo@F0([0]: GasBuiltin, [1]: Bitwise, [2]: Pedersen, [3]: felt252) -> (GasBuiltin, Bitwise, Pedersen);

//! > ==========================================================================

//! > withdraw_gas use no builtins

//! > test_runner_name
SmallE2ETestRunnerSkipAddGas

//! > cairo_code
fn foo() -> Option<()> {
    gas::withdraw_gas()?;
    foo()
}

//! > casm
%{ memory[ap + 0] = 770 <= memory[fp + -3] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768210686, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 11;
[fp + -3] = [ap + 0] + 770, ap++;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
call rel -13;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 770})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::option::Option::<()> = Enum<ut@core::option::Option::<()>, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc withdraw_gas = withdraw_gas;
libfunc branch_align = branch_align;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::foo> = function_call<user@test::foo>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<()>, 1> = enum_init<core::option::Option::<()>, 1>;
libfunc store_temp<core::option::Option::<()>> = store_temp<core::option::Option::<()>>;

F0:
disable_ap_tracking() -> ();
withdraw_gas([0], [1]) { fallthrough([2], [3]) F0_B0([4], [5]) };
branch_align() -> ();
store_temp<RangeCheck>([2]) -> ([2]);
store_temp<GasBuiltin>([3]) -> ([3]);
function_call<user@test::foo>([2], [3]) -> ([6], [7], [8]);
return([6], [7], [8]);
F0_B0:
branch_align() -> ();
struct_construct<Unit>() -> ([9]);
enum_init<core::option::Option::<()>, 1>([9]) -> ([10]);
store_temp<RangeCheck>([4]) -> ([4]);
store_temp<GasBuiltin>([5]) -> ([5]);
store_temp<core::option::Option::<()>>([10]) -> ([10]);
return([4], [5], [10]);

test::foo@F0([0]: RangeCheck, [1]: GasBuiltin) -> (RangeCheck, GasBuiltin, core::option::Option::<()>);

//! > ==========================================================================

//! > withdraw_gas use pedersen builtin

//! > test_runner_name
SmallE2ETestRunnerSkipAddGas

//! > cairo_code
fn foo() -> Option<()> {
    gas::withdraw_gas()?;
    pedersen::pedersen(1, 1);
    foo()
}

//! > casm
call rel 39;
[ap + 0] = [ap + -1] + 38, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 1870, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -4] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 18;
[fp + -4] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = 1, ap++;
[ap + -2] = [[fp + -3] + 0];
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
call rel -29;
ret;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1570})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::option::Option::<()> = Enum<ut@core::option::Option::<()>, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Pedersen = Pedersen [storable: true, drop: false, dup: false, zero_sized: false];
type Const<felt252, 1> = Const<felt252, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc withdraw_gas = withdraw_gas;
libfunc branch_align = branch_align;
libfunc const_as_immediate<Const<felt252, 1>> = const_as_immediate<Const<felt252, 1>>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc pedersen = pedersen;
libfunc drop<felt252> = drop<felt252>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<Pedersen> = store_temp<Pedersen>;
libfunc function_call<user@test::foo> = function_call<user@test::foo>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<()>, 1> = enum_init<core::option::Option::<()>, 1>;
libfunc store_temp<core::option::Option::<()>> = store_temp<core::option::Option::<()>>;

F0:
disable_ap_tracking() -> ();
withdraw_gas([0], [1]) { fallthrough([3], [4]) F0_B0([5], [6]) };
branch_align() -> ();
const_as_immediate<Const<felt252, 1>>() -> ([7]);
const_as_immediate<Const<felt252, 1>>() -> ([8]);
store_temp<felt252>([7]) -> ([7]);
store_temp<felt252>([8]) -> ([8]);
pedersen([2], [7], [8]) -> ([9], [10]);
drop<felt252>([10]) -> ();
store_temp<RangeCheck>([3]) -> ([3]);
store_temp<GasBuiltin>([4]) -> ([4]);
store_temp<Pedersen>([9]) -> ([9]);
function_call<user@test::foo>([3], [4], [9]) -> ([11], [12], [13], [14]);
return([11], [12], [13], [14]);
F0_B0:
branch_align() -> ();
struct_construct<Unit>() -> ([15]);
enum_init<core::option::Option::<()>, 1>([15]) -> ([16]);
store_temp<RangeCheck>([5]) -> ([5]);
store_temp<GasBuiltin>([6]) -> ([6]);
store_temp<Pedersen>([2]) -> ([2]);
store_temp<core::option::Option::<()>>([16]) -> ([16]);
return([5], [6], [2], [16]);

test::foo@F0([0]: RangeCheck, [1]: GasBuiltin, [2]: Pedersen) -> (RangeCheck, GasBuiltin, Pedersen, core::option::Option::<()>);

//! > ==========================================================================

//! > withdraw_gas use pedersen and bitwise builtins

//! > test_runner_name
SmallE2ETestRunnerSkipAddGas

//! > cairo_code
fn foo() -> Option<()> {
    gas::withdraw_gas()?;
    pedersen::pedersen(1, 1);
    integer::bitwise(1_u128, 1_u128);
    integer::bitwise(1_u128, 1_u128);
    foo()
}

//! > casm
call rel 58;
[ap + 0] = [ap + -1] + 57, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 3070, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 32;
[fp + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = 1, ap++;
[ap + -2] = [[fp + -3] + 0];
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = 1, ap++;
[ap + -2] = [[fp + -4] + 0];
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = 1, ap++;
[ap + -2] = [[fp + -4] + 5];
[ap + -1] = [[fp + -4] + 6];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -4] + 10, ap++;
[ap + 0] = [fp + -3] + 3, ap++;
call rel -47;
ret;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1970})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::option::Option::<()> = Enum<ut@core::option::Option::<()>, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Bitwise = Bitwise [storable: true, drop: false, dup: false, zero_sized: false];
type Const<u128, 1> = Const<u128, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type Pedersen = Pedersen [storable: true, drop: false, dup: false, zero_sized: false];
type Const<felt252, 1> = Const<felt252, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc withdraw_gas = withdraw_gas;
libfunc branch_align = branch_align;
libfunc const_as_immediate<Const<felt252, 1>> = const_as_immediate<Const<felt252, 1>>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc pedersen = pedersen;
libfunc drop<felt252> = drop<felt252>;
libfunc const_as_immediate<Const<u128, 1>> = const_as_immediate<Const<u128, 1>>;
libfunc store_temp<u128> = store_temp<u128>;
libfunc bitwise = bitwise;
libfunc drop<u128> = drop<u128>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<Bitwise> = store_temp<Bitwise>;
libfunc store_temp<Pedersen> = store_temp<Pedersen>;
libfunc function_call<user@test::foo> = function_call<user@test::foo>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<()>, 1> = enum_init<core::option::Option::<()>, 1>;
libfunc store_temp<core::option::Option::<()>> = store_temp<core::option::Option::<()>>;

F0:
disable_ap_tracking() -> ();
withdraw_gas([0], [1]) { fallthrough([4], [5]) F0_B0([6], [7]) };
branch_align() -> ();
const_as_immediate<Const<felt252, 1>>() -> ([8]);
const_as_immediate<Const<felt252, 1>>() -> ([9]);
store_temp<felt252>([8]) -> ([8]);
store_temp<felt252>([9]) -> ([9]);
pedersen([3], [8], [9]) -> ([10], [11]);
drop<felt252>([11]) -> ();
const_as_immediate<Const<u128, 1>>() -> ([12]);
const_as_immediate<Const<u128, 1>>() -> ([13]);
store_temp<u128>([12]) -> ([12]);
store_temp<u128>([13]) -> ([13]);
bitwise([2], [12], [13]) -> ([14], [15], [16], [17]);
drop<u128>([15]) -> ();
drop<u128>([16]) -> ();
drop<u128>([17]) -> ();
const_as_immediate<Const<u128, 1>>() -> ([18]);
const_as_immediate<Const<u128, 1>>() -> ([19]);
store_temp<u128>([18]) -> ([18]);
store_temp<u128>([19]) -> ([19]);
bitwise([14], [18], [19]) -> ([20], [21], [22], [23]);
drop<u128>([21]) -> ();
drop<u128>([22]) -> ();
drop<u128>([23]) -> ();
store_temp<RangeCheck>([4]) -> ([4]);
store_temp<GasBuiltin>([5]) -> ([5]);
store_temp<Bitwise>([20]) -> ([20]);
store_temp<Pedersen>([10]) -> ([10]);
function_call<user@test::foo>([4], [5], [20], [10]) -> ([24], [25], [26], [27], [28]);
return([24], [25], [26], [27], [28]);
F0_B0:
branch_align() -> ();
struct_construct<Unit>() -> ([29]);
enum_init<core::option::Option::<()>, 1>([29]) -> ([30]);
store_temp<RangeCheck>([6]) -> ([6]);
store_temp<GasBuiltin>([7]) -> ([7]);
store_temp<Bitwise>([2]) -> ([2]);
store_temp<Pedersen>([3]) -> ([3]);
store_temp<core::option::Option::<()>>([30]) -> ([30]);
return([6], [7], [2], [3], [30]);

test::foo@F0([0]: RangeCheck, [1]: GasBuiltin, [2]: Bitwise, [3]: Pedersen) -> (RangeCheck, GasBuiltin, Bitwise, Pedersen, core::option::Option::<()>);

//! > ==========================================================================

//! > withdraw_gas_all use no builtins

//! > test_runner_name
SmallE2ETestRunnerSkipAddGas

//! > cairo_code
fn foo(costs: BuiltinCosts) -> Option<()> {
    gas::withdraw_gas_all(costs)?;
    foo(costs)
}

//! > casm
%{ memory[ap + 0] = 870 <= memory[fp + -4] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[fp + -4] = [ap + 0] + 870, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 12;
[fp + -4] = [ap + 0] + 870, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -16;
ret;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 870})

//! > sierra_code
type BuiltinCosts = BuiltinCosts [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::option::Option::<()> = Enum<ut@core::option::Option::<()>, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<BuiltinCosts> = dup<BuiltinCosts>;
libfunc withdraw_gas_all = withdraw_gas_all;
libfunc branch_align = branch_align;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<BuiltinCosts> = store_temp<BuiltinCosts>;
libfunc function_call<user@test::foo> = function_call<user@test::foo>;
libfunc drop<BuiltinCosts> = drop<BuiltinCosts>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<()>, 1> = enum_init<core::option::Option::<()>, 1>;
libfunc store_temp<core::option::Option::<()>> = store_temp<core::option::Option::<()>>;

F0:
disable_ap_tracking() -> ();
dup<BuiltinCosts>([2]) -> ([2], [3]);
withdraw_gas_all([0], [1], [3]) { fallthrough([4], [5]) F0_B0([6], [7]) };
branch_align() -> ();
store_temp<RangeCheck>([4]) -> ([4]);
store_temp<GasBuiltin>([5]) -> ([5]);
store_temp<BuiltinCosts>([2]) -> ([2]);
function_call<user@test::foo>([4], [5], [2]) -> ([8], [9], [10]);
return([8], [9], [10]);
F0_B0:
branch_align() -> ();
drop<BuiltinCosts>([2]) -> ();
struct_construct<Unit>() -> ([11]);
enum_init<core::option::Option::<()>, 1>([11]) -> ([12]);
store_temp<RangeCheck>([6]) -> ([6]);
store_temp<GasBuiltin>([7]) -> ([7]);
store_temp<core::option::Option::<()>>([12]) -> ([12]);
return([6], [7], [12]);

test::foo@F0([0]: RangeCheck, [1]: GasBuiltin, [2]: BuiltinCosts) -> (RangeCheck, GasBuiltin, core::option::Option::<()>);

//! > ==========================================================================

//! > withdraw_gas_all use pedersen builtin

//! > test_runner_name
SmallE2ETestRunnerSkipAddGas

//! > cairo_code
fn foo(costs: BuiltinCosts) -> Option<()> {
    gas::withdraw_gas_all(costs)?;
    pedersen::pedersen(1, 1);
    foo(costs)
}

//! > casm
[ap + 0] = [[fp + -3] + 0], ap++;
[ap + 0] = [ap + -1] + 1570, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 19;
[fp + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = 1, ap++;
[ap + -2] = [[fp + -4] + 0];
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = [fp + -3], ap++;
call rel -25;
ret;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1170})

//! > sierra_code
type BuiltinCosts = BuiltinCosts [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::option::Option::<()> = Enum<ut@core::option::Option::<()>, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Pedersen = Pedersen [storable: true, drop: false, dup: false, zero_sized: false];
type Const<felt252, 1> = Const<felt252, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<BuiltinCosts> = dup<BuiltinCosts>;
libfunc withdraw_gas_all = withdraw_gas_all;
libfunc branch_align = branch_align;
libfunc const_as_immediate<Const<felt252, 1>> = const_as_immediate<Const<felt252, 1>>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc pedersen = pedersen;
libfunc drop<felt252> = drop<felt252>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<Pedersen> = store_temp<Pedersen>;
libfunc store_temp<BuiltinCosts> = store_temp<BuiltinCosts>;
libfunc function_call<user@test::foo> = function_call<user@test::foo>;
libfunc drop<BuiltinCosts> = drop<BuiltinCosts>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<()>, 1> = enum_init<core::option::Option::<()>, 1>;
libfunc store_temp<core::option::Option::<()>> = store_temp<core::option::Option::<()>>;

F0:
disable_ap_tracking() -> ();
dup<BuiltinCosts>([3]) -> ([3], [4]);
withdraw_gas_all([0], [1], [4]) { fallthrough([5], [6]) F0_B0([7], [8]) };
branch_align() -> ();
const_as_immediate<Const<felt252, 1>>() -> ([9]);
const_as_immediate<Const<felt252, 1>>() -> ([10]);
store_temp<felt252>([9]) -> ([9]);
store_temp<felt252>([10]) -> ([10]);
pedersen([2], [9], [10]) -> ([11], [12]);
drop<felt252>([12]) -> ();
store_temp<RangeCheck>([5]) -> ([5]);
store_temp<GasBuiltin>([6]) -> ([6]);
store_temp<Pedersen>([11]) -> ([11]);
store_temp<BuiltinCosts>([3]) -> ([3]);
function_call<user@test::foo>([5], [6], [11], [3]) -> ([13], [14], [15], [16]);
return([13], [14], [15], [16]);
F0_B0:
branch_align() -> ();
drop<BuiltinCosts>([3]) -> ();
struct_construct<Unit>() -> ([17]);
enum_init<core::option::Option::<()>, 1>([17]) -> ([18]);
store_temp<RangeCheck>([7]) -> ([7]);
store_temp<GasBuiltin>([8]) -> ([8]);
store_temp<Pedersen>([2]) -> ([2]);
store_temp<core::option::Option::<()>>([18]) -> ([18]);
return([7], [8], [2], [18]);

test::foo@F0([0]: RangeCheck, [1]: GasBuiltin, [2]: Pedersen, [3]: BuiltinCosts) -> (RangeCheck, GasBuiltin, Pedersen, core::option::Option::<()>);

//! > ==========================================================================

//! > withdraw_gas_all use bitwise builtin

//! > test_runner_name
SmallE2ETestRunnerSkipAddGas

//! > cairo_code
fn foo(costs: BuiltinCosts) -> Option<()> {
    gas::withdraw_gas_all(costs)?;
    integer::bitwise(1_u128, 1_u128);
    foo(costs)
}

//! > casm
[ap + 0] = [[fp + -3] + 1], ap++;
[ap + 0] = [ap + -1] + 1570, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 19;
[fp + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = 1, ap++;
[ap + -2] = [[fp + -4] + 0];
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4] + 5, ap++;
[ap + 0] = [fp + -3], ap++;
call rel -25;
ret;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1170})

//! > sierra_code
type BuiltinCosts = BuiltinCosts [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::option::Option::<()> = Enum<ut@core::option::Option::<()>, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Bitwise = Bitwise [storable: true, drop: false, dup: false, zero_sized: false];
type Const<u128, 1> = Const<u128, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<BuiltinCosts> = dup<BuiltinCosts>;
libfunc withdraw_gas_all = withdraw_gas_all;
libfunc branch_align = branch_align;
libfunc const_as_immediate<Const<u128, 1>> = const_as_immediate<Const<u128, 1>>;
libfunc store_temp<u128> = store_temp<u128>;
libfunc bitwise = bitwise;
libfunc drop<u128> = drop<u128>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<Bitwise> = store_temp<Bitwise>;
libfunc store_temp<BuiltinCosts> = store_temp<BuiltinCosts>;
libfunc function_call<user@test::foo> = function_call<user@test::foo>;
libfunc drop<BuiltinCosts> = drop<BuiltinCosts>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<()>, 1> = enum_init<core::option::Option::<()>, 1>;
libfunc store_temp<core::option::Option::<()>> = store_temp<core::option::Option::<()>>;

F0:
disable_ap_tracking() -> ();
dup<BuiltinCosts>([3]) -> ([3], [4]);
withdraw_gas_all([0], [1], [4]) { fallthrough([5], [6]) F0_B0([7], [8]) };
branch_align() -> ();
const_as_immediate<Const<u128, 1>>() -> ([9]);
const_as_immediate<Const<u128, 1>>() -> ([10]);
store_temp<u128>([9]) -> ([9]);
store_temp<u128>([10]) -> ([10]);
bitwise([2], [9], [10]) -> ([11], [12], [13], [14]);
drop<u128>([12]) -> ();
drop<u128>([13]) -> ();
drop<u128>([14]) -> ();
store_temp<RangeCheck>([5]) -> ([5]);
store_temp<GasBuiltin>([6]) -> ([6]);
store_temp<Bitwise>([11]) -> ([11]);
store_temp<BuiltinCosts>([3]) -> ([3]);
function_call<user@test::foo>([5], [6], [11], [3]) -> ([15], [16], [17], [18]);
return([15], [16], [17], [18]);
F0_B0:
branch_align() -> ();
drop<BuiltinCosts>([3]) -> ();
struct_construct<Unit>() -> ([19]);
enum_init<core::option::Option::<()>, 1>([19]) -> ([20]);
store_temp<RangeCheck>([7]) -> ([7]);
store_temp<GasBuiltin>([8]) -> ([8]);
store_temp<Bitwise>([2]) -> ([2]);
store_temp<core::option::Option::<()>>([20]) -> ([20]);
return([7], [8], [2], [20]);

test::foo@F0([0]: RangeCheck, [1]: GasBuiltin, [2]: Bitwise, [3]: BuiltinCosts) -> (RangeCheck, GasBuiltin, Bitwise, core::option::Option::<()>);

//! > ==========================================================================

//! > withdraw_gas_all use pedersen and bitwise builtins

//! > test_runner_name
SmallE2ETestRunnerSkipAddGas

//! > cairo_code
fn foo(costs: BuiltinCosts) -> Option<()> {
    gas::withdraw_gas_all(costs)?;
    pedersen::pedersen(1, 1);
    integer::bitwise(1_u128, 1_u128);
    foo(costs)
}

//! > casm
[ap + 0] = [[fp + -3] + 0], ap++;
[ap + 0] = [ap + -1] + 2270, ap++;
[ap + 0] = [[fp + -3] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -6] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 27;
[fp + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = 1, ap++;
[ap + -2] = [[fp + -4] + 0];
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = 1, ap++;
[ap + -2] = [[fp + -5] + 0];
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = [fp + -3], ap++;
call rel -35;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 1, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1470})

//! > sierra_code
type BuiltinCosts = BuiltinCosts [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::option::Option::<()> = Enum<ut@core::option::Option::<()>, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Bitwise = Bitwise [storable: true, drop: false, dup: false, zero_sized: false];
type Const<u128, 1> = Const<u128, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type Pedersen = Pedersen [storable: true, drop: false, dup: false, zero_sized: false];
type Const<felt252, 1> = Const<felt252, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<BuiltinCosts> = dup<BuiltinCosts>;
libfunc withdraw_gas_all = withdraw_gas_all;
libfunc branch_align = branch_align;
libfunc const_as_immediate<Const<felt252, 1>> = const_as_immediate<Const<felt252, 1>>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc pedersen = pedersen;
libfunc drop<felt252> = drop<felt252>;
libfunc const_as_immediate<Const<u128, 1>> = const_as_immediate<Const<u128, 1>>;
libfunc store_temp<u128> = store_temp<u128>;
libfunc bitwise = bitwise;
libfunc drop<u128> = drop<u128>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<Bitwise> = store_temp<Bitwise>;
libfunc store_temp<Pedersen> = store_temp<Pedersen>;
libfunc store_temp<BuiltinCosts> = store_temp<BuiltinCosts>;
libfunc function_call<user@test::foo> = function_call<user@test::foo>;
libfunc drop<BuiltinCosts> = drop<BuiltinCosts>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<()>, 1> = enum_init<core::option::Option::<()>, 1>;
libfunc store_temp<core::option::Option::<()>> = store_temp<core::option::Option::<()>>;

F0:
disable_ap_tracking() -> ();
dup<BuiltinCosts>([4]) -> ([4], [5]);
withdraw_gas_all([0], [1], [5]) { fallthrough([6], [7]) F0_B0([8], [9]) };
branch_align() -> ();
const_as_immediate<Const<felt252, 1>>() -> ([10]);
const_as_immediate<Const<felt252, 1>>() -> ([11]);
store_temp<felt252>([10]) -> ([10]);
store_temp<felt252>([11]) -> ([11]);
pedersen([3], [10], [11]) -> ([12], [13]);
drop<felt252>([13]) -> ();
const_as_immediate<Const<u128, 1>>() -> ([14]);
const_as_immediate<Const<u128, 1>>() -> ([15]);
store_temp<u128>([14]) -> ([14]);
store_temp<u128>([15]) -> ([15]);
bitwise([2], [14], [15]) -> ([16], [17], [18], [19]);
drop<u128>([17]) -> ();
drop<u128>([18]) -> ();
drop<u128>([19]) -> ();
store_temp<RangeCheck>([6]) -> ([6]);
store_temp<GasBuiltin>([7]) -> ([7]);
store_temp<Bitwise>([16]) -> ([16]);
store_temp<Pedersen>([12]) -> ([12]);
store_temp<BuiltinCosts>([4]) -> ([4]);
function_call<user@test::foo>([6], [7], [16], [12], [4]) -> ([20], [21], [22], [23], [24]);
return([20], [21], [22], [23], [24]);
F0_B0:
branch_align() -> ();
drop<BuiltinCosts>([4]) -> ();
struct_construct<Unit>() -> ([25]);
enum_init<core::option::Option::<()>, 1>([25]) -> ([26]);
store_temp<RangeCheck>([8]) -> ([8]);
store_temp<GasBuiltin>([9]) -> ([9]);
store_temp<Bitwise>([2]) -> ([2]);
store_temp<Pedersen>([3]) -> ([3]);
store_temp<core::option::Option::<()>>([26]) -> ([26]);
return([8], [9], [2], [3], [26]);

test::foo@F0([0]: RangeCheck, [1]: GasBuiltin, [2]: Bitwise, [3]: Pedersen, [4]: BuiltinCosts) -> (RangeCheck, GasBuiltin, Bitwise, Pedersen, core::option::Option::<()>);
