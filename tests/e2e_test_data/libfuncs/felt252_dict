//! > felt252_dict_new libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo() -> Felt252Dict::<felt252> {
    felt252_dict_new::<felt252>()
}

//! > casm
%{
if '__dict_manager' not in globals():
    from starkware.cairo.common.dict import DictManager
    __dict_manager = DictManager()

if '__segment_index_to_arena_index' not in globals():
    # A map from the relocatable value segment index to the index in the
    # arena.
    __segment_index_to_arena_index = {}

# memory[fp + -3] is the address of the next SegmentArenaBuiltin.
# memory[memory[fp + -3] - 2] is the number of allocated segments.
index = memory[memory[fp + -3] - 2]

segment_start = __dict_manager.new_default_dict(
    segments, 0, temp_segment=index > 0
)

# Update '__segment_index_to_arena_index'.
__segment_index_to_arena_index[segment_start.segment_index] = index

# Update 'SegmentInfo::start'.
# memory[memory[fp + -3] - 3] is the address of the segment arena infos
# segment. index * 3 is added to get the address of the new SegmentInfo.
memory[memory[memory[fp + -3] - 3] + index * 3] = segment_start
%}
[ap + 0] = [[fp + -3] + -3], ap++;
[ap + 0] = [[fp + -3] + -2], ap++;
[ap + 0] = [[fp + -3] + -1], ap++;
[ap + -3] = [[fp + -3] + 0];
[ap + 0] = [ap + -2] + 1, ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + -2] = [[fp + -3] + 2];
[ap + 0] = [ap + -3] * 3, ap++;
[ap + 0] = [ap + -5] + [ap + -1], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1100})

//! > sierra_code
type SegmentArena = SegmentArena;
type felt252 = felt252;
type Felt252Dict<felt252> = Felt252Dict<felt252>;

libfunc felt252_dict_new<felt252> = felt252_dict_new<felt252>;
libfunc store_temp<SegmentArena> = store_temp<SegmentArena>;
libfunc store_temp<Felt252Dict<felt252>> = store_temp<Felt252Dict<felt252>>;

felt252_dict_new<felt252>([0]) -> ([1], [2]);
store_temp<SegmentArena>([1]) -> ([3]);
store_temp<Felt252Dict<felt252>>([2]) -> ([4]);
return([3], [4]);

test::foo@0([0]: SegmentArena) -> (SegmentArena, Felt252Dict<felt252>);

//! > ==========================================================================

//! > felt252_dict_write libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref dict: Felt252Dict::<felt252>, key: felt252, value: felt252) {
    felt252_dict_write::<felt252>(ref dict, key, value);
}

//! > casm
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -5])
memory[memory[fp + -5] + 1] = dict_tracker.data[memory[fp + -4]]
dict_tracker.current_ptr += 3
dict_tracker.data[memory[fp + -4]] = memory[fp + -3]
%}
[fp + -4] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 2];
[ap + 0] = [fp + -5] + 3, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 7190})

//! > sierra_code
type felt252 = felt252;
type Felt252Dict<felt252> = Felt252Dict<felt252>;
type Unit = Struct<ut@Tuple>;

libfunc felt252_dict_write<felt252> = felt252_dict_write<felt252>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Felt252Dict<felt252>> = store_temp<Felt252Dict<felt252>>;
libfunc store_temp<Unit> = store_temp<Unit>;

felt252_dict_write<felt252>([0], [1], [2]) -> ([3]);
struct_construct<Unit>() -> ([4]);
store_temp<Felt252Dict<felt252>>([3]) -> ([5]);
store_temp<Unit>([4]) -> ([6]);
return([5], [6]);

test::foo@0([0]: Felt252Dict<felt252>, [1]: felt252, [2]: felt252) -> (Felt252Dict<felt252>, Unit);

//! > ==========================================================================

//! > felt252_dict_read libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref dict: Felt252Dict::<felt252>, key: felt252) -> felt252 {
    felt252_dict_read::<felt252>(ref dict, key)
}

//! > casm
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -4])
dict_tracker.current_ptr += 3
memory[ap + 0] = dict_tracker.data[memory[fp + -3]]
%}
[fp + -3] = [[fp + -4] + 0], ap++;
[ap + -1] = [[fp + -4] + 1];
[ap + -1] = [[fp + -4] + 2];
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 7390})

//! > sierra_code
type felt252 = felt252;
type Felt252Dict<felt252> = Felt252Dict<felt252>;

libfunc felt252_dict_read<felt252> = felt252_dict_read<felt252>;
libfunc store_temp<Felt252Dict<felt252>> = store_temp<Felt252Dict<felt252>>;
libfunc store_temp<felt252> = store_temp<felt252>;

felt252_dict_read<felt252>([0], [1]) -> ([2], [3]);
store_temp<Felt252Dict<felt252>>([2]) -> ([4]);
store_temp<felt252>([3]) -> ([5]);
return([4], [5]);

test::foo@0([0]: Felt252Dict<felt252>, [1]: felt252) -> (Felt252Dict<felt252>, felt252);

//! > ==========================================================================

//! > felt252_dict_read and felt252_dict_write multiple calls

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref dict: Felt252Dict::<felt252>, key: felt252) {
    felt252_dict_read::<felt252>(ref dict, key);
    let a = felt252_dict_read::<felt252>(ref dict, key);
    felt252_dict_write::<felt252>(ref dict, key, a);
    felt252_dict_write::<felt252>(ref dict, key, a);
}

//! > casm
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -4])
dict_tracker.current_ptr += 3
memory[ap + 0] = dict_tracker.data[memory[fp + -3]]
%}
[fp + -3] = [[fp + -4] + 0], ap++;
[ap + -1] = [[fp + -4] + 1];
[ap + -1] = [[fp + -4] + 2];
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -4] + 3)
dict_tracker.current_ptr += 3
memory[ap + 0] = dict_tracker.data[memory[fp + -3]]
%}
[fp + -3] = [[fp + -4] + 3], ap++;
[ap + -1] = [[fp + -4] + 4];
[ap + -1] = [[fp + -4] + 5];
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -4] + 6)
memory[memory[fp + -4] + 6 + 1] = dict_tracker.data[memory[fp + -3]]
dict_tracker.current_ptr += 3
dict_tracker.data[memory[fp + -3]] = memory[ap + -1]
%}
[fp + -3] = [[fp + -4] + 6];
[ap + -1] = [[fp + -4] + 8];
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -4] + 9)
memory[memory[fp + -4] + 9 + 1] = dict_tracker.data[memory[fp + -3]]
dict_tracker.current_ptr += 3
dict_tracker.data[memory[fp + -3]] = memory[ap + -1]
%}
[fp + -3] = [[fp + -4] + 9];
[ap + -1] = [[fp + -4] + 11];
[ap + 0] = [fp + -4] + 12, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 28660})

//! > sierra_code
type felt252 = felt252;
type Felt252Dict<felt252> = Felt252Dict<felt252>;
type Unit = Struct<ut@Tuple>;

libfunc dup<felt252> = dup<felt252>;
libfunc felt252_dict_read<felt252> = felt252_dict_read<felt252>;
libfunc drop<felt252> = drop<felt252>;
libfunc felt252_dict_write<felt252> = felt252_dict_write<felt252>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Felt252Dict<felt252>> = store_temp<Felt252Dict<felt252>>;
libfunc store_temp<Unit> = store_temp<Unit>;

dup<felt252>([1]) -> ([1], [4]);
felt252_dict_read<felt252>([0], [4]) -> ([2], [3]);
drop<felt252>([3]) -> ();
dup<felt252>([1]) -> ([1], [7]);
felt252_dict_read<felt252>([2], [7]) -> ([5], [6]);
dup<felt252>([1]) -> ([1], [9]);
dup<felt252>([6]) -> ([6], [10]);
felt252_dict_write<felt252>([5], [9], [10]) -> ([8]);
felt252_dict_write<felt252>([8], [1], [6]) -> ([11]);
struct_construct<Unit>() -> ([12]);
store_temp<Felt252Dict<felt252>>([11]) -> ([13]);
store_temp<Unit>([12]) -> ([14]);
return([13], [14]);

test::foo@0([0]: Felt252Dict<felt252>, [1]: felt252) -> (Felt252Dict<felt252>, Unit);

//! > ==========================================================================

//! > felt252_dict_squash libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(dict: Felt252Dict::<felt252>) -> SquashedFelt252Dict::<felt252> {
    felt252_dict_squash::<felt252>(dict)
}

//! > casm
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 4;
jmp rel 204;
[fp + 2] = [fp + -5], ap++;
ap += 3;
%{
memory[fp + 0] = __segment_index_to_arena_index[
    memory[fp + -3].segment_index
]
%}
[fp + 3] = [[fp + -4] + -3];
[fp + 4] = [[fp + -4] + -2], ap++;
[fp + 5] = [[fp + -4] + -1], ap++;
[fp + 0] = [[fp + -6] + 0];
[fp + 4] = [ap + 0] + 1, ap++;
[ap + -1] = [ap + 0] + [fp + 0], ap++;
[ap + -1] = [[fp + -6] + 1];
[ap + 0] = [fp + 0] * 3, ap++;
[ap + 0] = [fp + 3] + [ap + -1], ap++;
[fp + 5] = [[ap + -1] + 2];
[fp + -3] = [[ap + -1] + 1];
[fp + 3] = [[fp + -4] + 0];
[fp + 4] = [[fp + -4] + 1];
[ap + 0] = [fp + 5] + 1, ap++;
[ap + -1] = [[fp + -4] + 2];
[ap + 0] = [[ap + -2] + 0], ap++;
[fp + -3] = [fp + 1] + [ap + -1];
[ap + 0] = [fp + -6] + 2, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 15;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
[fp + 1] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [ap + 0] * 3, ap++;
[ap + 0] = [ap + -1] * 5920, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 2] + [ap + -2], ap++;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
ap += 1;
%{ memory[fp + 0] = segments.add() %}
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + 0], ap++;
call rel 6;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -3], ap++;
ret;
[fp + -4] = [fp + 0] + [fp + -5], ap++;
ap += 2;
jmp rel 5 if [fp + 0] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[fp + 0] = [ap + 0] * 3, ap++;
%{
dict_access_size = 3
address = memory[fp + -5]
assert memory[fp + 0] % dict_access_size == 0, 'Accesses array size must be divisible by DictAccess.SIZE'
n_accesses = memory[ap + -1]
if '__squash_dict_max_size' in globals():
    assert n_accesses <= __squash_dict_max_size, f'squash_dict() can only be used with n_accesses<={__squash_dict_max_size}. ' f'Got: n_accesses={n_accesses}.'
# A map from key to the list of indices accessing it.
access_indices = {}
for i in range(n_accesses):
    key = memory[address + dict_access_size * i]
    access_indices.setdefault(key, []).append(i)
# Descending list of keys.
keys = sorted(access_indices.keys(), reverse=True)
# Are the keys used bigger than range_check bound.
memory[fp + 2] = 1 if keys[0] >= range_check_builtin.bound else 0
memory[fp + 1] = key = keys.pop()
%}
jmp rel 7 if [fp + 2] != 0, ap++;
[fp + 1] = [[fp + -6] + 0];
[ap + -1] = [fp + -6] + 1;
jmp rel 3;
[ap + -1] = [fp + -6];
[ap + 0] = [fp + -5], ap++;
[fp + -4] = [ap + 0] + 1, ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + 2], ap++;
call rel 5;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
ret;
ap += 5;
%{
current_access_indices = sorted(access_indices[key])[::-1]
current_access_index = current_access_indices.pop()
memory[memory[fp + -9]] = current_access_index
%}
[ap + 2] = [[fp + -9] + 0], ap++;
[ap + 2] = [ap + 1] * 3, ap++;
[ap + 4] = [fp + -8] + [ap + 1], ap++;
[ap + 4] = [[ap + 3] + 2], ap++;
[ap + 4] = [fp + -9] + 1, ap++;
[fp + -6] = [[ap + 1] + 0], ap++;
[fp + -6] = [[fp + -4] + 0], ap++;
[ap + -3] = [[ap + -1] + 1], ap++;
[ap + -4] = [[fp + -4] + 1], ap++;
[ap + -5] = 0;
%{ memory[ap + -4] = 0 if current_access_indices else 1 %}
jmp rel 15 if [ap + -4] != 0;
%{
new_access_index = current_access_indices.pop()
memory[ap + 0] = new_access_index - current_access_index - 1
current_access_index = new_access_index
%}
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 1] = [ap + -6] + [ap + -1], ap++;
[ap + -6] = [[ap + 0] + 1], ap++;
[ap + 0] = [[ap + -1] + 2], ap++;
[fp + -6] = [[ap + -2] + 0], ap++;
[ap + -1] = [ap + -8] + 1;
%{ memory[ap + -4] = 1 if current_access_indices else 0 %}
jmp rel -11 if [ap + -4] != 0;
%{ assert len(current_access_indices) == 0 %}
[fp + -7] = [ap + 0] + [ap + -3], ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + -2] = [ap + 0] + [fp + -9], ap++;
%{ assert memory[ap + -1] == len(access_indices[key]) %}
[ap + -4] = [[fp + -4] + 2];
[fp + -5] = [fp + 6] + [ap + -1];
jmp rel 7 if [fp + 6] != 0;
%{ assert len(keys) == 0 %}
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [fp + -4] + 3, ap++;
ret;
%{ assert len(keys) > 0, 'No keys left but remaining_accesses > 0.'
memory[fp + 5] = key = keys.pop()
 %}
jmp rel 14 if [fp + -3] != 0;
[ap + 0] = [fp + -6] + 1, ap++;
[fp + 5] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -5] + 1];
[fp + 0] = [ap + -5] + 2;
[fp + 1] = [fp + -8];
[fp + 2] = [fp + -7];
[fp + 3] = [fp + 5];
[fp + 4] = [fp + 6];
jmp rel 53;
%{
from starkware.cairo.common.math_utils import assert_integer
assert_integer(memory[fp + -6])
assert_integer(memory[fp + 5])
assert (memory[fp + -6] % PRIME) < (memory[fp + 5] % PRIME), f'a = {memory[fp + -6] % PRIME} is not less than b = {memory[fp + 5] % PRIME}.'
%}
[fp + -6] = [ap + 0] + [fp + 5], ap++;
jmp rel 6 if [ap + -1] != 0, ap++;
[ap + -1] = [fp + -6] + 1;
jmp rel 3;
[ap + -1] = [fp + -6];
%{
import itertools

from starkware.cairo.common.math_utils import assert_integer
assert_integer(memory[ap + -1])
assert_integer(memory[fp + 5])
a = memory[ap + -1] % PRIME
b = memory[fp + 5] % PRIME
assert a <= b, f'a = {a} is not less than or equal to b = {b}.'

# Find an arc less than PRIME / 3, and another less than PRIME / 2.
lengths_and_indices = [(a, 0), (b - a, 1), (PRIME - 1 - b, 2)]
lengths_and_indices.sort()
assert lengths_and_indices[0][0] <= PRIME // 3 and lengths_and_indices[1][0] <= PRIME // 2
excluded = lengths_and_indices[2][1]

memory[memory[fp + -9] + 1], memory[memory[fp + -9] + 0] = (
    divmod(lengths_and_indices[0][0], 3544607988759775765608368578435044694))
memory[memory[fp + -9] + 3], memory[memory[fp + -9] + 2] = (
    divmod(lengths_and_indices[1][0], 5316911983139663648412552867652567041))
%}
[ap + 0] = [[fp + -9] + 0], ap++;
[ap + 0] = [[fp + -9] + 1], ap++;
[ap + 0] = [ap + -1] * 5316911983139663648412552867652567041, ap++;
[ap + 0] = [ap + -3] + [ap + -1], ap++;
[ap + 0] = [[fp + -9] + 2], ap++;
[ap + 0] = [[fp + -9] + 3], ap++;
[ap + 0] = [ap + -1] * 3544607988759775765608368578435044694, ap++;
[ap + 0] = [ap + -3] + [ap + -1], ap++;
[ap + 0] = [ap + -5] + [ap + -1], ap++;
[ap + 0] = [ap + -6] * [ap + -2], ap++;
%{ memory[ap + 0] = 1 if excluded != 0 else 0 %}
jmp rel 12 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -12] * -1, ap++;
[ap + -4] = [ap + -1] + -1;
[ap + -13] = [ap + 0] + [fp + 5], ap++;
[ap + 0] = [fp + 5] + 1, ap++;
[ap + -5] = [ap + -2] * [ap + -1];
jmp rel 15;
%{ memory[ap + 0] = 1 if excluded != 1 else 0 %}
jmp rel 10 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + 5] * -1, ap++;
[ap + 0] = [fp + 5] + -1, ap++;
[ap + -6] = [ap + -15] + [ap + -1];
[ap + -5] = [ap + -15] * [ap + -1];
jmp rel 5;
%{ assert excluded == 2 %}
[ap + -4] = [fp + 5], ap++;
[fp + 5] = [ap + 0] + [ap + -14], ap++;
[ap + -5] = [ap + -15] * [ap + -1];
[fp + 0] = [fp + -9] + 4;
[fp + 1] = [fp + -8];
[fp + 2] = [fp + -7];
[fp + 3] = [fp + 5];
[fp + 4] = [fp + 6];
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = [fp + -3], ap++;
call rel -115;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 8210})

//! > sierra_code
type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type SegmentArena = SegmentArena;
type felt252 = felt252;
type Felt252Dict<felt252> = Felt252Dict<felt252>;
type SquashedFelt252Dict<felt252> = SquashedFelt252Dict<felt252>;

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc felt252_dict_squash<felt252> = felt252_dict_squash<felt252>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<SegmentArena> = store_temp<SegmentArena>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<SquashedFelt252Dict<felt252>> = store_temp<SquashedFelt252Dict<felt252>>;

disable_ap_tracking() -> ();
felt252_dict_squash<felt252>([0], [2], [1], [3]) -> ([4], [5], [6], [7]);
store_temp<RangeCheck>([4]) -> ([8]);
store_temp<SegmentArena>([6]) -> ([9]);
store_temp<GasBuiltin>([5]) -> ([10]);
store_temp<SquashedFelt252Dict<felt252>>([7]) -> ([11]);
return([8], [9], [10], [11]);

test::foo@0([0]: RangeCheck, [1]: SegmentArena, [2]: GasBuiltin, [3]: Felt252Dict<felt252>) -> (RangeCheck, SegmentArena, GasBuiltin, SquashedFelt252Dict<felt252>);
