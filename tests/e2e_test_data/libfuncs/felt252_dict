//! > felt252_dict_new libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo() -> Felt252Dict::<felt252> {
    felt252_dict_new::<felt252>()
}

//! > casm
%{
if '__dict_manager' not in globals():
    from starkware.cairo.common.dict import DictManager
    __dict_manager = DictManager()

if '__segment_index_to_arena_index' not in globals():
    # A map from the relocatable value segment index to the index in the
    # arena.
    __segment_index_to_arena_index = {}

# memory[fp + -3] is the address of the next SegmentArenaBuiltin.
# memory[memory[fp + -3] - 2] is the number of allocated segments.
index = memory[memory[fp + -3] - 2]

segment_start = __dict_manager.new_default_dict(
    segments, 0, temp_segment=index > 0
)

# Update '__segment_index_to_arena_index'.
__segment_index_to_arena_index[segment_start.segment_index] = index

# Update 'SegmentInfo::start'.
# memory[memory[fp + -3] - 3] is the address of the segment arena infos
# segment. index * 3 is added to get the address of the new SegmentInfo.
memory[memory[memory[fp + -3] - 3] + index * 3] = segment_start
%}
[ap + 0] = [[fp + -3] + -3], ap++;
[ap + 0] = [[fp + -3] + -2], ap++;
[ap + 0] = [[fp + -3] + -1], ap++;
[ap + -3] = [[fp + -3] + 0];
[ap + 0] = [ap + -2] + 1, ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + -2] = [[fp + -3] + 2];
[ap + 0] = [ap + -3] * 3, ap++;
[ap + 0] = [ap + -5] + [ap + -1], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1900})

//! > sierra_code
type SegmentArena = SegmentArena [storable: true, drop: false, dup: false, zero_sized: false];
type Felt252Dict<felt252> = Felt252Dict<felt252> [storable: true, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc felt252_dict_new<felt252> = felt252_dict_new<felt252>;
libfunc store_temp<SegmentArena> = store_temp<SegmentArena>;
libfunc store_temp<Felt252Dict<felt252>> = store_temp<Felt252Dict<felt252>>;

felt252_dict_new<felt252>([0]) -> ([1], [2]); // 0
store_temp<SegmentArena>([1]) -> ([3]); // 1
store_temp<Felt252Dict<felt252>>([2]) -> ([4]); // 2
return([3], [4]); // 3

test::foo@0([0]: SegmentArena) -> (SegmentArena, Felt252Dict<felt252>);

//! > ==========================================================================

//! > Test dict insert.

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref dict: Felt252Dict::<felt252>, key: felt252, value: felt252) {
    dict.insert(key, value);
}

//! > casm
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -5])
dict_tracker.current_ptr += 3
memory[memory[fp + -5] + 1] = dict_tracker.data[memory[fp + -4]]
%}
[fp + -4] = [[fp + -5] + 0];
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -5] + 3)
dict_tracker.data[memory[memory[fp + -5] + 3 - 3]] = memory[fp + -3]
%}
[fp + -3] = [[fp + -5] + 2];
[ap + 0] = [fp + -5] + 3, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 5320})

//! > sierra_code
type Felt252Dict<felt252> = Felt252Dict<felt252> [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Felt252DictEntry<felt252> = Felt252DictEntry<felt252> [storable: true, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc felt252_dict_entry_get<felt252> = felt252_dict_entry_get<felt252>;
libfunc drop<felt252> = drop<felt252>;
libfunc felt252_dict_entry_finalize<felt252> = felt252_dict_entry_finalize<felt252>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Felt252Dict<felt252>> = store_temp<Felt252Dict<felt252>>;
libfunc store_temp<Unit> = store_temp<Unit>;

felt252_dict_entry_get<felt252>([0], [1]) -> ([3], [4]); // 0
drop<felt252>([4]) -> (); // 1
felt252_dict_entry_finalize<felt252>([3], [2]) -> ([5]); // 2
struct_construct<Unit>() -> ([6]); // 3
store_temp<Felt252Dict<felt252>>([5]) -> ([7]); // 4
store_temp<Unit>([6]) -> ([8]); // 5
return([7], [8]); // 6

test::foo@0([0]: Felt252Dict<felt252>, [1]: felt252, [2]: felt252) -> (Felt252Dict<felt252>, Unit);

//! > ==========================================================================

//! > Test dict get.

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref dict: Felt252Dict::<felt252>, key: felt252) -> felt252 {
    dict.get(key)
}

//! > casm
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -4])
dict_tracker.current_ptr += 3
memory[memory[fp + -4] + 1] = dict_tracker.data[memory[fp + -3]]
%}
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [[fp + -4] + 1], ap++;
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -4] + 3)
dict_tracker.data[memory[memory[fp + -4] + 3 - 3]] = memory[ap + -1]
%}
[ap + -1] = [[fp + -4] + 2];
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 5520})

//! > sierra_code
type Felt252Dict<felt252> = Felt252Dict<felt252> [storable: true, drop: false, dup: false, zero_sized: false];
type Felt252DictEntry<felt252> = Felt252DictEntry<felt252> [storable: true, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc felt252_dict_entry_get<felt252> = felt252_dict_entry_get<felt252>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc dup<felt252> = dup<felt252>;
libfunc felt252_dict_entry_finalize<felt252> = felt252_dict_entry_finalize<felt252>;
libfunc store_temp<Felt252Dict<felt252>> = store_temp<Felt252Dict<felt252>>;

felt252_dict_entry_get<felt252>([0], [1]) -> ([2], [3]); // 0
store_temp<felt252>([3]) -> ([3]); // 1
dup<felt252>([3]) -> ([3], [5]); // 2
felt252_dict_entry_finalize<felt252>([2], [5]) -> ([4]); // 3
store_temp<Felt252Dict<felt252>>([4]) -> ([6]); // 4
store_temp<felt252>([3]) -> ([7]); // 5
return([6], [7]); // 6

test::foo@0([0]: Felt252Dict<felt252>, [1]: felt252) -> (Felt252Dict<felt252>, felt252);

//! > ==========================================================================

//! > Dict get and insert multiple calls

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(ref dict: Felt252Dict::<felt252>, key: felt252) {
    dict.get(key);
    let a = dict.get(key);
    dict.insert(key, a);
    dict.insert(key, a);
}

//! > casm
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -4])
dict_tracker.current_ptr += 3
memory[memory[fp + -4] + 1] = dict_tracker.data[memory[fp + -3]]
%}
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [[fp + -4] + 1], ap++;
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -4] + 3)
dict_tracker.data[memory[memory[fp + -4] + 3 - 3]] = memory[ap + -1]
%}
[ap + -1] = [[fp + -4] + 2];
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -4] + 3)
dict_tracker.current_ptr += 3
memory[memory[fp + -4] + 3 + 1] = dict_tracker.data[memory[fp + -3]]
%}
[fp + -3] = [[fp + -4] + 3];
[ap + 0] = [[fp + -4] + 4], ap++;
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -4] + 6)
dict_tracker.data[memory[memory[fp + -4] + 6 - 3]] = memory[ap + -1]
%}
[ap + -1] = [[fp + -4] + 5];
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -4] + 6)
dict_tracker.current_ptr += 3
memory[memory[fp + -4] + 6 + 1] = dict_tracker.data[memory[fp + -3]]
%}
[fp + -3] = [[fp + -4] + 6];
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -4] + 9)
dict_tracker.data[memory[memory[fp + -4] + 9 - 3]] = memory[ap + -1]
%}
[ap + -1] = [[fp + -4] + 8];
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -4] + 9)
dict_tracker.current_ptr += 3
memory[memory[fp + -4] + 9 + 1] = dict_tracker.data[memory[fp + -3]]
%}
[fp + -3] = [[fp + -4] + 9];
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -4] + 12)
dict_tracker.data[memory[memory[fp + -4] + 12 - 3]] = memory[ap + -1]
%}
[ap + -1] = [[fp + -4] + 11];
[ap + 0] = [fp + -4] + 12, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 21180})

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Felt252DictEntry<felt252> = Felt252DictEntry<felt252> [storable: true, drop: false, dup: false, zero_sized: false];
type Felt252Dict<felt252> = Felt252Dict<felt252> [storable: true, drop: false, dup: false, zero_sized: false];

libfunc dup<felt252> = dup<felt252>;
libfunc felt252_dict_entry_get<felt252> = felt252_dict_entry_get<felt252>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc felt252_dict_entry_finalize<felt252> = felt252_dict_entry_finalize<felt252>;
libfunc drop<felt252> = drop<felt252>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Felt252Dict<felt252>> = store_temp<Felt252Dict<felt252>>;
libfunc store_temp<Unit> = store_temp<Unit>;

dup<felt252>([1]) -> ([1], [4]); // 0
felt252_dict_entry_get<felt252>([0], [4]) -> ([2], [3]); // 1
store_temp<felt252>([3]) -> ([3]); // 2
felt252_dict_entry_finalize<felt252>([2], [3]) -> ([5]); // 3
dup<felt252>([1]) -> ([1], [8]); // 4
felt252_dict_entry_get<felt252>([5], [8]) -> ([6], [7]); // 5
store_temp<felt252>([7]) -> ([7]); // 6
dup<felt252>([7]) -> ([7], [10]); // 7
felt252_dict_entry_finalize<felt252>([6], [10]) -> ([9]); // 8
dup<felt252>([1]) -> ([1], [13]); // 9
felt252_dict_entry_get<felt252>([9], [13]) -> ([11], [12]); // 10
drop<felt252>([12]) -> (); // 11
dup<felt252>([7]) -> ([7], [15]); // 12
felt252_dict_entry_finalize<felt252>([11], [15]) -> ([14]); // 13
felt252_dict_entry_get<felt252>([14], [1]) -> ([16], [17]); // 14
drop<felt252>([17]) -> (); // 15
felt252_dict_entry_finalize<felt252>([16], [7]) -> ([18]); // 16
struct_construct<Unit>() -> ([19]); // 17
store_temp<Felt252Dict<felt252>>([18]) -> ([20]); // 18
store_temp<Unit>([19]) -> ([21]); // 19
return([20], [21]); // 20

test::foo@0([0]: Felt252Dict<felt252>, [1]: felt252) -> (Felt252Dict<felt252>, Unit);

//! > ==========================================================================

//! > felt252_dict_squash libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(dict: Felt252Dict::<felt252>) -> SquashedFelt252Dict::<felt252> {
    felt252_dict_squash::<felt252>(dict)
}

//! > casm
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 4;
jmp rel 178;
%{
memory[fp + 0] = __segment_index_to_arena_index[
    memory[fp + -3].segment_index
]
%}
[fp + 2] = [[fp + -4] + -3], ap++;
[fp + 3] = [[fp + -4] + -2], ap++;
[fp + 4] = [[fp + -4] + -1], ap++;
[fp + 0] = [[fp + -6] + 0], ap++;
[fp + 3] = [ap + 1] + 1, ap++;
[ap + 0] = [ap + 1] + [fp + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + 0] = [fp + 0] * 3, ap++;
[ap + 0] = [fp + 2] + [ap + -1], ap++;
[fp + 4] = [[ap + -1] + 2];
[fp + -3] = [[ap + -1] + 1];
[fp + 2] = [[fp + -4] + 0];
[fp + 3] = [[fp + -4] + 1];
[ap + 0] = [fp + 4] + 1, ap++;
[ap + -1] = [[fp + -4] + 2];
[ap + 0] = [fp + -6] + 2, ap++;
[ap + 0] = [[ap + -3] + 0], ap++;
[ap + 0] = [fp + -3], ap++;
[fp + -3] = [fp + 1] + [ap + -2];
call rel 15;
[ap + -2] = [ap + 0] + [ap + -1], ap++;
[fp + 1] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [ap + 0] * 3, ap++;
[ap + 0] = [ap + -1] * 4050, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -5] + [ap + -2], ap++;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
[fp + -3] = [fp + 0] + [fp + -4], ap++;
ap += 3;
%{ memory[fp + 3] = segments.add() %}
jmp rel 6 if [fp + 0] != 0;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 3], ap++;
ret;
[fp + 0] = [ap + 0] * 3, ap++;
%{
dict_access_size = 3
address = memory[fp + -4]
assert memory[fp + 0] % dict_access_size == 0, 'Accesses array size must be divisible by DictAccess.SIZE'
n_accesses = memory[ap + -1]
if '__squash_dict_max_size' in globals():
    assert n_accesses <= __squash_dict_max_size, f'squash_dict() can only be used with n_accesses<={__squash_dict_max_size}. ' f'Got: n_accesses={n_accesses}.'
# A map from key to the list of indices accessing it.
access_indices = {}
for i in range(n_accesses):
    key = memory[address + dict_access_size * i]
    access_indices.setdefault(key, []).append(i)
# Descending list of keys.
keys = sorted(access_indices.keys(), reverse=True)
# Are the keys used bigger than range_check bound.
memory[fp + 2] = 1 if keys[0] >= range_check_builtin.bound else 0
memory[fp + 1] = key = keys.pop()
%}
jmp rel 7 if [fp + 2] != 0, ap++;
[fp + 1] = [[fp + -5] + 0];
[ap + -1] = [fp + -5] + 1;
jmp rel 3;
[ap + -1] = [fp + -5];
[ap + 0] = [fp + -4], ap++;
[fp + -3] = [ap + 0] + 1, ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 2], ap++;
call rel 4;
[ap + 0] = [fp + 3], ap++;
ret;
%{
current_access_indices = sorted(access_indices[key])[::-1]
current_access_index = current_access_indices.pop()
memory[memory[fp + -9]] = current_access_index
%}
[ap + 2] = [[fp + -9] + 0], ap++;
[ap + 2] = [ap + 1] * 3, ap++;
[ap + 4] = [fp + -8] + [ap + 1], ap++;
[ap + 4] = [[ap + 3] + 2], ap++;
[ap + 4] = [fp + -9] + 1, ap++;
[fp + -6] = [[ap + 1] + 0], ap++;
[fp + -6] = [[fp + -4] + 0], ap++;
[ap + -3] = [[ap + -1] + 1], ap++;
[ap + -4] = [[fp + -4] + 1], ap++;
[ap + -5] = 0;
%{ memory[ap + -4] = 0 if current_access_indices else 1 %}
jmp rel 15 if [ap + -4] != 0;
%{
new_access_index = current_access_indices.pop()
memory[ap + 0] = new_access_index - current_access_index - 1
current_access_index = new_access_index
%}
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 1] = [ap + -6] + [ap + -1], ap++;
[ap + -6] = [[ap + 0] + 1], ap++;
[ap + 0] = [[ap + -1] + 2], ap++;
[fp + -6] = [[ap + -2] + 0], ap++;
[ap + -1] = [ap + -8] + 1;
%{ memory[ap + -4] = 1 if current_access_indices else 0 %}
jmp rel -11 if [ap + -4] != 0;
[fp + -7] = [ap + 0] + [ap + -3], ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + -2] = [ap + 0] + [fp + -9], ap++;
[ap + -4] = [[fp + -4] + 2];
[fp + -5] = [fp + 1] + [ap + -1];
jmp rel 7 if [fp + 1] != 0;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [fp + -4] + 3, ap++;
ret;
%{ assert len(keys) > 0, 'No keys left but remaining_accesses > 0.'
memory[fp + 0] = key = keys.pop()
 %}
jmp rel 14 if [fp + -3] != 0;
[ap + 0] = [fp + -6] + 1, ap++;
[fp + 0] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -5] + 1];
[ap + 0] = [ap + -5] + 2, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
jmp rel 50;
[fp + -6] = [ap + 0] + [fp + 0], ap++;
jmp rel 4 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
%{
import itertools

from starkware.cairo.common.math_utils import assert_integer
assert_integer(memory[fp + -6])
assert_integer(memory[fp + 0])
a = memory[fp + -6] % PRIME
b = memory[fp + 0] % PRIME
assert a <= b, f'a = {a} is not less than or equal to b = {b}.'

# Find an arc less than PRIME / 3, and another less than PRIME / 2.
lengths_and_indices = [(a, 0), (b - a, 1), (PRIME - 1 - b, 2)]
lengths_and_indices.sort()
assert lengths_and_indices[0][0] <= PRIME // 3 and lengths_and_indices[1][0] <= PRIME // 2
excluded = lengths_and_indices[2][1]

memory[memory[ap + -4] + 1 + 1], memory[memory[ap + -4] + 1 + 0] = (
    divmod(lengths_and_indices[0][0], 3544607988759775765608368578435044694))
memory[memory[ap + -4] + 1 + 3], memory[memory[ap + -4] + 1 + 2] = (
    divmod(lengths_and_indices[1][0], 5316911983139663648412552867652567041))
%}
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [[ap + -5] + 2], ap++;
[ap + 0] = [ap + -1] * 3544607988759775765608368578435044694, ap++;
[ap + 0] = [ap + -3] + [ap + -1], ap++;
[ap + 0] = [[ap + -8] + 3], ap++;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [ap + -1] * 5316911983139663648412552867652567041, ap++;
[ap + 0] = [ap + -3] + [ap + -1], ap++;
[ap + 0] = [ap + -5] + [ap + -1], ap++;
[ap + 0] = [ap + -6] * [ap + -2], ap++;
%{ memory[ap + 0] = 1 if excluded != 0 else 0 %}
jmp rel 12 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] * -1, ap++;
[ap + -4] = [ap + -1] + -1;
[fp + -6] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [fp + 0] + 1, ap++;
[ap + -5] = [ap + -2] * [ap + -1];
jmp rel 15;
%{ memory[ap + 0] = 1 if excluded != 1 else 0 %}
jmp rel 10 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + 0] * -1, ap++;
[ap + 0] = [ap + -1] + -1, ap++;
[ap + -6] = [fp + -6] + [ap + -1];
[ap + -5] = [fp + -6] * [ap + -1];
jmp rel 5;
[ap + -4] = [fp + 0], ap++;
[fp + 0] = [ap + 0] + [fp + -6], ap++;
[ap + -5] = [fp + -6] * [ap + -1];
[ap + 0] = [ap + -18] + 5, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = [fp + -3], ap++;
call rel -105;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 6410})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type SquashedFelt252Dict<felt252> = SquashedFelt252Dict<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Felt252Dict<felt252> = Felt252Dict<felt252> [storable: true, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type SegmentArena = SegmentArena [storable: true, drop: false, dup: false, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc felt252_dict_squash<felt252> = felt252_dict_squash<felt252>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<SegmentArena> = store_temp<SegmentArena>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<SquashedFelt252Dict<felt252>> = store_temp<SquashedFelt252Dict<felt252>>;

disable_ap_tracking() -> (); // 0
felt252_dict_squash<felt252>([0], [2], [1], [3]) -> ([4], [5], [6], [7]); // 1
store_temp<RangeCheck>([4]) -> ([8]); // 2
store_temp<SegmentArena>([6]) -> ([9]); // 3
store_temp<GasBuiltin>([5]) -> ([10]); // 4
store_temp<SquashedFelt252Dict<felt252>>([7]) -> ([11]); // 5
return([8], [9], [10], [11]); // 6

test::foo@0([0]: RangeCheck, [1]: SegmentArena, [2]: GasBuiltin, [3]: Felt252Dict<felt252>) -> (RangeCheck, SegmentArena, GasBuiltin, SquashedFelt252Dict<felt252>);

//! > ==========================================================================

//! > felt252_dict_entry get

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(dict: Felt252Dict<felt252>, key: felt252) -> (dict::Felt252DictEntry<felt252>, felt252) {
    dict::felt252_dict_entry_get(dict, key)
}

//! > casm
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -4])
dict_tracker.current_ptr += 3
memory[memory[fp + -4] + 1] = dict_tracker.data[memory[fp + -3]]
%}
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = [[fp + -4] + 1], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 5320})

//! > sierra_code
type Felt252Dict<felt252> = Felt252Dict<felt252> [storable: true, drop: false, dup: false, zero_sized: false];
type Felt252DictEntry<felt252> = Felt252DictEntry<felt252> [storable: true, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<Felt252DictEntry<felt252>, felt252> = Struct<ut@Tuple, Felt252DictEntry<felt252>, felt252> [storable: true, drop: false, dup: false, zero_sized: false];

libfunc felt252_dict_entry_get<felt252> = felt252_dict_entry_get<felt252>;
libfunc struct_construct<Tuple<Felt252DictEntry<felt252>, felt252>> = struct_construct<Tuple<Felt252DictEntry<felt252>, felt252>>;
libfunc store_temp<Tuple<Felt252DictEntry<felt252>, felt252>> = store_temp<Tuple<Felt252DictEntry<felt252>, felt252>>;

felt252_dict_entry_get<felt252>([0], [1]) -> ([2], [3]); // 0
struct_construct<Tuple<Felt252DictEntry<felt252>, felt252>>([2], [3]) -> ([4]); // 1
store_temp<Tuple<Felt252DictEntry<felt252>, felt252>>([4]) -> ([5]); // 2
return([5]); // 3

test::foo@0([0]: Felt252Dict<felt252>, [1]: felt252) -> (Tuple<Felt252DictEntry<felt252>, felt252>);

//! > ==========================================================================

//! > felt252_dict_entry finalize

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(entry: dict::Felt252DictEntry<felt252>, value: felt252) -> Felt252Dict<felt252> {
    dict::felt252_dict_entry_finalize(entry, value)
}

//! > casm
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -4])
dict_tracker.data[memory[memory[fp + -4] - 3]] = memory[fp + -3]
%}
[fp + -3] = [[fp + -4] + -1];
[ap + 0] = [fp + -4], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 200})

//! > sierra_code
type Felt252DictEntry<felt252> = Felt252DictEntry<felt252> [storable: true, drop: false, dup: false, zero_sized: false];
type Felt252Dict<felt252> = Felt252Dict<felt252> [storable: true, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc felt252_dict_entry_finalize<felt252> = felt252_dict_entry_finalize<felt252>;
libfunc store_temp<Felt252Dict<felt252>> = store_temp<Felt252Dict<felt252>>;

felt252_dict_entry_finalize<felt252>([0], [1]) -> ([2]); // 0
store_temp<Felt252Dict<felt252>>([2]) -> ([3]); // 1
return([3]); // 2

test::foo@0([0]: Felt252DictEntry<felt252>, [1]: felt252) -> (Felt252Dict<felt252>);

//! > ==========================================================================

//! > felt252_dict_entry repeated update

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(dict: Felt252Dict<felt252>, k1: felt252, v1: felt252, k2: felt252, v2: felt252) -> (Felt252Dict<felt252>, felt252, felt252) {
    let (entry, old1) = dict::felt252_dict_entry_get(dict, k1);
    let dict = dict::felt252_dict_entry_finalize(entry, v1);
    let (entry, old2) = dict::felt252_dict_entry_get(dict, k2);
    let dict = dict::felt252_dict_entry_finalize(entry, v2);
    (dict, old1, old2)
}

//! > casm
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -7])
dict_tracker.current_ptr += 3
memory[memory[fp + -7] + 1] = dict_tracker.data[memory[fp + -6]]
%}
[fp + -6] = [[fp + -7] + 0];
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -7] + 3)
dict_tracker.data[memory[memory[fp + -7] + 3 - 3]] = memory[fp + -5]
%}
[fp + -5] = [[fp + -7] + 2];
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -7] + 3)
dict_tracker.current_ptr += 3
memory[memory[fp + -7] + 3 + 1] = dict_tracker.data[memory[fp + -4]]
%}
[fp + -4] = [[fp + -7] + 3];
%{
dict_tracker = __dict_manager.get_tracker(memory[fp + -7] + 6)
dict_tracker.data[memory[memory[fp + -7] + 6 - 3]] = memory[fp + -3]
%}
[fp + -3] = [[fp + -7] + 5];
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [[fp + -7] + 1], ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 10740})

//! > sierra_code
type Felt252Dict<felt252> = Felt252Dict<felt252> [storable: true, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<Felt252Dict<felt252>, felt252, felt252> = Struct<ut@Tuple, Felt252Dict<felt252>, felt252, felt252> [storable: true, drop: false, dup: false, zero_sized: false];
type Felt252DictEntry<felt252> = Felt252DictEntry<felt252> [storable: true, drop: false, dup: false, zero_sized: false];

libfunc felt252_dict_entry_get<felt252> = felt252_dict_entry_get<felt252>;
libfunc felt252_dict_entry_finalize<felt252> = felt252_dict_entry_finalize<felt252>;
libfunc struct_construct<Tuple<Felt252Dict<felt252>, felt252, felt252>> = struct_construct<Tuple<Felt252Dict<felt252>, felt252, felt252>>;
libfunc store_temp<Tuple<Felt252Dict<felt252>, felt252, felt252>> = store_temp<Tuple<Felt252Dict<felt252>, felt252, felt252>>;

felt252_dict_entry_get<felt252>([0], [1]) -> ([5], [6]); // 0
felt252_dict_entry_finalize<felt252>([5], [2]) -> ([7]); // 1
felt252_dict_entry_get<felt252>([7], [3]) -> ([8], [9]); // 2
felt252_dict_entry_finalize<felt252>([8], [4]) -> ([10]); // 3
struct_construct<Tuple<Felt252Dict<felt252>, felt252, felt252>>([10], [6], [9]) -> ([11]); // 4
store_temp<Tuple<Felt252Dict<felt252>, felt252, felt252>>([11]) -> ([12]); // 5
return([12]); // 6

test::foo@0([0]: Felt252Dict<felt252>, [1]: felt252, [2]: felt252, [3]: felt252, [4]: felt252) -> (Tuple<Felt252Dict<felt252>, felt252, felt252>);
