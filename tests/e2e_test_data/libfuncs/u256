//! > u256_safe_divmod libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u256, b: NonZero::<u256>) -> (u256, u256) {
    integer::u256_safe_div_rem(a, b)
}

//! > casm
%{
dividend = memory[fp + -6] + memory[fp + -5] * 2**128
divisor = memory[fp + -4] + memory[fp + -3] * 2**128
quotient, remainder = divmod(dividend, divisor)
memory[ap + 0] = quotient & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 1] = quotient >> 128
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
%}
[ap + 0] = [[fp + -7] + 0], ap++;
[ap + 0] = [[fp + -7] + 1], ap++;
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + 0] = [[fp + -7] + 3], ap++;
[fp + -3] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0, ap++;
[fp + -4] = [ap + -1] + [ap + -4], ap++;
[ap + -2] = [ap + -1] + 1;
[ap + -1] = [[fp + -7] + 4];
jmp rel 5;
ap += 1;
[ap + -3] = [[fp + -7] + 4];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -7] * memory[fp + -4], 2**128) %}
[ap + 2] = [ap + 0] + [ap + -5], ap++;
[ap + 1] = [ap + 2] + [fp + -6], ap++;
[ap + 1] = [ap + 2] * 340282366920938463463374607431768211456, ap++;
[ap + 1] = [ap + 1] * [ap + 1], ap++;
jmp rel 12 if [ap + -10] != 0, ap++;
%{ memory[ap + 2] = memory[ap + -12] < memory[fp + -3] %}
jmp rel 6 if [ap + 2] != 0, ap++;
[ap + -1] = [fp + -3], ap++;
[ap + -1] = [ap + -14], ap++;
jmp rel 16;
[ap + -1] = [ap + -13], ap++;
[ap + -1] = [fp + -3], ap++;
jmp rel 12;
[fp + -3] = 0, ap++;
%{ memory[ap + 1] = memory[ap + -12] < memory[fp + -4] %}
jmp rel 6 if [ap + 1] != 0, ap++;
[ap + -2] = [fp + -4], ap++;
[ap + -2] = [ap + -14];
jmp rel 4;
[ap + -2] = [ap + -13], ap++;
[ap + -2] = [fp + -4];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -7] + 5];
[ap + 0] = [ap + -4] * [ap + -3], ap++;
[ap + 0] = [ap + -6] + [ap + -9], ap++;
[ap + 0] = [ap + -1] + [ap + -15], ap++;
[fp + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
call rel 8;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -43], ap++;
ret;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -6], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 0], ap++;
[ap + -2] = [[fp + -7] + 1], ap++;
[ap + -2] = [[fp + -7] + 2];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -6] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [fp + -5], ap++;
[ap + 0] = [ap + -4] * [fp + -5], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 3], ap++;
[ap + -1] = [[fp + -7] + 4], ap++;
[ap + -3] = [[fp + -7] + 5];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[fp + -3]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -7] + 6], ap++;
[ap + -3] = [[fp + -7] + 7], ap++;
[fp + -3] = [[fp + -7] + 8];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [fp + -3];
[fp + -4] = [ap + -9] + [ap + -4];
[ap + 0] = [fp + -7] + 9, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 7250})
core::integer::U128MulGuaranteeDestruct::destruct: OrderedHashMap({Const: 3030})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<core::integer::u256, core::integer::u256> = Struct<ut@Tuple, core::integer::u256, core::integer::u256> [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type U128MulGuarantee = U128MulGuarantee [storable: true, drop: false, dup: false, zero_sized: false];
type NonZero<core::integer::u256> = NonZero<core::integer::u256> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u256_safe_divmod = u256_safe_divmod;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<U128MulGuarantee> = store_temp<U128MulGuarantee>;
libfunc function_call<user@core::integer::U128MulGuaranteeDestruct::destruct> = function_call<user@core::integer::U128MulGuaranteeDestruct::destruct>;
libfunc drop<Unit> = drop<Unit>;
libfunc struct_construct<Tuple<core::integer::u256, core::integer::u256>> = struct_construct<Tuple<core::integer::u256, core::integer::u256>>;
libfunc store_temp<Tuple<core::integer::u256, core::integer::u256>> = store_temp<Tuple<core::integer::u256, core::integer::u256>>;
libfunc u128_mul_guarantee_verify = u128_mul_guarantee_verify;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;

u256_safe_divmod([0], [1], [2]) -> ([3], [4], [5], [6]); // 0
store_temp<RangeCheck>([3]) -> ([9]); // 1
store_temp<U128MulGuarantee>([6]) -> ([10]); // 2
function_call<user@core::integer::U128MulGuaranteeDestruct::destruct>([9], [10]) -> ([7], [8]); // 3
drop<Unit>([8]) -> (); // 4
struct_construct<Tuple<core::integer::u256, core::integer::u256>>([4], [5]) -> ([11]); // 5
store_temp<RangeCheck>([7]) -> ([12]); // 6
store_temp<Tuple<core::integer::u256, core::integer::u256>>([11]) -> ([13]); // 7
return([12], [13]); // 8
u128_mul_guarantee_verify([0], [1]) -> ([2]); // 9
struct_construct<Unit>() -> ([3]); // 10
store_temp<RangeCheck>([2]) -> ([4]); // 11
store_temp<Unit>([3]) -> ([5]); // 12
return([4], [5]); // 13

test::foo@0([0]: RangeCheck, [1]: core::integer::u256, [2]: NonZero<core::integer::u256>) -> (RangeCheck, Tuple<core::integer::u256, core::integer::u256>);
core::integer::U128MulGuaranteeDestruct::destruct@9([0]: RangeCheck, [1]: U128MulGuarantee) -> (RangeCheck, Unit);

//! > ==========================================================================

//! > u256_is_zero libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use zeroable::IsZeroResult;
fn foo(a: u256) -> u256 {
    match integer::u256_is_zero(a) {
        IsZeroResult::Zero => u256{low: 0, high: 0},
        IsZeroResult::NonZero(x) => x.into(),
    }
}

//! > casm
jmp rel 10 if [fp + -4] != 0;
jmp rel 8 if [fp + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 500})

//! > sierra_code
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<core::integer::u256> = NonZero<core::integer::u256> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u256_is_zero = u256_is_zero;
libfunc branch_align = branch_align;
libfunc u128_const<0> = u128_const<0>;
libfunc struct_construct<core::integer::u256> = struct_construct<core::integer::u256>;
libfunc store_temp<core::integer::u256> = store_temp<core::integer::u256>;
libfunc jump = jump;
libfunc unwrap_non_zero<core::integer::u256> = unwrap_non_zero<core::integer::u256>;
libfunc rename<core::integer::u256> = rename<core::integer::u256>;

u256_is_zero([0]) { fallthrough() 7([1]) }; // 0
branch_align() -> (); // 1
u128_const<0>() -> ([2]); // 2
u128_const<0>() -> ([3]); // 3
struct_construct<core::integer::u256>([2], [3]) -> ([4]); // 4
store_temp<core::integer::u256>([4]) -> ([5]); // 5
jump() { 10() }; // 6
branch_align() -> (); // 7
unwrap_non_zero<core::integer::u256>([1]) -> ([6]); // 8
store_temp<core::integer::u256>([6]) -> ([5]); // 9
rename<core::integer::u256>([5]) -> ([7]); // 10
return([7]); // 11

test::foo@0([0]: core::integer::u256) -> (core::integer::u256);

//! > ==========================================================================

//! > u256_sqrt libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u256) -> u128 {
    integer::u256_sqrt(a)
}

//! > casm
%{
import math;
value = memory[fp + -4] + memory[fp + -3] * 2**128
root = math.isqrt(value)
remainder = value - root ** 2
memory[ap + 0] = root & 0xFFFFFFFFFFFFFFFF
memory[ap + 1] = root >> 64
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
memory[ap + 4] = root * 2 - remainder >= 2**128
%}
[ap + 0] = [[fp + -5] + 0], ap++;
[ap + 0] = [[fp + -5] + 1], ap++;
[ap + 3] = [ap + -2] + [ap + -1], ap++;
[ap + 3] = [ap + 2] + 340282366920938463426481119284349108224, ap++;
[ap + 2] = [[fp + -5] + 2], ap++;
[ap + -3] = [[fp + -5] + 3], ap++;
[ap + -3] = [ap + -3] * [ap + -3], ap++;
[ap + 0] = [ap + -7] * [ap + -7], ap++;
[ap + 0] = [ap + -6] + [ap + -1], ap++;
[ap + -1] = [ap + 0] + [fp + -4], ap++;
[ap + -1] = [ap + 0] * 18446744073709551616, ap++;
[ap + 0] = [ap + -1] + 170141183460469231731687303715884105728, ap++;
[ap + -1] = [[fp + -5] + 4];
[ap + 0] = [ap + -12] * [ap + -11], ap++;
[ap + 0] = [ap + -3] + [ap + -1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + -1] = [ap + 0] * 18446744073709551616, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + 0] = [ap + -1] + [ap + -13], ap++;
[ap + 0] = [ap + -16] * [ap + -16], ap++;
[fp + -3] = [ap + -2] + [ap + -1];
[ap + 0] = [ap + -17] * 18446744073709551616, ap++;
[ap + 0] = [ap + -19] + [ap + -1], ap++;
[ap + 0] = [ap + -17] * 340282366920938463463374607431768211456, ap++;
[ap + 0] = [ap + -19] + [ap + -1], ap++;
[ap + 0] = [ap + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 5 if [ap + -20] != 0, ap++;
[ap + -2] = [[fp + -5] + 6];
jmp rel 5;
[ap + -2] = [ap + -1] + 340282366920938463463374607431768211456;
[ap + -1] = [[fp + -5] + 6];
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -7], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 3690})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u256_sqrt = u256_sqrt;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<u128> = store_temp<u128>;

u256_sqrt([0], [1]) -> ([2], [3]); // 0
store_temp<RangeCheck>([2]) -> ([4]); // 1
store_temp<u128>([3]) -> ([5]); // 2
return([4], [5]); // 3

test::foo@0([0]: RangeCheck, [1]: core::integer::u256) -> (RangeCheck, u128);
