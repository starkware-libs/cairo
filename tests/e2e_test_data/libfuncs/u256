//! > u256_safe_divmod libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u256, b: NonZero::<u256>) -> (u256, u256) {
    integer::u256_safe_div_rem(a, b)
}

//! > casm
%{
dividend = memory[fp + -6] + memory[fp + -5] * 2**128
divisor = memory[fp + -4] + memory[fp + -3] * 2**128
quotient, remainder = divmod(dividend, divisor)
memory[ap + 0] = quotient & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 1] = quotient >> 128
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
%}
[ap + 0] = [[fp + -7] + 0], ap++;
[ap + 0] = [[fp + -7] + 1], ap++;
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + 0] = [[fp + -7] + 3], ap++;
[fp + -3] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0, ap++;
[fp + -4] = [ap + -1] + [ap + -4], ap++;
[ap + -2] = [ap + -1] + 1;
[ap + -1] = [[fp + -7] + 4];
jmp rel 5;
ap += 1;
[ap + -3] = [[fp + -7] + 4];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -7] * memory[fp + -4], 2**128) %}
[ap + 2] = [ap + 0] + [ap + -5], ap++;
[ap + 1] = [ap + 2] + [fp + -6], ap++;
[ap + 1] = [ap + 2] * 340282366920938463463374607431768211456, ap++;
[ap + 1] = [ap + 1] * [ap + 1], ap++;
jmp rel 12 if [ap + -10] != 0, ap++;
%{ memory[ap + 2] = memory[ap + -12] < memory[fp + -3] %}
jmp rel 6 if [ap + 2] != 0, ap++;
[ap + -1] = [fp + -3], ap++;
[ap + -1] = [ap + -14], ap++;
jmp rel 16;
[ap + -1] = [ap + -13], ap++;
[ap + -1] = [fp + -3], ap++;
jmp rel 12;
[fp + -3] = 0, ap++;
%{ memory[ap + 1] = memory[ap + -12] < memory[fp + -4] %}
jmp rel 6 if [ap + 1] != 0, ap++;
[ap + -2] = [fp + -4], ap++;
[ap + -2] = [ap + -14];
jmp rel 4;
[ap + -2] = [ap + -13], ap++;
[ap + -2] = [fp + -4];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -7] + 5];
[ap + 0] = [ap + -4] * [ap + -3], ap++;
[ap + 0] = [ap + -6] + [ap + -9], ap++;
[ap + 0] = [ap + -1] + [ap + -15], ap++;
[fp + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
call rel 8;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -43], ap++;
ret;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -6], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 0], ap++;
[ap + -2] = [[fp + -7] + 1], ap++;
[ap + -2] = [[fp + -7] + 2];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -6] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [fp + -5], ap++;
[ap + 0] = [ap + -4] * [fp + -5], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 3], ap++;
[ap + -1] = [[fp + -7] + 4], ap++;
[ap + -3] = [[fp + -7] + 5];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[fp + -3]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -7] + 6], ap++;
[ap + -3] = [[fp + -7] + 7], ap++;
[fp + -3] = [[fp + -7] + 8];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [fp + -3];
[fp + -4] = [ap + -9] + [ap + -4];
[ap + 0] = [fp + -7] + 9, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 7250})
core::integer::U128MulGuaranteeDestruct::destruct: OrderedHashMap({Const: 3030})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<core::integer::u256, core::integer::u256> = Struct<ut@Tuple, core::integer::u256, core::integer::u256> [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type U128MulGuarantee = U128MulGuarantee [storable: true, drop: false, dup: false, zero_sized: false];
type NonZero<core::integer::u256> = NonZero<core::integer::u256> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u256_safe_divmod = u256_safe_divmod;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<U128MulGuarantee> = store_temp<U128MulGuarantee>;
libfunc function_call<user@core::integer::U128MulGuaranteeDestruct::destruct> = function_call<user@core::integer::U128MulGuaranteeDestruct::destruct>;
libfunc drop<Unit> = drop<Unit>;
libfunc struct_construct<Tuple<core::integer::u256, core::integer::u256>> = struct_construct<Tuple<core::integer::u256, core::integer::u256>>;
libfunc store_temp<Tuple<core::integer::u256, core::integer::u256>> = store_temp<Tuple<core::integer::u256, core::integer::u256>>;
libfunc u128_mul_guarantee_verify = u128_mul_guarantee_verify;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;

u256_safe_divmod([0], [1], [2]) -> ([3], [4], [5], [6]); // 0
store_temp<RangeCheck>([3]) -> ([3]); // 1
store_temp<U128MulGuarantee>([6]) -> ([6]); // 2
function_call<user@core::integer::U128MulGuaranteeDestruct::destruct>([3], [6]) -> ([7], [8]); // 3
drop<Unit>([8]) -> (); // 4
struct_construct<Tuple<core::integer::u256, core::integer::u256>>([4], [5]) -> ([9]); // 5
store_temp<RangeCheck>([7]) -> ([7]); // 6
store_temp<Tuple<core::integer::u256, core::integer::u256>>([9]) -> ([9]); // 7
return([7], [9]); // 8
u128_mul_guarantee_verify([0], [1]) -> ([2]); // 9
struct_construct<Unit>() -> ([3]); // 10
store_temp<RangeCheck>([2]) -> ([2]); // 11
store_temp<Unit>([3]) -> ([3]); // 12
return([2], [3]); // 13

test::foo@0([0]: RangeCheck, [1]: core::integer::u256, [2]: NonZero<core::integer::u256>) -> (RangeCheck, Tuple<core::integer::u256, core::integer::u256>);
core::integer::U128MulGuaranteeDestruct::destruct@9([0]: RangeCheck, [1]: U128MulGuarantee) -> (RangeCheck, Unit);

//! > ==========================================================================

//! > u256_is_zero libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
use zeroable::IsZeroResult;
fn foo(a: u256) -> u256 {
    match integer::u256_is_zero(a) {
        IsZeroResult::Zero => u256{low: 0, high: 0},
        IsZeroResult::NonZero(x) => x.into(),
    }
}

//! > casm
jmp rel 10 if [fp + -4] != 0;
jmp rel 8 if [fp + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 500})

//! > sierra_code
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<core::integer::u256> = NonZero<core::integer::u256> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u256_is_zero = u256_is_zero;
libfunc branch_align = branch_align;
libfunc u128_const<0> = u128_const<0>;
libfunc struct_construct<core::integer::u256> = struct_construct<core::integer::u256>;
libfunc store_temp<core::integer::u256> = store_temp<core::integer::u256>;
libfunc jump = jump;
libfunc unwrap_non_zero<core::integer::u256> = unwrap_non_zero<core::integer::u256>;

u256_is_zero([0]) { fallthrough() 7([1]) }; // 0
branch_align() -> (); // 1
u128_const<0>() -> ([2]); // 2
u128_const<0>() -> ([3]); // 3
struct_construct<core::integer::u256>([2], [3]) -> ([4]); // 4
store_temp<core::integer::u256>([4]) -> ([5]); // 5
jump() { 10() }; // 6
branch_align() -> (); // 7
unwrap_non_zero<core::integer::u256>([1]) -> ([6]); // 8
store_temp<core::integer::u256>([6]) -> ([5]); // 9
return([5]); // 10

test::foo@0([0]: core::integer::u256) -> (core::integer::u256);

//! > ==========================================================================

//! > u256_sqrt libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: u256) -> u128 {
    integer::u256_sqrt(a)
}

//! > casm
%{
import math;
value = memory[fp + -4] + memory[fp + -3] * 2**128
root = math.isqrt(value)
remainder = value - root ** 2
memory[ap + 0] = root & 0xFFFFFFFFFFFFFFFF
memory[ap + 1] = root >> 64
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
memory[ap + 4] = root * 2 - remainder >= 2**128
%}
[ap + 0] = [[fp + -5] + 0], ap++;
[ap + 0] = [[fp + -5] + 1], ap++;
[ap + 3] = [ap + -2] + [ap + -1], ap++;
[ap + 3] = [ap + 2] + 340282366920938463426481119284349108224, ap++;
[ap + 2] = [[fp + -5] + 2], ap++;
[ap + -3] = [[fp + -5] + 3], ap++;
[ap + -3] = [ap + -3] * [ap + -3], ap++;
[ap + 0] = [ap + -7] * [ap + -7], ap++;
[ap + 0] = [ap + -6] + [ap + -1], ap++;
[ap + -1] = [ap + 0] + [fp + -4], ap++;
[ap + -1] = [ap + 0] * 18446744073709551616, ap++;
[ap + 0] = [ap + -1] + 170141183460469231731687303715884105728, ap++;
[ap + -1] = [[fp + -5] + 4];
[ap + 0] = [ap + -12] * [ap + -11], ap++;
[ap + 0] = [ap + -3] + [ap + -1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + -1] = [ap + 0] * 18446744073709551616, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + 0] = [ap + -1] + [ap + -13], ap++;
[ap + 0] = [ap + -16] * [ap + -16], ap++;
[fp + -3] = [ap + -2] + [ap + -1];
[ap + 0] = [ap + -17] * 18446744073709551616, ap++;
[ap + 0] = [ap + -19] + [ap + -1], ap++;
[ap + 0] = [ap + -17] * 340282366920938463463374607431768211456, ap++;
[ap + 0] = [ap + -19] + [ap + -1], ap++;
[ap + 0] = [ap + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 5 if [ap + -20] != 0, ap++;
[ap + -2] = [[fp + -5] + 6];
jmp rel 5;
[ap + -2] = [ap + -1] + 340282366920938463463374607431768211456;
[ap + -1] = [[fp + -5] + 6];
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -7], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 3690})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u256_sqrt = u256_sqrt;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<u128> = store_temp<u128>;

u256_sqrt([0], [1]) -> ([2], [3]); // 0
store_temp<RangeCheck>([2]) -> ([2]); // 1
store_temp<u128>([3]) -> ([3]); // 2
return([2], [3]); // 3

test::foo@0([0]: RangeCheck, [1]: core::integer::u256) -> (RangeCheck, u128);

//! > ==========================================================================

//! > u256_guarantee_inv_mod_n libfunc

//! > test_comments

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(b: u256, n: NonZero<u256>) -> Option<NonZero<u256>> {
    match math::u256_guarantee_inv_mod_n(b, n) {
        Result::Ok((r, _, _, _, _, _, _, _, _)) => Option::Some(r),
        Result::Err(_) => Option::None(()),
    }
}

//! > casm
%{
from starkware.python.math_utils import igcdex

b = memory[fp + -6] + (memory[fp + -5] << 128)
n = memory[fp + -4] + (memory[fp + -3] << 128)

(_, r, g) = igcdex(n, b)
if g != 1:
    if g % 2 == 0:
        g = 2
    s = b // g
    t = n // g
    memory[ap + 0] = g & 0xffffffffffffffffffffffffffffffff
    memory[ap + 1] = g >> 128
    memory[ap + 2] = s & 0xffffffffffffffffffffffffffffffff
    memory[ap + 3] = s >> 128
    memory[ap + 4] = t & 0xffffffffffffffffffffffffffffffff
    memory[ap + 5] = t >> 128
else:
    r %= n
    k = (r * b - 1) // n
    memory[ap + 0] = 0
    memory[ap + 2] = r & 0xffffffffffffffffffffffffffffffff
    memory[ap + 3] = r >> 128
    memory[ap + 4] = k & 0xffffffffffffffffffffffffffffffff
    memory[ap + 5] = k >> 128
%}
jmp rel 55 if [ap + 0] != 0, ap++;
[ap + 1] = [[fp + -7] + 0], ap++;
[ap + 1] = [[fp + -7] + 1], ap++;
[ap + 1] = [[fp + -7] + 2], ap++;
[ap + 1] = [[fp + -7] + 3], ap++;
[fp + -3] = [ap + 1] + [ap + -2], ap++;
ap += 18;
jmp rel 8 if [ap + -18] != 0;
[fp + -4] = [ap + -17] + [ap + -22];
[ap + -17] = [ap + -16] + 1;
[ap + -16] = [[fp + -7] + 4];
jmp rel 3;
[ap + -18] = [[fp + -7] + 4];
%{ (memory[ap + -14], memory[ap + -15]) = divmod(memory[ap + -22] * memory[fp + -6], 2**128) %}
%{ (memory[ap + -12], memory[ap + -13]) = divmod(memory[ap + -22] * memory[fp + -5], 2**128) %}
%{ (memory[ap + -10], memory[ap + -11]) = divmod(memory[ap + -21] * memory[fp + -6], 2**128) %}
%{ (memory[ap + -8], memory[ap + -9]) = divmod(memory[ap + -21] * memory[fp + -5], 2**128) %}
%{ (memory[ap + -6], memory[ap + -7]) = divmod(memory[fp + -4] * memory[ap + -20], 2**128) %}
%{ (memory[ap + -4], memory[ap + -5]) = divmod(memory[fp + -4] * memory[ap + -19], 2**128) %}
%{ (memory[ap + -2], memory[ap + -3]) = divmod(memory[fp + -3] * memory[ap + -20], 2**128) %}
%{ (memory[ap + 0], memory[ap + -1]) = divmod(memory[fp + -3] * memory[ap + -19], 2**128) %}
[ap + 1] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + 1] + [ap + -16], ap++;
[ap + 0] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + 0] = [ap + 0] * [ap + 0], ap++;
[ap + 0] = [ap + -10] + [ap + -1], ap++;
[ap + 0] = [ap + -1] + [ap + -10], ap++;
[ap + 0] = [ap + -1] + [ap + -9], ap++;
[ap + -1] = [ap + 0] + [ap + -21], ap++;
[ap + -1] = [ap + 0] + [ap + -21], ap++;
[ap + -1] = [ap + 0] + [ap + -20], ap++;
[ap + -1] = [ap + 0] * 340282366920938463463374607431768211456, ap++;
[ap + -1] = [ap + 0] + -32768, ap++;
[ap + -1] = [[fp + -7] + 5];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -7] + 6];
[ap + 0] = [ap + -17] + [ap + -3], ap++;
[ap + 0] = [ap + -1] + [ap + -16], ap++;
[ap + 0] = [ap + -1] + [ap + -16], ap++;
[ap + -1] = [ap + 0] + [ap + -26], ap++;
[ap + -1] = [ap + 0] + [ap + -29], ap++;
[ap + -1] = [ap + 0] + [ap + -27], ap++;
[ap + -1] = [ap + 0] * 340282366920938463463374607431768211456, ap++;
[ap + -1] = [ap + 0] + -32768, ap++;
[ap + -1] = [[fp + -7] + 7];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -7] + 8];
[ap + -30] = [ap + -22] + [ap + -3];
jmp rel 47;
[ap + -1] = [[fp + -7] + 0], ap++;
[ap + -1] = [[fp + -7] + 1], ap++;
[ap + -1] = [[fp + -7] + 2], ap++;
[ap + -1] = [[fp + -7] + 3], ap++;
[ap + -1] = [[fp + -7] + 4], ap++;
[ap + -1] = [[fp + -7] + 5];
jmp rel 8 if [ap + -5] != 0, ap++;
[ap + -7] = [ap + -1] + 1;
jmp rel 4 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
%{ (memory[ap + 0], memory[fp + -6]) = divmod(memory[ap + -7] * memory[ap + -5], 2**128) %}
%{ (memory[ap + 1], memory[fp + -4]) = divmod(memory[ap + -7] * memory[ap + -3], 2**128) %}
jmp rel 12 if [ap + -6] != 0, ap++;
[ap + 1] = [ap + -5] * [ap + -8], ap++;
[ap + 1] = [ap + -4] * [ap + -9], ap++;
%{ memory[ap + 2] = memory[ap + -10] < 18446744073709551616 %}
jmp rel 5 if [ap + 2] != 0, ap++;
[ap + 0] = [ap + -8] + [ap + -6], ap++;
jmp rel 17, ap++;
[ap + 0] = [ap + -11], ap++;
jmp rel 14, ap++;
[ap + 1] = [ap + -6] * [ap + -7], ap++;
[ap + 1] = [ap + -5] * [ap + -8], ap++;
[ap + -7] = 0, ap++;
[ap + -6] = 0, ap++;
%{ memory[ap + 0] = memory[ap + -11] < 18446744073709551616 %}
jmp rel 5 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + -11] + [ap + -9];
jmp rel 3;
[ap + -2] = [ap + -12];
[ap + 0] = [ap + -2] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -7] + 6];
[fp + -5] = [ap + -5] + [ap + -7];
[fp + -3] = [ap + -4] + [ap + -6];
jmp rel 66;
[ap + 0] = [fp + -7] + 9, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -27], ap++;
call rel 83;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -52], ap++;
call rel 76;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -89], ap++;
[ap + 0] = [ap + -75], ap++;
[ap + 0] = [ap + -77], ap++;
call rel 69;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -113], ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -102], ap++;
call rel 62;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -136], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -125], ap++;
[ap + 0] = [ap + -127], ap++;
call rel 55;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -159], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -150], ap++;
[ap + 0] = [ap + -152], ap++;
call rel 48;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -183], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -175], ap++;
[ap + 0] = [ap + -177], ap++;
call rel 41;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -206], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -200], ap++;
[ap + 0] = [ap + -202], ap++;
call rel 34;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -230], ap++;
[ap + 0] = [ap + -230], ap++;
jmp rel 26;
ap += 170;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -185], ap++;
[ap + 0] = [ap + -182], ap++;
[ap + 0] = [ap + -179], ap++;
[ap + 0] = [fp + -4], ap++;
call rel 17;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -208], ap++;
[ap + 0] = [ap + -207], ap++;
[ap + 0] = [ap + -203], ap++;
[ap + 0] = [fp + -6], ap++;
call rel 10;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -6], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 0], ap++;
[ap + -2] = [[fp + -7] + 1], ap++;
[ap + -2] = [[fp + -7] + 2];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -6] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [fp + -5], ap++;
[ap + 0] = [ap + -4] * [fp + -5], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 3], ap++;
[ap + -1] = [[fp + -7] + 4], ap++;
[ap + -3] = [[fp + -7] + 5];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[fp + -3]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -7] + 6], ap++;
[ap + -3] = [[fp + -7] + 7], ap++;
[fp + -3] = [[fp + -7] + 8];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [fp + -3];
[fp + -4] = [ap + -9] + [ap + -4];
[ap + 0] = [fp + -7] + 9, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 34970})
core::integer::U128MulGuaranteeDestruct::destruct: OrderedHashMap({Const: 3030})

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<core::integer::u256> = NonZero<core::integer::u256> [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::option::Option::<core::zeroable::NonZero::<core::integer::u256>> = Enum<ut@core::option::Option::<core::zeroable::NonZero::<core::integer::u256>>, NonZero<core::integer::u256>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type U128MulGuarantee = U128MulGuarantee [storable: true, drop: false, dup: false, zero_sized: false];

libfunc u256_guarantee_inv_mod_n = u256_guarantee_inv_mod_n;
libfunc branch_align = branch_align;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<U128MulGuarantee> = store_temp<U128MulGuarantee>;
libfunc function_call<user@core::integer::U128MulGuaranteeDestruct::destruct> = function_call<user@core::integer::U128MulGuaranteeDestruct::destruct>;
libfunc drop<Unit> = drop<Unit>;
libfunc enum_init<core::option::Option::<core::zeroable::NonZero::<core::integer::u256>>, 0> = enum_init<core::option::Option::<core::zeroable::NonZero::<core::integer::u256>>, 0>;
libfunc store_temp<core::option::Option::<core::zeroable::NonZero::<core::integer::u256>>> = store_temp<core::option::Option::<core::zeroable::NonZero::<core::integer::u256>>>;
libfunc jump = jump;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::zeroable::NonZero::<core::integer::u256>>, 1> = enum_init<core::option::Option::<core::zeroable::NonZero::<core::integer::u256>>, 1>;
libfunc u128_mul_guarantee_verify = u128_mul_guarantee_verify;
libfunc store_temp<Unit> = store_temp<Unit>;

u256_guarantee_inv_mod_n([0], [1], [2]) { fallthrough([3], [4], [5], [6], [7], [8], [9], [10], [11], [12]) 38([13], [14], [15]) }; // 0
branch_align() -> (); // 1
store_temp<RangeCheck>([3]) -> ([3]); // 2
store_temp<U128MulGuarantee>([12]) -> ([12]); // 3
function_call<user@core::integer::U128MulGuaranteeDestruct::destruct>([3], [12]) -> ([16], [17]); // 4
drop<Unit>([17]) -> (); // 5
store_temp<RangeCheck>([16]) -> ([16]); // 6
store_temp<U128MulGuarantee>([11]) -> ([11]); // 7
function_call<user@core::integer::U128MulGuaranteeDestruct::destruct>([16], [11]) -> ([18], [19]); // 8
drop<Unit>([19]) -> (); // 9
store_temp<RangeCheck>([18]) -> ([18]); // 10
store_temp<U128MulGuarantee>([10]) -> ([10]); // 11
function_call<user@core::integer::U128MulGuaranteeDestruct::destruct>([18], [10]) -> ([20], [21]); // 12
drop<Unit>([21]) -> (); // 13
store_temp<RangeCheck>([20]) -> ([20]); // 14
store_temp<U128MulGuarantee>([9]) -> ([9]); // 15
function_call<user@core::integer::U128MulGuaranteeDestruct::destruct>([20], [9]) -> ([22], [23]); // 16
drop<Unit>([23]) -> (); // 17
store_temp<RangeCheck>([22]) -> ([22]); // 18
store_temp<U128MulGuarantee>([8]) -> ([8]); // 19
function_call<user@core::integer::U128MulGuaranteeDestruct::destruct>([22], [8]) -> ([24], [25]); // 20
drop<Unit>([25]) -> (); // 21
store_temp<RangeCheck>([24]) -> ([24]); // 22
store_temp<U128MulGuarantee>([7]) -> ([7]); // 23
function_call<user@core::integer::U128MulGuaranteeDestruct::destruct>([24], [7]) -> ([26], [27]); // 24
drop<Unit>([27]) -> (); // 25
store_temp<RangeCheck>([26]) -> ([26]); // 26
store_temp<U128MulGuarantee>([6]) -> ([6]); // 27
function_call<user@core::integer::U128MulGuaranteeDestruct::destruct>([26], [6]) -> ([28], [29]); // 28
drop<Unit>([29]) -> (); // 29
store_temp<RangeCheck>([28]) -> ([28]); // 30
store_temp<U128MulGuarantee>([5]) -> ([5]); // 31
function_call<user@core::integer::U128MulGuaranteeDestruct::destruct>([28], [5]) -> ([30], [31]); // 32
drop<Unit>([31]) -> (); // 33
enum_init<core::option::Option::<core::zeroable::NonZero::<core::integer::u256>>, 0>([4]) -> ([32]); // 34
store_temp<RangeCheck>([30]) -> ([33]); // 35
store_temp<core::option::Option::<core::zeroable::NonZero::<core::integer::u256>>>([32]) -> ([34]); // 36
jump() { 51() }; // 37
branch_align() -> (); // 38
store_temp<RangeCheck>([13]) -> ([13]); // 39
store_temp<U128MulGuarantee>([15]) -> ([15]); // 40
function_call<user@core::integer::U128MulGuaranteeDestruct::destruct>([13], [15]) -> ([35], [36]); // 41
drop<Unit>([36]) -> (); // 42
store_temp<RangeCheck>([35]) -> ([35]); // 43
store_temp<U128MulGuarantee>([14]) -> ([14]); // 44
function_call<user@core::integer::U128MulGuaranteeDestruct::destruct>([35], [14]) -> ([37], [38]); // 45
drop<Unit>([38]) -> (); // 46
struct_construct<Unit>() -> ([39]); // 47
enum_init<core::option::Option::<core::zeroable::NonZero::<core::integer::u256>>, 1>([39]) -> ([40]); // 48
store_temp<RangeCheck>([37]) -> ([33]); // 49
store_temp<core::option::Option::<core::zeroable::NonZero::<core::integer::u256>>>([40]) -> ([34]); // 50
return([33], [34]); // 51
u128_mul_guarantee_verify([0], [1]) -> ([2]); // 52
struct_construct<Unit>() -> ([3]); // 53
store_temp<RangeCheck>([2]) -> ([2]); // 54
store_temp<Unit>([3]) -> ([3]); // 55
return([2], [3]); // 56

test::foo@0([0]: RangeCheck, [1]: core::integer::u256, [2]: NonZero<core::integer::u256>) -> (RangeCheck, core::option::Option::<core::zeroable::NonZero::<core::integer::u256>>);
core::integer::U128MulGuaranteeDestruct::destruct@52([0]: RangeCheck, [1]: U128MulGuarantee) -> (RangeCheck, Unit);
