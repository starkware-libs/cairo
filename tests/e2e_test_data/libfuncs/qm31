//! > qm31_add

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
extern type qm31;
extern fn qm31_add(a: qm31, b: qm31) -> qm31 nopanic;
fn foo(a: qm31, b: qm31) -> qm31 {
    qm31_add(a, b)
}

//! > casm
{QM31} [ap + 0] = [fp + -4] + [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type qm31 = qm31 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc qm31_add = qm31_add;

qm31_add([0], [1]) -> ([2]); // 0
return([2]); // 1

test::foo@0([0]: qm31, [1]: qm31) -> (qm31);

//! > ==========================================================================

//! > qm31_sub

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
extern type qm31;
extern fn qm31_sub(a: qm31, b: qm31) -> qm31 nopanic;
fn foo(a: qm31, b: qm31) -> qm31 {
    qm31_sub(a, b)
}

//! > casm
{QM31} [fp + -4] = [ap + 0] + [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type qm31 = qm31 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc qm31_sub = qm31_sub;

qm31_sub([0], [1]) -> ([2]); // 0
return([2]); // 1

test::foo@0([0]: qm31, [1]: qm31) -> (qm31);

//! > ==========================================================================

//! > qm31_mul

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
extern type qm31;
extern fn qm31_mul(a: qm31, b: qm31) -> qm31 nopanic;
fn foo(a: qm31, b: qm31) -> qm31 {
    qm31_mul(a, b)
}

//! > casm
{QM31} [ap + 0] = [fp + -4] * [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type qm31 = qm31 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc qm31_mul = qm31_mul;

qm31_mul([0], [1]) -> ([2]); // 0
return([2]); // 1

test::foo@0([0]: qm31, [1]: qm31) -> (qm31);

//! > ==========================================================================

//! > qm31_div

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
extern type qm31;
extern fn qm31_div(a: qm31, b: NonZero<qm31>) -> qm31 nopanic;
fn foo(a: qm31, b: NonZero<qm31>) -> qm31 {
    qm31_div(a, b)
}

//! > casm
{QM31} [fp + -4] = [ap + 0] * [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type qm31 = qm31 [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<qm31> = NonZero<qm31> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc qm31_div = qm31_div;

qm31_div([0], [1]) -> ([2]); // 0
return([2]); // 1

test::foo@0([0]: qm31, [1]: NonZero<qm31>) -> (qm31);

//! > ==========================================================================

//! > qm31_const

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
extern type qm31;
extern fn qm31_const<
    const W0: felt252, const W1: felt252, const W2: felt252, const W3: felt252,
>() -> qm31 nopanic;
fn foo() -> qm31 {
    qm31_const::<1, 2, 3, 4>()
}

//! > casm
[ap + 0] = 1298074214647874006581370456899585, ap++;
ret;

//! > sierra_code
type qm31 = qm31 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc qm31_const<1, 2, 3, 4> = qm31_const<1, 2, 3, 4>;
libfunc store_temp<qm31> = store_temp<qm31>;

qm31_const<1, 2, 3, 4>() -> ([0]); // 0
store_temp<qm31>([0]) -> ([0]); // 1
return([0]); // 2

test::foo@0() -> (qm31);

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > ==========================================================================

//! > qm31_is_zero

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
use core::internal::OptionRev;
extern type qm31;
extern fn qm31_is_zero(a: qm31) -> OptionRev<NonZero<qm31>> nopanic;
fn foo(a: qm31) -> OptionRev<NonZero<qm31>> {
    qm31_is_zero(a)
}

//! > casm
jmp rel 7 if [fp + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -3], ap++;
ret;

//! > sierra_code
type qm31 = qm31 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type NonZero<qm31> = NonZero<qm31> [storable: true, drop: true, dup: true, zero_sized: false];
type core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>> = Enum<ut@core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>, Unit, NonZero<qm31>> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc qm31_is_zero = qm31_is_zero;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>, 0> = enum_init<core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>, 0>;
libfunc store_temp<core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>> = store_temp<core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>>;
libfunc enum_init<core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>, 1> = enum_init<core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>, 1>;

qm31_is_zero([0]) { fallthrough() 6([1]) }; // 0
branch_align() -> (); // 1
struct_construct<Unit>() -> ([2]); // 2
enum_init<core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>, 0>([2]) -> ([3]); // 3
store_temp<core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>>([3]) -> ([3]); // 4
return([3]); // 5
branch_align() -> (); // 6
enum_init<core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>, 1>([1]) -> ([4]); // 7
store_temp<core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>>([4]) -> ([4]); // 8
return([4]); // 9

test::foo@0([0]: qm31) -> (core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>);

//! > function_costs
test::foo: OrderedHashMap({Const: 300})
