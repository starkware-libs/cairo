//! > qm31_add

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
extern type qm31;
extern fn qm31_add(a: qm31, b: qm31) -> qm31 nopanic;
fn foo(a: qm31, b: qm31) -> qm31 {
    qm31_add(a, b)
}

//! > casm
{QM31} [ap + 0] = [fp + -4] + [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type qm31 = qm31 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc qm31_add = qm31_add;

qm31_add([0], [1]) -> ([2]); // 0
return([2]); // 1

test::foo@0([0]: qm31, [1]: qm31) -> (qm31);

//! > ==========================================================================

//! > qm31_sub

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
extern type qm31;
extern fn qm31_sub(a: qm31, b: qm31) -> qm31 nopanic;
fn foo(a: qm31, b: qm31) -> qm31 {
    qm31_sub(a, b)
}

//! > casm
{QM31} [fp + -4] = [ap + 0] + [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type qm31 = qm31 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc qm31_sub = qm31_sub;

qm31_sub([0], [1]) -> ([2]); // 0
return([2]); // 1

test::foo@0([0]: qm31, [1]: qm31) -> (qm31);

//! > ==========================================================================

//! > qm31_mul

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
extern type qm31;
extern fn qm31_mul(a: qm31, b: qm31) -> qm31 nopanic;
fn foo(a: qm31, b: qm31) -> qm31 {
    qm31_mul(a, b)
}

//! > casm
{QM31} [ap + 0] = [fp + -4] * [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type qm31 = qm31 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc qm31_mul = qm31_mul;

qm31_mul([0], [1]) -> ([2]); // 0
return([2]); // 1

test::foo@0([0]: qm31, [1]: qm31) -> (qm31);

//! > ==========================================================================

//! > qm31_div

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
extern type qm31;
extern fn qm31_div(a: qm31, b: NonZero<qm31>) -> qm31 nopanic;
fn foo(a: qm31, b: NonZero<qm31>) -> qm31 {
    qm31_div(a, b)
}

//! > casm
{QM31} [fp + -4] = [ap + 0] * [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type qm31 = qm31 [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<qm31> = NonZero<qm31> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc qm31_div = qm31_div;

qm31_div([0], [1]) -> ([2]); // 0
return([2]); // 1

test::foo@0([0]: qm31, [1]: NonZero<qm31>) -> (qm31);

//! > ==========================================================================

//! > qm31_const

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
extern type qm31;
extern fn qm31_const<
    const W0: felt252, const W1: felt252, const W2: felt252, const W3: felt252,
>() -> qm31 nopanic;
fn foo() -> qm31 {
    qm31_const::<1, 2, 3, 4>()
}

//! > casm
[ap + 0] = 1298074214647874006581370456899585, ap++;
ret;

//! > sierra_code
type qm31 = qm31 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc qm31_const<1, 2, 3, 4> = qm31_const<1, 2, 3, 4>;
libfunc store_temp<qm31> = store_temp<qm31>;

qm31_const<1, 2, 3, 4>() -> ([0]); // 0
store_temp<qm31>([0]) -> ([0]); // 1
return([0]); // 2

test::foo@0() -> (qm31);

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > ==========================================================================

//! > qm31_is_zero

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
use core::internal::OptionRev;
extern type qm31;
extern fn qm31_is_zero(a: qm31) -> OptionRev<NonZero<qm31>> nopanic;
fn foo(a: qm31) -> OptionRev<NonZero<qm31>> {
    qm31_is_zero(a)
}

//! > casm
jmp rel 7 if [fp + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -3], ap++;
ret;

//! > sierra_code
type qm31 = qm31 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type NonZero<qm31> = NonZero<qm31> [storable: true, drop: true, dup: true, zero_sized: false];
type core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>> = Enum<ut@core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>, Unit, NonZero<qm31>> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc qm31_is_zero = qm31_is_zero;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>, 0> = enum_init<core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>, 0>;
libfunc store_temp<core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>> = store_temp<core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>>;
libfunc enum_init<core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>, 1> = enum_init<core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>, 1>;

qm31_is_zero([0]) { fallthrough() 6([1]) }; // 0
branch_align() -> (); // 1
struct_construct<Unit>() -> ([2]); // 2
enum_init<core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>, 0>([2]) -> ([3]); // 3
store_temp<core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>>([3]) -> ([3]); // 4
return([3]); // 5
branch_align() -> (); // 6
enum_init<core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>, 1>([1]) -> ([4]); // 7
store_temp<core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>>([4]) -> ([4]); // 8
return([4]); // 9

test::foo@0([0]: qm31) -> (core::internal::OptionRev::<core::zeroable::NonZero::<test::qm31>>);

//! > function_costs
test::foo: OrderedHashMap({Const: 300})

//! > ==========================================================================

//! > qm31_pack

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
extern type qm31;
type m31 = core::internal::bounded_int::BoundedInt<0, 0x7ffffffe>;
extern fn qm31_pack(w0: m31, w1: m31, w2: m31, w3: m31) -> qm31 nopanic;
fn foo(w0: m31, w1: m31, w2: m31, w3: m31) -> qm31 {
    qm31_pack(w0, w1, w2, w3)
}

//! > casm
[ap + 0] = [fp + -3] * 68719476736, ap++;
[ap + 0] = [ap + -1] + [fp + -4], ap++;
[ap + 0] = [ap + -1] * 68719476736, ap++;
[ap + 0] = [ap + -1] + [fp + -5], ap++;
[ap + 0] = [ap + -1] * 68719476736, ap++;
[ap + 0] = [ap + -1] + [fp + -6], ap++;
[ap + 0] = [ap + -1], ap++;
ret;

//! > sierra_code
type BoundedInt<0, 2147483646> = BoundedInt<0, 2147483646> [storable: true, drop: true, dup: true, zero_sized: false];
type qm31 = qm31 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc qm31_pack = qm31_pack;
libfunc store_temp<qm31> = store_temp<qm31>;

qm31_pack([0], [1], [2], [3]) -> ([4]); // 0
store_temp<qm31>([4]) -> ([4]); // 1
return([4]); // 2

test::foo@0([0]: BoundedInt<0, 2147483646>, [1]: BoundedInt<0, 2147483646>, [2]: BoundedInt<0, 2147483646>, [3]: BoundedInt<0, 2147483646>) -> (qm31);

//! > function_costs
test::foo: OrderedHashMap({Const: 700})

//! > ==========================================================================

//! > qm31_unpack

//! > test_runner_name
SmallE2ETestRunner

//! > cairo_code
extern type qm31;
type m31 = core::internal::bounded_int::BoundedInt<0, 0x7ffffffe>;
extern fn qm31_unpack(a: qm31) -> (m31, m31, m31, m31) implicits(RangeCheck) nopanic;
fn foo(a: qm31) -> (m31, m31, m31, m31) {
    qm31_unpack(a)
}

//! > casm
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -3], 68719476736) %}
%{ (memory[ap + 3], memory[ap + 2]) = divmod(memory[ap + 1], 68719476736) %}
%{ (memory[ap + 5], memory[ap + 4]) = divmod(memory[ap + 3], 68719476736) %}
[ap + 6] = [ap + 5] * 68719476736, ap++;
[ap + 2] = [ap + 5] + [ap + 3], ap++;
[ap + 5] = [ap + 1] * 68719476736, ap++;
[ap + -2] = [ap + 4] + [ap + -1], ap++;
[ap + 4] = [ap + -3] * 68719476736, ap++;
[fp + -3] = [ap + 3] + [ap + -5], ap++;
[ap + -6] = [[fp + -4] + 0], ap++;
[ap + -5] = [[fp + -4] + 1], ap++;
[ap + -4] = [[fp + -4] + 2], ap++;
[ap + -4] = [[fp + -4] + 3];
[ap + 0] = [ap + -9] + [ap + -7], ap++;
[ap + 0] = [ap + -6] + [ap + -5], ap++;
[ap + 0] = [ap + -2] + [ap + -1], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607363048734719, ap++;
[ap + -1] = [[fp + -4] + 4];
[ap + 0] = [fp + -4] + 5, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type BoundedInt<0, 2147483646> = BoundedInt<0, 2147483646> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>> = Struct<ut@Tuple, BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>> [storable: true, drop: true, dup: true, zero_sized: false];
type qm31 = qm31 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc qm31_unpack = qm31_unpack;
libfunc struct_construct<Tuple<BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>>> = struct_construct<Tuple<BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>>>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<Tuple<BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>>> = store_temp<Tuple<BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>>>;

qm31_unpack([0], [1]) -> ([2], [3], [4], [5], [6]); // 0
struct_construct<Tuple<BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>>>([3], [4], [5], [6]) -> ([7]); // 1
store_temp<RangeCheck>([2]) -> ([2]); // 2
store_temp<Tuple<BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>>>([7]) -> ([7]); // 3
return([2], [7]); // 4

test::foo@0([0]: RangeCheck, [1]: qm31) -> (RangeCheck, Tuple<BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>, BoundedInt<0, 2147483646>>);

//! > function_costs
test::foo: OrderedHashMap({Const: 2350})
