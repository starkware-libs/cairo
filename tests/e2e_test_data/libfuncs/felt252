//! > felt252_div

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: felt252, b: NonZero<felt252>) -> felt252 {
    let x = felt252_div(a, b);
    felt252_div(a, b)
}

//! > casm
[fp + -4] = [ap + 0] * [fp + -3], ap++;
[fp + -4] = [ap + 0] * [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 1000})

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc dup<felt252> = dup<felt252>;
libfunc dup<NonZero<felt252>> = dup<NonZero<felt252>>;
libfunc felt252_div = felt252_div;
libfunc drop<felt252> = drop<felt252>;
libfunc rename<felt252> = rename<felt252>;

dup<felt252>([0]) -> ([0], [3]); // 0
dup<NonZero<felt252>>([1]) -> ([1], [4]); // 1
felt252_div([3], [4]) -> ([2]); // 2
drop<felt252>([2]) -> (); // 3
felt252_div([0], [1]) -> ([5]); // 4
rename<felt252>([5]) -> ([6]); // 5
return([6]); // 6

test::foo@0([0]: felt252, [1]: NonZero<felt252>) -> (felt252);

//! > ==========================================================================

//! > felt252_add

//! > test_runner_name
SmallE2ETestRunner

//! > cairo
fn foo(a: felt252, b: felt252) -> felt252 {
    let x = felt252_add(a, b);
    felt252_add(a, b)
}

//! > casm
[ap + 0] = [fp + -4] + [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Const: 100})

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc dup<felt252> = dup<felt252>;
libfunc felt252_add = felt252_add;
libfunc drop<felt252> = drop<felt252>;
libfunc store_temp<felt252> = store_temp<felt252>;

dup<felt252>([0]) -> ([0], [3]); // 0
dup<felt252>([1]) -> ([1], [4]); // 1
felt252_add([3], [4]) -> ([2]); // 2
drop<felt252>([2]) -> (); // 3
felt252_add([0], [1]) -> ([5]); // 4
store_temp<felt252>([5]) -> ([6]); // 5
return([6]); // 6

test::foo@0([0]: felt252, [1]: felt252) -> (felt252);
