//! > branch_align values are pushed to the end

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    // The branch_align of the external if statements should have zero value, since the value should
    // be pushed to the inner if statement.
    if x == 0 {
        if x == 1 {
            if x == 2 {
                bar();
            } else {
                bar();
            }
        } else {
            bar();
            bar();
        }
    } else {
        bar();
        bar();
        bar();
    }
}

#[inline(never)]
fn bar() {
    redeposit_gas()
}

//! > enforced_costs
test::bar 10000

//! > gas_solution
#2: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 9870})
#8: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 9770})
#13: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#19: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 100})
#27: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#39: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#55: OrderedHashMap({Const: 9900})

test::foo: OrderedHashMap({Const: 31100})
test::bar: OrderedHashMap({Const: 10000})

//! > gas_solution_no_solver
#2: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#8: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#13: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 19640})
#19: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 19740})
#27: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 9870})
#39: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#55: OrderedHashMap({Const: 9900})

test::foo: OrderedHashMap({Const: 31100})
test::bar: OrderedHashMap({Const: 10000})

//! > ap_solution
#2: 3
#8: 3

test::bar: 1
test::foo: 13

//! > ap_solution_no_solver
#2: 3
#8: 3

test::foo: 13
test::bar: 1

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc dup<felt252> = dup<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc felt252_const<1> = felt252_const<1>;
libfunc felt252_sub = felt252_sub;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc felt252_const<2> = felt252_const<2>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc drop<Unit> = drop<Unit>;
libfunc jump = jump;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc drop<felt252> = drop<felt252>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc redeposit_gas = redeposit_gas;

dup<felt252>([1]) -> ([1], [2]); // 0
felt252_is_zero([2]) { fallthrough() 39([3]) }; // 1
branch_align() -> (); // 2
felt252_const<1>() -> ([4]); // 3
dup<felt252>([1]) -> ([1], [5]); // 4
felt252_sub([5], [4]) -> ([6]); // 5
store_temp<felt252>([6]) -> ([6]); // 6
felt252_is_zero([6]) { fallthrough() 27([7]) }; // 7
branch_align() -> (); // 8
felt252_const<2>() -> ([8]); // 9
felt252_sub([1], [8]) -> ([9]); // 10
store_temp<felt252>([9]) -> ([9]); // 11
felt252_is_zero([9]) { fallthrough() 19([10]) }; // 12
branch_align() -> (); // 13
store_temp<GasBuiltin>([0]) -> ([0]); // 14
function_call<user@test::bar>([0]) -> ([11], [12]); // 15
drop<Unit>([12]) -> (); // 16
store_temp<GasBuiltin>([11]) -> ([13]); // 17
jump() { 25() }; // 18
branch_align() -> (); // 19
drop<NonZero<felt252>>([10]) -> (); // 20
store_temp<GasBuiltin>([0]) -> ([0]); // 21
function_call<user@test::bar>([0]) -> ([14], [15]); // 22
drop<Unit>([15]) -> (); // 23
store_temp<GasBuiltin>([14]) -> ([13]); // 24
rename<GasBuiltin>([13]) -> ([16]); // 25
jump() { 37() }; // 26
branch_align() -> (); // 27
drop<NonZero<felt252>>([7]) -> (); // 28
drop<felt252>([1]) -> (); // 29
store_temp<GasBuiltin>([0]) -> ([0]); // 30
function_call<user@test::bar>([0]) -> ([17], [18]); // 31
drop<Unit>([18]) -> (); // 32
store_temp<GasBuiltin>([17]) -> ([17]); // 33
function_call<user@test::bar>([17]) -> ([19], [20]); // 34
drop<Unit>([20]) -> (); // 35
store_temp<GasBuiltin>([19]) -> ([16]); // 36
rename<GasBuiltin>([16]) -> ([21]); // 37
jump() { 52() }; // 38
branch_align() -> (); // 39
drop<NonZero<felt252>>([3]) -> (); // 40
drop<felt252>([1]) -> (); // 41
store_temp<GasBuiltin>([0]) -> ([0]); // 42
function_call<user@test::bar>([0]) -> ([22], [23]); // 43
drop<Unit>([23]) -> (); // 44
store_temp<GasBuiltin>([22]) -> ([22]); // 45
function_call<user@test::bar>([22]) -> ([24], [25]); // 46
drop<Unit>([25]) -> (); // 47
store_temp<GasBuiltin>([24]) -> ([24]); // 48
function_call<user@test::bar>([24]) -> ([26], [27]); // 49
drop<Unit>([27]) -> (); // 50
store_temp<GasBuiltin>([26]) -> ([21]); // 51
struct_construct<Unit>() -> ([28]); // 52
store_temp<Unit>([28]) -> ([28]); // 53
return([21], [28]); // 54
redeposit_gas([0]) -> ([1]); // 55
struct_construct<Unit>() -> ([2]); // 56
store_temp<GasBuiltin>([1]) -> ([1]); // 57
store_temp<Unit>([2]) -> ([2]); // 58
return([1], [2]); // 59

test::foo@0([0]: GasBuiltin, [1]: felt252) -> (GasBuiltin, Unit);
test::bar@55([0]: GasBuiltin) -> (GasBuiltin, Unit);

//! > casm
jmp rel 35 if [fp + -3] != 0;
ap += 3;
[fp + -3] = [ap + 0] + 1, ap++;
jmp rel 20 if [ap + -1] != 0;
ap += 3;
[fp + -3] = [ap + 0] + 2, ap++;
jmp rel 8 if [ap + -1] != 0;
[ap + 0] = [fp + -4], ap++;
call rel 31;
[ap + 0] = [ap + -1], ap++;
jmp rel 6;
[ap + 0] = [fp + -4], ap++;
call rel 25;
[ap + 0] = [ap + -1], ap++;
jmp rel 9;
[ap + 0] = [fp + -4], ap++;
call rel 19;
[ap + 0] = [ap + -1], ap++;
call rel 16;
[ap + 0] = [ap + -1], ap++;
jmp rel 12;
[ap + 0] = [fp + -4], ap++;
call rel 10;
[ap + 0] = [ap + -1], ap++;
call rel 7;
[ap + 0] = [ap + -1], ap++;
call rel 4;
[ap + 0] = [ap + -1], ap++;
ret;
[ap + 0] = [fp + -3] + 9900, ap++;
ret;

//! > ==========================================================================

//! > branch_align of withdraw_gas

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    // In this case, the failing branch is more expensive than the success branch.
    // The excess created by the external branch_align should be pushed to the next (inner)
    // statements.
    match gas::withdraw_gas() {
        Option::Some(_) => {
            if x == 0 {
                // Here we don't need to withdraw gas, since we have excess created by the external
                // failing branch.
                match gas::withdraw_gas() {
                    Option::Some(_) => {
                        bar();
                    },
                    Option::None(_) => {},
                }
            } else {
                bar();
            }
        },
        Option::None(_) => {
            bar();
            bar();
        },
    }
}

#[inline(never)]
fn bar() {
    redeposit_gas()
}

//! > enforced_costs
test::bar 10000

//! > gas_solution
#0: OrderedHashMap({Const: 0})
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 9420})
#4: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#5: OrderedHashMap({Const: 0})
#6: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#13: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 10160})
#19: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 450})
#29: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#42: OrderedHashMap({Const: 9900})

test::foo: OrderedHashMap({Const: 21270})
test::bar: OrderedHashMap({Const: 10000})

//! > gas_solution_no_solver
#0: OrderedHashMap({Const: 0})
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#4: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#5: OrderedHashMap({Const: 0})
#6: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 9420})
#13: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 19580})
#19: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 9870})
#29: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#42: OrderedHashMap({Const: 9900})

test::foo: OrderedHashMap({Const: 21270})
test::bar: OrderedHashMap({Const: 10000})

//! > ap_solution
#1: 1
#13: 4
#19: 2

test::bar: 1
test::foo: 12

//! > ap_solution_no_solver
#1: 1
#13: 4
#19: 2

test::foo: 12
test::bar: 1

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];

libfunc withdraw_gas = withdraw_gas;
libfunc branch_align = branch_align;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc drop<Unit> = drop<Unit>;
libfunc jump = jump;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc drop<felt252> = drop<felt252>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc redeposit_gas = redeposit_gas;

withdraw_gas([0], [1]) { fallthrough([3], [4]) 29([5], [6]) }; // 0
branch_align() -> (); // 1
store_temp<RangeCheck>([3]) -> ([3]); // 2
felt252_is_zero([2]) { fallthrough() 19([7]) }; // 3
branch_align() -> (); // 4
withdraw_gas([3], [4]) { fallthrough([8], [9]) 13([10], [11]) }; // 5
branch_align() -> (); // 6
store_temp<GasBuiltin>([9]) -> ([9]); // 7
function_call<user@test::bar>([9]) -> ([12], [13]); // 8
drop<Unit>([13]) -> (); // 9
store_temp<RangeCheck>([8]) -> ([14]); // 10
store_temp<GasBuiltin>([12]) -> ([15]); // 11
jump() { 16() }; // 12
branch_align() -> (); // 13
store_temp<RangeCheck>([10]) -> ([14]); // 14
store_temp<GasBuiltin>([11]) -> ([15]); // 15
rename<RangeCheck>([14]) -> ([16]); // 16
rename<GasBuiltin>([15]) -> ([17]); // 17
jump() { 26() }; // 18
branch_align() -> (); // 19
drop<NonZero<felt252>>([7]) -> (); // 20
store_temp<GasBuiltin>([4]) -> ([4]); // 21
function_call<user@test::bar>([4]) -> ([18], [19]); // 22
drop<Unit>([19]) -> (); // 23
store_temp<RangeCheck>([3]) -> ([16]); // 24
store_temp<GasBuiltin>([18]) -> ([17]); // 25
rename<RangeCheck>([16]) -> ([20]); // 26
rename<GasBuiltin>([17]) -> ([21]); // 27
jump() { 39() }; // 28
branch_align() -> (); // 29
drop<felt252>([2]) -> (); // 30
store_temp<GasBuiltin>([6]) -> ([6]); // 31
function_call<user@test::bar>([6]) -> ([22], [23]); // 32
drop<Unit>([23]) -> (); // 33
store_temp<GasBuiltin>([22]) -> ([22]); // 34
function_call<user@test::bar>([22]) -> ([24], [25]); // 35
drop<Unit>([25]) -> (); // 36
store_temp<RangeCheck>([5]) -> ([20]); // 37
store_temp<GasBuiltin>([24]) -> ([21]); // 38
struct_construct<Unit>() -> ([26]); // 39
store_temp<Unit>([26]) -> ([26]); // 40
return([20], [21], [26]); // 41
redeposit_gas([0]) -> ([1]); // 42
struct_construct<Unit>() -> ([2]); // 43
store_temp<GasBuiltin>([1]) -> ([1]); // 44
store_temp<Unit>([2]) -> ([2]); // 45
return([1], [2]); // 46

test::foo@0([0]: RangeCheck, [1]: GasBuiltin, [2]: felt252) -> (RangeCheck, GasBuiltin, Unit);
test::bar@42([0]: GasBuiltin) -> (GasBuiltin, Unit);

//! > casm
%{ memory[ap + 0] = 0 <= memory[fp + -4] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -4] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 45;
[fp + -4] = [ap + 0] + 0, ap++;
[ap + -1] = [[fp + -5] + 0];
ap += 1;
[ap + 0] = [fp + -5] + 1, ap++;
jmp rel 27 if [fp + -3] != 0;
%{ memory[ap + 0] = 0 <= memory[ap + -3] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -3] + 0];
jmp rel 13;
[ap + -4] = [ap + 0] + 0, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -1], ap++;
call rel 33;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 7;
ap += 4;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
jmp rel 9;
ap += 2;
[ap + 0] = [ap + -5], ap++;
call rel 16;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 11;
[ap + 0] = [fp + -4], ap++;
call rel 9;
[ap + 0] = [ap + -1], ap++;
call rel 6;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
ret;
[ap + 0] = [fp + -3] + 9900, ap++;
ret;

//! > ==========================================================================

//! > withdraw_gas reduces excess

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    if x == 0 {
        // Excess is created by the external `else` branch. Therefore, we don't need to withdraw
        // gas here.
        match gas::withdraw_gas() {
            Option::Some(_) => {
                // Here we have used the excess and we need to withdraw gas.
                match gas::withdraw_gas() {
                    Option::Some(_) => {
                        bar();
                    },
                    Option::None(_) => {},
                }
            },
            Option::None(_) => {},
        }
    } else {
        bar();
    }
}

#[inline(never)]
fn bar() {
    redeposit_gas();
}

//! > enforced_costs
test::bar 2000

//! > gas_solution
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#2: OrderedHashMap({Const: 0})
#3: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#4: OrderedHashMap({Const: 900})
#5: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#12: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 1260})
#18: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 1710})
#24: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#34: OrderedHashMap({Const: 1900})

test::foo: OrderedHashMap({Const: 2740})
test::bar: OrderedHashMap({Const: 2000})

//! > gas_solution_no_solver
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#2: OrderedHashMap({Const: 0})
#3: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#4: OrderedHashMap({Const: 900})
#5: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#12: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 1260})
#18: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 1710})
#24: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#34: OrderedHashMap({Const: 1900})

test::foo: OrderedHashMap({Const: 2740})
test::bar: OrderedHashMap({Const: 2000})

//! > ap_solution
#12: 4
#18: 6
#24: 4

test::bar: 1
test::foo: 10

//! > ap_solution_no_solver
#12: 4
#18: 6
#24: 4

test::foo: 10
test::bar: 1

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc withdraw_gas = withdraw_gas;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc drop<Unit> = drop<Unit>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc jump = jump;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc redeposit_gas = redeposit_gas;

felt252_is_zero([2]) { fallthrough() 24([3]) }; // 0
branch_align() -> (); // 1
withdraw_gas([0], [1]) { fallthrough([4], [5]) 18([6], [7]) }; // 2
branch_align() -> (); // 3
withdraw_gas([4], [5]) { fallthrough([8], [9]) 12([10], [11]) }; // 4
branch_align() -> (); // 5
store_temp<GasBuiltin>([9]) -> ([9]); // 6
function_call<user@test::bar>([9]) -> ([12], [13]); // 7
drop<Unit>([13]) -> (); // 8
store_temp<RangeCheck>([8]) -> ([14]); // 9
store_temp<GasBuiltin>([12]) -> ([15]); // 10
jump() { 15() }; // 11
branch_align() -> (); // 12
store_temp<RangeCheck>([10]) -> ([14]); // 13
store_temp<GasBuiltin>([11]) -> ([15]); // 14
rename<RangeCheck>([14]) -> ([16]); // 15
rename<GasBuiltin>([15]) -> ([17]); // 16
jump() { 21() }; // 17
branch_align() -> (); // 18
store_temp<RangeCheck>([6]) -> ([16]); // 19
store_temp<GasBuiltin>([7]) -> ([17]); // 20
rename<RangeCheck>([16]) -> ([18]); // 21
rename<GasBuiltin>([17]) -> ([19]); // 22
jump() { 31() }; // 23
branch_align() -> (); // 24
drop<NonZero<felt252>>([3]) -> (); // 25
store_temp<GasBuiltin>([1]) -> ([1]); // 26
function_call<user@test::bar>([1]) -> ([20], [21]); // 27
drop<Unit>([21]) -> (); // 28
store_temp<RangeCheck>([0]) -> ([18]); // 29
store_temp<GasBuiltin>([20]) -> ([19]); // 30
struct_construct<Unit>() -> ([22]); // 31
store_temp<Unit>([22]) -> ([22]); // 32
return([18], [19], [22]); // 33
redeposit_gas([0]) -> ([1]); // 34
struct_construct<Unit>() -> ([2]); // 35
store_temp<GasBuiltin>([1]) -> ([1]); // 36
store_temp<Unit>([2]) -> ([2]); // 37
return([1], [2]); // 38

test::foo@0([0]: RangeCheck, [1]: GasBuiltin, [2]: felt252) -> (RangeCheck, GasBuiltin, Unit);
test::bar@34([0]: GasBuiltin) -> (GasBuiltin, Unit);

//! > casm
jmp rel 44 if [fp + -3] != 0;
%{ memory[ap + 0] = 0 <= memory[fp + -4] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -4] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 30;
[fp + -4] = [ap + 0] + 0, ap++;
[ap + -1] = [[fp + -5] + 0];
%{ memory[ap + 0] = 900 <= memory[ap + -1] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768210556, ap++;
[ap + -1] = [[fp + -5] + 1];
jmp rel 13;
[ap + -2] = [ap + 0] + 900, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [ap + -1], ap++;
call rel 29;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 7;
ap += 4;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 7;
ap += 6;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
ap += 4;
[ap + 0] = [fp + -4], ap++;
call rel 5;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2], ap++;
ret;
[ap + 0] = [fp + -3] + 1900, ap++;
ret;

//! > ==========================================================================

//! > redeposit_gas libfunc

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    if x == 0 {
        bar();
        bar();
        redeposit_gas();
        return ();
    } else {
        redeposit_gas();
        if x == 1 {
            bar();
        } else {
            redeposit_gas();
        }
        return ();
    }
}

#[inline(never)]
fn bar() {
    redeposit_gas();
}

//! > enforced_costs
test::bar 10000
test::foo 100000

//! > gas_solution
#2: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#10: OrderedHashMap({Const: 79200})
#15: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#17: OrderedHashMap({Const: 88980})
#23: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#29: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#31: OrderedHashMap({Const: 10260})
#36: OrderedHashMap({Const: 9900})

test::foo: OrderedHashMap({Const: 100000})
test::bar: OrderedHashMap({Const: 10000})

//! > gas_solution_no_solver
#2: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#10: OrderedHashMap({Const: 79200})
#15: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#17: OrderedHashMap({Const: 88980})
#23: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#29: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#31: OrderedHashMap({Const: 10260})
#36: OrderedHashMap({Const: 9900})

test::foo: OrderedHashMap({Const: 100000})
test::bar: OrderedHashMap({Const: 10000})

//! > ap_solution
#15: 2
#29: 4

test::bar: 1
test::foo: 9

//! > ap_solution_no_solver
#15: 2
#29: 4

test::foo: 9
test::bar: 1

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc dup<felt252> = dup<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc drop<felt252> = drop<felt252>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc drop<Unit> = drop<Unit>;
libfunc redeposit_gas = redeposit_gas;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc felt252_const<1> = felt252_const<1>;
libfunc felt252_sub = felt252_sub;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc jump = jump;

dup<felt252>([1]) -> ([1], [2]); // 0
felt252_is_zero([2]) { fallthrough() 15([3]) }; // 1
branch_align() -> (); // 2
drop<felt252>([1]) -> (); // 3
store_temp<GasBuiltin>([0]) -> ([0]); // 4
function_call<user@test::bar>([0]) -> ([4], [5]); // 5
drop<Unit>([5]) -> (); // 6
store_temp<GasBuiltin>([4]) -> ([4]); // 7
function_call<user@test::bar>([4]) -> ([6], [7]); // 8
drop<Unit>([7]) -> (); // 9
redeposit_gas([6]) -> ([8]); // 10
struct_construct<Unit>() -> ([9]); // 11
store_temp<GasBuiltin>([8]) -> ([8]); // 12
store_temp<Unit>([9]) -> ([9]); // 13
return([8], [9]); // 14
branch_align() -> (); // 15
drop<NonZero<felt252>>([3]) -> (); // 16
redeposit_gas([0]) -> ([10]); // 17
felt252_const<1>() -> ([11]); // 18
felt252_sub([1], [11]) -> ([12]); // 19
store_temp<felt252>([12]) -> ([12]); // 20
store_temp<GasBuiltin>([10]) -> ([10]); // 21
felt252_is_zero([12]) { fallthrough() 29([13]) }; // 22
branch_align() -> (); // 23
store_temp<GasBuiltin>([10]) -> ([10]); // 24
function_call<user@test::bar>([10]) -> ([14], [15]); // 25
drop<Unit>([15]) -> (); // 26
store_temp<GasBuiltin>([14]) -> ([16]); // 27
jump() { 33() }; // 28
branch_align() -> (); // 29
drop<NonZero<felt252>>([13]) -> (); // 30
redeposit_gas([10]) -> ([17]); // 31
store_temp<GasBuiltin>([17]) -> ([16]); // 32
struct_construct<Unit>() -> ([18]); // 33
store_temp<Unit>([18]) -> ([18]); // 34
return([16], [18]); // 35
redeposit_gas([0]) -> ([1]); // 36
struct_construct<Unit>() -> ([2]); // 37
store_temp<GasBuiltin>([1]) -> ([1]); // 38
store_temp<Unit>([2]) -> ([2]); // 39
return([1], [2]); // 40

test::foo@0([0]: GasBuiltin, [1]: felt252) -> (GasBuiltin, Unit);
test::bar@36([0]: GasBuiltin) -> (GasBuiltin, Unit);

//! > casm
jmp rel 11 if [fp + -3] != 0;
[ap + 0] = [fp + -4], ap++;
call rel 27;
[ap + 0] = [ap + -1], ap++;
call rel 24;
[ap + 0] = [ap + -1] + 79200, ap++;
ret;
ap += 2;
[fp + -3] = [ap + 0] + 1, ap++;
[ap + 0] = [fp + -4] + 88980, ap++;
jmp rel 8 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
call rel 10;
[ap + 0] = [ap + -1], ap++;
jmp rel 6;
ap += 4;
[ap + 0] = [ap + -5] + 10260, ap++;
ret;
[ap + 0] = [fp + -3] + 9900, ap++;
ret;

//! > ==========================================================================

//! > Function overuse ap-changes.

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo
#[inline(never)]
fn function_with_branch_align(cond: bool) -> felt252 {
    if cond { 1 } else { 2 }
}

fn foo(cond: bool) {
    if cond {
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    } else {
        function_with_branch_align(false);
        function_with_branch_align(false);
        function_with_branch_align(false);
    }
}

//! > gas_solution
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#6: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 100})
#12: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 10070})
#30: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})

test::function_with_branch_align: OrderedHashMap({Const: 810})
test::foo: OrderedHashMap({Const: 13600})

//! > gas_solution_no_solver
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})
#6: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 100})
#12: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 10270})
#30: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, Const: 0})

test::function_with_branch_align: OrderedHashMap({Const: 300})
test::foo: OrderedHashMap({Const: 13600})

//! > ap_solution
#1: 41
#6: 41

test::function_with_branch_align: 42
test::foo: 135

//! > ap_solution_no_solver
#12: 123

test::function_with_branch_align: 1
test::foo: 135

//! > sierra_code
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::bool = Enum<ut@core::bool, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc enum_match<core::bool> = enum_match<core::bool>;
libfunc branch_align = branch_align;
libfunc drop<Unit> = drop<Unit>;
libfunc felt252_const<2> = felt252_const<2>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc jump = jump;
libfunc felt252_const<1> = felt252_const<1>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc function_call<user@test::function_with_branch_align> = function_call<user@test::function_with_branch_align>;
libfunc drop<felt252> = drop<felt252>;
libfunc felt252_add = felt252_add;
libfunc store_temp<Unit> = store_temp<Unit>;

enum_match<core::bool>([0]) { fallthrough([1]) 6([2]) }; // 0
branch_align() -> (); // 1
drop<Unit>([1]) -> (); // 2
felt252_const<2>() -> ([3]); // 3
store_temp<felt252>([3]) -> ([4]); // 4
jump() { 10() }; // 5
branch_align() -> (); // 6
drop<Unit>([2]) -> (); // 7
felt252_const<1>() -> ([5]); // 8
store_temp<felt252>([5]) -> ([4]); // 9
return([4]); // 10
enum_match<core::bool>([0]) { fallthrough([1]) 30([2]) }; // 11
branch_align() -> (); // 12
drop<Unit>([1]) -> (); // 13
struct_construct<Unit>() -> ([3]); // 14
enum_init<core::bool, 0>([3]) -> ([4]); // 15
store_temp<core::bool>([4]) -> ([4]); // 16
function_call<user@test::function_with_branch_align>([4]) -> ([5]); // 17
drop<felt252>([5]) -> (); // 18
struct_construct<Unit>() -> ([6]); // 19
enum_init<core::bool, 0>([6]) -> ([7]); // 20
store_temp<core::bool>([7]) -> ([7]); // 21
function_call<user@test::function_with_branch_align>([7]) -> ([8]); // 22
drop<felt252>([8]) -> (); // 23
struct_construct<Unit>() -> ([9]); // 24
enum_init<core::bool, 0>([9]) -> ([10]); // 25
store_temp<core::bool>([10]) -> ([10]); // 26
function_call<user@test::function_with_branch_align>([10]) -> ([11]); // 27
drop<felt252>([11]) -> (); // 28
jump() { 455() }; // 29
branch_align() -> (); // 30
drop<Unit>([2]) -> (); // 31
felt252_const<1>() -> ([12]); // 32
felt252_const<1>() -> ([13]); // 33
store_temp<felt252>([12]) -> ([12]); // 34
felt252_add([12], [13]) -> ([14]); // 35
felt252_const<1>() -> ([15]); // 36
store_temp<felt252>([14]) -> ([14]); // 37
felt252_add([14], [15]) -> ([16]); // 38
felt252_const<1>() -> ([17]); // 39
store_temp<felt252>([16]) -> ([16]); // 40
felt252_add([16], [17]) -> ([18]); // 41
felt252_const<1>() -> ([19]); // 42
store_temp<felt252>([18]) -> ([18]); // 43
felt252_add([18], [19]) -> ([20]); // 44
felt252_const<1>() -> ([21]); // 45
store_temp<felt252>([20]) -> ([20]); // 46
felt252_add([20], [21]) -> ([22]); // 47
felt252_const<1>() -> ([23]); // 48
store_temp<felt252>([22]) -> ([22]); // 49
felt252_add([22], [23]) -> ([24]); // 50
felt252_const<1>() -> ([25]); // 51
store_temp<felt252>([24]) -> ([24]); // 52
felt252_add([24], [25]) -> ([26]); // 53
felt252_const<1>() -> ([27]); // 54
store_temp<felt252>([26]) -> ([26]); // 55
felt252_add([26], [27]) -> ([28]); // 56
felt252_const<1>() -> ([29]); // 57
store_temp<felt252>([28]) -> ([28]); // 58
felt252_add([28], [29]) -> ([30]); // 59
felt252_const<1>() -> ([31]); // 60
store_temp<felt252>([30]) -> ([30]); // 61
felt252_add([30], [31]) -> ([32]); // 62
felt252_const<1>() -> ([33]); // 63
store_temp<felt252>([32]) -> ([32]); // 64
felt252_add([32], [33]) -> ([34]); // 65
felt252_const<1>() -> ([35]); // 66
store_temp<felt252>([34]) -> ([34]); // 67
felt252_add([34], [35]) -> ([36]); // 68
felt252_const<1>() -> ([37]); // 69
store_temp<felt252>([36]) -> ([36]); // 70
felt252_add([36], [37]) -> ([38]); // 71
felt252_const<1>() -> ([39]); // 72
store_temp<felt252>([38]) -> ([38]); // 73
felt252_add([38], [39]) -> ([40]); // 74
felt252_const<1>() -> ([41]); // 75
store_temp<felt252>([40]) -> ([40]); // 76
felt252_add([40], [41]) -> ([42]); // 77
drop<felt252>([42]) -> (); // 78
felt252_const<1>() -> ([43]); // 79
felt252_const<1>() -> ([44]); // 80
store_temp<felt252>([43]) -> ([43]); // 81
felt252_add([43], [44]) -> ([45]); // 82
felt252_const<1>() -> ([46]); // 83
store_temp<felt252>([45]) -> ([45]); // 84
felt252_add([45], [46]) -> ([47]); // 85
felt252_const<1>() -> ([48]); // 86
store_temp<felt252>([47]) -> ([47]); // 87
felt252_add([47], [48]) -> ([49]); // 88
felt252_const<1>() -> ([50]); // 89
store_temp<felt252>([49]) -> ([49]); // 90
felt252_add([49], [50]) -> ([51]); // 91
felt252_const<1>() -> ([52]); // 92
store_temp<felt252>([51]) -> ([51]); // 93
felt252_add([51], [52]) -> ([53]); // 94
felt252_const<1>() -> ([54]); // 95
store_temp<felt252>([53]) -> ([53]); // 96
felt252_add([53], [54]) -> ([55]); // 97
felt252_const<1>() -> ([56]); // 98
store_temp<felt252>([55]) -> ([55]); // 99
felt252_add([55], [56]) -> ([57]); // 100
felt252_const<1>() -> ([58]); // 101
store_temp<felt252>([57]) -> ([57]); // 102
felt252_add([57], [58]) -> ([59]); // 103
felt252_const<1>() -> ([60]); // 104
store_temp<felt252>([59]) -> ([59]); // 105
felt252_add([59], [60]) -> ([61]); // 106
felt252_const<1>() -> ([62]); // 107
store_temp<felt252>([61]) -> ([61]); // 108
felt252_add([61], [62]) -> ([63]); // 109
felt252_const<1>() -> ([64]); // 110
store_temp<felt252>([63]) -> ([63]); // 111
felt252_add([63], [64]) -> ([65]); // 112
felt252_const<1>() -> ([66]); // 113
store_temp<felt252>([65]) -> ([65]); // 114
felt252_add([65], [66]) -> ([67]); // 115
felt252_const<1>() -> ([68]); // 116
store_temp<felt252>([67]) -> ([67]); // 117
felt252_add([67], [68]) -> ([69]); // 118
felt252_const<1>() -> ([70]); // 119
store_temp<felt252>([69]) -> ([69]); // 120
felt252_add([69], [70]) -> ([71]); // 121
felt252_const<1>() -> ([72]); // 122
store_temp<felt252>([71]) -> ([71]); // 123
felt252_add([71], [72]) -> ([73]); // 124
drop<felt252>([73]) -> (); // 125
felt252_const<1>() -> ([74]); // 126
felt252_const<1>() -> ([75]); // 127
store_temp<felt252>([74]) -> ([74]); // 128
felt252_add([74], [75]) -> ([76]); // 129
felt252_const<1>() -> ([77]); // 130
store_temp<felt252>([76]) -> ([76]); // 131
felt252_add([76], [77]) -> ([78]); // 132
felt252_const<1>() -> ([79]); // 133
store_temp<felt252>([78]) -> ([78]); // 134
felt252_add([78], [79]) -> ([80]); // 135
felt252_const<1>() -> ([81]); // 136
store_temp<felt252>([80]) -> ([80]); // 137
felt252_add([80], [81]) -> ([82]); // 138
felt252_const<1>() -> ([83]); // 139
store_temp<felt252>([82]) -> ([82]); // 140
felt252_add([82], [83]) -> ([84]); // 141
felt252_const<1>() -> ([85]); // 142
store_temp<felt252>([84]) -> ([84]); // 143
felt252_add([84], [85]) -> ([86]); // 144
felt252_const<1>() -> ([87]); // 145
store_temp<felt252>([86]) -> ([86]); // 146
felt252_add([86], [87]) -> ([88]); // 147
felt252_const<1>() -> ([89]); // 148
store_temp<felt252>([88]) -> ([88]); // 149
felt252_add([88], [89]) -> ([90]); // 150
felt252_const<1>() -> ([91]); // 151
store_temp<felt252>([90]) -> ([90]); // 152
felt252_add([90], [91]) -> ([92]); // 153
felt252_const<1>() -> ([93]); // 154
store_temp<felt252>([92]) -> ([92]); // 155
felt252_add([92], [93]) -> ([94]); // 156
felt252_const<1>() -> ([95]); // 157
store_temp<felt252>([94]) -> ([94]); // 158
felt252_add([94], [95]) -> ([96]); // 159
felt252_const<1>() -> ([97]); // 160
store_temp<felt252>([96]) -> ([96]); // 161
felt252_add([96], [97]) -> ([98]); // 162
felt252_const<1>() -> ([99]); // 163
store_temp<felt252>([98]) -> ([98]); // 164
felt252_add([98], [99]) -> ([100]); // 165
felt252_const<1>() -> ([101]); // 166
store_temp<felt252>([100]) -> ([100]); // 167
felt252_add([100], [101]) -> ([102]); // 168
felt252_const<1>() -> ([103]); // 169
store_temp<felt252>([102]) -> ([102]); // 170
felt252_add([102], [103]) -> ([104]); // 171
drop<felt252>([104]) -> (); // 172
felt252_const<1>() -> ([105]); // 173
felt252_const<1>() -> ([106]); // 174
store_temp<felt252>([105]) -> ([105]); // 175
felt252_add([105], [106]) -> ([107]); // 176
felt252_const<1>() -> ([108]); // 177
store_temp<felt252>([107]) -> ([107]); // 178
felt252_add([107], [108]) -> ([109]); // 179
felt252_const<1>() -> ([110]); // 180
store_temp<felt252>([109]) -> ([109]); // 181
felt252_add([109], [110]) -> ([111]); // 182
felt252_const<1>() -> ([112]); // 183
store_temp<felt252>([111]) -> ([111]); // 184
felt252_add([111], [112]) -> ([113]); // 185
felt252_const<1>() -> ([114]); // 186
store_temp<felt252>([113]) -> ([113]); // 187
felt252_add([113], [114]) -> ([115]); // 188
felt252_const<1>() -> ([116]); // 189
store_temp<felt252>([115]) -> ([115]); // 190
felt252_add([115], [116]) -> ([117]); // 191
felt252_const<1>() -> ([118]); // 192
store_temp<felt252>([117]) -> ([117]); // 193
felt252_add([117], [118]) -> ([119]); // 194
felt252_const<1>() -> ([120]); // 195
store_temp<felt252>([119]) -> ([119]); // 196
felt252_add([119], [120]) -> ([121]); // 197
felt252_const<1>() -> ([122]); // 198
store_temp<felt252>([121]) -> ([121]); // 199
felt252_add([121], [122]) -> ([123]); // 200
felt252_const<1>() -> ([124]); // 201
store_temp<felt252>([123]) -> ([123]); // 202
felt252_add([123], [124]) -> ([125]); // 203
felt252_const<1>() -> ([126]); // 204
store_temp<felt252>([125]) -> ([125]); // 205
felt252_add([125], [126]) -> ([127]); // 206
felt252_const<1>() -> ([128]); // 207
store_temp<felt252>([127]) -> ([127]); // 208
felt252_add([127], [128]) -> ([129]); // 209
felt252_const<1>() -> ([130]); // 210
store_temp<felt252>([129]) -> ([129]); // 211
felt252_add([129], [130]) -> ([131]); // 212
felt252_const<1>() -> ([132]); // 213
store_temp<felt252>([131]) -> ([131]); // 214
felt252_add([131], [132]) -> ([133]); // 215
felt252_const<1>() -> ([134]); // 216
store_temp<felt252>([133]) -> ([133]); // 217
felt252_add([133], [134]) -> ([135]); // 218
drop<felt252>([135]) -> (); // 219
felt252_const<1>() -> ([136]); // 220
felt252_const<1>() -> ([137]); // 221
store_temp<felt252>([136]) -> ([136]); // 222
felt252_add([136], [137]) -> ([138]); // 223
felt252_const<1>() -> ([139]); // 224
store_temp<felt252>([138]) -> ([138]); // 225
felt252_add([138], [139]) -> ([140]); // 226
felt252_const<1>() -> ([141]); // 227
store_temp<felt252>([140]) -> ([140]); // 228
felt252_add([140], [141]) -> ([142]); // 229
felt252_const<1>() -> ([143]); // 230
store_temp<felt252>([142]) -> ([142]); // 231
felt252_add([142], [143]) -> ([144]); // 232
felt252_const<1>() -> ([145]); // 233
store_temp<felt252>([144]) -> ([144]); // 234
felt252_add([144], [145]) -> ([146]); // 235
felt252_const<1>() -> ([147]); // 236
store_temp<felt252>([146]) -> ([146]); // 237
felt252_add([146], [147]) -> ([148]); // 238
felt252_const<1>() -> ([149]); // 239
store_temp<felt252>([148]) -> ([148]); // 240
felt252_add([148], [149]) -> ([150]); // 241
felt252_const<1>() -> ([151]); // 242
store_temp<felt252>([150]) -> ([150]); // 243
felt252_add([150], [151]) -> ([152]); // 244
felt252_const<1>() -> ([153]); // 245
store_temp<felt252>([152]) -> ([152]); // 246
felt252_add([152], [153]) -> ([154]); // 247
felt252_const<1>() -> ([155]); // 248
store_temp<felt252>([154]) -> ([154]); // 249
felt252_add([154], [155]) -> ([156]); // 250
felt252_const<1>() -> ([157]); // 251
store_temp<felt252>([156]) -> ([156]); // 252
felt252_add([156], [157]) -> ([158]); // 253
felt252_const<1>() -> ([159]); // 254
store_temp<felt252>([158]) -> ([158]); // 255
felt252_add([158], [159]) -> ([160]); // 256
felt252_const<1>() -> ([161]); // 257
store_temp<felt252>([160]) -> ([160]); // 258
felt252_add([160], [161]) -> ([162]); // 259
felt252_const<1>() -> ([163]); // 260
store_temp<felt252>([162]) -> ([162]); // 261
felt252_add([162], [163]) -> ([164]); // 262
felt252_const<1>() -> ([165]); // 263
store_temp<felt252>([164]) -> ([164]); // 264
felt252_add([164], [165]) -> ([166]); // 265
drop<felt252>([166]) -> (); // 266
felt252_const<1>() -> ([167]); // 267
felt252_const<1>() -> ([168]); // 268
store_temp<felt252>([167]) -> ([167]); // 269
felt252_add([167], [168]) -> ([169]); // 270
felt252_const<1>() -> ([170]); // 271
store_temp<felt252>([169]) -> ([169]); // 272
felt252_add([169], [170]) -> ([171]); // 273
felt252_const<1>() -> ([172]); // 274
store_temp<felt252>([171]) -> ([171]); // 275
felt252_add([171], [172]) -> ([173]); // 276
felt252_const<1>() -> ([174]); // 277
store_temp<felt252>([173]) -> ([173]); // 278
felt252_add([173], [174]) -> ([175]); // 279
felt252_const<1>() -> ([176]); // 280
store_temp<felt252>([175]) -> ([175]); // 281
felt252_add([175], [176]) -> ([177]); // 282
felt252_const<1>() -> ([178]); // 283
store_temp<felt252>([177]) -> ([177]); // 284
felt252_add([177], [178]) -> ([179]); // 285
felt252_const<1>() -> ([180]); // 286
store_temp<felt252>([179]) -> ([179]); // 287
felt252_add([179], [180]) -> ([181]); // 288
felt252_const<1>() -> ([182]); // 289
store_temp<felt252>([181]) -> ([181]); // 290
felt252_add([181], [182]) -> ([183]); // 291
felt252_const<1>() -> ([184]); // 292
store_temp<felt252>([183]) -> ([183]); // 293
felt252_add([183], [184]) -> ([185]); // 294
felt252_const<1>() -> ([186]); // 295
store_temp<felt252>([185]) -> ([185]); // 296
felt252_add([185], [186]) -> ([187]); // 297
felt252_const<1>() -> ([188]); // 298
store_temp<felt252>([187]) -> ([187]); // 299
felt252_add([187], [188]) -> ([189]); // 300
felt252_const<1>() -> ([190]); // 301
store_temp<felt252>([189]) -> ([189]); // 302
felt252_add([189], [190]) -> ([191]); // 303
felt252_const<1>() -> ([192]); // 304
store_temp<felt252>([191]) -> ([191]); // 305
felt252_add([191], [192]) -> ([193]); // 306
felt252_const<1>() -> ([194]); // 307
store_temp<felt252>([193]) -> ([193]); // 308
felt252_add([193], [194]) -> ([195]); // 309
felt252_const<1>() -> ([196]); // 310
store_temp<felt252>([195]) -> ([195]); // 311
felt252_add([195], [196]) -> ([197]); // 312
drop<felt252>([197]) -> (); // 313
felt252_const<1>() -> ([198]); // 314
felt252_const<1>() -> ([199]); // 315
store_temp<felt252>([198]) -> ([198]); // 316
felt252_add([198], [199]) -> ([200]); // 317
felt252_const<1>() -> ([201]); // 318
store_temp<felt252>([200]) -> ([200]); // 319
felt252_add([200], [201]) -> ([202]); // 320
felt252_const<1>() -> ([203]); // 321
store_temp<felt252>([202]) -> ([202]); // 322
felt252_add([202], [203]) -> ([204]); // 323
felt252_const<1>() -> ([205]); // 324
store_temp<felt252>([204]) -> ([204]); // 325
felt252_add([204], [205]) -> ([206]); // 326
felt252_const<1>() -> ([207]); // 327
store_temp<felt252>([206]) -> ([206]); // 328
felt252_add([206], [207]) -> ([208]); // 329
felt252_const<1>() -> ([209]); // 330
store_temp<felt252>([208]) -> ([208]); // 331
felt252_add([208], [209]) -> ([210]); // 332
felt252_const<1>() -> ([211]); // 333
store_temp<felt252>([210]) -> ([210]); // 334
felt252_add([210], [211]) -> ([212]); // 335
felt252_const<1>() -> ([213]); // 336
store_temp<felt252>([212]) -> ([212]); // 337
felt252_add([212], [213]) -> ([214]); // 338
felt252_const<1>() -> ([215]); // 339
store_temp<felt252>([214]) -> ([214]); // 340
felt252_add([214], [215]) -> ([216]); // 341
felt252_const<1>() -> ([217]); // 342
store_temp<felt252>([216]) -> ([216]); // 343
felt252_add([216], [217]) -> ([218]); // 344
felt252_const<1>() -> ([219]); // 345
store_temp<felt252>([218]) -> ([218]); // 346
felt252_add([218], [219]) -> ([220]); // 347
felt252_const<1>() -> ([221]); // 348
store_temp<felt252>([220]) -> ([220]); // 349
felt252_add([220], [221]) -> ([222]); // 350
felt252_const<1>() -> ([223]); // 351
store_temp<felt252>([222]) -> ([222]); // 352
felt252_add([222], [223]) -> ([224]); // 353
felt252_const<1>() -> ([225]); // 354
store_temp<felt252>([224]) -> ([224]); // 355
felt252_add([224], [225]) -> ([226]); // 356
felt252_const<1>() -> ([227]); // 357
store_temp<felt252>([226]) -> ([226]); // 358
felt252_add([226], [227]) -> ([228]); // 359
drop<felt252>([228]) -> (); // 360
felt252_const<1>() -> ([229]); // 361
felt252_const<1>() -> ([230]); // 362
store_temp<felt252>([229]) -> ([229]); // 363
felt252_add([229], [230]) -> ([231]); // 364
felt252_const<1>() -> ([232]); // 365
store_temp<felt252>([231]) -> ([231]); // 366
felt252_add([231], [232]) -> ([233]); // 367
felt252_const<1>() -> ([234]); // 368
store_temp<felt252>([233]) -> ([233]); // 369
felt252_add([233], [234]) -> ([235]); // 370
felt252_const<1>() -> ([236]); // 371
store_temp<felt252>([235]) -> ([235]); // 372
felt252_add([235], [236]) -> ([237]); // 373
felt252_const<1>() -> ([238]); // 374
store_temp<felt252>([237]) -> ([237]); // 375
felt252_add([237], [238]) -> ([239]); // 376
felt252_const<1>() -> ([240]); // 377
store_temp<felt252>([239]) -> ([239]); // 378
felt252_add([239], [240]) -> ([241]); // 379
felt252_const<1>() -> ([242]); // 380
store_temp<felt252>([241]) -> ([241]); // 381
felt252_add([241], [242]) -> ([243]); // 382
felt252_const<1>() -> ([244]); // 383
store_temp<felt252>([243]) -> ([243]); // 384
felt252_add([243], [244]) -> ([245]); // 385
felt252_const<1>() -> ([246]); // 386
store_temp<felt252>([245]) -> ([245]); // 387
felt252_add([245], [246]) -> ([247]); // 388
felt252_const<1>() -> ([248]); // 389
store_temp<felt252>([247]) -> ([247]); // 390
felt252_add([247], [248]) -> ([249]); // 391
felt252_const<1>() -> ([250]); // 392
store_temp<felt252>([249]) -> ([249]); // 393
felt252_add([249], [250]) -> ([251]); // 394
felt252_const<1>() -> ([252]); // 395
store_temp<felt252>([251]) -> ([251]); // 396
felt252_add([251], [252]) -> ([253]); // 397
felt252_const<1>() -> ([254]); // 398
store_temp<felt252>([253]) -> ([253]); // 399
felt252_add([253], [254]) -> ([255]); // 400
felt252_const<1>() -> ([256]); // 401
store_temp<felt252>([255]) -> ([255]); // 402
felt252_add([255], [256]) -> ([257]); // 403
felt252_const<1>() -> ([258]); // 404
store_temp<felt252>([257]) -> ([257]); // 405
felt252_add([257], [258]) -> ([259]); // 406
drop<felt252>([259]) -> (); // 407
felt252_const<1>() -> ([260]); // 408
felt252_const<1>() -> ([261]); // 409
store_temp<felt252>([260]) -> ([260]); // 410
felt252_add([260], [261]) -> ([262]); // 411
felt252_const<1>() -> ([263]); // 412
store_temp<felt252>([262]) -> ([262]); // 413
felt252_add([262], [263]) -> ([264]); // 414
felt252_const<1>() -> ([265]); // 415
store_temp<felt252>([264]) -> ([264]); // 416
felt252_add([264], [265]) -> ([266]); // 417
felt252_const<1>() -> ([267]); // 418
store_temp<felt252>([266]) -> ([266]); // 419
felt252_add([266], [267]) -> ([268]); // 420
felt252_const<1>() -> ([269]); // 421
store_temp<felt252>([268]) -> ([268]); // 422
felt252_add([268], [269]) -> ([270]); // 423
felt252_const<1>() -> ([271]); // 424
store_temp<felt252>([270]) -> ([270]); // 425
felt252_add([270], [271]) -> ([272]); // 426
felt252_const<1>() -> ([273]); // 427
store_temp<felt252>([272]) -> ([272]); // 428
felt252_add([272], [273]) -> ([274]); // 429
felt252_const<1>() -> ([275]); // 430
store_temp<felt252>([274]) -> ([274]); // 431
felt252_add([274], [275]) -> ([276]); // 432
felt252_const<1>() -> ([277]); // 433
store_temp<felt252>([276]) -> ([276]); // 434
felt252_add([276], [277]) -> ([278]); // 435
felt252_const<1>() -> ([279]); // 436
store_temp<felt252>([278]) -> ([278]); // 437
felt252_add([278], [279]) -> ([280]); // 438
felt252_const<1>() -> ([281]); // 439
store_temp<felt252>([280]) -> ([280]); // 440
felt252_add([280], [281]) -> ([282]); // 441
felt252_const<1>() -> ([283]); // 442
store_temp<felt252>([282]) -> ([282]); // 443
felt252_add([282], [283]) -> ([284]); // 444
felt252_const<1>() -> ([285]); // 445
store_temp<felt252>([284]) -> ([284]); // 446
felt252_add([284], [285]) -> ([286]); // 447
felt252_const<1>() -> ([287]); // 448
store_temp<felt252>([286]) -> ([286]); // 449
felt252_add([286], [287]) -> ([288]); // 450
felt252_const<1>() -> ([289]); // 451
store_temp<felt252>([288]) -> ([288]); // 452
felt252_add([288], [289]) -> ([290]); // 453
drop<felt252>([290]) -> (); // 454
struct_construct<Unit>() -> ([291]); // 455
store_temp<Unit>([291]) -> ([291]); // 456
return([291]); // 457

test::function_with_branch_align@0([0]: core::bool) -> (felt252);
test::foo@11([0]: core::bool) -> (Unit);

//! > casm
jmp rel 8 if [fp + -3] != 0;
ap += 41;
[ap + 0] = 2, ap++;
jmp rel 6;
ap += 41;
[ap + 0] = 1, ap++;
ret;
jmp rel 16 if [fp + -3] != 0;
[ap + 0] = 0, ap++;
call rel -17;
[ap + 0] = 0, ap++;
call rel -21;
[ap + 0] = 0, ap++;
call rel -25;
jmp rel 272;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
ret;
