//! > runtime costs handle each postcost component separately

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo_code
fn foo(x: felt252) {
    if x == 0 {
        holes(x);
    } else {
        use_rc();
    }
}

#[inline(never)]
fn holes(x: felt252) {
    if x == 0 {
        1 + 2 + 3 + 4 + 5;
    }
}

#[inline(never)]
fn use_rc() {
    1_u32 < two();
}

#[inline(never)]
fn two() -> u32 {
    2
}

//! > gas_solution_lp
#5: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 250, Step: 2, Hole: 0, RangeCheck: 1})
#10: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 5, RangeCheck: 0})
#20: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 4, RangeCheck: 0})
#36: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 260, Step: 3, Hole: 0, RangeCheck: 0})
#43: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 90, Step: 1, Hole: 0, RangeCheck: 0})
#47: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 1, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 1570, Step: 15, Hole: 6, RangeCheck: 1})
test::holes: OrderedHashMap({Const: 600, Step: 6, Hole: 4, RangeCheck: 0})
test::use_rc: OrderedHashMap({Const: 1070, Step: 10, Hole: 1, RangeCheck: 1})
test::two: OrderedHashMap({Const: 100, Step: 1, Hole: 0, RangeCheck: 0})

//! > gas_solution_linear
#5: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 250, Step: 2, Hole: 0, RangeCheck: 1})
#10: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 5, RangeCheck: 0})
#20: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 4, RangeCheck: 0})
#36: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 260, Step: 3, Hole: 0, RangeCheck: 0})
#43: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 90, Step: 1, Hole: 0, RangeCheck: 0})
#47: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 1, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 1570, Step: 15, Hole: 6, RangeCheck: 1})
test::holes: OrderedHashMap({Const: 600, Step: 6, Hole: 4, RangeCheck: 0})
test::use_rc: OrderedHashMap({Const: 1070, Step: 10, Hole: 1, RangeCheck: 1})
test::two: OrderedHashMap({Const: 100, Step: 1, Hole: 0, RangeCheck: 0})

//! > ap_solution_lp
#5: 2
#36: 4
#43: 1

test::holes: 5
test::foo: 12
test::use_rc: 8
test::two: 1

//! > ap_solution_linear
#5: 2
#36: 4
#43: 1

test::foo: 12
test::holes: 5
test::use_rc: 8
test::two: 1

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Const<u32, 2> = Const<u32, 2> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u32, 1> = Const<u32, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 5> = Const<felt252, 5> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 4> = Const<felt252, 4> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 3> = Const<felt252, 3> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 2> = Const<felt252, 2> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 1> = Const<felt252, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 0> = Const<felt252, 0> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<felt252, 0>> = const_as_immediate<Const<felt252, 0>>;
libfunc dup<felt252> = dup<felt252>;
libfunc felt252_sub = felt252_sub;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc function_call<user@test::holes> = function_call<user@test::holes>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc drop<felt252> = drop<felt252>;
libfunc function_call<user@test::use_rc> = function_call<user@test::use_rc>;
libfunc const_as_immediate<Const<felt252, 1>> = const_as_immediate<Const<felt252, 1>>;
libfunc const_as_immediate<Const<felt252, 2>> = const_as_immediate<Const<felt252, 2>>;
libfunc felt252_add = felt252_add;
libfunc const_as_immediate<Const<felt252, 3>> = const_as_immediate<Const<felt252, 3>>;
libfunc const_as_immediate<Const<felt252, 4>> = const_as_immediate<Const<felt252, 4>>;
libfunc const_as_immediate<Const<felt252, 5>> = const_as_immediate<Const<felt252, 5>>;
libfunc function_call<user@test::two> = function_call<user@test::two>;
libfunc const_as_immediate<Const<u32, 1>> = const_as_immediate<Const<u32, 1>>;
libfunc store_temp<u32> = store_temp<u32>;
libfunc u32_overflowing_sub = u32_overflowing_sub;
libfunc drop<u32> = drop<u32>;
libfunc const_as_immediate<Const<u32, 2>> = const_as_immediate<Const<u32, 2>>;

F0:
const_as_immediate<Const<felt252, 0>>() -> ([2]);
dup<felt252>([1]) -> ([1], [3]);
felt252_sub([3], [2]) -> ([4]);
store_temp<felt252>([4]) -> ([4]);
felt252_is_zero([4]) { fallthrough() F0_B0([5]) };
branch_align() -> ();
store_temp<felt252>([1]) -> ([1]);
function_call<user@test::holes>([1]) -> ();
store_temp<RangeCheck>([0]) -> ([0]);
return([0]);
F0_B0:
branch_align() -> ();
drop<NonZero<felt252>>([5]) -> ();
drop<felt252>([1]) -> ();
store_temp<RangeCheck>([0]) -> ([0]);
function_call<user@test::use_rc>([0]) -> ([6]);
return([6]);
F1:
const_as_immediate<Const<felt252, 0>>() -> ([1]);
felt252_sub([0], [1]) -> ([2]);
store_temp<felt252>([2]) -> ([2]);
felt252_is_zero([2]) { fallthrough() F1_B0([3]) };
branch_align() -> ();
const_as_immediate<Const<felt252, 1>>() -> ([4]);
const_as_immediate<Const<felt252, 2>>() -> ([5]);
store_temp<felt252>([4]) -> ([4]);
felt252_add([4], [5]) -> ([6]);
const_as_immediate<Const<felt252, 3>>() -> ([7]);
store_temp<felt252>([6]) -> ([6]);
felt252_add([6], [7]) -> ([8]);
const_as_immediate<Const<felt252, 4>>() -> ([9]);
store_temp<felt252>([8]) -> ([8]);
felt252_add([8], [9]) -> ([10]);
const_as_immediate<Const<felt252, 5>>() -> ([11]);
store_temp<felt252>([10]) -> ([10]);
felt252_add([10], [11]) -> ([12]);
drop<felt252>([12]) -> ();
return();
F1_B0:
branch_align() -> ();
drop<NonZero<felt252>>([3]) -> ();
return();
F2:
function_call<user@test::two>() -> ([1]);
const_as_immediate<Const<u32, 1>>() -> ([2]);
store_temp<u32>([2]) -> ([2]);
u32_overflowing_sub([0], [2], [1]) { fallthrough([3], [4]) F2_B0([5], [6]) };
branch_align() -> ();
drop<u32>([4]) -> ();
store_temp<RangeCheck>([3]) -> ([3]);
return([3]);
F2_B0:
branch_align() -> ();
drop<u32>([6]) -> ();
store_temp<RangeCheck>([5]) -> ([5]);
return([5]);
F3:
const_as_immediate<Const<u32, 2>>() -> ([0]);
store_temp<u32>([0]) -> ([0]);
return([0]);

test::foo@F0([0]: RangeCheck, [1]: felt252) -> (RangeCheck);
test::holes@F1([0]: felt252) -> ();
test::use_rc@F2([0]: RangeCheck) -> (RangeCheck);
test::two@F3() -> (u32);

//! > casm
[fp + -3] = [ap + 0] + 0, ap++;
jmp rel 9 if [ap + -1] != 0;
ap += 2;
[ap + 0] = [fp + -3], ap++;
call rel 8;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = [fp + -4], ap++;
call rel 19;
ret;
[fp + -3] = [ap + 0] + 0, ap++;
jmp rel 11 if [ap + -1] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 2, ap++;
[ap + 0] = [ap + -1] + 3, ap++;
[ap + 0] = [ap + -1] + 4, ap++;
ret;
ap += 4;
ret;
call rel 21;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -3] + 0];
jmp rel 8;
[ap + -1] = [[fp + -3] + 0];
ap += 1;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
[ap + 0] = 2, ap++;
ret;

//! > ==========================================================================

//! > branch_align values are pushed to the end

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo_code
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    // The branch_align of the external if statements should have zero value, since the value should
    // be pushed to the inner if statement.
    if x == 0 {
        if x == 1 {
            if x == 2 {
                bar();
            } else {
                bar();
            }
        } else {
            bar();
            bar();
        }
    } else {
        bar();
        bar();
        bar();
    }
}

#[inline(never)]
fn bar() {
    redeposit_gas()
}

//! > enforced_costs
test::bar 10000

//! > gas_solution_lp
#5: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9880, Step: 0, Hole: 0, RangeCheck: 0})
#11: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9880, Step: 0, Hole: 0, RangeCheck: 0})
#16: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#20: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#25: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 2, RangeCheck: 0})
#32: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 4, RangeCheck: 0})
#40: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 30900, Step: 12, Hole: 4, RangeCheck: 0})
test::bar: OrderedHashMap({Const: 10000, Step: 1, Hole: 0, RangeCheck: 0})

//! > gas_solution_linear
#5: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#11: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#16: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 19760, Step: 0, Hole: 0, RangeCheck: 0})
#20: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 19760, Step: 0, Hole: 0, RangeCheck: 0})
#25: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9880, Step: 0, Hole: 2, RangeCheck: 0})
#32: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 4, RangeCheck: 0})
#40: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 30900, Step: 12, Hole: 4, RangeCheck: 0})
test::bar: OrderedHashMap({Const: 10000, Step: 1, Hole: 0, RangeCheck: 0})

//! > ap_solution_lp
#5: 2
#11: 2

test::bar: 1
test::foo: 11

//! > ap_solution_linear
#5: 2
#11: 2

test::foo: 11
test::bar: 1

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type Const<felt252, 2> = Const<felt252, 2> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 1> = Const<felt252, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 0> = Const<felt252, 0> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<felt252, 0>> = const_as_immediate<Const<felt252, 0>>;
libfunc dup<felt252> = dup<felt252>;
libfunc felt252_sub = felt252_sub;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc const_as_immediate<Const<felt252, 1>> = const_as_immediate<Const<felt252, 1>>;
libfunc const_as_immediate<Const<felt252, 2>> = const_as_immediate<Const<felt252, 2>>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc drop<felt252> = drop<felt252>;
libfunc redeposit_gas = redeposit_gas;

F0:
const_as_immediate<Const<felt252, 0>>() -> ([2]);
dup<felt252>([1]) -> ([1], [3]);
felt252_sub([3], [2]) -> ([4]);
store_temp<felt252>([4]) -> ([4]);
felt252_is_zero([4]) { fallthrough() F0_B2([5]) };
branch_align() -> ();
const_as_immediate<Const<felt252, 1>>() -> ([6]);
dup<felt252>([1]) -> ([1], [7]);
felt252_sub([7], [6]) -> ([8]);
store_temp<felt252>([8]) -> ([8]);
felt252_is_zero([8]) { fallthrough() F0_B1([9]) };
branch_align() -> ();
const_as_immediate<Const<felt252, 2>>() -> ([10]);
felt252_sub([1], [10]) -> ([11]);
store_temp<felt252>([11]) -> ([11]);
felt252_is_zero([11]) { fallthrough() F0_B0([12]) };
branch_align() -> ();
store_temp<GasBuiltin>([0]) -> ([0]);
function_call<user@test::bar>([0]) -> ([13]);
return([13]);
F0_B0:
branch_align() -> ();
drop<NonZero<felt252>>([12]) -> ();
store_temp<GasBuiltin>([0]) -> ([0]);
function_call<user@test::bar>([0]) -> ([14]);
return([14]);
F0_B1:
branch_align() -> ();
drop<NonZero<felt252>>([9]) -> ();
drop<felt252>([1]) -> ();
store_temp<GasBuiltin>([0]) -> ([0]);
function_call<user@test::bar>([0]) -> ([15]);
function_call<user@test::bar>([15]) -> ([16]);
return([16]);
F0_B2:
branch_align() -> ();
drop<NonZero<felt252>>([5]) -> ();
drop<felt252>([1]) -> ();
store_temp<GasBuiltin>([0]) -> ([0]);
function_call<user@test::bar>([0]) -> ([17]);
function_call<user@test::bar>([17]) -> ([18]);
function_call<user@test::bar>([18]) -> ([19]);
return([19]);
F1:
redeposit_gas([0]) -> ([1]);
store_temp<GasBuiltin>([1]) -> ([1]);
return([1]);

test::foo@F0([0]: GasBuiltin, [1]: felt252) -> (GasBuiltin);
test::bar@F1([0]: GasBuiltin) -> (GasBuiltin);

//! > casm
[fp + -3] = [ap + 0] + 0, ap++;
jmp rel 28 if [ap + -1] != 0;
ap += 2;
[fp + -3] = [ap + 0] + 1, ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 2;
[fp + -3] = [ap + 0] + 2, ap++;
jmp rel 6 if [ap + -1] != 0;
[ap + 0] = [fp + -4], ap++;
call rel 21;
ret;
[ap + 0] = [fp + -4], ap++;
call rel 17;
ret;
[ap + 0] = [fp + -4], ap++;
call rel 13;
call rel 11;
ret;
[ap + 0] = [fp + -4], ap++;
call rel 7;
call rel 5;
call rel 3;
ret;
[ap + 0] = [fp + -3] + 9900, ap++;
ret;

//! > ==========================================================================

//! > branch_align of withdraw_gas

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo_code
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    // In this case, the failing branch is more expensive than the success branch.
    // The excess created by the external branch_align should be pushed to the next (inner)
    // statements.
    match gas::withdraw_gas() {
        Some(_) => {
            if x == 0 {
                // Here we don't need to withdraw gas, since we have excess created by the external
                // failing branch.
                match gas::withdraw_gas() {
                    Some(_) => { bar(); },
                    None(_) => {},
                }
            } else {
                bar();
            }
        },
        None(_) => {
            bar();
            bar();
        },
    }
}

#[inline(never)]
fn bar() {
    redeposit_gas()
}

//! > enforced_costs
test::bar 10000

//! > gas_solution_lp
#0: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 3, RangeCheck: 1})
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9740, Step: 0, Hole: 0, RangeCheck: 0})
#7: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#8: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 1, Hole: 0, RangeCheck: 0})
#9: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 4, RangeCheck: 0})
#15: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 10060, Step: 1, Hole: 0, RangeCheck: 0})
#19: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 250, Step: 1, Hole: 2, RangeCheck: 1})
#26: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#34: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 21280, Step: 14, Hole: 1, RangeCheck: 1})
test::bar: OrderedHashMap({Const: 10000, Step: 1, Hole: 0, RangeCheck: 0})

//! > gas_solution_linear
#0: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 3, RangeCheck: 1})
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#7: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#8: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 1, Hole: 0, RangeCheck: 0})
#9: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9740, Step: 0, Hole: 4, RangeCheck: 0})
#15: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 19800, Step: 1, Hole: 0, RangeCheck: 0})
#19: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9990, Step: 1, Hole: 2, RangeCheck: 1})
#26: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#34: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 21280, Step: 14, Hole: 1, RangeCheck: 1})
test::bar: OrderedHashMap({Const: 10000, Step: 1, Hole: 0, RangeCheck: 0})

//! > ap_solution_lp
#15: 4
#19: 2
#26: 1

test::bar: 1
test::foo: 12

//! > ap_solution_linear
#15: 4
#19: 2
#26: 1

test::foo: 12
test::bar: 1

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 0> = Const<felt252, 0> [storable: false, drop: false, dup: false, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];

libfunc withdraw_gas = withdraw_gas;
libfunc branch_align = branch_align;
libfunc const_as_immediate<Const<felt252, 0>> = const_as_immediate<Const<felt252, 0>>;
libfunc felt252_sub = felt252_sub;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc drop<felt252> = drop<felt252>;
libfunc redeposit_gas = redeposit_gas;

F0:
withdraw_gas([0], [1]) { fallthrough([3], [4]) F0_B2([5], [6]) };
branch_align() -> ();
const_as_immediate<Const<felt252, 0>>() -> ([7]);
felt252_sub([2], [7]) -> ([8]);
store_temp<felt252>([8]) -> ([8]);
store_temp<RangeCheck>([3]) -> ([3]);
felt252_is_zero([8]) { fallthrough() F0_B1([9]) };
branch_align() -> ();
withdraw_gas([3], [4]) { fallthrough([10], [11]) F0_B0([12], [13]) };
branch_align() -> ();
store_temp<GasBuiltin>([11]) -> ([11]);
function_call<user@test::bar>([11]) -> ([14]);
store_temp<RangeCheck>([10]) -> ([10]);
store_temp<GasBuiltin>([14]) -> ([14]);
return([10], [14]);
F0_B0:
branch_align() -> ();
store_temp<RangeCheck>([12]) -> ([12]);
store_temp<GasBuiltin>([13]) -> ([13]);
return([12], [13]);
F0_B1:
branch_align() -> ();
drop<NonZero<felt252>>([9]) -> ();
store_temp<GasBuiltin>([4]) -> ([4]);
function_call<user@test::bar>([4]) -> ([15]);
store_temp<RangeCheck>([3]) -> ([3]);
store_temp<GasBuiltin>([15]) -> ([15]);
return([3], [15]);
F0_B2:
branch_align() -> ();
drop<felt252>([2]) -> ();
store_temp<GasBuiltin>([6]) -> ([6]);
function_call<user@test::bar>([6]) -> ([16]);
function_call<user@test::bar>([16]) -> ([17]);
store_temp<RangeCheck>([5]) -> ([5]);
store_temp<GasBuiltin>([17]) -> ([17]);
return([5], [17]);
F1:
redeposit_gas([0]) -> ([1]);
store_temp<GasBuiltin>([1]) -> ([1]);
return([1]);

test::foo@F0([0]: RangeCheck, [1]: GasBuiltin, [2]: felt252) -> (RangeCheck, GasBuiltin);
test::bar@F1([0]: GasBuiltin) -> (GasBuiltin);

//! > casm
%{ memory[ap + 0] = 0 <= memory[fp + -4] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -4] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 42;
[fp + -4] = [ap + 0] + 0, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [ap + 0] + 0, ap++;
[ap + 0] = [fp + -5] + 1, ap++;
jmp rel 25 if [ap + -2] != 0;
%{ memory[ap + 0] = 0 <= memory[ap + -3] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -3] + 0];
jmp rel 12;
[ap + -4] = [ap + 0] + 0, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -1], ap++;
call rel 31;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
ret;
ap += 4;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
ret;
ap += 2;
[ap + 0] = [ap + -5], ap++;
call rel 16;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -2], ap++;
ret;
ap += 1;
[ap + 0] = [fp + -4], ap++;
call rel 8;
call rel 6;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
ret;
[ap + 0] = [fp + -3] + 9900, ap++;
ret;

//! > ==========================================================================

//! > withdraw_gas reduces excess

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo_code
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    if x == 0 {
        // Excess is created by the external `else` branch. Therefore, we don't need to withdraw
        // gas here.
        match gas::withdraw_gas() {
            Some(_) => {
                // Here we have used the excess and we need to withdraw gas.
                match gas::withdraw_gas() {
                    Some(_) => { bar(); },
                    None(_) => {},
                }
            },
            None(_) => {},
        }
    } else {
        bar();
    }
}

#[inline(never)]
fn bar() {
    redeposit_gas();
}

//! > enforced_costs
test::bar 2000

//! > gas_solution_lp
#4: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#5: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 3, Hole: 0, RangeCheck: 1})
#6: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#7: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 600, Step: 2, Hole: 0, RangeCheck: 0})
#8: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 6, RangeCheck: 0})
#14: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 1460, Step: 0, Hole: 2, RangeCheck: 0})
#18: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 1810, Step: 0, Hole: 0, RangeCheck: 0})
#22: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 2, RangeCheck: 1})
#29: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 1900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 2840, Step: 9, Hole: 6, RangeCheck: 1})
test::bar: OrderedHashMap({Const: 2000, Step: 1, Hole: 0, RangeCheck: 0})

//! > gas_solution_linear
#4: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#5: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 3, Hole: 0, RangeCheck: 1})
#6: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#7: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 600, Step: 2, Hole: 0, RangeCheck: 0})
#8: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 6, RangeCheck: 0})
#14: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 1460, Step: 0, Hole: 2, RangeCheck: 0})
#18: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 1810, Step: 0, Hole: 0, RangeCheck: 0})
#22: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 2, RangeCheck: 1})
#29: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 1900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 2840, Step: 9, Hole: 6, RangeCheck: 1})
test::bar: OrderedHashMap({Const: 2000, Step: 1, Hole: 0, RangeCheck: 0})

//! > ap_solution_lp
#14: 4
#18: 6
#22: 4

test::bar: 1
test::foo: 11

//! > ap_solution_linear
#14: 4
#18: 6
#22: 4

test::foo: 11
test::bar: 1

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 0> = Const<felt252, 0> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<felt252, 0>> = const_as_immediate<Const<felt252, 0>>;
libfunc felt252_sub = felt252_sub;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc withdraw_gas = withdraw_gas;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc redeposit_gas = redeposit_gas;

F0:
const_as_immediate<Const<felt252, 0>>() -> ([3]);
felt252_sub([2], [3]) -> ([4]);
store_temp<felt252>([4]) -> ([4]);
felt252_is_zero([4]) { fallthrough() F0_B2([5]) };
branch_align() -> ();
withdraw_gas([0], [1]) { fallthrough([6], [7]) F0_B1([8], [9]) };
branch_align() -> ();
withdraw_gas([6], [7]) { fallthrough([10], [11]) F0_B0([12], [13]) };
branch_align() -> ();
store_temp<GasBuiltin>([11]) -> ([11]);
function_call<user@test::bar>([11]) -> ([14]);
store_temp<RangeCheck>([10]) -> ([10]);
store_temp<GasBuiltin>([14]) -> ([14]);
return([10], [14]);
F0_B0:
branch_align() -> ();
store_temp<RangeCheck>([12]) -> ([12]);
store_temp<GasBuiltin>([13]) -> ([13]);
return([12], [13]);
F0_B1:
branch_align() -> ();
store_temp<RangeCheck>([8]) -> ([8]);
store_temp<GasBuiltin>([9]) -> ([9]);
return([8], [9]);
F0_B2:
branch_align() -> ();
drop<NonZero<felt252>>([5]) -> ();
store_temp<GasBuiltin>([1]) -> ([1]);
function_call<user@test::bar>([1]) -> ([15]);
store_temp<RangeCheck>([0]) -> ([0]);
store_temp<GasBuiltin>([15]) -> ([15]);
return([0], [15]);
F1:
redeposit_gas([0]) -> ([1]);
store_temp<GasBuiltin>([1]) -> ([1]);
return([1]);

test::foo@F0([0]: RangeCheck, [1]: GasBuiltin, [2]: felt252) -> (RangeCheck, GasBuiltin);
test::bar@F1([0]: GasBuiltin) -> (GasBuiltin);

//! > casm
[fp + -3] = [ap + 0] + 0, ap++;
jmp rel 41 if [ap + -1] != 0;
%{ memory[ap + 0] = 0 <= memory[fp + -4] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -4] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 28;
[fp + -4] = [ap + 0] + 0, ap++;
[ap + -1] = [[fp + -5] + 0];
%{ memory[ap + 0] = 600 <= memory[ap + -1] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768210856, ap++;
[ap + -1] = [[fp + -5] + 1];
jmp rel 12;
[ap + -2] = [ap + 0] + 600, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [ap + -1], ap++;
call rel 26;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
ret;
ap += 4;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 6;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
ret;
ap += 4;
[ap + 0] = [fp + -4], ap++;
call rel 5;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2], ap++;
ret;
[ap + 0] = [fp + -3] + 1900, ap++;
ret;

//! > ==========================================================================

//! > redeposit_gas libfunc

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo_code
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    if x == 0 {
        bar();
        bar();
        redeposit_gas();
        return ();
    } else {
        redeposit_gas();
        if x == 1 {
            bar();
        } else {
            redeposit_gas();
        }
        return ();
    }
}

#[inline(never)]
fn bar() {
    redeposit_gas();
}

//! > enforced_costs
test::bar 10000
test::foo 100000

//! > gas_solution_lp
#5: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#10: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 79200, Step: 0, Hole: 5, RangeCheck: 0})
#13: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#15: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 89080, Step: 0, Hole: 0, RangeCheck: 0})
#21: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 3, RangeCheck: 0})
#25: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#27: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 10070, Step: 2, Hole: 0, RangeCheck: 0})
#30: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 100000, Step: 10, Hole: 5, RangeCheck: 0})
test::bar: OrderedHashMap({Const: 10000, Step: 1, Hole: 0, RangeCheck: 0})

//! > gas_solution_linear
#5: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#10: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 79200, Step: 0, Hole: 5, RangeCheck: 0})
#13: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#15: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 89080, Step: 0, Hole: 0, RangeCheck: 0})
#21: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 3, RangeCheck: 0})
#25: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#27: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 10070, Step: 2, Hole: 0, RangeCheck: 0})
#30: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 100000, Step: 10, Hole: 5, RangeCheck: 0})
test::bar: OrderedHashMap({Const: 10000, Step: 1, Hole: 0, RangeCheck: 0})

//! > ap_solution_lp
#13: 2
#25: 3

test::bar: 1
test::foo: 9

//! > ap_solution_linear
#13: 2
#25: 3

test::foo: 9
test::bar: 1

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Const<felt252, 1> = Const<felt252, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 0> = Const<felt252, 0> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<felt252, 0>> = const_as_immediate<Const<felt252, 0>>;
libfunc dup<felt252> = dup<felt252>;
libfunc felt252_sub = felt252_sub;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc drop<felt252> = drop<felt252>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc redeposit_gas = redeposit_gas;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc const_as_immediate<Const<felt252, 1>> = const_as_immediate<Const<felt252, 1>>;

F0:
const_as_immediate<Const<felt252, 0>>() -> ([2]);
dup<felt252>([1]) -> ([1], [3]);
felt252_sub([3], [2]) -> ([4]);
store_temp<felt252>([4]) -> ([4]);
felt252_is_zero([4]) { fallthrough() F0_B0([5]) };
branch_align() -> ();
drop<felt252>([1]) -> ();
store_temp<GasBuiltin>([0]) -> ([0]);
function_call<user@test::bar>([0]) -> ([6]);
function_call<user@test::bar>([6]) -> ([7]);
redeposit_gas([7]) -> ([8]);
store_temp<GasBuiltin>([8]) -> ([8]);
return([8]);
F0_B0:
branch_align() -> ();
drop<NonZero<felt252>>([5]) -> ();
redeposit_gas([0]) -> ([9]);
const_as_immediate<Const<felt252, 1>>() -> ([10]);
felt252_sub([1], [10]) -> ([11]);
store_temp<felt252>([11]) -> ([11]);
store_temp<GasBuiltin>([9]) -> ([9]);
felt252_is_zero([11]) { fallthrough() F0_B1([12]) };
branch_align() -> ();
store_temp<GasBuiltin>([9]) -> ([9]);
function_call<user@test::bar>([9]) -> ([13]);
return([13]);
F0_B1:
branch_align() -> ();
drop<NonZero<felt252>>([12]) -> ();
redeposit_gas([9]) -> ([14]);
store_temp<GasBuiltin>([14]) -> ([14]);
return([14]);
F1:
redeposit_gas([0]) -> ([1]);
store_temp<GasBuiltin>([1]) -> ([1]);
return([1]);

test::foo@F0([0]: GasBuiltin, [1]: felt252) -> (GasBuiltin);
test::bar@F1([0]: GasBuiltin) -> (GasBuiltin);

//! > casm
[fp + -3] = [ap + 0] + 0, ap++;
jmp rel 10 if [ap + -1] != 0;
[ap + 0] = [fp + -4], ap++;
call rel 24;
call rel 22;
[ap + 0] = [ap + -1] + 79200, ap++;
ret;
ap += 2;
[fp + -3] = [ap + 0] + 1, ap++;
[ap + 0] = [fp + -4] + 89080, ap++;
jmp rel 6 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
call rel 8;
ret;
ap += 3;
[ap + 0] = [ap + -4] + 10070, ap++;
ret;
[ap + 0] = [fp + -3] + 9900, ap++;
ret;

//! > ==========================================================================

//! > Precost gas mismatch.

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo_code
fn foo() -> u128 {
    match core::gas::withdraw_gas() {
        None => 2,
        Some(_) => 3_u128 & 1,
    }
}

//! > gas_solution_lp
#0: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 180, Step: 2, Hole: 0, RangeCheck: 0})
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 2, RangeCheck: 0})
#14: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 1, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Bitwise: 1, Const: 990, Step: 9, Hole: 2, RangeCheck: 1})

//! > gas_solution_linear
#0: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 1, EcOp: 0, AddMod: 0, MulMod: 0, Const: 90, Step: 1, Hole: 0, RangeCheck: 0})
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 1, RangeCheck: 0})
#14: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 1680, Step: 16, Hole: 1, RangeCheck: 1})

//! > ap_solution_lp
#14: 2

test::foo: 8

//! > ap_solution_linear
#14: 1

test::foo: 14

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Const<u128, 2> = Const<u128, 2> [storable: false, drop: false, dup: false, zero_sized: false];
type Bitwise = Bitwise [storable: true, drop: false, dup: false, zero_sized: false];
type Const<u128, 1> = Const<u128, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 3> = Const<u128, 3> [storable: false, drop: false, dup: false, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];

libfunc withdraw_gas = withdraw_gas;
libfunc branch_align = branch_align;
libfunc const_as_immediate<Const<u128, 3>> = const_as_immediate<Const<u128, 3>>;
libfunc const_as_immediate<Const<u128, 1>> = const_as_immediate<Const<u128, 1>>;
libfunc store_temp<u128> = store_temp<u128>;
libfunc bitwise = bitwise;
libfunc drop<u128> = drop<u128>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<Bitwise> = store_temp<Bitwise>;
libfunc const_as_immediate<Const<u128, 2>> = const_as_immediate<Const<u128, 2>>;

F0:
withdraw_gas([0], [1]) { fallthrough([3], [4]) F0_B0([5], [6]) };
branch_align() -> ();
const_as_immediate<Const<u128, 3>>() -> ([7]);
const_as_immediate<Const<u128, 1>>() -> ([8]);
store_temp<u128>([7]) -> ([7]);
store_temp<u128>([8]) -> ([8]);
bitwise([2], [7], [8]) -> ([9], [10], [11], [12]);
drop<u128>([11]) -> ();
drop<u128>([12]) -> ();
store_temp<RangeCheck>([3]) -> ([3]);
store_temp<GasBuiltin>([4]) -> ([4]);
store_temp<Bitwise>([9]) -> ([9]);
store_temp<u128>([10]) -> ([10]);
return([3], [4], [9], [10]);
F0_B0:
branch_align() -> ();
const_as_immediate<Const<u128, 2>>() -> ([13]);
store_temp<RangeCheck>([5]) -> ([5]);
store_temp<GasBuiltin>([6]) -> ([6]);
store_temp<Bitwise>([2]) -> ([2]);
store_temp<u128>([13]) -> ([13]);
return([5], [6], [2], [13]);

test::foo@F0([0]: RangeCheck, [1]: GasBuiltin, [2]: Bitwise) -> (RangeCheck, GasBuiltin, Bitwise, u128);

//! > casm
call rel 40;
[ap + 0] = [ap + -1] + 39, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 90, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -4] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 17;
[fp + -4] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + -2] = [[fp + -3] + 0];
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + 5, ap++;
[ap + 0] = [[fp + -3] + 2], ap++;
ret;
ap += 1;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 2, ap++;
ret;

//! > ==========================================================================

//! > Function non-const redeposit.

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo_code
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    if x == 0 {
        bar();
        bar();
        bar();
        return ();
    } else {
        redeposit_gas();
        return ();
    }
}

#[inline(never)]
fn bar() {
    1 & 2_u128;
}

//! > gas_solution_lp
#4: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 9, RangeCheck: 0})
#12: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#14: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 3, EcOp: 0, AddMod: 0, MulMod: 0, Const: 1310, Step: 14, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Bitwise: 3, Const: 2600, Step: 26, Hole: 9, RangeCheck: 0})
test::bar: OrderedHashMap({Bitwise: 1, Const: 500, Step: 5, Hole: 0, RangeCheck: 0})

//! > gas_solution_linear
#4: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 9, RangeCheck: 0})
#12: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#14: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 3, EcOp: 0, AddMod: 0, MulMod: 0, Const: 1310, Step: 14, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Bitwise: 3, Const: 2600, Step: 26, Hole: 9, RangeCheck: 0})
test::bar: OrderedHashMap({Bitwise: 1, Const: 500, Step: 5, Hole: 0, RangeCheck: 0})

//! > ap_solution_lp
#12: 9

test::bar: 3
test::foo: 19

//! > ap_solution_linear
#12: 9

test::foo: 19
test::bar: 3

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Const<u128, 2> = Const<u128, 2> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 1> = Const<u128, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type Bitwise = Bitwise [storable: true, drop: false, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 0> = Const<felt252, 0> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<felt252, 0>> = const_as_immediate<Const<felt252, 0>>;
libfunc felt252_sub = felt252_sub;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc store_temp<Bitwise> = store_temp<Bitwise>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc redeposit_gas = redeposit_gas;
libfunc const_as_immediate<Const<u128, 1>> = const_as_immediate<Const<u128, 1>>;
libfunc const_as_immediate<Const<u128, 2>> = const_as_immediate<Const<u128, 2>>;
libfunc store_temp<u128> = store_temp<u128>;
libfunc bitwise = bitwise;
libfunc drop<u128> = drop<u128>;

F0:
const_as_immediate<Const<felt252, 0>>() -> ([3]);
felt252_sub([2], [3]) -> ([4]);
store_temp<felt252>([4]) -> ([4]);
felt252_is_zero([4]) { fallthrough() F0_B0([5]) };
branch_align() -> ();
store_temp<Bitwise>([1]) -> ([1]);
function_call<user@test::bar>([1]) -> ([6]);
function_call<user@test::bar>([6]) -> ([7]);
function_call<user@test::bar>([7]) -> ([8]);
store_temp<GasBuiltin>([0]) -> ([0]);
store_temp<Bitwise>([8]) -> ([8]);
return([0], [8]);
F0_B0:
branch_align() -> ();
drop<NonZero<felt252>>([5]) -> ();
redeposit_gas([0]) -> ([9]);
store_temp<GasBuiltin>([9]) -> ([9]);
store_temp<Bitwise>([1]) -> ([1]);
return([9], [1]);
F1:
const_as_immediate<Const<u128, 1>>() -> ([1]);
const_as_immediate<Const<u128, 2>>() -> ([2]);
store_temp<u128>([1]) -> ([1]);
store_temp<u128>([2]) -> ([2]);
bitwise([0], [1], [2]) -> ([3], [4], [5], [6]);
drop<u128>([4]) -> ();
drop<u128>([5]) -> ();
drop<u128>([6]) -> ();
store_temp<Bitwise>([3]) -> ([3]);
return([3]);

test::foo@F0([0]: GasBuiltin, [1]: Bitwise, [2]: felt252) -> (GasBuiltin, Bitwise);
test::bar@F1([0]: Bitwise) -> (Bitwise);

//! > casm
[fp + -3] = [ap + 0] + 0, ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [fp + -4], ap++;
call rel 24;
call rel 22;
call rel 20;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2], ap++;
ret;
ap += 9;
call rel 22;
[ap + 0] = [ap + -1] + 21, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 1310, ap++;
[ap + 0] = [fp + -5] + [ap + -1], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = 1, ap++;
[ap + 0] = 2, ap++;
[ap + -2] = [[fp + -3] + 0];
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -3] + 5, ap++;
ret;

//! > ==========================================================================

//! > Function overuse ap-changes.

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo_code
#[inline(never)]
fn function_with_branch_align(cond: bool) -> felt252 {
    if cond {
        1
    } else {
        2
    }
}

fn foo(cond: bool) {
    if cond {
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    } else {
        function_with_branch_align(false);
        function_with_branch_align(false);
        function_with_branch_align(false);
    }
}

//! > gas_solution_lp
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#6: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#12: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 10470, Step: 117, Hole: 0, RangeCheck: 0})
#30: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 123, RangeCheck: 0})

test::function_with_branch_align: OrderedHashMap({Const: 710, Step: 3, Hole: 41, RangeCheck: 0})
test::foo: OrderedHashMap({Const: 13600, Step: 136, Hole: 123, RangeCheck: 0})

//! > gas_solution_linear
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#6: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#12: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 10670, Step: 119, Hole: 0, RangeCheck: 0})
#30: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 123, RangeCheck: 0})

test::function_with_branch_align: OrderedHashMap({Const: 200, Step: 2, Hole: 0, RangeCheck: 0})
test::foo: OrderedHashMap({Const: 13600, Step: 136, Hole: 123, RangeCheck: 0})

//! > ap_solution_lp
#1: 41
#6: 41

test::function_with_branch_align: 42
test::foo: 135

//! > ap_solution_linear
#12: 123

test::function_with_branch_align: 1
test::foo: 135

//! > sierra_code
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::bool = Enum<ut@core::bool, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 1> = Const<felt252, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 2> = Const<felt252, 2> [storable: false, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc enum_match<core::bool> = enum_match<core::bool>;
libfunc branch_align = branch_align;
libfunc drop<Unit> = drop<Unit>;
libfunc const_as_immediate<Const<felt252, 2>> = const_as_immediate<Const<felt252, 2>>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc const_as_immediate<Const<felt252, 1>> = const_as_immediate<Const<felt252, 1>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc function_call<user@test::function_with_branch_align> = function_call<user@test::function_with_branch_align>;
libfunc drop<felt252> = drop<felt252>;
libfunc felt252_add = felt252_add;

F0:
enum_match<core::bool>([0]) { fallthrough([1]) F0_B0([2]) };
branch_align() -> ();
drop<Unit>([1]) -> ();
const_as_immediate<Const<felt252, 2>>() -> ([3]);
store_temp<felt252>([3]) -> ([3]);
return([3]);
F0_B0:
branch_align() -> ();
drop<Unit>([2]) -> ();
const_as_immediate<Const<felt252, 1>>() -> ([4]);
store_temp<felt252>([4]) -> ([4]);
return([4]);
F1:
enum_match<core::bool>([0]) { fallthrough([1]) F1_B0([2]) };
branch_align() -> ();
drop<Unit>([1]) -> ();
struct_construct<Unit>() -> ([3]);
enum_init<core::bool, 0>([3]) -> ([4]);
store_temp<core::bool>([4]) -> ([4]);
function_call<user@test::function_with_branch_align>([4]) -> ([5]);
drop<felt252>([5]) -> ();
struct_construct<Unit>() -> ([6]);
enum_init<core::bool, 0>([6]) -> ([7]);
store_temp<core::bool>([7]) -> ([7]);
function_call<user@test::function_with_branch_align>([7]) -> ([8]);
drop<felt252>([8]) -> ();
struct_construct<Unit>() -> ([9]);
enum_init<core::bool, 0>([9]) -> ([10]);
store_temp<core::bool>([10]) -> ([10]);
function_call<user@test::function_with_branch_align>([10]) -> ([11]);
drop<felt252>([11]) -> ();
return();
F1_B0:
branch_align() -> ();
drop<Unit>([2]) -> ();
const_as_immediate<Const<felt252, 1>>() -> ([12]);
const_as_immediate<Const<felt252, 1>>() -> ([13]);
store_temp<felt252>([12]) -> ([12]);
felt252_add([12], [13]) -> ([14]);
const_as_immediate<Const<felt252, 1>>() -> ([15]);
store_temp<felt252>([14]) -> ([14]);
felt252_add([14], [15]) -> ([16]);
const_as_immediate<Const<felt252, 1>>() -> ([17]);
store_temp<felt252>([16]) -> ([16]);
felt252_add([16], [17]) -> ([18]);
const_as_immediate<Const<felt252, 1>>() -> ([19]);
store_temp<felt252>([18]) -> ([18]);
felt252_add([18], [19]) -> ([20]);
const_as_immediate<Const<felt252, 1>>() -> ([21]);
store_temp<felt252>([20]) -> ([20]);
felt252_add([20], [21]) -> ([22]);
const_as_immediate<Const<felt252, 1>>() -> ([23]);
store_temp<felt252>([22]) -> ([22]);
felt252_add([22], [23]) -> ([24]);
const_as_immediate<Const<felt252, 1>>() -> ([25]);
store_temp<felt252>([24]) -> ([24]);
felt252_add([24], [25]) -> ([26]);
const_as_immediate<Const<felt252, 1>>() -> ([27]);
store_temp<felt252>([26]) -> ([26]);
felt252_add([26], [27]) -> ([28]);
const_as_immediate<Const<felt252, 1>>() -> ([29]);
store_temp<felt252>([28]) -> ([28]);
felt252_add([28], [29]) -> ([30]);
const_as_immediate<Const<felt252, 1>>() -> ([31]);
store_temp<felt252>([30]) -> ([30]);
felt252_add([30], [31]) -> ([32]);
const_as_immediate<Const<felt252, 1>>() -> ([33]);
store_temp<felt252>([32]) -> ([32]);
felt252_add([32], [33]) -> ([34]);
const_as_immediate<Const<felt252, 1>>() -> ([35]);
store_temp<felt252>([34]) -> ([34]);
felt252_add([34], [35]) -> ([36]);
const_as_immediate<Const<felt252, 1>>() -> ([37]);
store_temp<felt252>([36]) -> ([36]);
felt252_add([36], [37]) -> ([38]);
const_as_immediate<Const<felt252, 1>>() -> ([39]);
store_temp<felt252>([38]) -> ([38]);
felt252_add([38], [39]) -> ([40]);
const_as_immediate<Const<felt252, 1>>() -> ([41]);
store_temp<felt252>([40]) -> ([40]);
felt252_add([40], [41]) -> ([42]);
drop<felt252>([42]) -> ();
const_as_immediate<Const<felt252, 1>>() -> ([43]);
const_as_immediate<Const<felt252, 1>>() -> ([44]);
store_temp<felt252>([43]) -> ([43]);
felt252_add([43], [44]) -> ([45]);
const_as_immediate<Const<felt252, 1>>() -> ([46]);
store_temp<felt252>([45]) -> ([45]);
felt252_add([45], [46]) -> ([47]);
const_as_immediate<Const<felt252, 1>>() -> ([48]);
store_temp<felt252>([47]) -> ([47]);
felt252_add([47], [48]) -> ([49]);
const_as_immediate<Const<felt252, 1>>() -> ([50]);
store_temp<felt252>([49]) -> ([49]);
felt252_add([49], [50]) -> ([51]);
const_as_immediate<Const<felt252, 1>>() -> ([52]);
store_temp<felt252>([51]) -> ([51]);
felt252_add([51], [52]) -> ([53]);
const_as_immediate<Const<felt252, 1>>() -> ([54]);
store_temp<felt252>([53]) -> ([53]);
felt252_add([53], [54]) -> ([55]);
const_as_immediate<Const<felt252, 1>>() -> ([56]);
store_temp<felt252>([55]) -> ([55]);
felt252_add([55], [56]) -> ([57]);
const_as_immediate<Const<felt252, 1>>() -> ([58]);
store_temp<felt252>([57]) -> ([57]);
felt252_add([57], [58]) -> ([59]);
const_as_immediate<Const<felt252, 1>>() -> ([60]);
store_temp<felt252>([59]) -> ([59]);
felt252_add([59], [60]) -> ([61]);
const_as_immediate<Const<felt252, 1>>() -> ([62]);
store_temp<felt252>([61]) -> ([61]);
felt252_add([61], [62]) -> ([63]);
const_as_immediate<Const<felt252, 1>>() -> ([64]);
store_temp<felt252>([63]) -> ([63]);
felt252_add([63], [64]) -> ([65]);
const_as_immediate<Const<felt252, 1>>() -> ([66]);
store_temp<felt252>([65]) -> ([65]);
felt252_add([65], [66]) -> ([67]);
const_as_immediate<Const<felt252, 1>>() -> ([68]);
store_temp<felt252>([67]) -> ([67]);
felt252_add([67], [68]) -> ([69]);
const_as_immediate<Const<felt252, 1>>() -> ([70]);
store_temp<felt252>([69]) -> ([69]);
felt252_add([69], [70]) -> ([71]);
const_as_immediate<Const<felt252, 1>>() -> ([72]);
store_temp<felt252>([71]) -> ([71]);
felt252_add([71], [72]) -> ([73]);
drop<felt252>([73]) -> ();
const_as_immediate<Const<felt252, 1>>() -> ([74]);
const_as_immediate<Const<felt252, 1>>() -> ([75]);
store_temp<felt252>([74]) -> ([74]);
felt252_add([74], [75]) -> ([76]);
const_as_immediate<Const<felt252, 1>>() -> ([77]);
store_temp<felt252>([76]) -> ([76]);
felt252_add([76], [77]) -> ([78]);
const_as_immediate<Const<felt252, 1>>() -> ([79]);
store_temp<felt252>([78]) -> ([78]);
felt252_add([78], [79]) -> ([80]);
const_as_immediate<Const<felt252, 1>>() -> ([81]);
store_temp<felt252>([80]) -> ([80]);
felt252_add([80], [81]) -> ([82]);
const_as_immediate<Const<felt252, 1>>() -> ([83]);
store_temp<felt252>([82]) -> ([82]);
felt252_add([82], [83]) -> ([84]);
const_as_immediate<Const<felt252, 1>>() -> ([85]);
store_temp<felt252>([84]) -> ([84]);
felt252_add([84], [85]) -> ([86]);
const_as_immediate<Const<felt252, 1>>() -> ([87]);
store_temp<felt252>([86]) -> ([86]);
felt252_add([86], [87]) -> ([88]);
const_as_immediate<Const<felt252, 1>>() -> ([89]);
store_temp<felt252>([88]) -> ([88]);
felt252_add([88], [89]) -> ([90]);
const_as_immediate<Const<felt252, 1>>() -> ([91]);
store_temp<felt252>([90]) -> ([90]);
felt252_add([90], [91]) -> ([92]);
const_as_immediate<Const<felt252, 1>>() -> ([93]);
store_temp<felt252>([92]) -> ([92]);
felt252_add([92], [93]) -> ([94]);
const_as_immediate<Const<felt252, 1>>() -> ([95]);
store_temp<felt252>([94]) -> ([94]);
felt252_add([94], [95]) -> ([96]);
const_as_immediate<Const<felt252, 1>>() -> ([97]);
store_temp<felt252>([96]) -> ([96]);
felt252_add([96], [97]) -> ([98]);
const_as_immediate<Const<felt252, 1>>() -> ([99]);
store_temp<felt252>([98]) -> ([98]);
felt252_add([98], [99]) -> ([100]);
const_as_immediate<Const<felt252, 1>>() -> ([101]);
store_temp<felt252>([100]) -> ([100]);
felt252_add([100], [101]) -> ([102]);
const_as_immediate<Const<felt252, 1>>() -> ([103]);
store_temp<felt252>([102]) -> ([102]);
felt252_add([102], [103]) -> ([104]);
drop<felt252>([104]) -> ();
const_as_immediate<Const<felt252, 1>>() -> ([105]);
const_as_immediate<Const<felt252, 1>>() -> ([106]);
store_temp<felt252>([105]) -> ([105]);
felt252_add([105], [106]) -> ([107]);
const_as_immediate<Const<felt252, 1>>() -> ([108]);
store_temp<felt252>([107]) -> ([107]);
felt252_add([107], [108]) -> ([109]);
const_as_immediate<Const<felt252, 1>>() -> ([110]);
store_temp<felt252>([109]) -> ([109]);
felt252_add([109], [110]) -> ([111]);
const_as_immediate<Const<felt252, 1>>() -> ([112]);
store_temp<felt252>([111]) -> ([111]);
felt252_add([111], [112]) -> ([113]);
const_as_immediate<Const<felt252, 1>>() -> ([114]);
store_temp<felt252>([113]) -> ([113]);
felt252_add([113], [114]) -> ([115]);
const_as_immediate<Const<felt252, 1>>() -> ([116]);
store_temp<felt252>([115]) -> ([115]);
felt252_add([115], [116]) -> ([117]);
const_as_immediate<Const<felt252, 1>>() -> ([118]);
store_temp<felt252>([117]) -> ([117]);
felt252_add([117], [118]) -> ([119]);
const_as_immediate<Const<felt252, 1>>() -> ([120]);
store_temp<felt252>([119]) -> ([119]);
felt252_add([119], [120]) -> ([121]);
const_as_immediate<Const<felt252, 1>>() -> ([122]);
store_temp<felt252>([121]) -> ([121]);
felt252_add([121], [122]) -> ([123]);
const_as_immediate<Const<felt252, 1>>() -> ([124]);
store_temp<felt252>([123]) -> ([123]);
felt252_add([123], [124]) -> ([125]);
const_as_immediate<Const<felt252, 1>>() -> ([126]);
store_temp<felt252>([125]) -> ([125]);
felt252_add([125], [126]) -> ([127]);
const_as_immediate<Const<felt252, 1>>() -> ([128]);
store_temp<felt252>([127]) -> ([127]);
felt252_add([127], [128]) -> ([129]);
const_as_immediate<Const<felt252, 1>>() -> ([130]);
store_temp<felt252>([129]) -> ([129]);
felt252_add([129], [130]) -> ([131]);
const_as_immediate<Const<felt252, 1>>() -> ([132]);
store_temp<felt252>([131]) -> ([131]);
felt252_add([131], [132]) -> ([133]);
const_as_immediate<Const<felt252, 1>>() -> ([134]);
store_temp<felt252>([133]) -> ([133]);
felt252_add([133], [134]) -> ([135]);
drop<felt252>([135]) -> ();
const_as_immediate<Const<felt252, 1>>() -> ([136]);
const_as_immediate<Const<felt252, 1>>() -> ([137]);
store_temp<felt252>([136]) -> ([136]);
felt252_add([136], [137]) -> ([138]);
const_as_immediate<Const<felt252, 1>>() -> ([139]);
store_temp<felt252>([138]) -> ([138]);
felt252_add([138], [139]) -> ([140]);
const_as_immediate<Const<felt252, 1>>() -> ([141]);
store_temp<felt252>([140]) -> ([140]);
felt252_add([140], [141]) -> ([142]);
const_as_immediate<Const<felt252, 1>>() -> ([143]);
store_temp<felt252>([142]) -> ([142]);
felt252_add([142], [143]) -> ([144]);
const_as_immediate<Const<felt252, 1>>() -> ([145]);
store_temp<felt252>([144]) -> ([144]);
felt252_add([144], [145]) -> ([146]);
const_as_immediate<Const<felt252, 1>>() -> ([147]);
store_temp<felt252>([146]) -> ([146]);
felt252_add([146], [147]) -> ([148]);
const_as_immediate<Const<felt252, 1>>() -> ([149]);
store_temp<felt252>([148]) -> ([148]);
felt252_add([148], [149]) -> ([150]);
const_as_immediate<Const<felt252, 1>>() -> ([151]);
store_temp<felt252>([150]) -> ([150]);
felt252_add([150], [151]) -> ([152]);
const_as_immediate<Const<felt252, 1>>() -> ([153]);
store_temp<felt252>([152]) -> ([152]);
felt252_add([152], [153]) -> ([154]);
const_as_immediate<Const<felt252, 1>>() -> ([155]);
store_temp<felt252>([154]) -> ([154]);
felt252_add([154], [155]) -> ([156]);
const_as_immediate<Const<felt252, 1>>() -> ([157]);
store_temp<felt252>([156]) -> ([156]);
felt252_add([156], [157]) -> ([158]);
const_as_immediate<Const<felt252, 1>>() -> ([159]);
store_temp<felt252>([158]) -> ([158]);
felt252_add([158], [159]) -> ([160]);
const_as_immediate<Const<felt252, 1>>() -> ([161]);
store_temp<felt252>([160]) -> ([160]);
felt252_add([160], [161]) -> ([162]);
const_as_immediate<Const<felt252, 1>>() -> ([163]);
store_temp<felt252>([162]) -> ([162]);
felt252_add([162], [163]) -> ([164]);
const_as_immediate<Const<felt252, 1>>() -> ([165]);
store_temp<felt252>([164]) -> ([164]);
felt252_add([164], [165]) -> ([166]);
drop<felt252>([166]) -> ();
const_as_immediate<Const<felt252, 1>>() -> ([167]);
const_as_immediate<Const<felt252, 1>>() -> ([168]);
store_temp<felt252>([167]) -> ([167]);
felt252_add([167], [168]) -> ([169]);
const_as_immediate<Const<felt252, 1>>() -> ([170]);
store_temp<felt252>([169]) -> ([169]);
felt252_add([169], [170]) -> ([171]);
const_as_immediate<Const<felt252, 1>>() -> ([172]);
store_temp<felt252>([171]) -> ([171]);
felt252_add([171], [172]) -> ([173]);
const_as_immediate<Const<felt252, 1>>() -> ([174]);
store_temp<felt252>([173]) -> ([173]);
felt252_add([173], [174]) -> ([175]);
const_as_immediate<Const<felt252, 1>>() -> ([176]);
store_temp<felt252>([175]) -> ([175]);
felt252_add([175], [176]) -> ([177]);
const_as_immediate<Const<felt252, 1>>() -> ([178]);
store_temp<felt252>([177]) -> ([177]);
felt252_add([177], [178]) -> ([179]);
const_as_immediate<Const<felt252, 1>>() -> ([180]);
store_temp<felt252>([179]) -> ([179]);
felt252_add([179], [180]) -> ([181]);
const_as_immediate<Const<felt252, 1>>() -> ([182]);
store_temp<felt252>([181]) -> ([181]);
felt252_add([181], [182]) -> ([183]);
const_as_immediate<Const<felt252, 1>>() -> ([184]);
store_temp<felt252>([183]) -> ([183]);
felt252_add([183], [184]) -> ([185]);
const_as_immediate<Const<felt252, 1>>() -> ([186]);
store_temp<felt252>([185]) -> ([185]);
felt252_add([185], [186]) -> ([187]);
const_as_immediate<Const<felt252, 1>>() -> ([188]);
store_temp<felt252>([187]) -> ([187]);
felt252_add([187], [188]) -> ([189]);
const_as_immediate<Const<felt252, 1>>() -> ([190]);
store_temp<felt252>([189]) -> ([189]);
felt252_add([189], [190]) -> ([191]);
const_as_immediate<Const<felt252, 1>>() -> ([192]);
store_temp<felt252>([191]) -> ([191]);
felt252_add([191], [192]) -> ([193]);
const_as_immediate<Const<felt252, 1>>() -> ([194]);
store_temp<felt252>([193]) -> ([193]);
felt252_add([193], [194]) -> ([195]);
const_as_immediate<Const<felt252, 1>>() -> ([196]);
store_temp<felt252>([195]) -> ([195]);
felt252_add([195], [196]) -> ([197]);
drop<felt252>([197]) -> ();
const_as_immediate<Const<felt252, 1>>() -> ([198]);
const_as_immediate<Const<felt252, 1>>() -> ([199]);
store_temp<felt252>([198]) -> ([198]);
felt252_add([198], [199]) -> ([200]);
const_as_immediate<Const<felt252, 1>>() -> ([201]);
store_temp<felt252>([200]) -> ([200]);
felt252_add([200], [201]) -> ([202]);
const_as_immediate<Const<felt252, 1>>() -> ([203]);
store_temp<felt252>([202]) -> ([202]);
felt252_add([202], [203]) -> ([204]);
const_as_immediate<Const<felt252, 1>>() -> ([205]);
store_temp<felt252>([204]) -> ([204]);
felt252_add([204], [205]) -> ([206]);
const_as_immediate<Const<felt252, 1>>() -> ([207]);
store_temp<felt252>([206]) -> ([206]);
felt252_add([206], [207]) -> ([208]);
const_as_immediate<Const<felt252, 1>>() -> ([209]);
store_temp<felt252>([208]) -> ([208]);
felt252_add([208], [209]) -> ([210]);
const_as_immediate<Const<felt252, 1>>() -> ([211]);
store_temp<felt252>([210]) -> ([210]);
felt252_add([210], [211]) -> ([212]);
const_as_immediate<Const<felt252, 1>>() -> ([213]);
store_temp<felt252>([212]) -> ([212]);
felt252_add([212], [213]) -> ([214]);
const_as_immediate<Const<felt252, 1>>() -> ([215]);
store_temp<felt252>([214]) -> ([214]);
felt252_add([214], [215]) -> ([216]);
const_as_immediate<Const<felt252, 1>>() -> ([217]);
store_temp<felt252>([216]) -> ([216]);
felt252_add([216], [217]) -> ([218]);
const_as_immediate<Const<felt252, 1>>() -> ([219]);
store_temp<felt252>([218]) -> ([218]);
felt252_add([218], [219]) -> ([220]);
const_as_immediate<Const<felt252, 1>>() -> ([221]);
store_temp<felt252>([220]) -> ([220]);
felt252_add([220], [221]) -> ([222]);
const_as_immediate<Const<felt252, 1>>() -> ([223]);
store_temp<felt252>([222]) -> ([222]);
felt252_add([222], [223]) -> ([224]);
const_as_immediate<Const<felt252, 1>>() -> ([225]);
store_temp<felt252>([224]) -> ([224]);
felt252_add([224], [225]) -> ([226]);
const_as_immediate<Const<felt252, 1>>() -> ([227]);
store_temp<felt252>([226]) -> ([226]);
felt252_add([226], [227]) -> ([228]);
drop<felt252>([228]) -> ();
const_as_immediate<Const<felt252, 1>>() -> ([229]);
const_as_immediate<Const<felt252, 1>>() -> ([230]);
store_temp<felt252>([229]) -> ([229]);
felt252_add([229], [230]) -> ([231]);
const_as_immediate<Const<felt252, 1>>() -> ([232]);
store_temp<felt252>([231]) -> ([231]);
felt252_add([231], [232]) -> ([233]);
const_as_immediate<Const<felt252, 1>>() -> ([234]);
store_temp<felt252>([233]) -> ([233]);
felt252_add([233], [234]) -> ([235]);
const_as_immediate<Const<felt252, 1>>() -> ([236]);
store_temp<felt252>([235]) -> ([235]);
felt252_add([235], [236]) -> ([237]);
const_as_immediate<Const<felt252, 1>>() -> ([238]);
store_temp<felt252>([237]) -> ([237]);
felt252_add([237], [238]) -> ([239]);
const_as_immediate<Const<felt252, 1>>() -> ([240]);
store_temp<felt252>([239]) -> ([239]);
felt252_add([239], [240]) -> ([241]);
const_as_immediate<Const<felt252, 1>>() -> ([242]);
store_temp<felt252>([241]) -> ([241]);
felt252_add([241], [242]) -> ([243]);
const_as_immediate<Const<felt252, 1>>() -> ([244]);
store_temp<felt252>([243]) -> ([243]);
felt252_add([243], [244]) -> ([245]);
const_as_immediate<Const<felt252, 1>>() -> ([246]);
store_temp<felt252>([245]) -> ([245]);
felt252_add([245], [246]) -> ([247]);
const_as_immediate<Const<felt252, 1>>() -> ([248]);
store_temp<felt252>([247]) -> ([247]);
felt252_add([247], [248]) -> ([249]);
const_as_immediate<Const<felt252, 1>>() -> ([250]);
store_temp<felt252>([249]) -> ([249]);
felt252_add([249], [250]) -> ([251]);
const_as_immediate<Const<felt252, 1>>() -> ([252]);
store_temp<felt252>([251]) -> ([251]);
felt252_add([251], [252]) -> ([253]);
const_as_immediate<Const<felt252, 1>>() -> ([254]);
store_temp<felt252>([253]) -> ([253]);
felt252_add([253], [254]) -> ([255]);
const_as_immediate<Const<felt252, 1>>() -> ([256]);
store_temp<felt252>([255]) -> ([255]);
felt252_add([255], [256]) -> ([257]);
const_as_immediate<Const<felt252, 1>>() -> ([258]);
store_temp<felt252>([257]) -> ([257]);
felt252_add([257], [258]) -> ([259]);
drop<felt252>([259]) -> ();
const_as_immediate<Const<felt252, 1>>() -> ([260]);
const_as_immediate<Const<felt252, 1>>() -> ([261]);
store_temp<felt252>([260]) -> ([260]);
felt252_add([260], [261]) -> ([262]);
const_as_immediate<Const<felt252, 1>>() -> ([263]);
store_temp<felt252>([262]) -> ([262]);
felt252_add([262], [263]) -> ([264]);
const_as_immediate<Const<felt252, 1>>() -> ([265]);
store_temp<felt252>([264]) -> ([264]);
felt252_add([264], [265]) -> ([266]);
const_as_immediate<Const<felt252, 1>>() -> ([267]);
store_temp<felt252>([266]) -> ([266]);
felt252_add([266], [267]) -> ([268]);
const_as_immediate<Const<felt252, 1>>() -> ([269]);
store_temp<felt252>([268]) -> ([268]);
felt252_add([268], [269]) -> ([270]);
const_as_immediate<Const<felt252, 1>>() -> ([271]);
store_temp<felt252>([270]) -> ([270]);
felt252_add([270], [271]) -> ([272]);
const_as_immediate<Const<felt252, 1>>() -> ([273]);
store_temp<felt252>([272]) -> ([272]);
felt252_add([272], [273]) -> ([274]);
const_as_immediate<Const<felt252, 1>>() -> ([275]);
store_temp<felt252>([274]) -> ([274]);
felt252_add([274], [275]) -> ([276]);
const_as_immediate<Const<felt252, 1>>() -> ([277]);
store_temp<felt252>([276]) -> ([276]);
felt252_add([276], [277]) -> ([278]);
const_as_immediate<Const<felt252, 1>>() -> ([279]);
store_temp<felt252>([278]) -> ([278]);
felt252_add([278], [279]) -> ([280]);
const_as_immediate<Const<felt252, 1>>() -> ([281]);
store_temp<felt252>([280]) -> ([280]);
felt252_add([280], [281]) -> ([282]);
const_as_immediate<Const<felt252, 1>>() -> ([283]);
store_temp<felt252>([282]) -> ([282]);
felt252_add([282], [283]) -> ([284]);
const_as_immediate<Const<felt252, 1>>() -> ([285]);
store_temp<felt252>([284]) -> ([284]);
felt252_add([284], [285]) -> ([286]);
const_as_immediate<Const<felt252, 1>>() -> ([287]);
store_temp<felt252>([286]) -> ([286]);
felt252_add([286], [287]) -> ([288]);
const_as_immediate<Const<felt252, 1>>() -> ([289]);
store_temp<felt252>([288]) -> ([288]);
felt252_add([288], [289]) -> ([290]);
drop<felt252>([290]) -> ();
return();

test::function_with_branch_align@F0([0]: core::bool) -> (felt252);
test::foo@F1([0]: core::bool) -> ();

//! > casm
jmp rel 5 if [fp + -3] != 0;
[ap + 0] = 2, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
jmp rel 17 if [fp + -3] != 0;
ap += 123;
[ap + 0] = 0, ap++;
call rel -14;
[ap + 0] = 0, ap++;
call rel -18;
[ap + 0] = 0, ap++;
call rel -22;
ret;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
ret;

//! > ==========================================================================

//! > coupons

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo_code
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;
extern fn coupon_buy<T>() -> T nopanic;
impl DropCoupon of Drop<bar::Coupon>;

fn foo(x: felt252) {
    let c1: bar::Coupon = coupon_buy();
    let _c2: bar::Coupon = coupon_buy();
    let _c3: bar::Coupon = coupon_buy();
    bar(__coupon__: c1);
}

#[inline(never)]
fn bar() {
    redeposit_gas();
}

//! > enforced_costs
test::bar 2000

//! > gas_solution_lp
#9: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 1900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 6300, Step: 6, Hole: 0, RangeCheck: 0})
test::bar: OrderedHashMap({Const: 2000, Step: 1, Hole: 0, RangeCheck: 0})

//! > gas_solution_linear
#9: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 1900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 6300, Step: 6, Hole: 0, RangeCheck: 0})
test::bar: OrderedHashMap({Const: 2000, Step: 1, Hole: 0, RangeCheck: 0})

//! > ap_solution_lp

test::bar: 1
test::foo: 4

//! > ap_solution_linear

test::foo: 4
test::bar: 1

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type Coupon<user@test::bar> = Coupon<user@test::bar> [storable: true, drop: true, dup: false, zero_sized: true];

libfunc drop<felt252> = drop<felt252>;
libfunc coupon_buy<Coupon<user@test::bar>> = coupon_buy<Coupon<user@test::bar>>;
libfunc drop<Coupon<user@test::bar>> = drop<Coupon<user@test::bar>>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc coupon_call<user@test::bar> = coupon_call<user@test::bar>;
libfunc redeposit_gas = redeposit_gas;

F0:
drop<felt252>([1]) -> ();
coupon_buy<Coupon<user@test::bar>>() -> ([2]);
coupon_buy<Coupon<user@test::bar>>() -> ([3]);
drop<Coupon<user@test::bar>>([3]) -> ();
coupon_buy<Coupon<user@test::bar>>() -> ([4]);
drop<Coupon<user@test::bar>>([4]) -> ();
store_temp<GasBuiltin>([0]) -> ([0]);
coupon_call<user@test::bar>([0], [2]) -> ([5]);
return([5]);
F1:
redeposit_gas([0]) -> ([1]);
store_temp<GasBuiltin>([1]) -> ([1]);
return([1]);

test::foo@F0([0]: GasBuiltin, [1]: felt252) -> (GasBuiltin);
test::bar@F1([0]: GasBuiltin) -> (GasBuiltin);

//! > casm
[ap + 0] = [fp + -4], ap++;
call rel 3;
ret;
[ap + 0] = [fp + -3] + 1900, ap++;
ret;

//! > ==========================================================================

//! > coupon refund

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo_code
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;
extern fn coupon_refund<T>(c: T) nopanic;

fn foo(c0: bar20000::Coupon, c1: bar20000::Coupon, c2: bar20000::Coupon) {
    // Refund is fully used.
    coupon_refund(c0);
    bar20000();
    bar20000();
    redeposit_gas(); // Zero redeposit.

    // Refund more than used - rest is redeposited.
    coupon_refund(c1);
    bar1000();
    redeposit_gas();

    // Refund more than used - rest is wasted.
    coupon_refund(c2);
    bar1000();
}

#[inline(never)]
fn bar20000() nopanic {
    redeposit_gas();
}

#[inline(never)]
fn bar1000() nopanic {
    redeposit_gas();
}

//! > enforced_costs
test::bar20000 20000
test::bar1000 1000

//! > gas_solution_lp
#0: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#4: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#5: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#8: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#9: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#13: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 19900, Step: 0, Hole: 0, RangeCheck: 0})
#16: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 43100, Step: 12, Hole: 0, RangeCheck: 0})
test::bar20000: OrderedHashMap({Const: 20000, Step: 1, Hole: 0, RangeCheck: 0})
test::bar1000: OrderedHashMap({Const: 1000, Step: 1, Hole: 0, RangeCheck: 0})

//! > gas_solution_linear
#0: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#4: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#5: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#8: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 18700, Step: 0, Hole: 0, RangeCheck: 0})
#9: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 18700, Step: 0, Hole: 0, RangeCheck: 0})
#13: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 19900, Step: 0, Hole: 0, RangeCheck: 0})
#16: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 20500, Step: 12, Hole: 0, RangeCheck: 0})
test::bar20000: OrderedHashMap({Const: 20000, Step: 1, Hole: 0, RangeCheck: 0})
test::bar1000: OrderedHashMap({Const: 1000, Step: 1, Hole: 0, RangeCheck: 0})

//! > ap_solution_lp

test::bar20000: 1
test::bar1000: 1
test::foo: 15

//! > ap_solution_linear

test::foo: 15
test::bar20000: 1
test::bar1000: 1

//! > sierra_code
type Coupon<user@test::bar20000> = Coupon<user@test::bar20000> [storable: true, drop: true, dup: false, zero_sized: true];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];

libfunc coupon_refund<Coupon<user@test::bar20000>> = coupon_refund<Coupon<user@test::bar20000>>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::bar20000> = function_call<user@test::bar20000>;
libfunc redeposit_gas = redeposit_gas;
libfunc function_call<user@test::bar1000> = function_call<user@test::bar1000>;

F0:
coupon_refund<Coupon<user@test::bar20000>>([1]) -> ();
store_temp<GasBuiltin>([0]) -> ([0]);
function_call<user@test::bar20000>([0]) -> ([4]);
function_call<user@test::bar20000>([4]) -> ([5]);
redeposit_gas([5]) -> ([6]);
coupon_refund<Coupon<user@test::bar20000>>([2]) -> ();
store_temp<GasBuiltin>([6]) -> ([6]);
function_call<user@test::bar1000>([6]) -> ([7]);
redeposit_gas([7]) -> ([8]);
coupon_refund<Coupon<user@test::bar20000>>([3]) -> ();
store_temp<GasBuiltin>([8]) -> ([8]);
function_call<user@test::bar1000>([8]) -> ([9]);
return([9]);
F1:
redeposit_gas([0]) -> ([1]);
store_temp<GasBuiltin>([1]) -> ([1]);
return([1]);
F2:
redeposit_gas([0]) -> ([1]);
store_temp<GasBuiltin>([1]) -> ([1]);
return([1]);

test::foo@F0([0]: GasBuiltin, [1]: Coupon<user@test::bar20000>, [2]: Coupon<user@test::bar20000>, [3]: Coupon<user@test::bar20000>) -> (GasBuiltin);
test::bar20000@F1([0]: GasBuiltin) -> (GasBuiltin);
test::bar1000@F2([0]: GasBuiltin) -> (GasBuiltin);

//! > casm
[ap + 0] = [fp + -3], ap++;
call rel 12;
call rel 10;
[ap + 0] = [ap + -1], ap++;
call rel 10;
[ap + 0] = [ap + -1] + 18700, ap++;
call rel 6;
ret;
[ap + 0] = [fp + -3] + 19900, ap++;
ret;
[ap + 0] = [fp + -3] + 900, ap++;
ret;
