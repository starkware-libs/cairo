//! > runtime costs handle each postcost component separately

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo
fn foo(x: felt252) {
    if x == 0 {
        holes(x);
    } else {
        use_rc();
    }
}

#[inline(never)]
fn holes(x: felt252) {
    if x == 0 {
        1 + 2 + 3 + 4 + 5;
    }
}

#[inline(never)]
fn use_rc() {
    1_u32 < two();
}

#[inline(never)]
fn two() -> u32 {
    2
}

//! > gas_solution_lp
#2: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 340, Step: 3, Hole: 0, RangeCheck: 1})
#7: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 6, RangeCheck: 0})
#14: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 4, RangeCheck: 0})
#30: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 260, Step: 3, Hole: 0, RangeCheck: 0})
#37: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 90, Step: 1, Hole: 0, RangeCheck: 0})
#41: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 1, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 1470, Step: 14, Hole: 7, RangeCheck: 1})
test::holes: OrderedHashMap({Const: 500, Step: 5, Hole: 4, RangeCheck: 0})
test::use_rc: OrderedHashMap({Const: 1070, Step: 10, Hole: 1, RangeCheck: 1})
test::two: OrderedHashMap({Const: 100, Step: 1, Hole: 0, RangeCheck: 0})

//! > gas_solution_linear
#2: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 340, Step: 3, Hole: 0, RangeCheck: 1})
#7: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 6, RangeCheck: 0})
#14: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 4, RangeCheck: 0})
#30: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 260, Step: 3, Hole: 0, RangeCheck: 0})
#37: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 90, Step: 1, Hole: 0, RangeCheck: 0})
#41: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 1, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 1470, Step: 14, Hole: 7, RangeCheck: 1})
test::holes: OrderedHashMap({Const: 500, Step: 5, Hole: 4, RangeCheck: 0})
test::use_rc: OrderedHashMap({Const: 1070, Step: 10, Hole: 1, RangeCheck: 1})
test::two: OrderedHashMap({Const: 100, Step: 1, Hole: 0, RangeCheck: 0})

//! > ap_solution_lp
#2: 3
#30: 4
#37: 1

test::holes: 4
test::foo: 11
test::use_rc: 8
test::two: 1

//! > ap_solution_linear
#2: 3
#30: 4
#37: 1

test::foo: 11
test::holes: 4
test::use_rc: 8
test::two: 1

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Const<u32, 2> = Const<u32, 2> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u32, 1> = Const<u32, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 5> = Const<felt252, 5> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 4> = Const<felt252, 4> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 3> = Const<felt252, 3> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 2> = Const<felt252, 2> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 1> = Const<felt252, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc dup<felt252> = dup<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc function_call<user@test::holes> = function_call<user@test::holes>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc drop<felt252> = drop<felt252>;
libfunc function_call<user@test::use_rc> = function_call<user@test::use_rc>;
libfunc const_as_immediate<Const<felt252, 1>> = const_as_immediate<Const<felt252, 1>>;
libfunc const_as_immediate<Const<felt252, 2>> = const_as_immediate<Const<felt252, 2>>;
libfunc felt252_add = felt252_add;
libfunc const_as_immediate<Const<felt252, 3>> = const_as_immediate<Const<felt252, 3>>;
libfunc const_as_immediate<Const<felt252, 4>> = const_as_immediate<Const<felt252, 4>>;
libfunc const_as_immediate<Const<felt252, 5>> = const_as_immediate<Const<felt252, 5>>;
libfunc function_call<user@test::two> = function_call<user@test::two>;
libfunc const_as_immediate<Const<u32, 1>> = const_as_immediate<Const<u32, 1>>;
libfunc store_temp<u32> = store_temp<u32>;
libfunc u32_overflowing_sub = u32_overflowing_sub;
libfunc drop<u32> = drop<u32>;
libfunc const_as_immediate<Const<u32, 2>> = const_as_immediate<Const<u32, 2>>;

dup<felt252>([1]) -> ([1], [2]); // 0
felt252_is_zero([2]) { fallthrough() 7([3]) }; // 1
branch_align() -> (); // 2
store_temp<felt252>([1]) -> ([1]); // 3
function_call<user@test::holes>([1]) -> (); // 4
store_temp<RangeCheck>([0]) -> ([0]); // 5
return([0]); // 6
branch_align() -> (); // 7
drop<NonZero<felt252>>([3]) -> (); // 8
drop<felt252>([1]) -> (); // 9
store_temp<RangeCheck>([0]) -> ([0]); // 10
function_call<user@test::use_rc>([0]) -> ([4]); // 11
return([4]); // 12
felt252_is_zero([0]) { fallthrough() 30([1]) }; // 13
branch_align() -> (); // 14
const_as_immediate<Const<felt252, 1>>() -> ([2]); // 15
const_as_immediate<Const<felt252, 2>>() -> ([3]); // 16
store_temp<felt252>([2]) -> ([2]); // 17
felt252_add([2], [3]) -> ([4]); // 18
const_as_immediate<Const<felt252, 3>>() -> ([5]); // 19
store_temp<felt252>([4]) -> ([4]); // 20
felt252_add([4], [5]) -> ([6]); // 21
const_as_immediate<Const<felt252, 4>>() -> ([7]); // 22
store_temp<felt252>([6]) -> ([6]); // 23
felt252_add([6], [7]) -> ([8]); // 24
const_as_immediate<Const<felt252, 5>>() -> ([9]); // 25
store_temp<felt252>([8]) -> ([8]); // 26
felt252_add([8], [9]) -> ([10]); // 27
drop<felt252>([10]) -> (); // 28
return(); // 29
branch_align() -> (); // 30
drop<NonZero<felt252>>([1]) -> (); // 31
return(); // 32
function_call<user@test::two>() -> ([1]); // 33
const_as_immediate<Const<u32, 1>>() -> ([2]); // 34
store_temp<u32>([2]) -> ([2]); // 35
u32_overflowing_sub([0], [2], [1]) { fallthrough([3], [4]) 41([5], [6]) }; // 36
branch_align() -> (); // 37
drop<u32>([4]) -> (); // 38
store_temp<RangeCheck>([3]) -> ([3]); // 39
return([3]); // 40
branch_align() -> (); // 41
drop<u32>([6]) -> (); // 42
store_temp<RangeCheck>([5]) -> ([5]); // 43
return([5]); // 44
const_as_immediate<Const<u32, 2>>() -> ([0]); // 45
store_temp<u32>([0]) -> ([0]); // 46
return([0]); // 47

test::foo@0([0]: RangeCheck, [1]: felt252) -> (RangeCheck);
test::holes@13([0]: felt252) -> ();
test::use_rc@33([0]: RangeCheck) -> (RangeCheck);
test::two@45() -> (u32);

//! > casm
jmp rel 9 if [fp + -3] != 0;
ap += 3;
[ap + 0] = [fp + -3], ap++;
call rel 8;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = [fp + -4], ap++;
call rel 17;
ret;
jmp rel 11 if [fp + -3] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 2, ap++;
[ap + 0] = [ap + -1] + 3, ap++;
[ap + 0] = [ap + -1] + 4, ap++;
ret;
ap += 4;
ret;
call rel 21;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -3] + 0];
jmp rel 8;
[ap + -1] = [[fp + -3] + 0];
ap += 1;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
[ap + 0] = 2, ap++;
ret;

//! > ==========================================================================

//! > branch_align values are pushed to the end

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    // The branch_align of the external if statements should have zero value, since the value should
    // be pushed to the inner if statement.
    if x == 0 {
        if x == 1 {
            if x == 2 {
                bar();
            } else {
                bar();
            }
        } else {
            bar();
            bar();
        }
    } else {
        bar();
        bar();
        bar();
    }
}

#[inline(never)]
fn bar() {
    redeposit_gas()
}

//! > enforced_costs
test::bar 10000

//! > gas_solution_lp
#2: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9880, Step: 0, Hole: 0, RangeCheck: 0})
#8: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9880, Step: 0, Hole: 0, RangeCheck: 0})
#13: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#17: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#22: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 2, RangeCheck: 0})
#29: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 4, RangeCheck: 0})
#37: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 30800, Step: 11, Hole: 4, RangeCheck: 0})
test::bar: OrderedHashMap({Const: 10000, Step: 1, Hole: 0, RangeCheck: 0})

//! > gas_solution_linear
#2: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#8: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#13: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 19760, Step: 0, Hole: 0, RangeCheck: 0})
#17: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 19760, Step: 0, Hole: 0, RangeCheck: 0})
#22: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9880, Step: 0, Hole: 2, RangeCheck: 0})
#29: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 4, RangeCheck: 0})
#37: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 30800, Step: 11, Hole: 4, RangeCheck: 0})
test::bar: OrderedHashMap({Const: 10000, Step: 1, Hole: 0, RangeCheck: 0})

//! > ap_solution_lp
#2: 2
#8: 2

test::bar: 1
test::foo: 10

//! > ap_solution_linear
#2: 2
#8: 2

test::foo: 10
test::bar: 1

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type Const<felt252, 2> = Const<felt252, 2> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 1> = Const<felt252, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc dup<felt252> = dup<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc const_as_immediate<Const<felt252, 1>> = const_as_immediate<Const<felt252, 1>>;
libfunc felt252_sub = felt252_sub;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc const_as_immediate<Const<felt252, 2>> = const_as_immediate<Const<felt252, 2>>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc drop<felt252> = drop<felt252>;
libfunc redeposit_gas = redeposit_gas;

dup<felt252>([1]) -> ([1], [2]); // 0
felt252_is_zero([2]) { fallthrough() 29([3]) }; // 1
branch_align() -> (); // 2
const_as_immediate<Const<felt252, 1>>() -> ([4]); // 3
dup<felt252>([1]) -> ([1], [5]); // 4
felt252_sub([5], [4]) -> ([6]); // 5
store_temp<felt252>([6]) -> ([6]); // 6
felt252_is_zero([6]) { fallthrough() 22([7]) }; // 7
branch_align() -> (); // 8
const_as_immediate<Const<felt252, 2>>() -> ([8]); // 9
felt252_sub([1], [8]) -> ([9]); // 10
store_temp<felt252>([9]) -> ([9]); // 11
felt252_is_zero([9]) { fallthrough() 17([10]) }; // 12
branch_align() -> (); // 13
store_temp<GasBuiltin>([0]) -> ([0]); // 14
function_call<user@test::bar>([0]) -> ([11]); // 15
return([11]); // 16
branch_align() -> (); // 17
drop<NonZero<felt252>>([10]) -> (); // 18
store_temp<GasBuiltin>([0]) -> ([0]); // 19
function_call<user@test::bar>([0]) -> ([12]); // 20
return([12]); // 21
branch_align() -> (); // 22
drop<NonZero<felt252>>([7]) -> (); // 23
drop<felt252>([1]) -> (); // 24
store_temp<GasBuiltin>([0]) -> ([0]); // 25
function_call<user@test::bar>([0]) -> ([13]); // 26
function_call<user@test::bar>([13]) -> ([14]); // 27
return([14]); // 28
branch_align() -> (); // 29
drop<NonZero<felt252>>([3]) -> (); // 30
drop<felt252>([1]) -> (); // 31
store_temp<GasBuiltin>([0]) -> ([0]); // 32
function_call<user@test::bar>([0]) -> ([15]); // 33
function_call<user@test::bar>([15]) -> ([16]); // 34
function_call<user@test::bar>([16]) -> ([17]); // 35
return([17]); // 36
redeposit_gas([0]) -> ([1]); // 37
store_temp<GasBuiltin>([1]) -> ([1]); // 38
return([1]); // 39

test::foo@0([0]: GasBuiltin, [1]: felt252) -> (GasBuiltin);
test::bar@37([0]: GasBuiltin) -> (GasBuiltin);

//! > casm
jmp rel 28 if [fp + -3] != 0;
ap += 2;
[fp + -3] = [ap + 0] + 1, ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 2;
[fp + -3] = [ap + 0] + 2, ap++;
jmp rel 6 if [ap + -1] != 0;
[ap + 0] = [fp + -4], ap++;
call rel 21;
ret;
[ap + 0] = [fp + -4], ap++;
call rel 17;
ret;
[ap + 0] = [fp + -4], ap++;
call rel 13;
call rel 11;
ret;
[ap + 0] = [fp + -4], ap++;
call rel 7;
call rel 5;
call rel 3;
ret;
[ap + 0] = [fp + -3] + 9900, ap++;
ret;

//! > ==========================================================================

//! > branch_align of withdraw_gas

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    // In this case, the failing branch is more expensive than the success branch.
    // The excess created by the external branch_align should be pushed to the next (inner)
    // statements.
    match gas::withdraw_gas() {
        Option::Some(_) => {
            if x == 0 {
                // Here we don't need to withdraw gas, since we have excess created by the external
                // failing branch.
                match gas::withdraw_gas() {
                    Option::Some(_) => {
                        bar();
                    },
                    Option::None(_) => {},
                }
            } else {
                bar();
            }
        },
        Option::None(_) => {
            bar();
            bar();
        },
    }
}

#[inline(never)]
fn bar() {
    redeposit_gas()
}

//! > enforced_costs
test::bar 10000

//! > gas_solution_lp
#0: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 4, RangeCheck: 1})
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9730, Step: 0, Hole: 0, RangeCheck: 0})
#4: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#5: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 1, Hole: 0, RangeCheck: 0})
#6: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 4, RangeCheck: 0})
#12: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 10060, Step: 1, Hole: 0, RangeCheck: 0})
#16: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 250, Step: 1, Hole: 2, RangeCheck: 1})
#23: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#31: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 21170, Step: 13, Hole: 0, RangeCheck: 1})
test::bar: OrderedHashMap({Const: 10000, Step: 1, Hole: 0, RangeCheck: 0})

//! > gas_solution_linear
#0: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 4, RangeCheck: 1})
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#4: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#5: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 1, Hole: 0, RangeCheck: 0})
#6: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9730, Step: 0, Hole: 4, RangeCheck: 0})
#12: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 19790, Step: 1, Hole: 0, RangeCheck: 0})
#16: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9980, Step: 1, Hole: 2, RangeCheck: 1})
#23: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#31: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 21170, Step: 13, Hole: 0, RangeCheck: 1})
test::bar: OrderedHashMap({Const: 10000, Step: 1, Hole: 0, RangeCheck: 0})

//! > ap_solution_lp
#12: 4
#16: 2

test::bar: 1
test::foo: 11

//! > ap_solution_linear
#12: 4
#16: 2

test::foo: 11
test::bar: 1

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];

libfunc withdraw_gas = withdraw_gas;
libfunc branch_align = branch_align;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc drop<felt252> = drop<felt252>;
libfunc redeposit_gas = redeposit_gas;

withdraw_gas([0], [1]) { fallthrough([3], [4]) 23([5], [6]) }; // 0
branch_align() -> (); // 1
store_temp<RangeCheck>([3]) -> ([3]); // 2
felt252_is_zero([2]) { fallthrough() 16([7]) }; // 3
branch_align() -> (); // 4
withdraw_gas([3], [4]) { fallthrough([8], [9]) 12([10], [11]) }; // 5
branch_align() -> (); // 6
store_temp<GasBuiltin>([9]) -> ([9]); // 7
function_call<user@test::bar>([9]) -> ([12]); // 8
store_temp<RangeCheck>([8]) -> ([8]); // 9
store_temp<GasBuiltin>([12]) -> ([12]); // 10
return([8], [12]); // 11
branch_align() -> (); // 12
store_temp<RangeCheck>([10]) -> ([10]); // 13
store_temp<GasBuiltin>([11]) -> ([11]); // 14
return([10], [11]); // 15
branch_align() -> (); // 16
drop<NonZero<felt252>>([7]) -> (); // 17
store_temp<GasBuiltin>([4]) -> ([4]); // 18
function_call<user@test::bar>([4]) -> ([13]); // 19
store_temp<RangeCheck>([3]) -> ([3]); // 20
store_temp<GasBuiltin>([13]) -> ([13]); // 21
return([3], [13]); // 22
branch_align() -> (); // 23
drop<felt252>([2]) -> (); // 24
store_temp<GasBuiltin>([6]) -> ([6]); // 25
function_call<user@test::bar>([6]) -> ([14]); // 26
function_call<user@test::bar>([14]) -> ([15]); // 27
store_temp<RangeCheck>([5]) -> ([5]); // 28
store_temp<GasBuiltin>([15]) -> ([15]); // 29
return([5], [15]); // 30
redeposit_gas([0]) -> ([1]); // 31
store_temp<GasBuiltin>([1]) -> ([1]); // 32
return([1]); // 33

test::foo@0([0]: RangeCheck, [1]: GasBuiltin, [2]: felt252) -> (RangeCheck, GasBuiltin);
test::bar@31([0]: GasBuiltin) -> (GasBuiltin);

//! > casm
%{ memory[ap + 0] = 0 <= memory[fp + -4] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -4] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 40;
[fp + -4] = [ap + 0] + 0, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
jmp rel 25 if [fp + -3] != 0;
%{ memory[ap + 0] = 0 <= memory[ap + -2] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -3] + 0];
jmp rel 12;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -1], ap++;
call rel 29;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
ret;
ap += 4;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
ret;
ap += 2;
[ap + 0] = [ap + -4], ap++;
call rel 14;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -2], ap++;
ret;
[ap + 0] = [fp + -4], ap++;
call rel 8;
call rel 6;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
ret;
[ap + 0] = [fp + -3] + 9900, ap++;
ret;

//! > ==========================================================================

//! > withdraw_gas reduces excess

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    if x == 0 {
        // Excess is created by the external `else` branch. Therefore, we don't need to withdraw
        // gas here.
        match gas::withdraw_gas() {
            Option::Some(_) => {
                // Here we have used the excess and we need to withdraw gas.
                match gas::withdraw_gas() {
                    Option::Some(_) => {
                        bar();
                    },
                    Option::None(_) => {},
                }
            },
            Option::None(_) => {},
        }
    } else {
        bar();
    }
}

#[inline(never)]
fn bar() {
    redeposit_gas();
}

//! > enforced_costs
test::bar 2000

//! > gas_solution_lp
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#2: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 3, Hole: 0, RangeCheck: 1})
#3: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#4: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 600, Step: 2, Hole: 0, RangeCheck: 0})
#5: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 6, RangeCheck: 0})
#11: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 1460, Step: 0, Hole: 2, RangeCheck: 0})
#15: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 1810, Step: 0, Hole: 0, RangeCheck: 0})
#19: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 2, RangeCheck: 1})
#26: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 1900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 2740, Step: 8, Hole: 6, RangeCheck: 1})
test::bar: OrderedHashMap({Const: 2000, Step: 1, Hole: 0, RangeCheck: 0})

//! > gas_solution_linear
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#2: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 3, Hole: 0, RangeCheck: 1})
#3: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#4: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 600, Step: 2, Hole: 0, RangeCheck: 0})
#5: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 6, RangeCheck: 0})
#11: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 1460, Step: 0, Hole: 2, RangeCheck: 0})
#15: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 1810, Step: 0, Hole: 0, RangeCheck: 0})
#19: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 2, RangeCheck: 1})
#26: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 1900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 2740, Step: 8, Hole: 6, RangeCheck: 1})
test::bar: OrderedHashMap({Const: 2000, Step: 1, Hole: 0, RangeCheck: 0})

//! > ap_solution_lp
#11: 4
#15: 6
#19: 4

test::bar: 1
test::foo: 10

//! > ap_solution_linear
#11: 4
#15: 6
#19: 4

test::foo: 10
test::bar: 1

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc withdraw_gas = withdraw_gas;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc redeposit_gas = redeposit_gas;

felt252_is_zero([2]) { fallthrough() 19([3]) }; // 0
branch_align() -> (); // 1
withdraw_gas([0], [1]) { fallthrough([4], [5]) 15([6], [7]) }; // 2
branch_align() -> (); // 3
withdraw_gas([4], [5]) { fallthrough([8], [9]) 11([10], [11]) }; // 4
branch_align() -> (); // 5
store_temp<GasBuiltin>([9]) -> ([9]); // 6
function_call<user@test::bar>([9]) -> ([12]); // 7
store_temp<RangeCheck>([8]) -> ([8]); // 8
store_temp<GasBuiltin>([12]) -> ([12]); // 9
return([8], [12]); // 10
branch_align() -> (); // 11
store_temp<RangeCheck>([10]) -> ([10]); // 12
store_temp<GasBuiltin>([11]) -> ([11]); // 13
return([10], [11]); // 14
branch_align() -> (); // 15
store_temp<RangeCheck>([6]) -> ([6]); // 16
store_temp<GasBuiltin>([7]) -> ([7]); // 17
return([6], [7]); // 18
branch_align() -> (); // 19
drop<NonZero<felt252>>([3]) -> (); // 20
store_temp<GasBuiltin>([1]) -> ([1]); // 21
function_call<user@test::bar>([1]) -> ([13]); // 22
store_temp<RangeCheck>([0]) -> ([0]); // 23
store_temp<GasBuiltin>([13]) -> ([13]); // 24
return([0], [13]); // 25
redeposit_gas([0]) -> ([1]); // 26
store_temp<GasBuiltin>([1]) -> ([1]); // 27
return([1]); // 28

test::foo@0([0]: RangeCheck, [1]: GasBuiltin, [2]: felt252) -> (RangeCheck, GasBuiltin);
test::bar@26([0]: GasBuiltin) -> (GasBuiltin);

//! > casm
jmp rel 41 if [fp + -3] != 0;
%{ memory[ap + 0] = 0 <= memory[fp + -4] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -4] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 28;
[fp + -4] = [ap + 0] + 0, ap++;
[ap + -1] = [[fp + -5] + 0];
%{ memory[ap + 0] = 600 <= memory[ap + -1] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768210856, ap++;
[ap + -1] = [[fp + -5] + 1];
jmp rel 12;
[ap + -2] = [ap + 0] + 600, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [ap + -1], ap++;
call rel 26;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
ret;
ap += 4;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 6;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
ret;
ap += 4;
[ap + 0] = [fp + -4], ap++;
call rel 5;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2], ap++;
ret;
[ap + 0] = [fp + -3] + 1900, ap++;
ret;

//! > ==========================================================================

//! > redeposit_gas libfunc

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    if x == 0 {
        bar();
        bar();
        redeposit_gas();
        return ();
    } else {
        redeposit_gas();
        if x == 1 {
            bar();
        } else {
            redeposit_gas();
        }
        return ();
    }
}

#[inline(never)]
fn bar() {
    redeposit_gas();
}

//! > enforced_costs
test::bar 10000
test::foo 100000

//! > gas_solution_lp
#2: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#7: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 79300, Step: 0, Hole: 5, RangeCheck: 0})
#10: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#12: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 89180, Step: 0, Hole: 0, RangeCheck: 0})
#18: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 3, RangeCheck: 0})
#22: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#24: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 10070, Step: 2, Hole: 0, RangeCheck: 0})
#27: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 100000, Step: 9, Hole: 5, RangeCheck: 0})
test::bar: OrderedHashMap({Const: 10000, Step: 1, Hole: 0, RangeCheck: 0})

//! > gas_solution_linear
#2: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#7: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 79300, Step: 0, Hole: 5, RangeCheck: 0})
#10: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#12: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 89180, Step: 0, Hole: 0, RangeCheck: 0})
#18: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 3, RangeCheck: 0})
#22: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#24: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 10070, Step: 2, Hole: 0, RangeCheck: 0})
#27: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 9900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 100000, Step: 9, Hole: 5, RangeCheck: 0})
test::bar: OrderedHashMap({Const: 10000, Step: 1, Hole: 0, RangeCheck: 0})

//! > ap_solution_lp
#10: 2
#22: 3

test::bar: 1
test::foo: 8

//! > ap_solution_linear
#10: 2
#22: 3

test::foo: 8
test::bar: 1

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Const<felt252, 1> = Const<felt252, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc dup<felt252> = dup<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc drop<felt252> = drop<felt252>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc redeposit_gas = redeposit_gas;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc const_as_immediate<Const<felt252, 1>> = const_as_immediate<Const<felt252, 1>>;
libfunc felt252_sub = felt252_sub;
libfunc store_temp<felt252> = store_temp<felt252>;

dup<felt252>([1]) -> ([1], [2]); // 0
felt252_is_zero([2]) { fallthrough() 10([3]) }; // 1
branch_align() -> (); // 2
drop<felt252>([1]) -> (); // 3
store_temp<GasBuiltin>([0]) -> ([0]); // 4
function_call<user@test::bar>([0]) -> ([4]); // 5
function_call<user@test::bar>([4]) -> ([5]); // 6
redeposit_gas([5]) -> ([6]); // 7
store_temp<GasBuiltin>([6]) -> ([6]); // 8
return([6]); // 9
branch_align() -> (); // 10
drop<NonZero<felt252>>([3]) -> (); // 11
redeposit_gas([0]) -> ([7]); // 12
const_as_immediate<Const<felt252, 1>>() -> ([8]); // 13
felt252_sub([1], [8]) -> ([9]); // 14
store_temp<felt252>([9]) -> ([9]); // 15
store_temp<GasBuiltin>([7]) -> ([7]); // 16
felt252_is_zero([9]) { fallthrough() 22([10]) }; // 17
branch_align() -> (); // 18
store_temp<GasBuiltin>([7]) -> ([7]); // 19
function_call<user@test::bar>([7]) -> ([11]); // 20
return([11]); // 21
branch_align() -> (); // 22
drop<NonZero<felt252>>([10]) -> (); // 23
redeposit_gas([7]) -> ([12]); // 24
store_temp<GasBuiltin>([12]) -> ([12]); // 25
return([12]); // 26
redeposit_gas([0]) -> ([1]); // 27
store_temp<GasBuiltin>([1]) -> ([1]); // 28
return([1]); // 29

test::foo@0([0]: GasBuiltin, [1]: felt252) -> (GasBuiltin);
test::bar@27([0]: GasBuiltin) -> (GasBuiltin);

//! > casm
jmp rel 10 if [fp + -3] != 0;
[ap + 0] = [fp + -4], ap++;
call rel 24;
call rel 22;
[ap + 0] = [ap + -1] + 79300, ap++;
ret;
ap += 2;
[fp + -3] = [ap + 0] + 1, ap++;
[ap + 0] = [fp + -4] + 89180, ap++;
jmp rel 6 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
call rel 8;
ret;
ap += 3;
[ap + 0] = [ap + -4] + 10070, ap++;
ret;
[ap + 0] = [fp + -3] + 9900, ap++;
ret;

//! > ==========================================================================

//! > Precost gas mismatch.

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo
fn foo() -> u128 {
    match core::gas::withdraw_gas() {
        Option::None => 2,
        Option::Some(_) => 3_u128 & 1,
    }
}

//! > gas_solution_lp
#0: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 180, Step: 2, Hole: 0, RangeCheck: 0})
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 2, RangeCheck: 0})
#14: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 1, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Bitwise: 1, Const: 990, Step: 9, Hole: 2, RangeCheck: 1})

//! > gas_solution_linear
#0: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 1, EcOp: 0, AddMod: 0, MulMod: 0, Const: 90, Step: 1, Hole: 0, RangeCheck: 0})
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 1, RangeCheck: 0})
#14: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 1680, Step: 16, Hole: 1, RangeCheck: 1})

//! > ap_solution_lp
#14: 2

test::foo: 8

//! > ap_solution_linear
#14: 1

test::foo: 14

//! > sierra_code
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Const<u128, 2> = Const<u128, 2> [storable: false, drop: false, dup: false, zero_sized: false];
type Bitwise = Bitwise [storable: true, drop: false, dup: false, zero_sized: false];
type Const<u128, 1> = Const<u128, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 3> = Const<u128, 3> [storable: false, drop: false, dup: false, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];

libfunc withdraw_gas = withdraw_gas;
libfunc branch_align = branch_align;
libfunc const_as_immediate<Const<u128, 3>> = const_as_immediate<Const<u128, 3>>;
libfunc const_as_immediate<Const<u128, 1>> = const_as_immediate<Const<u128, 1>>;
libfunc store_temp<u128> = store_temp<u128>;
libfunc bitwise = bitwise;
libfunc drop<u128> = drop<u128>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<Bitwise> = store_temp<Bitwise>;
libfunc const_as_immediate<Const<u128, 2>> = const_as_immediate<Const<u128, 2>>;

withdraw_gas([0], [1]) { fallthrough([3], [4]) 14([5], [6]) }; // 0
branch_align() -> (); // 1
const_as_immediate<Const<u128, 3>>() -> ([7]); // 2
const_as_immediate<Const<u128, 1>>() -> ([8]); // 3
store_temp<u128>([7]) -> ([7]); // 4
store_temp<u128>([8]) -> ([8]); // 5
bitwise([2], [7], [8]) -> ([9], [10], [11], [12]); // 6
drop<u128>([11]) -> (); // 7
drop<u128>([12]) -> (); // 8
store_temp<RangeCheck>([3]) -> ([3]); // 9
store_temp<GasBuiltin>([4]) -> ([4]); // 10
store_temp<Bitwise>([9]) -> ([9]); // 11
store_temp<u128>([10]) -> ([10]); // 12
return([3], [4], [9], [10]); // 13
branch_align() -> (); // 14
const_as_immediate<Const<u128, 2>>() -> ([13]); // 15
store_temp<RangeCheck>([5]) -> ([5]); // 16
store_temp<GasBuiltin>([6]) -> ([6]); // 17
store_temp<Bitwise>([2]) -> ([2]); // 18
store_temp<u128>([13]) -> ([13]); // 19
return([5], [6], [2], [13]); // 20

test::foo@0([0]: RangeCheck, [1]: GasBuiltin, [2]: Bitwise) -> (RangeCheck, GasBuiltin, Bitwise, u128);

//! > casm
call rel 40;
[ap + 0] = [ap + -1] + 39, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 90, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -4] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 17;
[fp + -4] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + -2] = [[fp + -3] + 0];
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + 5, ap++;
[ap + 0] = [[fp + -3] + 2], ap++;
ret;
ap += 1;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 2, ap++;
ret;

//! > ==========================================================================

//! > Function non-const redeposit.

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;

fn foo(x: felt252) {
    if x == 0 {
        bar();
        bar();
        bar();
        return ();
    } else {
        redeposit_gas();
        return ();
    }
}

#[inline(never)]
fn bar() {
    1 & 2_u128;
}

//! > gas_solution_lp
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 9, RangeCheck: 0})
#9: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#11: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 3, EcOp: 0, AddMod: 0, MulMod: 0, Const: 1310, Step: 14, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Bitwise: 3, Const: 2500, Step: 25, Hole: 9, RangeCheck: 0})
test::bar: OrderedHashMap({Bitwise: 1, Const: 500, Step: 5, Hole: 0, RangeCheck: 0})

//! > gas_solution_linear
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 9, RangeCheck: 0})
#9: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#11: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 3, EcOp: 0, AddMod: 0, MulMod: 0, Const: 1310, Step: 14, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Bitwise: 3, Const: 2500, Step: 25, Hole: 9, RangeCheck: 0})
test::bar: OrderedHashMap({Bitwise: 1, Const: 500, Step: 5, Hole: 0, RangeCheck: 0})

//! > ap_solution_lp
#9: 9

test::bar: 3
test::foo: 18

//! > ap_solution_linear
#9: 9

test::foo: 18
test::bar: 3

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Const<u128, 2> = Const<u128, 2> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 1> = Const<u128, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type Bitwise = Bitwise [storable: true, drop: false, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc store_temp<Bitwise> = store_temp<Bitwise>;
libfunc function_call<user@test::bar> = function_call<user@test::bar>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc redeposit_gas = redeposit_gas;
libfunc const_as_immediate<Const<u128, 1>> = const_as_immediate<Const<u128, 1>>;
libfunc const_as_immediate<Const<u128, 2>> = const_as_immediate<Const<u128, 2>>;
libfunc store_temp<u128> = store_temp<u128>;
libfunc bitwise = bitwise;
libfunc drop<u128> = drop<u128>;

felt252_is_zero([2]) { fallthrough() 9([3]) }; // 0
branch_align() -> (); // 1
store_temp<Bitwise>([1]) -> ([1]); // 2
function_call<user@test::bar>([1]) -> ([4]); // 3
function_call<user@test::bar>([4]) -> ([5]); // 4
function_call<user@test::bar>([5]) -> ([6]); // 5
store_temp<GasBuiltin>([0]) -> ([0]); // 6
store_temp<Bitwise>([6]) -> ([6]); // 7
return([0], [6]); // 8
branch_align() -> (); // 9
drop<NonZero<felt252>>([3]) -> (); // 10
redeposit_gas([0]) -> ([7]); // 11
store_temp<GasBuiltin>([7]) -> ([7]); // 12
store_temp<Bitwise>([1]) -> ([1]); // 13
return([7], [1]); // 14
const_as_immediate<Const<u128, 1>>() -> ([1]); // 15
const_as_immediate<Const<u128, 2>>() -> ([2]); // 16
store_temp<u128>([1]) -> ([1]); // 17
store_temp<u128>([2]) -> ([2]); // 18
bitwise([0], [1], [2]) -> ([3], [4], [5], [6]); // 19
drop<u128>([4]) -> (); // 20
drop<u128>([5]) -> (); // 21
drop<u128>([6]) -> (); // 22
store_temp<Bitwise>([3]) -> ([3]); // 23
return([3]); // 24

test::foo@0([0]: GasBuiltin, [1]: Bitwise, [2]: felt252) -> (GasBuiltin, Bitwise);
test::bar@15([0]: Bitwise) -> (Bitwise);

//! > casm
jmp rel 12 if [fp + -3] != 0;
[ap + 0] = [fp + -4], ap++;
call rel 24;
call rel 22;
call rel 20;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2], ap++;
ret;
ap += 9;
call rel 22;
[ap + 0] = [ap + -1] + 21, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 1310, ap++;
[ap + 0] = [fp + -5] + [ap + -1], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = 1, ap++;
[ap + 0] = 2, ap++;
[ap + -2] = [[fp + -3] + 0];
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -3] + 5, ap++;
ret;

//! > ==========================================================================

//! > Function overuse ap-changes.

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo
#[inline(never)]
fn function_with_branch_align(cond: bool) -> felt252 {
    if cond { 1 } else { 2 }
}

fn foo(cond: bool) {
    if cond {
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    } else {
        function_with_branch_align(false);
        function_with_branch_align(false);
        function_with_branch_align(false);
    }
}

//! > gas_solution_lp
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#6: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#12: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 10470, Step: 117, Hole: 0, RangeCheck: 0})
#30: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 123, RangeCheck: 0})

test::function_with_branch_align: OrderedHashMap({Const: 710, Step: 3, Hole: 41, RangeCheck: 0})
test::foo: OrderedHashMap({Const: 13600, Step: 136, Hole: 123, RangeCheck: 0})

//! > gas_solution_linear
#1: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#6: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#12: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 10670, Step: 119, Hole: 0, RangeCheck: 0})
#30: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 123, RangeCheck: 0})

test::function_with_branch_align: OrderedHashMap({Const: 200, Step: 2, Hole: 0, RangeCheck: 0})
test::foo: OrderedHashMap({Const: 13600, Step: 136, Hole: 123, RangeCheck: 0})

//! > ap_solution_lp
#1: 41
#6: 41

test::function_with_branch_align: 42
test::foo: 135

//! > ap_solution_linear
#12: 123

test::function_with_branch_align: 1
test::foo: 135

//! > sierra_code
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::bool = Enum<ut@core::bool, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 1> = Const<felt252, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 2> = Const<felt252, 2> [storable: false, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc enum_match<core::bool> = enum_match<core::bool>;
libfunc branch_align = branch_align;
libfunc drop<Unit> = drop<Unit>;
libfunc const_as_immediate<Const<felt252, 2>> = const_as_immediate<Const<felt252, 2>>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc const_as_immediate<Const<felt252, 1>> = const_as_immediate<Const<felt252, 1>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc function_call<user@test::function_with_branch_align> = function_call<user@test::function_with_branch_align>;
libfunc drop<felt252> = drop<felt252>;
libfunc felt252_add = felt252_add;

enum_match<core::bool>([0]) { fallthrough([1]) 6([2]) }; // 0
branch_align() -> (); // 1
drop<Unit>([1]) -> (); // 2
const_as_immediate<Const<felt252, 2>>() -> ([3]); // 3
store_temp<felt252>([3]) -> ([3]); // 4
return([3]); // 5
branch_align() -> (); // 6
drop<Unit>([2]) -> (); // 7
const_as_immediate<Const<felt252, 1>>() -> ([4]); // 8
store_temp<felt252>([4]) -> ([4]); // 9
return([4]); // 10
enum_match<core::bool>([0]) { fallthrough([1]) 30([2]) }; // 11
branch_align() -> (); // 12
drop<Unit>([1]) -> (); // 13
struct_construct<Unit>() -> ([3]); // 14
enum_init<core::bool, 0>([3]) -> ([4]); // 15
store_temp<core::bool>([4]) -> ([4]); // 16
function_call<user@test::function_with_branch_align>([4]) -> ([5]); // 17
drop<felt252>([5]) -> (); // 18
struct_construct<Unit>() -> ([6]); // 19
enum_init<core::bool, 0>([6]) -> ([7]); // 20
store_temp<core::bool>([7]) -> ([7]); // 21
function_call<user@test::function_with_branch_align>([7]) -> ([8]); // 22
drop<felt252>([8]) -> (); // 23
struct_construct<Unit>() -> ([9]); // 24
enum_init<core::bool, 0>([9]) -> ([10]); // 25
store_temp<core::bool>([10]) -> ([10]); // 26
function_call<user@test::function_with_branch_align>([10]) -> ([11]); // 27
drop<felt252>([11]) -> (); // 28
return(); // 29
branch_align() -> (); // 30
drop<Unit>([2]) -> (); // 31
const_as_immediate<Const<felt252, 1>>() -> ([12]); // 32
const_as_immediate<Const<felt252, 1>>() -> ([13]); // 33
store_temp<felt252>([12]) -> ([12]); // 34
felt252_add([12], [13]) -> ([14]); // 35
const_as_immediate<Const<felt252, 1>>() -> ([15]); // 36
store_temp<felt252>([14]) -> ([14]); // 37
felt252_add([14], [15]) -> ([16]); // 38
const_as_immediate<Const<felt252, 1>>() -> ([17]); // 39
store_temp<felt252>([16]) -> ([16]); // 40
felt252_add([16], [17]) -> ([18]); // 41
const_as_immediate<Const<felt252, 1>>() -> ([19]); // 42
store_temp<felt252>([18]) -> ([18]); // 43
felt252_add([18], [19]) -> ([20]); // 44
const_as_immediate<Const<felt252, 1>>() -> ([21]); // 45
store_temp<felt252>([20]) -> ([20]); // 46
felt252_add([20], [21]) -> ([22]); // 47
const_as_immediate<Const<felt252, 1>>() -> ([23]); // 48
store_temp<felt252>([22]) -> ([22]); // 49
felt252_add([22], [23]) -> ([24]); // 50
const_as_immediate<Const<felt252, 1>>() -> ([25]); // 51
store_temp<felt252>([24]) -> ([24]); // 52
felt252_add([24], [25]) -> ([26]); // 53
const_as_immediate<Const<felt252, 1>>() -> ([27]); // 54
store_temp<felt252>([26]) -> ([26]); // 55
felt252_add([26], [27]) -> ([28]); // 56
const_as_immediate<Const<felt252, 1>>() -> ([29]); // 57
store_temp<felt252>([28]) -> ([28]); // 58
felt252_add([28], [29]) -> ([30]); // 59
const_as_immediate<Const<felt252, 1>>() -> ([31]); // 60
store_temp<felt252>([30]) -> ([30]); // 61
felt252_add([30], [31]) -> ([32]); // 62
const_as_immediate<Const<felt252, 1>>() -> ([33]); // 63
store_temp<felt252>([32]) -> ([32]); // 64
felt252_add([32], [33]) -> ([34]); // 65
const_as_immediate<Const<felt252, 1>>() -> ([35]); // 66
store_temp<felt252>([34]) -> ([34]); // 67
felt252_add([34], [35]) -> ([36]); // 68
const_as_immediate<Const<felt252, 1>>() -> ([37]); // 69
store_temp<felt252>([36]) -> ([36]); // 70
felt252_add([36], [37]) -> ([38]); // 71
const_as_immediate<Const<felt252, 1>>() -> ([39]); // 72
store_temp<felt252>([38]) -> ([38]); // 73
felt252_add([38], [39]) -> ([40]); // 74
const_as_immediate<Const<felt252, 1>>() -> ([41]); // 75
store_temp<felt252>([40]) -> ([40]); // 76
felt252_add([40], [41]) -> ([42]); // 77
drop<felt252>([42]) -> (); // 78
const_as_immediate<Const<felt252, 1>>() -> ([43]); // 79
const_as_immediate<Const<felt252, 1>>() -> ([44]); // 80
store_temp<felt252>([43]) -> ([43]); // 81
felt252_add([43], [44]) -> ([45]); // 82
const_as_immediate<Const<felt252, 1>>() -> ([46]); // 83
store_temp<felt252>([45]) -> ([45]); // 84
felt252_add([45], [46]) -> ([47]); // 85
const_as_immediate<Const<felt252, 1>>() -> ([48]); // 86
store_temp<felt252>([47]) -> ([47]); // 87
felt252_add([47], [48]) -> ([49]); // 88
const_as_immediate<Const<felt252, 1>>() -> ([50]); // 89
store_temp<felt252>([49]) -> ([49]); // 90
felt252_add([49], [50]) -> ([51]); // 91
const_as_immediate<Const<felt252, 1>>() -> ([52]); // 92
store_temp<felt252>([51]) -> ([51]); // 93
felt252_add([51], [52]) -> ([53]); // 94
const_as_immediate<Const<felt252, 1>>() -> ([54]); // 95
store_temp<felt252>([53]) -> ([53]); // 96
felt252_add([53], [54]) -> ([55]); // 97
const_as_immediate<Const<felt252, 1>>() -> ([56]); // 98
store_temp<felt252>([55]) -> ([55]); // 99
felt252_add([55], [56]) -> ([57]); // 100
const_as_immediate<Const<felt252, 1>>() -> ([58]); // 101
store_temp<felt252>([57]) -> ([57]); // 102
felt252_add([57], [58]) -> ([59]); // 103
const_as_immediate<Const<felt252, 1>>() -> ([60]); // 104
store_temp<felt252>([59]) -> ([59]); // 105
felt252_add([59], [60]) -> ([61]); // 106
const_as_immediate<Const<felt252, 1>>() -> ([62]); // 107
store_temp<felt252>([61]) -> ([61]); // 108
felt252_add([61], [62]) -> ([63]); // 109
const_as_immediate<Const<felt252, 1>>() -> ([64]); // 110
store_temp<felt252>([63]) -> ([63]); // 111
felt252_add([63], [64]) -> ([65]); // 112
const_as_immediate<Const<felt252, 1>>() -> ([66]); // 113
store_temp<felt252>([65]) -> ([65]); // 114
felt252_add([65], [66]) -> ([67]); // 115
const_as_immediate<Const<felt252, 1>>() -> ([68]); // 116
store_temp<felt252>([67]) -> ([67]); // 117
felt252_add([67], [68]) -> ([69]); // 118
const_as_immediate<Const<felt252, 1>>() -> ([70]); // 119
store_temp<felt252>([69]) -> ([69]); // 120
felt252_add([69], [70]) -> ([71]); // 121
const_as_immediate<Const<felt252, 1>>() -> ([72]); // 122
store_temp<felt252>([71]) -> ([71]); // 123
felt252_add([71], [72]) -> ([73]); // 124
drop<felt252>([73]) -> (); // 125
const_as_immediate<Const<felt252, 1>>() -> ([74]); // 126
const_as_immediate<Const<felt252, 1>>() -> ([75]); // 127
store_temp<felt252>([74]) -> ([74]); // 128
felt252_add([74], [75]) -> ([76]); // 129
const_as_immediate<Const<felt252, 1>>() -> ([77]); // 130
store_temp<felt252>([76]) -> ([76]); // 131
felt252_add([76], [77]) -> ([78]); // 132
const_as_immediate<Const<felt252, 1>>() -> ([79]); // 133
store_temp<felt252>([78]) -> ([78]); // 134
felt252_add([78], [79]) -> ([80]); // 135
const_as_immediate<Const<felt252, 1>>() -> ([81]); // 136
store_temp<felt252>([80]) -> ([80]); // 137
felt252_add([80], [81]) -> ([82]); // 138
const_as_immediate<Const<felt252, 1>>() -> ([83]); // 139
store_temp<felt252>([82]) -> ([82]); // 140
felt252_add([82], [83]) -> ([84]); // 141
const_as_immediate<Const<felt252, 1>>() -> ([85]); // 142
store_temp<felt252>([84]) -> ([84]); // 143
felt252_add([84], [85]) -> ([86]); // 144
const_as_immediate<Const<felt252, 1>>() -> ([87]); // 145
store_temp<felt252>([86]) -> ([86]); // 146
felt252_add([86], [87]) -> ([88]); // 147
const_as_immediate<Const<felt252, 1>>() -> ([89]); // 148
store_temp<felt252>([88]) -> ([88]); // 149
felt252_add([88], [89]) -> ([90]); // 150
const_as_immediate<Const<felt252, 1>>() -> ([91]); // 151
store_temp<felt252>([90]) -> ([90]); // 152
felt252_add([90], [91]) -> ([92]); // 153
const_as_immediate<Const<felt252, 1>>() -> ([93]); // 154
store_temp<felt252>([92]) -> ([92]); // 155
felt252_add([92], [93]) -> ([94]); // 156
const_as_immediate<Const<felt252, 1>>() -> ([95]); // 157
store_temp<felt252>([94]) -> ([94]); // 158
felt252_add([94], [95]) -> ([96]); // 159
const_as_immediate<Const<felt252, 1>>() -> ([97]); // 160
store_temp<felt252>([96]) -> ([96]); // 161
felt252_add([96], [97]) -> ([98]); // 162
const_as_immediate<Const<felt252, 1>>() -> ([99]); // 163
store_temp<felt252>([98]) -> ([98]); // 164
felt252_add([98], [99]) -> ([100]); // 165
const_as_immediate<Const<felt252, 1>>() -> ([101]); // 166
store_temp<felt252>([100]) -> ([100]); // 167
felt252_add([100], [101]) -> ([102]); // 168
const_as_immediate<Const<felt252, 1>>() -> ([103]); // 169
store_temp<felt252>([102]) -> ([102]); // 170
felt252_add([102], [103]) -> ([104]); // 171
drop<felt252>([104]) -> (); // 172
const_as_immediate<Const<felt252, 1>>() -> ([105]); // 173
const_as_immediate<Const<felt252, 1>>() -> ([106]); // 174
store_temp<felt252>([105]) -> ([105]); // 175
felt252_add([105], [106]) -> ([107]); // 176
const_as_immediate<Const<felt252, 1>>() -> ([108]); // 177
store_temp<felt252>([107]) -> ([107]); // 178
felt252_add([107], [108]) -> ([109]); // 179
const_as_immediate<Const<felt252, 1>>() -> ([110]); // 180
store_temp<felt252>([109]) -> ([109]); // 181
felt252_add([109], [110]) -> ([111]); // 182
const_as_immediate<Const<felt252, 1>>() -> ([112]); // 183
store_temp<felt252>([111]) -> ([111]); // 184
felt252_add([111], [112]) -> ([113]); // 185
const_as_immediate<Const<felt252, 1>>() -> ([114]); // 186
store_temp<felt252>([113]) -> ([113]); // 187
felt252_add([113], [114]) -> ([115]); // 188
const_as_immediate<Const<felt252, 1>>() -> ([116]); // 189
store_temp<felt252>([115]) -> ([115]); // 190
felt252_add([115], [116]) -> ([117]); // 191
const_as_immediate<Const<felt252, 1>>() -> ([118]); // 192
store_temp<felt252>([117]) -> ([117]); // 193
felt252_add([117], [118]) -> ([119]); // 194
const_as_immediate<Const<felt252, 1>>() -> ([120]); // 195
store_temp<felt252>([119]) -> ([119]); // 196
felt252_add([119], [120]) -> ([121]); // 197
const_as_immediate<Const<felt252, 1>>() -> ([122]); // 198
store_temp<felt252>([121]) -> ([121]); // 199
felt252_add([121], [122]) -> ([123]); // 200
const_as_immediate<Const<felt252, 1>>() -> ([124]); // 201
store_temp<felt252>([123]) -> ([123]); // 202
felt252_add([123], [124]) -> ([125]); // 203
const_as_immediate<Const<felt252, 1>>() -> ([126]); // 204
store_temp<felt252>([125]) -> ([125]); // 205
felt252_add([125], [126]) -> ([127]); // 206
const_as_immediate<Const<felt252, 1>>() -> ([128]); // 207
store_temp<felt252>([127]) -> ([127]); // 208
felt252_add([127], [128]) -> ([129]); // 209
const_as_immediate<Const<felt252, 1>>() -> ([130]); // 210
store_temp<felt252>([129]) -> ([129]); // 211
felt252_add([129], [130]) -> ([131]); // 212
const_as_immediate<Const<felt252, 1>>() -> ([132]); // 213
store_temp<felt252>([131]) -> ([131]); // 214
felt252_add([131], [132]) -> ([133]); // 215
const_as_immediate<Const<felt252, 1>>() -> ([134]); // 216
store_temp<felt252>([133]) -> ([133]); // 217
felt252_add([133], [134]) -> ([135]); // 218
drop<felt252>([135]) -> (); // 219
const_as_immediate<Const<felt252, 1>>() -> ([136]); // 220
const_as_immediate<Const<felt252, 1>>() -> ([137]); // 221
store_temp<felt252>([136]) -> ([136]); // 222
felt252_add([136], [137]) -> ([138]); // 223
const_as_immediate<Const<felt252, 1>>() -> ([139]); // 224
store_temp<felt252>([138]) -> ([138]); // 225
felt252_add([138], [139]) -> ([140]); // 226
const_as_immediate<Const<felt252, 1>>() -> ([141]); // 227
store_temp<felt252>([140]) -> ([140]); // 228
felt252_add([140], [141]) -> ([142]); // 229
const_as_immediate<Const<felt252, 1>>() -> ([143]); // 230
store_temp<felt252>([142]) -> ([142]); // 231
felt252_add([142], [143]) -> ([144]); // 232
const_as_immediate<Const<felt252, 1>>() -> ([145]); // 233
store_temp<felt252>([144]) -> ([144]); // 234
felt252_add([144], [145]) -> ([146]); // 235
const_as_immediate<Const<felt252, 1>>() -> ([147]); // 236
store_temp<felt252>([146]) -> ([146]); // 237
felt252_add([146], [147]) -> ([148]); // 238
const_as_immediate<Const<felt252, 1>>() -> ([149]); // 239
store_temp<felt252>([148]) -> ([148]); // 240
felt252_add([148], [149]) -> ([150]); // 241
const_as_immediate<Const<felt252, 1>>() -> ([151]); // 242
store_temp<felt252>([150]) -> ([150]); // 243
felt252_add([150], [151]) -> ([152]); // 244
const_as_immediate<Const<felt252, 1>>() -> ([153]); // 245
store_temp<felt252>([152]) -> ([152]); // 246
felt252_add([152], [153]) -> ([154]); // 247
const_as_immediate<Const<felt252, 1>>() -> ([155]); // 248
store_temp<felt252>([154]) -> ([154]); // 249
felt252_add([154], [155]) -> ([156]); // 250
const_as_immediate<Const<felt252, 1>>() -> ([157]); // 251
store_temp<felt252>([156]) -> ([156]); // 252
felt252_add([156], [157]) -> ([158]); // 253
const_as_immediate<Const<felt252, 1>>() -> ([159]); // 254
store_temp<felt252>([158]) -> ([158]); // 255
felt252_add([158], [159]) -> ([160]); // 256
const_as_immediate<Const<felt252, 1>>() -> ([161]); // 257
store_temp<felt252>([160]) -> ([160]); // 258
felt252_add([160], [161]) -> ([162]); // 259
const_as_immediate<Const<felt252, 1>>() -> ([163]); // 260
store_temp<felt252>([162]) -> ([162]); // 261
felt252_add([162], [163]) -> ([164]); // 262
const_as_immediate<Const<felt252, 1>>() -> ([165]); // 263
store_temp<felt252>([164]) -> ([164]); // 264
felt252_add([164], [165]) -> ([166]); // 265
drop<felt252>([166]) -> (); // 266
const_as_immediate<Const<felt252, 1>>() -> ([167]); // 267
const_as_immediate<Const<felt252, 1>>() -> ([168]); // 268
store_temp<felt252>([167]) -> ([167]); // 269
felt252_add([167], [168]) -> ([169]); // 270
const_as_immediate<Const<felt252, 1>>() -> ([170]); // 271
store_temp<felt252>([169]) -> ([169]); // 272
felt252_add([169], [170]) -> ([171]); // 273
const_as_immediate<Const<felt252, 1>>() -> ([172]); // 274
store_temp<felt252>([171]) -> ([171]); // 275
felt252_add([171], [172]) -> ([173]); // 276
const_as_immediate<Const<felt252, 1>>() -> ([174]); // 277
store_temp<felt252>([173]) -> ([173]); // 278
felt252_add([173], [174]) -> ([175]); // 279
const_as_immediate<Const<felt252, 1>>() -> ([176]); // 280
store_temp<felt252>([175]) -> ([175]); // 281
felt252_add([175], [176]) -> ([177]); // 282
const_as_immediate<Const<felt252, 1>>() -> ([178]); // 283
store_temp<felt252>([177]) -> ([177]); // 284
felt252_add([177], [178]) -> ([179]); // 285
const_as_immediate<Const<felt252, 1>>() -> ([180]); // 286
store_temp<felt252>([179]) -> ([179]); // 287
felt252_add([179], [180]) -> ([181]); // 288
const_as_immediate<Const<felt252, 1>>() -> ([182]); // 289
store_temp<felt252>([181]) -> ([181]); // 290
felt252_add([181], [182]) -> ([183]); // 291
const_as_immediate<Const<felt252, 1>>() -> ([184]); // 292
store_temp<felt252>([183]) -> ([183]); // 293
felt252_add([183], [184]) -> ([185]); // 294
const_as_immediate<Const<felt252, 1>>() -> ([186]); // 295
store_temp<felt252>([185]) -> ([185]); // 296
felt252_add([185], [186]) -> ([187]); // 297
const_as_immediate<Const<felt252, 1>>() -> ([188]); // 298
store_temp<felt252>([187]) -> ([187]); // 299
felt252_add([187], [188]) -> ([189]); // 300
const_as_immediate<Const<felt252, 1>>() -> ([190]); // 301
store_temp<felt252>([189]) -> ([189]); // 302
felt252_add([189], [190]) -> ([191]); // 303
const_as_immediate<Const<felt252, 1>>() -> ([192]); // 304
store_temp<felt252>([191]) -> ([191]); // 305
felt252_add([191], [192]) -> ([193]); // 306
const_as_immediate<Const<felt252, 1>>() -> ([194]); // 307
store_temp<felt252>([193]) -> ([193]); // 308
felt252_add([193], [194]) -> ([195]); // 309
const_as_immediate<Const<felt252, 1>>() -> ([196]); // 310
store_temp<felt252>([195]) -> ([195]); // 311
felt252_add([195], [196]) -> ([197]); // 312
drop<felt252>([197]) -> (); // 313
const_as_immediate<Const<felt252, 1>>() -> ([198]); // 314
const_as_immediate<Const<felt252, 1>>() -> ([199]); // 315
store_temp<felt252>([198]) -> ([198]); // 316
felt252_add([198], [199]) -> ([200]); // 317
const_as_immediate<Const<felt252, 1>>() -> ([201]); // 318
store_temp<felt252>([200]) -> ([200]); // 319
felt252_add([200], [201]) -> ([202]); // 320
const_as_immediate<Const<felt252, 1>>() -> ([203]); // 321
store_temp<felt252>([202]) -> ([202]); // 322
felt252_add([202], [203]) -> ([204]); // 323
const_as_immediate<Const<felt252, 1>>() -> ([205]); // 324
store_temp<felt252>([204]) -> ([204]); // 325
felt252_add([204], [205]) -> ([206]); // 326
const_as_immediate<Const<felt252, 1>>() -> ([207]); // 327
store_temp<felt252>([206]) -> ([206]); // 328
felt252_add([206], [207]) -> ([208]); // 329
const_as_immediate<Const<felt252, 1>>() -> ([209]); // 330
store_temp<felt252>([208]) -> ([208]); // 331
felt252_add([208], [209]) -> ([210]); // 332
const_as_immediate<Const<felt252, 1>>() -> ([211]); // 333
store_temp<felt252>([210]) -> ([210]); // 334
felt252_add([210], [211]) -> ([212]); // 335
const_as_immediate<Const<felt252, 1>>() -> ([213]); // 336
store_temp<felt252>([212]) -> ([212]); // 337
felt252_add([212], [213]) -> ([214]); // 338
const_as_immediate<Const<felt252, 1>>() -> ([215]); // 339
store_temp<felt252>([214]) -> ([214]); // 340
felt252_add([214], [215]) -> ([216]); // 341
const_as_immediate<Const<felt252, 1>>() -> ([217]); // 342
store_temp<felt252>([216]) -> ([216]); // 343
felt252_add([216], [217]) -> ([218]); // 344
const_as_immediate<Const<felt252, 1>>() -> ([219]); // 345
store_temp<felt252>([218]) -> ([218]); // 346
felt252_add([218], [219]) -> ([220]); // 347
const_as_immediate<Const<felt252, 1>>() -> ([221]); // 348
store_temp<felt252>([220]) -> ([220]); // 349
felt252_add([220], [221]) -> ([222]); // 350
const_as_immediate<Const<felt252, 1>>() -> ([223]); // 351
store_temp<felt252>([222]) -> ([222]); // 352
felt252_add([222], [223]) -> ([224]); // 353
const_as_immediate<Const<felt252, 1>>() -> ([225]); // 354
store_temp<felt252>([224]) -> ([224]); // 355
felt252_add([224], [225]) -> ([226]); // 356
const_as_immediate<Const<felt252, 1>>() -> ([227]); // 357
store_temp<felt252>([226]) -> ([226]); // 358
felt252_add([226], [227]) -> ([228]); // 359
drop<felt252>([228]) -> (); // 360
const_as_immediate<Const<felt252, 1>>() -> ([229]); // 361
const_as_immediate<Const<felt252, 1>>() -> ([230]); // 362
store_temp<felt252>([229]) -> ([229]); // 363
felt252_add([229], [230]) -> ([231]); // 364
const_as_immediate<Const<felt252, 1>>() -> ([232]); // 365
store_temp<felt252>([231]) -> ([231]); // 366
felt252_add([231], [232]) -> ([233]); // 367
const_as_immediate<Const<felt252, 1>>() -> ([234]); // 368
store_temp<felt252>([233]) -> ([233]); // 369
felt252_add([233], [234]) -> ([235]); // 370
const_as_immediate<Const<felt252, 1>>() -> ([236]); // 371
store_temp<felt252>([235]) -> ([235]); // 372
felt252_add([235], [236]) -> ([237]); // 373
const_as_immediate<Const<felt252, 1>>() -> ([238]); // 374
store_temp<felt252>([237]) -> ([237]); // 375
felt252_add([237], [238]) -> ([239]); // 376
const_as_immediate<Const<felt252, 1>>() -> ([240]); // 377
store_temp<felt252>([239]) -> ([239]); // 378
felt252_add([239], [240]) -> ([241]); // 379
const_as_immediate<Const<felt252, 1>>() -> ([242]); // 380
store_temp<felt252>([241]) -> ([241]); // 381
felt252_add([241], [242]) -> ([243]); // 382
const_as_immediate<Const<felt252, 1>>() -> ([244]); // 383
store_temp<felt252>([243]) -> ([243]); // 384
felt252_add([243], [244]) -> ([245]); // 385
const_as_immediate<Const<felt252, 1>>() -> ([246]); // 386
store_temp<felt252>([245]) -> ([245]); // 387
felt252_add([245], [246]) -> ([247]); // 388
const_as_immediate<Const<felt252, 1>>() -> ([248]); // 389
store_temp<felt252>([247]) -> ([247]); // 390
felt252_add([247], [248]) -> ([249]); // 391
const_as_immediate<Const<felt252, 1>>() -> ([250]); // 392
store_temp<felt252>([249]) -> ([249]); // 393
felt252_add([249], [250]) -> ([251]); // 394
const_as_immediate<Const<felt252, 1>>() -> ([252]); // 395
store_temp<felt252>([251]) -> ([251]); // 396
felt252_add([251], [252]) -> ([253]); // 397
const_as_immediate<Const<felt252, 1>>() -> ([254]); // 398
store_temp<felt252>([253]) -> ([253]); // 399
felt252_add([253], [254]) -> ([255]); // 400
const_as_immediate<Const<felt252, 1>>() -> ([256]); // 401
store_temp<felt252>([255]) -> ([255]); // 402
felt252_add([255], [256]) -> ([257]); // 403
const_as_immediate<Const<felt252, 1>>() -> ([258]); // 404
store_temp<felt252>([257]) -> ([257]); // 405
felt252_add([257], [258]) -> ([259]); // 406
drop<felt252>([259]) -> (); // 407
const_as_immediate<Const<felt252, 1>>() -> ([260]); // 408
const_as_immediate<Const<felt252, 1>>() -> ([261]); // 409
store_temp<felt252>([260]) -> ([260]); // 410
felt252_add([260], [261]) -> ([262]); // 411
const_as_immediate<Const<felt252, 1>>() -> ([263]); // 412
store_temp<felt252>([262]) -> ([262]); // 413
felt252_add([262], [263]) -> ([264]); // 414
const_as_immediate<Const<felt252, 1>>() -> ([265]); // 415
store_temp<felt252>([264]) -> ([264]); // 416
felt252_add([264], [265]) -> ([266]); // 417
const_as_immediate<Const<felt252, 1>>() -> ([267]); // 418
store_temp<felt252>([266]) -> ([266]); // 419
felt252_add([266], [267]) -> ([268]); // 420
const_as_immediate<Const<felt252, 1>>() -> ([269]); // 421
store_temp<felt252>([268]) -> ([268]); // 422
felt252_add([268], [269]) -> ([270]); // 423
const_as_immediate<Const<felt252, 1>>() -> ([271]); // 424
store_temp<felt252>([270]) -> ([270]); // 425
felt252_add([270], [271]) -> ([272]); // 426
const_as_immediate<Const<felt252, 1>>() -> ([273]); // 427
store_temp<felt252>([272]) -> ([272]); // 428
felt252_add([272], [273]) -> ([274]); // 429
const_as_immediate<Const<felt252, 1>>() -> ([275]); // 430
store_temp<felt252>([274]) -> ([274]); // 431
felt252_add([274], [275]) -> ([276]); // 432
const_as_immediate<Const<felt252, 1>>() -> ([277]); // 433
store_temp<felt252>([276]) -> ([276]); // 434
felt252_add([276], [277]) -> ([278]); // 435
const_as_immediate<Const<felt252, 1>>() -> ([279]); // 436
store_temp<felt252>([278]) -> ([278]); // 437
felt252_add([278], [279]) -> ([280]); // 438
const_as_immediate<Const<felt252, 1>>() -> ([281]); // 439
store_temp<felt252>([280]) -> ([280]); // 440
felt252_add([280], [281]) -> ([282]); // 441
const_as_immediate<Const<felt252, 1>>() -> ([283]); // 442
store_temp<felt252>([282]) -> ([282]); // 443
felt252_add([282], [283]) -> ([284]); // 444
const_as_immediate<Const<felt252, 1>>() -> ([285]); // 445
store_temp<felt252>([284]) -> ([284]); // 446
felt252_add([284], [285]) -> ([286]); // 447
const_as_immediate<Const<felt252, 1>>() -> ([287]); // 448
store_temp<felt252>([286]) -> ([286]); // 449
felt252_add([286], [287]) -> ([288]); // 450
const_as_immediate<Const<felt252, 1>>() -> ([289]); // 451
store_temp<felt252>([288]) -> ([288]); // 452
felt252_add([288], [289]) -> ([290]); // 453
drop<felt252>([290]) -> (); // 454
return(); // 455

test::function_with_branch_align@0([0]: core::bool) -> (felt252);
test::foo@11([0]: core::bool) -> ();

//! > casm
jmp rel 5 if [fp + -3] != 0;
[ap + 0] = 2, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
jmp rel 17 if [fp + -3] != 0;
ap += 123;
[ap + 0] = 0, ap++;
call rel -14;
[ap + 0] = 0, ap++;
call rel -18;
[ap + 0] = 0, ap++;
call rel -22;
ret;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = [ap + -1] + 1, ap++;
ret;

//! > ==========================================================================

//! > coupons

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;
extern fn coupon_buy<T>() -> T nopanic;
impl DropCoupon of Drop<bar::Coupon>;

fn foo(x: felt252) {
    let c1: bar::Coupon = coupon_buy();
    let _c2: bar::Coupon = coupon_buy();
    let _c3: bar::Coupon = coupon_buy();
    bar(__coupon__: c1);
}

#[inline(never)]
fn bar() {
    redeposit_gas();
}

//! > enforced_costs
test::bar 2000

//! > gas_solution_lp
#9: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 1900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 6300, Step: 6, Hole: 0, RangeCheck: 0})
test::bar: OrderedHashMap({Const: 2000, Step: 1, Hole: 0, RangeCheck: 0})

//! > gas_solution_linear
#9: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 1900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 6300, Step: 6, Hole: 0, RangeCheck: 0})
test::bar: OrderedHashMap({Const: 2000, Step: 1, Hole: 0, RangeCheck: 0})

//! > ap_solution_lp

test::bar: 1
test::foo: 4

//! > ap_solution_linear

test::foo: 4
test::bar: 1

//! > sierra_code
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type Coupon<user@test::bar> = Coupon<user@test::bar> [storable: true, drop: true, dup: false, zero_sized: true];

libfunc drop<felt252> = drop<felt252>;
libfunc coupon_buy<Coupon<user@test::bar>> = coupon_buy<Coupon<user@test::bar>>;
libfunc drop<Coupon<user@test::bar>> = drop<Coupon<user@test::bar>>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc coupon_call<user@test::bar> = coupon_call<user@test::bar>;
libfunc redeposit_gas = redeposit_gas;

drop<felt252>([1]) -> (); // 0
coupon_buy<Coupon<user@test::bar>>() -> ([2]); // 1
coupon_buy<Coupon<user@test::bar>>() -> ([3]); // 2
drop<Coupon<user@test::bar>>([3]) -> (); // 3
coupon_buy<Coupon<user@test::bar>>() -> ([4]); // 4
drop<Coupon<user@test::bar>>([4]) -> (); // 5
store_temp<GasBuiltin>([0]) -> ([0]); // 6
coupon_call<user@test::bar>([0], [2]) -> ([5]); // 7
return([5]); // 8
redeposit_gas([0]) -> ([1]); // 9
store_temp<GasBuiltin>([1]) -> ([1]); // 10
return([1]); // 11

test::foo@0([0]: GasBuiltin, [1]: felt252) -> (GasBuiltin);
test::bar@9([0]: GasBuiltin) -> (GasBuiltin);

//! > casm
[ap + 0] = [fp + -4], ap++;
call rel 3;
ret;
[ap + 0] = [fp + -3] + 1900, ap++;
ret;

//! > ==========================================================================

//! > coupon refund

//! > test_runner_name
SmallE2ETestRunnerMetadataComputation

//! > cairo
// TODO(lior): Use gas::redeposit_gas once it's there.
extern fn redeposit_gas() implicits(GasBuiltin) nopanic;
extern fn coupon_refund<T>(c: T) nopanic;

fn foo(c0: bar20000::Coupon, c1: bar20000::Coupon, c2: bar20000::Coupon) {
    // Refund is fully used.
    coupon_refund(c0);
    bar20000();
    bar20000();
    redeposit_gas();  // Zero redeposit.

    // Refund more than used - rest is redeposited.
    coupon_refund(c1);
    bar1000();
    redeposit_gas();

    // Refund more than used - rest is wasted.
    coupon_refund(c2);
    bar1000();
}

#[inline(never)]
fn bar20000() nopanic {
    redeposit_gas();
}

#[inline(never)]
fn bar1000() nopanic {
    redeposit_gas();
}

//! > enforced_costs
test::bar20000 20000
test::bar1000 1000

//! > gas_solution_lp
#0: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#4: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#5: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#8: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#9: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#13: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 19900, Step: 0, Hole: 0, RangeCheck: 0})
#16: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 43100, Step: 12, Hole: 0, RangeCheck: 0})
test::bar20000: OrderedHashMap({Const: 20000, Step: 1, Hole: 0, RangeCheck: 0})
test::bar1000: OrderedHashMap({Const: 1000, Step: 1, Hole: 0, RangeCheck: 0})

//! > gas_solution_linear
#0: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#4: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#5: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 0, Step: 0, Hole: 0, RangeCheck: 0})
#8: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 18700, Step: 0, Hole: 0, RangeCheck: 0})
#9: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 18700, Step: 0, Hole: 0, RangeCheck: 0})
#13: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 19900, Step: 0, Hole: 0, RangeCheck: 0})
#16: OrderedHashMap({Pedersen: 0, Poseidon: 0, Bitwise: 0, EcOp: 0, AddMod: 0, MulMod: 0, Const: 900, Step: 0, Hole: 0, RangeCheck: 0})

test::foo: OrderedHashMap({Const: 20500, Step: 12, Hole: 0, RangeCheck: 0})
test::bar20000: OrderedHashMap({Const: 20000, Step: 1, Hole: 0, RangeCheck: 0})
test::bar1000: OrderedHashMap({Const: 1000, Step: 1, Hole: 0, RangeCheck: 0})

//! > ap_solution_lp

test::bar20000: 1
test::bar1000: 1
test::foo: 15

//! > ap_solution_linear

test::foo: 15
test::bar20000: 1
test::bar1000: 1

//! > sierra_code
type Coupon<user@test::bar20000> = Coupon<user@test::bar20000> [storable: true, drop: true, dup: false, zero_sized: true];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];

libfunc coupon_refund<Coupon<user@test::bar20000>> = coupon_refund<Coupon<user@test::bar20000>>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc function_call<user@test::bar20000> = function_call<user@test::bar20000>;
libfunc redeposit_gas = redeposit_gas;
libfunc function_call<user@test::bar1000> = function_call<user@test::bar1000>;

coupon_refund<Coupon<user@test::bar20000>>([1]) -> (); // 0
store_temp<GasBuiltin>([0]) -> ([0]); // 1
function_call<user@test::bar20000>([0]) -> ([4]); // 2
function_call<user@test::bar20000>([4]) -> ([5]); // 3
redeposit_gas([5]) -> ([6]); // 4
coupon_refund<Coupon<user@test::bar20000>>([2]) -> (); // 5
store_temp<GasBuiltin>([6]) -> ([6]); // 6
function_call<user@test::bar1000>([6]) -> ([7]); // 7
redeposit_gas([7]) -> ([8]); // 8
coupon_refund<Coupon<user@test::bar20000>>([3]) -> (); // 9
store_temp<GasBuiltin>([8]) -> ([8]); // 10
function_call<user@test::bar1000>([8]) -> ([9]); // 11
return([9]); // 12
redeposit_gas([0]) -> ([1]); // 13
store_temp<GasBuiltin>([1]) -> ([1]); // 14
return([1]); // 15
redeposit_gas([0]) -> ([1]); // 16
store_temp<GasBuiltin>([1]) -> ([1]); // 17
return([1]); // 18

test::foo@0([0]: GasBuiltin, [1]: Coupon<user@test::bar20000>, [2]: Coupon<user@test::bar20000>, [3]: Coupon<user@test::bar20000>) -> (GasBuiltin);
test::bar20000@13([0]: GasBuiltin) -> (GasBuiltin);
test::bar1000@16([0]: GasBuiltin) -> (GasBuiltin);

//! > casm
[ap + 0] = [fp + -3], ap++;
call rel 12;
call rel 10;
[ap + 0] = [ap + -1], ap++;
call rel 10;
[ap + 0] = [ap + -1] + 18700, ap++;
call rel 6;
ret;
[ap + 0] = [fp + -3] + 19900, ap++;
ret;
[ap + 0] = [fp + -3] + 900, ap++;
ret;
