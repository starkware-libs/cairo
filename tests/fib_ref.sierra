type [0] = felt;
type [1] = Ref<[0]>;
type [2] = NonZero<[0]>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc dup<[1]> = dup<[1]>;
libfunc deref<[0]> = deref<[0]>;
libfunc store_temp<[0]> = store_temp<[0]>;
libfunc felt_jump_nz = felt_jump_nz;
libfunc drop<[1]> = drop<[1]>;
libfunc store_temp<[1]> = store_temp<[1]>;
libfunc jump = jump;
libfunc unwrap_nz<[0]> = unwrap_nz<[0]>;
libfunc drop<[0]> = drop<[0]>;
libfunc felt_add = felt_add;
libfunc into_ref<[0]> = into_ref<[0]>;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_sub = felt_sub;
libfunc rename<[1]> = rename<[1]>;
libfunc function_call<user@[0]> = function_call<user@[0]>;

revoke_ap_tracking() -> ();
dup<[1]>([2]) -> ([2], [20]);
deref<[0]>([20]) -> ([3]);
store_temp<[0]>([3]) -> ([3]);
felt_jump_nz([3]) { 9([4]) fallthrough() };
drop<[1]>([1]) -> ();
drop<[1]>([2]) -> ();
store_temp<[1]>([0]) -> ([5]);
jump() { 32() };
unwrap_nz<[0]>([4]) -> ([18]);
drop<[0]>([18]) -> ();
deref<[0]>([0]) -> ([6]);
dup<[1]>([1]) -> ([1], [21]);
deref<[0]>([21]) -> ([7]);
store_temp<[0]>([6]) -> ([6]);
store_temp<[0]>([7]) -> ([7]);
felt_add([6], [7]) -> ([8]);
store_temp<[0]>([8]) -> ([8]);
into_ref<[0]>([8]) -> ([9]);
deref<[0]>([2]) -> ([10]);
felt_const<1>() -> ([11]);
store_temp<[0]>([10]) -> ([10]);
felt_sub([10], [11]) -> ([12]);
store_temp<[0]>([12]) -> ([12]);
into_ref<[0]>([12]) -> ([13]);
store_temp<[1]>([1]) -> ([14]);
store_temp<[1]>([9]) -> ([9]);
rename<[1]>([9]) -> ([15]);
store_temp<[1]>([13]) -> ([13]);
rename<[1]>([13]) -> ([16]);
function_call<user@[0]>([14], [15], [16]) -> ([17]);
rename<[1]>([17]) -> ([5]);
store_temp<[1]>([5]) -> ([19]);
return([19]);

[0]@0([0]: [1], [1]: [1], [2]: [1]) -> ([1]);
