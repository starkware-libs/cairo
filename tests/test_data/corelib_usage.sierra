type felt = felt;
type Tuple<felt, felt> = Struct<ut@Tuple, felt, felt>;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<(core::felt, core::felt)> = Enum<ut@core::option::Option::<(core::felt, core::felt)>, Tuple<felt, felt>, Unit>;
type core::option::Option::<core::felt> = Enum<ut@core::option::Option::<core::felt>, felt, Unit>;

libfunc enum_match<core::option::Option::<(core::felt, core::felt)>> = enum_match<core::option::Option::<(core::felt, core::felt)>>;
libfunc branch_align = branch_align;
libfunc struct_deconstruct<Tuple<felt, felt>> = struct_deconstruct<Tuple<felt, felt>>;
libfunc drop<felt> = drop<felt>;
libfunc enum_init<core::option::Option::<core::felt>, 0> = enum_init<core::option::Option::<core::felt>, 0>;
libfunc store_temp<core::option::Option::<core::felt>> = store_temp<core::option::Option::<core::felt>>;
libfunc jump = jump;
libfunc drop<Unit> = drop<Unit>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::felt>, 1> = enum_init<core::option::Option::<core::felt>, 1>;
libfunc rename<core::option::Option::<core::felt>> = rename<core::option::Option::<core::felt>>;

enum_match<core::option::Option::<(core::felt, core::felt)>>([0]) { fallthrough([1]) 7([2]) };
branch_align() -> ();
struct_deconstruct<Tuple<felt, felt>>([1]) -> ([3], [4]);
drop<felt>([4]) -> ();
enum_init<core::option::Option::<core::felt>, 0>([3]) -> ([5]);
store_temp<core::option::Option::<core::felt>>([5]) -> ([6]);
jump() { 13() };
branch_align() -> ();
drop<Unit>([2]) -> ();
struct_construct<Unit>() -> ([7]);
enum_init<core::option::Option::<core::felt>, 1>([7]) -> ([8]);
store_temp<core::option::Option::<core::felt>>([8]) -> ([9]);
return([9]);
rename<core::option::Option::<core::felt>>([6]) -> ([10]);
return([10]);

corelib_usage::corelib_usage::foo@0([0]: core::option::Option::<(core::felt, core::felt)>) -> (core::option::Option::<core::felt>);
