type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::option::Option::<core::felt252> = Enum<ut@core::option::Option::<core::felt252>, felt252, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Box<felt252> = Box<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc array_new<felt252> = array_new<felt252>;
libfunc felt252_const<1> = felt252_const<1>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc store_temp<Array<felt252>> = store_temp<Array<felt252>>;
libfunc function_call<user@examples::triangle_while::triangle_while[expr19]> = function_call<user@examples::triangle_while::triangle_while[expr19]>;
libfunc drop<felt252> = drop<felt252>;
libfunc drop<Unit> = drop<Unit>;
libfunc felt252_const<0> = felt252_const<0>;
libfunc function_call<user@examples::triangle_while::triangle_while[expr27]> = function_call<user@examples::triangle_while::triangle_while[expr27]>;
libfunc drop<Array<felt252>> = drop<Array<felt252>>;
libfunc dup<felt252> = dup<felt252>;
libfunc felt252_add = felt252_add;
libfunc felt252_sub = felt252_sub;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc array_append<felt252> = array_append<felt252>;
libfunc array_pop_front<felt252> = array_pop_front<felt252>;
libfunc unbox<felt252> = unbox<felt252>;
libfunc enum_init<core::option::Option::<core::felt252>, 0> = enum_init<core::option::Option::<core::felt252>, 0>;
libfunc store_temp<core::option::Option::<core::felt252>> = store_temp<core::option::Option::<core::felt252>>;
libfunc jump = jump;
libfunc enum_init<core::option::Option::<core::felt252>, 1> = enum_init<core::option::Option::<core::felt252>, 1>;
libfunc enum_match<core::option::Option::<core::felt252>> = enum_match<core::option::Option::<core::felt252>>;

disable_ap_tracking() -> (); // 0
array_new<felt252>() -> ([1]); // 1
felt252_const<1>() -> ([2]); // 2
store_temp<felt252>([2]) -> ([2]); // 3
store_temp<felt252>([0]) -> ([0]); // 4
store_temp<Array<felt252>>([1]) -> ([1]); // 5
function_call<user@examples::triangle_while::triangle_while[expr19]>([2], [0], [1]) -> ([3], [4], [5]); // 6
drop<felt252>([4]) -> (); // 7
drop<Unit>([5]) -> (); // 8
felt252_const<0>() -> ([6]); // 9
store_temp<Array<felt252>>([3]) -> ([3]); // 10
store_temp<felt252>([6]) -> ([6]); // 11
function_call<user@examples::triangle_while::triangle_while[expr27]>([3], [6]) -> ([7], [8], [9]); // 12
drop<Array<felt252>>([7]) -> (); // 13
drop<Unit>([9]) -> (); // 14
return([8]); // 15
disable_ap_tracking() -> (); // 16
felt252_const<1>() -> ([3]); // 17
dup<felt252>([1]) -> ([1], [4]); // 18
felt252_add([4], [3]) -> ([5]); // 19
dup<felt252>([0]) -> ([0], [6]); // 20
store_temp<felt252>([5]) -> ([5]); // 21
felt252_sub([6], [5]) -> ([7]); // 22
store_temp<felt252>([7]) -> ([7]); // 23
felt252_is_zero([7]) { fallthrough() 31([8]) }; // 24
branch_align() -> (); // 25
drop<felt252>([1]) -> (); // 26
struct_construct<Unit>() -> ([9]); // 27
store_temp<Array<felt252>>([2]) -> ([2]); // 28
store_temp<felt252>([0]) -> ([0]); // 29
return([2], [0], [9]); // 30
branch_align() -> (); // 31
drop<NonZero<felt252>>([8]) -> (); // 32
dup<felt252>([0]) -> ([0], [10]); // 33
array_append<felt252>([2], [10]) -> ([11]); // 34
felt252_const<1>() -> ([12]); // 35
felt252_add([0], [12]) -> ([13]); // 36
store_temp<felt252>([13]) -> ([13]); // 37
store_temp<felt252>([1]) -> ([1]); // 38
store_temp<Array<felt252>>([11]) -> ([11]); // 39
function_call<user@examples::triangle_while::triangle_while[expr19]>([13], [1], [11]) -> ([14], [15], [16]); // 40
return([14], [15], [16]); // 41
disable_ap_tracking() -> (); // 42
array_pop_front<felt252>([0]) { fallthrough([2], [3]) 50([4]) }; // 43
branch_align() -> (); // 44
unbox<felt252>([3]) -> ([5]); // 45
enum_init<core::option::Option::<core::felt252>, 0>([5]) -> ([6]); // 46
store_temp<Array<felt252>>([2]) -> ([7]); // 47
store_temp<core::option::Option::<core::felt252>>([6]) -> ([8]); // 48
jump() { 55() }; // 49
branch_align() -> (); // 50
struct_construct<Unit>() -> ([9]); // 51
enum_init<core::option::Option::<core::felt252>, 1>([9]) -> ([10]); // 52
store_temp<Array<felt252>>([4]) -> ([7]); // 53
store_temp<core::option::Option::<core::felt252>>([10]) -> ([8]); // 54
enum_match<core::option::Option::<core::felt252>>([8]) { fallthrough([11]) 62([12]) }; // 55
branch_align() -> (); // 56
felt252_add([1], [11]) -> ([13]); // 57
store_temp<Array<felt252>>([7]) -> ([7]); // 58
store_temp<felt252>([13]) -> ([13]); // 59
function_call<user@examples::triangle_while::triangle_while[expr27]>([7], [13]) -> ([14], [15], [16]); // 60
return([14], [15], [16]); // 61
branch_align() -> (); // 62
drop<Unit>([12]) -> (); // 63
struct_construct<Unit>() -> ([17]); // 64
store_temp<Array<felt252>>([7]) -> ([7]); // 65
store_temp<felt252>([1]) -> ([1]); // 66
return([7], [1], [17]); // 67

examples::triangle_while::triangle_while@0([0]: felt252) -> (felt252);
examples::triangle_while::triangle_while[expr19]@16([0]: felt252, [1]: felt252, [2]: Array<felt252>) -> (Array<felt252>, felt252, Unit);
examples::triangle_while::triangle_while[expr27]@42([0]: Array<felt252>, [1]: felt252) -> (Array<felt252>, felt252, Unit);
