type felt = felt;
type NonZero<felt> = NonZero<felt>;
type Tuple<felt, felt> = Struct<ut@Tuple, felt, felt>;

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<felt> = dup<felt>;
libfunc felt_is_zero = felt_is_zero;
libfunc branch_align = branch_align;
libfunc drop<felt> = drop<felt>;
libfunc felt_const<0> = felt_const<0>;
libfunc struct_construct<Tuple<felt, felt>> = struct_construct<Tuple<felt, felt>>;
libfunc store_temp<Tuple<felt, felt>> = store_temp<Tuple<felt, felt>>;
libfunc jump = jump;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc felt_add = felt_add;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_sub = felt_sub;
libfunc store_temp<felt> = store_temp<felt>;
libfunc function_call<user@fib_counter::fib_counter::fib> = function_call<user@fib_counter::fib_counter::fib>;
libfunc struct_deconstruct<Tuple<felt, felt>> = struct_deconstruct<Tuple<felt, felt>>;
libfunc rename<Tuple<felt, felt>> = rename<Tuple<felt, felt>>;

disable_ap_tracking() -> ();
dup<felt>([2]) -> ([2], [4]);
felt_is_zero([4]) { fallthrough() 10([3]) };
branch_align() -> ();
drop<felt>([1]) -> ();
drop<felt>([2]) -> ();
felt_const<0>() -> ([5]);
struct_construct<Tuple<felt, felt>>([0], [5]) -> ([6]);
store_temp<Tuple<felt, felt>>([6]) -> ([7]);
jump() { 25() };
branch_align() -> ();
drop<NonZero<felt>>([3]) -> ();
dup<felt>([1]) -> ([1], [9]);
felt_add([0], [9]) -> ([8]);
felt_const<1>() -> ([10]);
felt_sub([2], [10]) -> ([11]);
store_temp<felt>([1]) -> ([13]);
store_temp<felt>([8]) -> ([14]);
store_temp<felt>([11]) -> ([15]);
function_call<user@fib_counter::fib_counter::fib>([13], [14], [15]) -> ([12]);
struct_deconstruct<Tuple<felt, felt>>([12]) -> ([16], [17]);
felt_const<1>() -> ([18]);
felt_add([17], [18]) -> ([19]);
struct_construct<Tuple<felt, felt>>([16], [19]) -> ([20]);
store_temp<Tuple<felt, felt>>([20]) -> ([7]);
rename<Tuple<felt, felt>>([7]) -> ([21]);
return([21]);

fib_counter::fib_counter::fib@0([0]: felt, [1]: felt, [2]: felt) -> (Tuple<felt, felt>);
