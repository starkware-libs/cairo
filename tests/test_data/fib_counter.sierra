type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<felt252, felt252> = Struct<ut@Tuple, felt252, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<felt252> = dup<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc drop<felt252> = drop<felt252>;
libfunc felt252_const<0> = felt252_const<0>;
libfunc struct_construct<Tuple<felt252, felt252>> = struct_construct<Tuple<felt252, felt252>>;
libfunc store_temp<Tuple<felt252, felt252>> = store_temp<Tuple<felt252, felt252>>;
libfunc jump = jump;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc felt252_add = felt252_add;
libfunc felt252_const<1> = felt252_const<1>;
libfunc felt252_sub = felt252_sub;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc function_call<user@examples::fib_counter::fib> = function_call<user@examples::fib_counter::fib>;
libfunc struct_deconstruct<Tuple<felt252, felt252>> = struct_deconstruct<Tuple<felt252, felt252>>;

disable_ap_tracking() -> (); // 0
dup<felt252>([2]) -> ([2], [3]); // 1
felt252_is_zero([3]) { fallthrough() 10([4]) }; // 2
branch_align() -> (); // 3
drop<felt252>([1]) -> (); // 4
drop<felt252>([2]) -> (); // 5
felt252_const<0>() -> ([5]); // 6
struct_construct<Tuple<felt252, felt252>>([0], [5]) -> ([6]); // 7
store_temp<Tuple<felt252, felt252>>([6]) -> ([7]); // 8
jump() { 25() }; // 9
branch_align() -> (); // 10
drop<NonZero<felt252>>([4]) -> (); // 11
dup<felt252>([1]) -> ([1], [8]); // 12
felt252_add([0], [8]) -> ([9]); // 13
felt252_const<1>() -> ([10]); // 14
felt252_sub([2], [10]) -> ([11]); // 15
store_temp<felt252>([1]) -> ([1]); // 16
store_temp<felt252>([9]) -> ([9]); // 17
store_temp<felt252>([11]) -> ([11]); // 18
function_call<user@examples::fib_counter::fib>([1], [9], [11]) -> ([12]); // 19
struct_deconstruct<Tuple<felt252, felt252>>([12]) -> ([13], [14]); // 20
felt252_const<1>() -> ([15]); // 21
felt252_add([14], [15]) -> ([16]); // 22
struct_construct<Tuple<felt252, felt252>>([13], [16]) -> ([17]); // 23
store_temp<Tuple<felt252, felt252>>([17]) -> ([7]); // 24
return([7]); // 25

examples::fib_counter::fib@0([0]: felt252, [1]: felt252, [2]: felt252) -> (Tuple<felt252, felt252>);
