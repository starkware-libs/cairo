type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type examples::enum_flow::MyEnumLong = Enum<ut@examples::enum_flow::MyEnumLong, felt252, felt252, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type examples::enum_flow::MyEnumShort = Enum<ut@examples::enum_flow::MyEnumShort, felt252, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 300> = Const<felt252, 300> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<felt252, 300>> = const_as_immediate<Const<felt252, 300>>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc enum_match<examples::enum_flow::MyEnumShort> = enum_match<examples::enum_flow::MyEnumShort>;
libfunc branch_align = branch_align;
libfunc enum_match<examples::enum_flow::MyEnumLong> = enum_match<examples::enum_flow::MyEnumLong>;

const_as_immediate<Const<felt252, 300>>() -> ([0]); // 0
store_temp<felt252>([0]) -> ([0]); // 1
return([0]); // 2
enum_match<examples::enum_flow::MyEnumShort>([0]) { fallthrough([1]) 7([2]) }; // 3
branch_align() -> (); // 4
store_temp<felt252>([1]) -> ([1]); // 5
return([1]); // 6
branch_align() -> (); // 7
store_temp<felt252>([2]) -> ([2]); // 8
return([2]); // 9
enum_match<examples::enum_flow::MyEnumLong>([0]) { fallthrough([1]) 14([2]) 17([3]) }; // 10
branch_align() -> (); // 11
store_temp<felt252>([1]) -> ([1]); // 12
return([1]); // 13
branch_align() -> (); // 14
store_temp<felt252>([2]) -> ([2]); // 15
return([2]); // 16
branch_align() -> (); // 17
store_temp<felt252>([3]) -> ([3]); // 18
return([3]); // 19

examples::enum_flow::main@0() -> (felt252);
examples::enum_flow::match_short@3([0]: examples::enum_flow::MyEnumShort) -> (felt252);
examples::enum_flow::match_long@10([0]: examples::enum_flow::MyEnumLong) -> (felt252);
