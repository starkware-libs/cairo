type uint128 = uint128;
type Uninitialized<uint128> = Uninitialized<uint128>;
type felt = felt;
type NonZero<felt> = NonZero<felt>;
type RangeCheck = RangeCheck;
type Array<felt> = Array<felt>;
type core::PanicResult::<core::integer::uint128> = Enum<ut@core::PanicResult::<core::integer::uint128>, uint128, Array<felt>>;
type Unit = Struct<ut@Tuple>;

libfunc alloc_local<uint128> = alloc_local<uint128>;
libfunc finalize_locals = finalize_locals;
libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc dup<uint128> = dup<uint128>;
libfunc uint128_to_felt = uint128_to_felt;
libfunc felt_jump_nz = felt_jump_nz;
libfunc drop<uint128> = drop<uint128>;
libfunc drop<Uninitialized<uint128>> = drop<Uninitialized<uint128>>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<uint128> = store_temp<uint128>;
libfunc burn_gas = burn_gas;
libfunc jump = jump;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc function_call<user@core::integer::uint128_add_panicable> = function_call<user@core::integer::uint128_add_panicable>;
libfunc enum_match<core::PanicResult::<core::integer::uint128>> = enum_match<core::PanicResult::<core::integer::uint128>>;
libfunc enum_init<core::PanicResult::<core::integer::uint128>, 1> = enum_init<core::PanicResult::<core::integer::uint128>, 1>;
libfunc store_temp<core::PanicResult::<core::integer::uint128>> = store_temp<core::PanicResult::<core::integer::uint128>>;
libfunc rename<core::PanicResult::<core::integer::uint128>> = rename<core::PanicResult::<core::integer::uint128>>;
libfunc felt_const<1> = felt_const<1>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc store_local<uint128> = store_local<uint128>;
libfunc function_call<user@core::integer::uint128_from_felt_panicable> = function_call<user@core::integer::uint128_from_felt_panicable>;
libfunc function_call<user@core::integer::uint128_sub_panicable> = function_call<user@core::integer::uint128_sub_panicable>;
libfunc function_call<user@fib_uint128::fib_uint128::fib> = function_call<user@fib_uint128::fib_uint128::fib>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<uint128> = rename<uint128>;
libfunc enum_init<core::PanicResult::<core::integer::uint128>, 0> = enum_init<core::PanicResult::<core::integer::uint128>, 0>;
libfunc uint128_add = uint128_add;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc drop<Unit> = drop<Unit>;
libfunc array_new<felt> = array_new<felt>;
libfunc store_temp<Array<felt>> = store_temp<Array<felt>>;
libfunc array_append<felt> = array_append<felt>;
libfunc uint128_from_felt = uint128_from_felt;
libfunc uint128_sub = uint128_sub;

alloc_local<uint128>() -> ([5]);
finalize_locals() -> ();
revoke_ap_tracking() -> ();
dup<uint128>([3]) -> ([3], [59]);
uint128_to_felt([59]) -> ([6]);
felt_jump_nz([6]) { fallthrough() 13([7]) };
drop<uint128>([2]) -> ();
drop<Uninitialized<uint128>>([5]) -> ();
drop<uint128>([3]) -> ();
store_temp<RangeCheck>([0]) -> ([8]);
store_temp<uint128>([1]) -> ([9]);
burn_gas() -> ();
jump() { 86() };
drop<NonZero<felt>>([7]) -> ();
store_temp<RangeCheck>([0]) -> ([12]);
store_temp<uint128>([1]) -> ([13]);
dup<uint128>([2]) -> ([2], [60]);
store_temp<uint128>([60]) -> ([14]);
function_call<user@core::integer::uint128_add_panicable>([12], [13], [14]) -> ([10], [11]);
enum_match<core::PanicResult::<core::integer::uint128>>([11]) { 20([15]) 23([16]) };
store_temp<uint128>([15]) -> ([4]);
burn_gas() -> ();
jump() { 32() };
drop<Uninitialized<uint128>>([5]) -> ();
drop<uint128>([3]) -> ();
drop<uint128>([2]) -> ();
enum_init<core::PanicResult::<core::integer::uint128>, 1>([16]) -> ([17]);
store_temp<RangeCheck>([10]) -> ([18]);
store_temp<core::PanicResult::<core::integer::uint128>>([17]) -> ([17]);
rename<core::PanicResult::<core::integer::uint128>>([17]) -> ([19]);
burn_gas() -> ();
return([18], [19]);
felt_const<1>() -> ([20]);
store_temp<RangeCheck>([10]) -> ([23]);
store_temp<felt>([20]) -> ([24]);
store_local<uint128>([5], [4]) -> ([4]);
function_call<user@core::integer::uint128_from_felt_panicable>([23], [24]) -> ([21], [22]);
enum_match<core::PanicResult::<core::integer::uint128>>([22]) { 38([25]) 41([26]) };
store_temp<uint128>([25]) -> ([27]);
burn_gas() -> ();
jump() { 50() };
drop<uint128>([3]) -> ();
drop<uint128>([2]) -> ();
drop<uint128>([4]) -> ();
enum_init<core::PanicResult::<core::integer::uint128>, 1>([26]) -> ([28]);
store_temp<RangeCheck>([21]) -> ([29]);
store_temp<core::PanicResult::<core::integer::uint128>>([28]) -> ([28]);
rename<core::PanicResult::<core::integer::uint128>>([28]) -> ([30]);
burn_gas() -> ();
return([29], [30]);
store_temp<RangeCheck>([21]) -> ([33]);
store_temp<uint128>([3]) -> ([34]);
store_temp<uint128>([27]) -> ([35]);
function_call<user@core::integer::uint128_sub_panicable>([33], [34], [35]) -> ([31], [32]);
enum_match<core::PanicResult::<core::integer::uint128>>([32]) { 55([36]) 58([37]) };
store_temp<uint128>([36]) -> ([38]);
burn_gas() -> ();
jump() { 66() };
drop<uint128>([2]) -> ();
drop<uint128>([4]) -> ();
enum_init<core::PanicResult::<core::integer::uint128>, 1>([37]) -> ([39]);
store_temp<RangeCheck>([31]) -> ([40]);
store_temp<core::PanicResult::<core::integer::uint128>>([39]) -> ([39]);
rename<core::PanicResult::<core::integer::uint128>>([39]) -> ([41]);
burn_gas() -> ();
return([40], [41]);
store_temp<RangeCheck>([31]) -> ([44]);
store_temp<uint128>([2]) -> ([45]);
store_temp<uint128>([4]) -> ([46]);
store_temp<uint128>([38]) -> ([47]);
function_call<user@fib_uint128::fib_uint128::fib>([44], [45], [46], [47]) -> ([42], [43]);
enum_match<core::PanicResult::<core::integer::uint128>>([43]) { 72([48]) 75([49]) };
store_temp<uint128>([48]) -> ([50]);
burn_gas() -> ();
jump() { 81() };
enum_init<core::PanicResult::<core::integer::uint128>, 1>([49]) -> ([51]);
store_temp<RangeCheck>([42]) -> ([52]);
store_temp<core::PanicResult::<core::integer::uint128>>([51]) -> ([51]);
rename<core::PanicResult::<core::integer::uint128>>([51]) -> ([53]);
burn_gas() -> ();
return([52], [53]);
store_temp<RangeCheck>([42]) -> ([54]);
store_temp<uint128>([50]) -> ([55]);
rename<RangeCheck>([54]) -> ([8]);
rename<uint128>([55]) -> ([9]);
burn_gas() -> ();
enum_init<core::PanicResult::<core::integer::uint128>, 0>([9]) -> ([56]);
store_temp<RangeCheck>([8]) -> ([57]);
store_temp<core::PanicResult::<core::integer::uint128>>([56]) -> ([56]);
rename<core::PanicResult::<core::integer::uint128>>([56]) -> ([58]);
burn_gas() -> ();
return([57], [58]);
revoke_ap_tracking() -> ();
uint128_add([0], [1], [2]) { fallthrough([3], [4]) 101([5]) };
store_temp<uint128>([4]) -> ([4]);
rename<uint128>([4]) -> ([6]);
store_temp<RangeCheck>([3]) -> ([3]);
rename<RangeCheck>([3]) -> ([7]);
store_temp<uint128>([6]) -> ([8]);
burn_gas() -> ();
jump() { 115() };
struct_construct<Unit>() -> ([9]);
drop<Unit>([9]) -> ();
array_new<felt>() -> ([10]);
felt_const<1>() -> ([11]);
store_temp<Array<felt>>([10]) -> ([10]);
store_temp<felt>([11]) -> ([11]);
array_append<felt>([10], [11]) -> ([12]);
enum_init<core::PanicResult::<core::integer::uint128>, 1>([12]) -> ([13]);
store_temp<RangeCheck>([5]) -> ([5]);
rename<RangeCheck>([5]) -> ([14]);
store_temp<core::PanicResult::<core::integer::uint128>>([13]) -> ([13]);
rename<core::PanicResult::<core::integer::uint128>>([13]) -> ([15]);
burn_gas() -> ();
return([14], [15]);
enum_init<core::PanicResult::<core::integer::uint128>, 0>([8]) -> ([16]);
store_temp<RangeCheck>([7]) -> ([17]);
store_temp<core::PanicResult::<core::integer::uint128>>([16]) -> ([16]);
rename<core::PanicResult::<core::integer::uint128>>([16]) -> ([18]);
burn_gas() -> ();
return([17], [18]);
revoke_ap_tracking() -> ();
uint128_from_felt([0], [1]) { fallthrough([2], [3]) 129([4]) };
store_temp<uint128>([3]) -> ([5]);
store_temp<RangeCheck>([2]) -> ([2]);
rename<RangeCheck>([2]) -> ([6]);
store_temp<uint128>([5]) -> ([7]);
burn_gas() -> ();
jump() { 143() };
struct_construct<Unit>() -> ([8]);
drop<Unit>([8]) -> ();
array_new<felt>() -> ([9]);
felt_const<1>() -> ([10]);
store_temp<Array<felt>>([9]) -> ([9]);
store_temp<felt>([10]) -> ([10]);
array_append<felt>([9], [10]) -> ([11]);
enum_init<core::PanicResult::<core::integer::uint128>, 1>([11]) -> ([12]);
store_temp<RangeCheck>([4]) -> ([4]);
rename<RangeCheck>([4]) -> ([13]);
store_temp<core::PanicResult::<core::integer::uint128>>([12]) -> ([12]);
rename<core::PanicResult::<core::integer::uint128>>([12]) -> ([14]);
burn_gas() -> ();
return([13], [14]);
enum_init<core::PanicResult::<core::integer::uint128>, 0>([7]) -> ([15]);
store_temp<RangeCheck>([6]) -> ([16]);
store_temp<core::PanicResult::<core::integer::uint128>>([15]) -> ([15]);
rename<core::PanicResult::<core::integer::uint128>>([15]) -> ([17]);
burn_gas() -> ();
return([16], [17]);
revoke_ap_tracking() -> ();
uint128_sub([0], [1], [2]) { fallthrough([3], [4]) 158([5]) };
store_temp<uint128>([4]) -> ([4]);
rename<uint128>([4]) -> ([6]);
store_temp<RangeCheck>([3]) -> ([3]);
rename<RangeCheck>([3]) -> ([7]);
store_temp<uint128>([6]) -> ([8]);
burn_gas() -> ();
jump() { 172() };
struct_construct<Unit>() -> ([9]);
drop<Unit>([9]) -> ();
array_new<felt>() -> ([10]);
felt_const<1>() -> ([11]);
store_temp<Array<felt>>([10]) -> ([10]);
store_temp<felt>([11]) -> ([11]);
array_append<felt>([10], [11]) -> ([12]);
enum_init<core::PanicResult::<core::integer::uint128>, 1>([12]) -> ([13]);
store_temp<RangeCheck>([5]) -> ([5]);
rename<RangeCheck>([5]) -> ([14]);
store_temp<core::PanicResult::<core::integer::uint128>>([13]) -> ([13]);
rename<core::PanicResult::<core::integer::uint128>>([13]) -> ([15]);
burn_gas() -> ();
return([14], [15]);
enum_init<core::PanicResult::<core::integer::uint128>, 0>([8]) -> ([16]);
store_temp<RangeCheck>([7]) -> ([17]);
store_temp<core::PanicResult::<core::integer::uint128>>([16]) -> ([16]);
rename<core::PanicResult::<core::integer::uint128>>([16]) -> ([18]);
burn_gas() -> ();
return([17], [18]);

fib_uint128::fib_uint128::fib@0([0]: RangeCheck, [1]: uint128, [2]: uint128, [3]: uint128) -> (RangeCheck, core::PanicResult::<core::integer::uint128>);
core::integer::uint128_add_panicable@92([0]: RangeCheck, [1]: uint128, [2]: uint128) -> (RangeCheck, core::PanicResult::<core::integer::uint128>);
core::integer::uint128_from_felt_panicable@121([0]: RangeCheck, [1]: felt) -> (RangeCheck, core::PanicResult::<core::integer::uint128>);
core::integer::uint128_sub_panicable@149([0]: RangeCheck, [1]: uint128, [2]: uint128) -> (RangeCheck, core::PanicResult::<core::integer::uint128>);
