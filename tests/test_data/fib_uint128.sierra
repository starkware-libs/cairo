type uint128 = uint128;
type felt = felt;
type NonZero<felt> = NonZero<felt>;
type RangeCheck = RangeCheck;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc dup<uint128> = dup<uint128>;
libfunc uint128_to_felt = uint128_to_felt;
libfunc felt_jump_nz = felt_jump_nz;
libfunc drop<uint128> = drop<uint128>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc burn_gas = burn_gas;
libfunc jump = jump;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc uint128_add = uint128_add;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc store_temp<uint128> = store_temp<uint128>;
libfunc rename<uint128> = rename<uint128>;
libfunc felt_const<0> = felt_const<0>;
libfunc felt_const<1> = felt_const<1>;
libfunc uint128_from_felt = uint128_from_felt;
libfunc uint128_sub = uint128_sub;
libfunc function_call<user@test_crate::fib> = function_call<user@test_crate::fib>;
libfunc rename<felt> = rename<felt>;

revoke_ap_tracking() -> ();
dup<uint128>([3]) -> ([3], [44]);
uint128_to_felt([44]) -> ([4]);
felt_jump_nz([4]) { fallthrough() 11([5]) };
drop<uint128>([2]) -> ();
drop<uint128>([3]) -> ();
uint128_to_felt([1]) -> ([6]);
store_temp<RangeCheck>([0]) -> ([7]);
store_temp<felt>([6]) -> ([8]);
burn_gas() -> ();
jump() { 69() };
drop<NonZero<felt>>([5]) -> ();
dup<uint128>([2]) -> ([2], [45]);
uint128_add([0], [1], [45]) { fallthrough([9], [10]) 20([11]) };
store_temp<RangeCheck>([9]) -> ([9]);
rename<RangeCheck>([9]) -> ([12]);
store_temp<uint128>([10]) -> ([10]);
rename<uint128>([10]) -> ([13]);
burn_gas() -> ();
jump() { 28() };
drop<uint128>([3]) -> ();
drop<uint128>([2]) -> ();
felt_const<0>() -> ([14]);
store_temp<RangeCheck>([11]) -> ([11]);
rename<RangeCheck>([11]) -> ([15]);
store_temp<felt>([14]) -> ([16]);
burn_gas() -> ();
return([15], [16]);
felt_const<1>() -> ([17]);
uint128_from_felt([12], [17]) { fallthrough([18], [19]) 35([20]) };
store_temp<RangeCheck>([18]) -> ([18]);
rename<RangeCheck>([18]) -> ([21]);
store_temp<uint128>([19]) -> ([22]);
burn_gas() -> ();
jump() { 44() };
drop<uint128>([3]) -> ();
drop<uint128>([2]) -> ();
drop<uint128>([13]) -> ();
felt_const<0>() -> ([23]);
store_temp<RangeCheck>([20]) -> ([20]);
rename<RangeCheck>([20]) -> ([24]);
store_temp<felt>([23]) -> ([25]);
burn_gas() -> ();
return([24], [25]);
uint128_sub([21], [3], [22]) { fallthrough([26], [27]) 51([28]) };
store_temp<RangeCheck>([26]) -> ([26]);
rename<RangeCheck>([26]) -> ([29]);
store_temp<uint128>([27]) -> ([27]);
rename<uint128>([27]) -> ([30]);
burn_gas() -> ();
jump() { 59() };
drop<uint128>([2]) -> ();
drop<uint128>([13]) -> ();
felt_const<0>() -> ([31]);
store_temp<RangeCheck>([28]) -> ([28]);
rename<RangeCheck>([28]) -> ([32]);
store_temp<felt>([31]) -> ([33]);
burn_gas() -> ();
return([32], [33]);
store_temp<RangeCheck>([29]) -> ([36]);
store_temp<uint128>([2]) -> ([37]);
store_temp<uint128>([13]) -> ([38]);
store_temp<uint128>([30]) -> ([39]);
function_call<user@test_crate::fib>([36], [37], [38], [39]) -> ([34], [35]);
rename<RangeCheck>([34]) -> ([40]);
rename<felt>([35]) -> ([41]);
rename<RangeCheck>([40]) -> ([7]);
rename<felt>([41]) -> ([8]);
burn_gas() -> ();
rename<RangeCheck>([7]) -> ([42]);
rename<felt>([8]) -> ([43]);
burn_gas() -> ();
return([42], [43]);

test_crate::fib@0([0]: RangeCheck, [1]: uint128, [2]: uint128, [3]: uint128) -> (RangeCheck, felt);
