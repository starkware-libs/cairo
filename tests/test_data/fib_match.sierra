type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Uninitialized<felt252> = Uninitialized<felt252> [storable: false, drop: true, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type match_value_enum 5 = Enum<ut@match_value_enum 5, Unit, Unit, Unit, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Felt252Bounded<0, 5> = Felt252Bounded<0, 5> [storable: true, drop: true, dup: true, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Felt252Bounded<0, 3618502788666131213697322783095070105623107215331596699973092056135872020481> = Felt252Bounded<0, 3618502788666131213697322783095070105623107215331596699973092056135872020481> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc alloc_local<felt252> = alloc_local<felt252>;
libfunc finalize_locals = finalize_locals;
libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<felt252> = dup<felt252>;
libfunc felt252_bounded_from_felt252 = felt252_bounded_from_felt252;
libfunc felt252_bounded_constrain_range<0, 3618502788666131213697322783095070105623107215331596699973092056135872020481, 0, 5> = felt252_bounded_constrain_range<0, 3618502788666131213697322783095070105623107215331596699973092056135872020481, 0, 5>;
libfunc branch_align = branch_align;
libfunc drop<felt252> = drop<felt252>;
libfunc drop<Uninitialized<felt252>> = drop<Uninitialized<felt252>>;
libfunc enable_ap_tracking = enable_ap_tracking;
libfunc enum_from_felt252_bounded<match_value_enum 5> = enum_from_felt252_bounded<match_value_enum 5>;
libfunc store_temp<match_value_enum 5> = store_temp<match_value_enum 5>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc enum_match<match_value_enum 5> = enum_match<match_value_enum 5>;
libfunc drop<Unit> = drop<Unit>;
libfunc felt252_const<1> = felt252_const<1>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc jump = jump;
libfunc felt252_const<2> = felt252_const<2>;
libfunc felt252_const<3> = felt252_const<3>;
libfunc felt252_const<5> = felt252_const<5>;
libfunc felt252_const<4> = felt252_const<4>;
libfunc felt252_sub = felt252_sub;
libfunc function_call<user@examples::fib_match::fib> = function_call<user@examples::fib_match::fib>;
libfunc felt252_mul = felt252_mul;
libfunc store_local<felt252> = store_local<felt252>;
libfunc felt252_add = felt252_add;

alloc_local<felt252>() -> ([3]); // 0
finalize_locals() -> (); // 1
disable_ap_tracking() -> (); // 2
dup<felt252>([1]) -> ([1], [4]); // 3
felt252_bounded_from_felt252([4]) -> ([5]); // 4
felt252_bounded_constrain_range<0, 3618502788666131213697322783095070105623107215331596699973092056135872020481, 0, 5>([0], [5]) { fallthrough([6], [7]) 42([8]) }; // 5
branch_align() -> (); // 6
drop<felt252>([1]) -> (); // 7
drop<Uninitialized<felt252>>([3]) -> (); // 8
enable_ap_tracking() -> (); // 9
enum_from_felt252_bounded<match_value_enum 5>([7]) -> ([9]); // 10
store_temp<match_value_enum 5>([9]) -> ([9]); // 11
store_temp<RangeCheck>([6]) -> ([6]); // 12
enum_match<match_value_enum 5>([9]) { fallthrough([10]) 19([11]) 24([12]) 29([13]) 34([14]) }; // 13
branch_align() -> (); // 14
drop<Unit>([10]) -> (); // 15
felt252_const<1>() -> ([15]); // 16
store_temp<felt252>([15]) -> ([16]); // 17
jump() { 38() }; // 18
branch_align() -> (); // 19
drop<Unit>([11]) -> (); // 20
felt252_const<1>() -> ([17]); // 21
store_temp<felt252>([17]) -> ([16]); // 22
jump() { 38() }; // 23
branch_align() -> (); // 24
drop<Unit>([12]) -> (); // 25
felt252_const<2>() -> ([18]); // 26
store_temp<felt252>([18]) -> ([16]); // 27
jump() { 38() }; // 28
branch_align() -> (); // 29
drop<Unit>([13]) -> (); // 30
felt252_const<3>() -> ([19]); // 31
store_temp<felt252>([19]) -> ([16]); // 32
jump() { 38() }; // 33
branch_align() -> (); // 34
drop<Unit>([14]) -> (); // 35
felt252_const<5>() -> ([20]); // 36
store_temp<felt252>([20]) -> ([16]); // 37
disable_ap_tracking() -> (); // 38
store_temp<RangeCheck>([6]) -> ([21]); // 39
store_temp<felt252>([16]) -> ([22]); // 40
jump() { 65() }; // 41
branch_align() -> (); // 42
felt252_const<4>() -> ([23]); // 43
dup<felt252>([1]) -> ([1], [24]); // 44
felt252_sub([24], [23]) -> ([25]); // 45
store_temp<RangeCheck>([8]) -> ([8]); // 46
store_temp<felt252>([25]) -> ([25]); // 47
function_call<user@examples::fib_match::fib>([8], [25]) -> ([26], [27]); // 48
felt252_const<5>() -> ([28]); // 49
store_temp<felt252>([28]) -> ([28]); // 50
felt252_mul([28], [27]) -> ([2]); // 51
felt252_const<5>() -> ([29]); // 52
felt252_sub([1], [29]) -> ([30]); // 53
store_temp<RangeCheck>([26]) -> ([26]); // 54
store_temp<felt252>([30]) -> ([30]); // 55
store_local<felt252>([3], [2]) -> ([2]); // 56
function_call<user@examples::fib_match::fib>([26], [30]) -> ([31], [32]); // 57
felt252_const<3>() -> ([33]); // 58
store_temp<felt252>([33]) -> ([33]); // 59
felt252_mul([33], [32]) -> ([34]); // 60
store_temp<felt252>([34]) -> ([34]); // 61
felt252_add([2], [34]) -> ([35]); // 62
store_temp<RangeCheck>([31]) -> ([21]); // 63
store_temp<felt252>([35]) -> ([22]); // 64
return([21], [22]); // 65

examples::fib_match::fib@0([0]: RangeCheck, [1]: felt252) -> (RangeCheck, felt252);
