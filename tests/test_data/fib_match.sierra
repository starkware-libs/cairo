type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Uninitialized<felt252> = Uninitialized<felt252> [storable: false, drop: true, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type index_enum_type<5> = Enum<ut@index_enum_type<5>, Unit, Unit, Unit, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type BoundedInt<0, 4> = BoundedInt<0, 4> [storable: true, drop: true, dup: true, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];

libfunc alloc_local<felt252> = alloc_local<felt252>;
libfunc finalize_locals = finalize_locals;
libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<felt252> = dup<felt252>;
libfunc constrain_range<felt252, BoundedInt<0, 4>> = constrain_range<felt252, BoundedInt<0, 4>>;
libfunc branch_align = branch_align;
libfunc drop<felt252> = drop<felt252>;
libfunc drop<Uninitialized<felt252>> = drop<Uninitialized<felt252>>;
libfunc enum_from_bounded_int<index_enum_type<5>> = enum_from_bounded_int<index_enum_type<5>>;
libfunc store_temp<index_enum_type<5>> = store_temp<index_enum_type<5>>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc enum_match<index_enum_type<5>> = enum_match<index_enum_type<5>>;
libfunc drop<Unit> = drop<Unit>;
libfunc felt252_const<1> = felt252_const<1>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc felt252_const<2> = felt252_const<2>;
libfunc felt252_const<3> = felt252_const<3>;
libfunc felt252_const<5> = felt252_const<5>;
libfunc felt252_const<4> = felt252_const<4>;
libfunc felt252_sub = felt252_sub;
libfunc function_call<user@examples::fib_match::fib> = function_call<user@examples::fib_match::fib>;
libfunc store_local<felt252> = store_local<felt252>;
libfunc felt252_mul = felt252_mul;
libfunc felt252_add = felt252_add;

alloc_local<felt252>() -> ([3]); // 0
finalize_locals() -> (); // 1
disable_ap_tracking() -> (); // 2
dup<felt252>([1]) -> ([1], [4]); // 3
constrain_range<felt252, BoundedInt<0, 4>>([0], [4]) { fallthrough([5], [6]) 42([7]) }; // 4
branch_align() -> (); // 5
drop<felt252>([1]) -> (); // 6
drop<Uninitialized<felt252>>([3]) -> (); // 7
enum_from_bounded_int<index_enum_type<5>>([6]) -> ([8]); // 8
store_temp<index_enum_type<5>>([8]) -> ([8]); // 9
store_temp<RangeCheck>([5]) -> ([5]); // 10
enum_match<index_enum_type<5>>([8]) { fallthrough([9]) 18([10]) 24([11]) 30([12]) 36([13]) }; // 11
branch_align() -> (); // 12
drop<Unit>([9]) -> (); // 13
felt252_const<1>() -> ([14]); // 14
store_temp<RangeCheck>([5]) -> ([5]); // 15
store_temp<felt252>([14]) -> ([14]); // 16
return([5], [14]); // 17
branch_align() -> (); // 18
drop<Unit>([10]) -> (); // 19
felt252_const<1>() -> ([15]); // 20
store_temp<RangeCheck>([5]) -> ([5]); // 21
store_temp<felt252>([15]) -> ([15]); // 22
return([5], [15]); // 23
branch_align() -> (); // 24
drop<Unit>([11]) -> (); // 25
felt252_const<2>() -> ([16]); // 26
store_temp<RangeCheck>([5]) -> ([5]); // 27
store_temp<felt252>([16]) -> ([16]); // 28
return([5], [16]); // 29
branch_align() -> (); // 30
drop<Unit>([12]) -> (); // 31
felt252_const<3>() -> ([17]); // 32
store_temp<RangeCheck>([5]) -> ([5]); // 33
store_temp<felt252>([17]) -> ([17]); // 34
return([5], [17]); // 35
branch_align() -> (); // 36
drop<Unit>([13]) -> (); // 37
felt252_const<5>() -> ([18]); // 38
store_temp<RangeCheck>([5]) -> ([5]); // 39
store_temp<felt252>([18]) -> ([18]); // 40
return([5], [18]); // 41
branch_align() -> (); // 42
felt252_const<4>() -> ([19]); // 43
dup<felt252>([1]) -> ([1], [20]); // 44
felt252_sub([20], [19]) -> ([21]); // 45
store_temp<RangeCheck>([7]) -> ([7]); // 46
store_temp<felt252>([21]) -> ([21]); // 47
function_call<user@examples::fib_match::fib>([7], [21]) -> ([22], [2]); // 48
felt252_const<5>() -> ([23]); // 49
felt252_sub([1], [23]) -> ([24]); // 50
store_temp<RangeCheck>([22]) -> ([22]); // 51
store_temp<felt252>([24]) -> ([24]); // 52
store_local<felt252>([3], [2]) -> ([2]); // 53
function_call<user@examples::fib_match::fib>([22], [24]) -> ([25], [26]); // 54
felt252_const<5>() -> ([27]); // 55
store_temp<felt252>([27]) -> ([27]); // 56
felt252_mul([27], [2]) -> ([28]); // 57
felt252_const<3>() -> ([29]); // 58
store_temp<felt252>([29]) -> ([29]); // 59
felt252_mul([29], [26]) -> ([30]); // 60
store_temp<felt252>([28]) -> ([28]); // 61
store_temp<felt252>([30]) -> ([30]); // 62
felt252_add([28], [30]) -> ([31]); // 63
store_temp<RangeCheck>([25]) -> ([25]); // 64
store_temp<felt252>([31]) -> ([31]); // 65
return([25], [31]); // 66

examples::fib_match::fib@0([0]: RangeCheck, [1]: felt252) -> (RangeCheck, felt252);
