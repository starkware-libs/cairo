type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Uninitialized<felt252> = Uninitialized<felt252> [storable: false, drop: true, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type match_value_enum 5 = Enum<ut@match_value_enum 5, Unit, Unit, Unit, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Felt252Bounded<0, 5> = Felt252Bounded<0, 5> [storable: true, drop: true, dup: true, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];

libfunc alloc_local<felt252> = alloc_local<felt252>;
libfunc finalize_locals = finalize_locals;
libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<felt252> = dup<felt252>;
libfunc felt252_bounded_from_felt252<0, 5> = felt252_bounded_from_felt252<0, 5>;
libfunc branch_align = branch_align;
libfunc drop<felt252> = drop<felt252>;
libfunc drop<Uninitialized<felt252>> = drop<Uninitialized<felt252>>;
libfunc enable_ap_tracking = enable_ap_tracking;
libfunc enum_from_felt252_bounded<match_value_enum 5> = enum_from_felt252_bounded<match_value_enum 5>;
libfunc store_temp<match_value_enum 5> = store_temp<match_value_enum 5>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc enum_match<match_value_enum 5> = enum_match<match_value_enum 5>;
libfunc drop<Unit> = drop<Unit>;
libfunc felt252_const<1> = felt252_const<1>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc jump = jump;
libfunc felt252_const<2> = felt252_const<2>;
libfunc felt252_const<3> = felt252_const<3>;
libfunc felt252_const<5> = felt252_const<5>;
libfunc felt252_const<4> = felt252_const<4>;
libfunc felt252_sub = felt252_sub;
libfunc function_call<user@examples::fib_match::fib> = function_call<user@examples::fib_match::fib>;
libfunc felt252_mul = felt252_mul;
libfunc store_local<felt252> = store_local<felt252>;
libfunc felt252_add = felt252_add;

alloc_local<felt252>() -> ([3]); // 0
finalize_locals() -> (); // 1
disable_ap_tracking() -> (); // 2
dup<felt252>([1]) -> ([1], [4]); // 3
felt252_bounded_from_felt252<0, 5>([0], [4]) { fallthrough([5], [6]) 41([7]) }; // 4
branch_align() -> (); // 5
drop<felt252>([1]) -> (); // 6
drop<Uninitialized<felt252>>([3]) -> (); // 7
enable_ap_tracking() -> (); // 8
enum_from_felt252_bounded<match_value_enum 5>([6]) -> ([8]); // 9
store_temp<match_value_enum 5>([8]) -> ([8]); // 10
store_temp<RangeCheck>([5]) -> ([5]); // 11
enum_match<match_value_enum 5>([8]) { fallthrough([9]) 18([10]) 23([11]) 28([12]) 33([13]) }; // 12
branch_align() -> (); // 13
drop<Unit>([9]) -> (); // 14
felt252_const<1>() -> ([14]); // 15
store_temp<felt252>([14]) -> ([15]); // 16
jump() { 37() }; // 17
branch_align() -> (); // 18
drop<Unit>([10]) -> (); // 19
felt252_const<1>() -> ([16]); // 20
store_temp<felt252>([16]) -> ([15]); // 21
jump() { 37() }; // 22
branch_align() -> (); // 23
drop<Unit>([11]) -> (); // 24
felt252_const<2>() -> ([17]); // 25
store_temp<felt252>([17]) -> ([15]); // 26
jump() { 37() }; // 27
branch_align() -> (); // 28
drop<Unit>([12]) -> (); // 29
felt252_const<3>() -> ([18]); // 30
store_temp<felt252>([18]) -> ([15]); // 31
jump() { 37() }; // 32
branch_align() -> (); // 33
drop<Unit>([13]) -> (); // 34
felt252_const<5>() -> ([19]); // 35
store_temp<felt252>([19]) -> ([15]); // 36
disable_ap_tracking() -> (); // 37
store_temp<RangeCheck>([5]) -> ([20]); // 38
store_temp<felt252>([15]) -> ([21]); // 39
jump() { 64() }; // 40
branch_align() -> (); // 41
felt252_const<4>() -> ([22]); // 42
dup<felt252>([1]) -> ([1], [23]); // 43
felt252_sub([23], [22]) -> ([24]); // 44
store_temp<RangeCheck>([7]) -> ([7]); // 45
store_temp<felt252>([24]) -> ([24]); // 46
function_call<user@examples::fib_match::fib>([7], [24]) -> ([25], [26]); // 47
felt252_const<5>() -> ([27]); // 48
store_temp<felt252>([27]) -> ([27]); // 49
felt252_mul([27], [26]) -> ([2]); // 50
felt252_const<5>() -> ([28]); // 51
felt252_sub([1], [28]) -> ([29]); // 52
store_temp<RangeCheck>([25]) -> ([25]); // 53
store_temp<felt252>([29]) -> ([29]); // 54
store_local<felt252>([3], [2]) -> ([2]); // 55
function_call<user@examples::fib_match::fib>([25], [29]) -> ([30], [31]); // 56
felt252_const<3>() -> ([32]); // 57
store_temp<felt252>([32]) -> ([32]); // 58
felt252_mul([32], [31]) -> ([33]); // 59
store_temp<felt252>([33]) -> ([33]); // 60
felt252_add([2], [33]) -> ([34]); // 61
store_temp<RangeCheck>([30]) -> ([20]); // 62
store_temp<felt252>([34]) -> ([21]); // 63
return([20], [21]); // 64

examples::fib_match::fib@0([0]: RangeCheck, [1]: felt252) -> (RangeCheck, felt252);
