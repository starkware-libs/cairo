ap += 1;
%{ memory[ap + 0] = memory[fp + -3] < 5 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 5, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -4] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943300, ap++;
[ap + -1] = [[fp + -4] + 1], ap++;
[ap + -5] = [[fp + -4] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 45 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211451, ap++;
[ap + -1] = [[fp + -4] + 1];
[fp + -3] = [ap + 0] + 1809251394333065606848661391547535052811553607665798349986546028067936010245, ap++;
[ap + 0] = [ap + -1] * -2, ap++;
[ap + 0] = [fp + -4] + 2, ap++;
jmp rel [ap + -2];
jmp rel 24;
jmp rel 18;
jmp rel 12;
jmp rel 6;
[ap + 0] = 1, ap++;
jmp rel 16;
[ap + 0] = 1, ap++;
jmp rel 12;
[ap + 0] = 2, ap++;
jmp rel 8;
[ap + 0] = 3, ap++;
jmp rel 4;
[ap + 0] = 5, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [fp + -4] + 3, ap++;
[fp + -3] = [ap + 0] + 4, ap++;
call rel -65;
[ap + 0] = 5, ap++;
[ap + 0] = [ap + -3], ap++;
[fp + -3] = [ap + 0] + 5, ap++;
[fp + 0] = [ap + -3] * [ap + -4];
call rel -73;
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -1] * [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 0] + [ap + -2], ap++;
ret;
