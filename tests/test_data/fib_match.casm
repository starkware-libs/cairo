ap += 1;
jmp rel 7 if [fp + -3] != 0;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 1, ap++;
jmp rel 96;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [fp + -3], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 1, ap++;
jmp rel 86;
[ap + 0] = 2, ap++;
[ap + -1] = [ap + 0] + [fp + -3], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 2, ap++;
jmp rel 76;
[ap + 0] = 3, ap++;
[ap + -1] = [ap + 0] + [fp + -3], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 3, ap++;
jmp rel 66;
[ap + 0] = 4, ap++;
[ap + -1] = [ap + 0] + [fp + -3], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 5, ap++;
jmp rel 56;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 4, ap++;
call rel 99;
jmp rel 91 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
call rel -59;
jmp rel 79 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [ap + -3], ap++;
call rel 128;
jmp rel 65 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 5, ap++;
call rel 77;
[fp + 0] = [ap + -23];
jmp rel 50 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
call rel -82;
jmp rel 38 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -3], ap++;
call rel 105;
jmp rel 24 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -3], ap++;
call rel 125;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[fp + -4] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 12;
[ap + -1] = [[fp + -5] + 0];
ap += 1;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 8;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4] + 4294967296, ap++;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
call rel 87;
jmp rel 9 if [ap + -3] != 0;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] * [fp + -3], ap++;
call rel 87;
jmp rel 11 if [ap + -2] != 0;
ap += 2;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504327651875780457110017927835511, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
%{ memory[ap + 0] = (memory[fp + -4] + memory[fp + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 13;
[ap + 1] = [fp + -4] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
call rel 17;
jmp rel 9 if [ap + -3] != 0;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
jmp rel 10 if [fp + -5] != 0;
ap += 1;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -3] = [[ap + -1] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = memory[fp + -3] < 4294967296 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 12;
[ap + 0] = [fp + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 8;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;
