type felt252 = felt252;
type NonZero<felt252> = NonZero<felt252>;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc felt252_const<-1> = felt252_const<-1>;
libfunc felt252_const<1> = felt252_const<1>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc felt252_mul = felt252_mul;
libfunc function_call<user@examples::fib_unary::inner::inner::fib_inner> = function_call<user@examples::fib_unary::inner::inner::fib_inner>;
libfunc snapshot_take<felt252> = snapshot_take<felt252>;
libfunc felt252_const<0> = felt252_const<0>;
libfunc drop<felt252> = drop<felt252>;
libfunc rename<felt252> = rename<felt252>;
libfunc felt252_sub = felt252_sub;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc bool_not_impl = bool_not_impl;
libfunc enum_match<core::bool> = enum_match<core::bool>;
libfunc drop<Unit> = drop<Unit>;
libfunc dup<felt252> = dup<felt252>;
libfunc felt252_add = felt252_add;

disable_ap_tracking() -> ();
felt252_const<-1>() -> ([1]);
felt252_const<1>() -> ([2]);
store_temp<felt252>([2]) -> ([2]);
felt252_mul([2], [1]) -> ([3]);
felt252_const<-1>() -> ([4]);
felt252_const<1>() -> ([5]);
store_temp<felt252>([5]) -> ([5]);
felt252_mul([5], [4]) -> ([6]);
store_temp<felt252>([3]) -> ([8]);
store_temp<felt252>([6]) -> ([9]);
store_temp<felt252>([0]) -> ([10]);
function_call<user@examples::fib_unary::inner::inner::fib_inner>([8], [9], [10]) -> ([7]);
felt252_const<-1>() -> ([11]);
felt252_mul([7], [11]) -> ([12]);
store_temp<felt252>([12]) -> ([13]);
return([13]);
disable_ap_tracking() -> ();
snapshot_take<felt252>([2]) -> ([3], [4]);
felt252_const<0>() -> ([5]);
snapshot_take<felt252>([5]) -> ([6], [7]);
drop<felt252>([6]) -> ();
rename<felt252>([4]) -> ([8]);
snapshot_take<felt252>([8]) -> ([9], [10]);
drop<felt252>([9]) -> ();
rename<felt252>([7]) -> ([11]);
snapshot_take<felt252>([11]) -> ([12], [13]);
drop<felt252>([12]) -> ();
rename<felt252>([10]) -> ([14]);
rename<felt252>([13]) -> ([15]);
felt252_sub([14], [15]) -> ([16]);
store_temp<felt252>([16]) -> ([16]);
felt252_is_zero([16]) { fallthrough() 38([17]) };
branch_align() -> ();
struct_construct<Unit>() -> ([18]);
enum_init<core::bool, 1>([18]) -> ([19]);
store_temp<core::bool>([19]) -> ([20]);
jump() { 43() };
branch_align() -> ();
drop<NonZero<felt252>>([17]) -> ();
struct_construct<Unit>() -> ([21]);
enum_init<core::bool, 0>([21]) -> ([22]);
store_temp<core::bool>([22]) -> ([20]);
bool_not_impl([20]) -> ([23]);
store_temp<core::bool>([23]) -> ([23]);
enum_match<core::bool>([23]) { fallthrough([24]) 52([25]) };
branch_align() -> ();
drop<Unit>([24]) -> ();
drop<felt252>([1]) -> ();
drop<felt252>([3]) -> ();
store_temp<felt252>([0]) -> ([26]);
jump() { 63() };
branch_align() -> ();
drop<Unit>([25]) -> ();
dup<felt252>([1]) -> ([1], [28]);
felt252_add([0], [28]) -> ([27]);
felt252_const<1>() -> ([29]);
felt252_sub([3], [29]) -> ([30]);
store_temp<felt252>([1]) -> ([32]);
store_temp<felt252>([27]) -> ([33]);
store_temp<felt252>([30]) -> ([34]);
function_call<user@examples::fib_unary::inner::inner::fib_inner>([32], [33], [34]) -> ([31]);
rename<felt252>([31]) -> ([26]);
rename<felt252>([26]) -> ([35]);
return([35]);

examples::fib_unary::fib@0([0]: felt252) -> (felt252);
examples::fib_unary::inner::inner::fib_inner@17([0]: felt252, [1]: felt252, [2]: felt252) -> (felt252);
