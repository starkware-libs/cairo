type felt = felt;
type NonZero<felt> = NonZero<felt>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_neg = felt_neg;
libfunc store_temp<felt> = store_temp<felt>;
libfunc rename<felt> = rename<felt>;
libfunc function_call<user@fib_unary::fib_unary::_fib> = function_call<user@fib_unary::fib_unary::_fib>;
libfunc burn_gas = burn_gas;
libfunc dup<felt> = dup<felt>;
libfunc felt_jump_nz = felt_jump_nz;
libfunc drop<felt> = drop<felt>;
libfunc jump = jump;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc felt_add = felt_add;
libfunc felt_sub = felt_sub;

revoke_ap_tracking() -> ();
felt_const<1>() -> ([1]);
felt_neg([1]) -> ([2]);
felt_const<1>() -> ([3]);
felt_neg([3]) -> ([4]);
store_temp<felt>([2]) -> ([2]);
rename<felt>([2]) -> ([6]);
store_temp<felt>([4]) -> ([4]);
rename<felt>([4]) -> ([7]);
store_temp<felt>([0]) -> ([8]);
function_call<user@fib_unary::fib_unary::_fib>([6], [7], [8]) -> ([5]);
felt_neg([5]) -> ([9]);
store_temp<felt>([9]) -> ([9]);
rename<felt>([9]) -> ([10]);
burn_gas() -> ();
return([10]);
revoke_ap_tracking() -> ();
dup<felt>([2]) -> ([2], [13]);
felt_jump_nz([13]) { fallthrough() 24([3]) };
drop<felt>([1]) -> ();
drop<felt>([2]) -> ();
store_temp<felt>([0]) -> ([4]);
burn_gas() -> ();
jump() { 37() };
drop<NonZero<felt>>([3]) -> ();
dup<felt>([1]) -> ([1], [14]);
felt_add([0], [14]) -> ([5]);
felt_const<1>() -> ([6]);
felt_sub([2], [6]) -> ([7]);
store_temp<felt>([1]) -> ([9]);
store_temp<felt>([5]) -> ([5]);
rename<felt>([5]) -> ([10]);
store_temp<felt>([7]) -> ([7]);
rename<felt>([7]) -> ([11]);
function_call<user@fib_unary::fib_unary::_fib>([9], [10], [11]) -> ([8]);
rename<felt>([8]) -> ([4]);
burn_gas() -> ();
rename<felt>([4]) -> ([12]);
burn_gas() -> ();
return([12]);

fib_unary::fib_unary::fib@0([0]: felt) -> (felt);
fib_unary::fib_unary::_fib@16([0]: felt, [1]: felt, [2]: felt) -> (felt);
