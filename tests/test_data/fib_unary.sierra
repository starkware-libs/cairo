type felt = felt;
type NonZero<felt> = NonZero<felt>;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_const<-1> = felt_const<-1>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc felt_mul = felt_mul;
libfunc function_call<user@fib_unary::fib_unary::inner::inner::fib_inner> = function_call<user@fib_unary::fib_unary::inner::inner::fib_inner>;
libfunc felt_const<0> = felt_const<0>;
libfunc dup<felt> = dup<felt>;
libfunc felt_sub = felt_sub;
libfunc felt_is_zero = felt_is_zero;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc bool_not_impl = bool_not_impl;
libfunc enum_match<core::bool> = enum_match<core::bool>;
libfunc drop<Unit> = drop<Unit>;
libfunc drop<felt> = drop<felt>;
libfunc felt_add = felt_add;
libfunc rename<felt> = rename<felt>;

revoke_ap_tracking() -> ();
felt_const<1>() -> ([1]);
felt_const<-1>() -> ([2]);
store_temp<felt>([1]) -> ([1]);
felt_mul([1], [2]) -> ([3]);
felt_const<1>() -> ([4]);
felt_const<-1>() -> ([5]);
store_temp<felt>([4]) -> ([4]);
felt_mul([4], [5]) -> ([6]);
store_temp<felt>([3]) -> ([8]);
store_temp<felt>([6]) -> ([9]);
store_temp<felt>([0]) -> ([10]);
function_call<user@fib_unary::fib_unary::inner::inner::fib_inner>([8], [9], [10]) -> ([7]);
felt_const<-1>() -> ([11]);
felt_mul([7], [11]) -> ([12]);
store_temp<felt>([12]) -> ([13]);
return([13]);
revoke_ap_tracking() -> ();
felt_const<0>() -> ([3]);
dup<felt>([2]) -> ([2], [5]);
felt_sub([5], [3]) -> ([4]);
store_temp<felt>([4]) -> ([4]);
felt_is_zero([4]) { fallthrough() 28([6]) };
branch_align() -> ();
struct_construct<Unit>() -> ([7]);
enum_init<core::bool, 1>([7]) -> ([8]);
store_temp<core::bool>([8]) -> ([9]);
jump() { 34() };
branch_align() -> ();
drop<NonZero<felt>>([6]) -> ();
struct_construct<Unit>() -> ([10]);
enum_init<core::bool, 0>([10]) -> ([11]);
store_temp<core::bool>([11]) -> ([9]);
jump() { 34() };
bool_not_impl([9]) -> ([12]);
store_temp<core::bool>([12]) -> ([12]);
enum_match<core::bool>([12]) { fallthrough([13]) 43([14]) };
branch_align() -> ();
drop<Unit>([13]) -> ();
drop<felt>([1]) -> ();
drop<felt>([2]) -> ();
store_temp<felt>([0]) -> ([15]);
jump() { 55() };
branch_align() -> ();
drop<Unit>([14]) -> ();
dup<felt>([1]) -> ([1], [17]);
felt_add([0], [17]) -> ([16]);
felt_const<1>() -> ([18]);
felt_sub([2], [18]) -> ([19]);
store_temp<felt>([1]) -> ([21]);
store_temp<felt>([16]) -> ([22]);
store_temp<felt>([19]) -> ([23]);
function_call<user@fib_unary::fib_unary::inner::inner::fib_inner>([21], [22], [23]) -> ([20]);
rename<felt>([20]) -> ([15]);
jump() { 55() };
rename<felt>([15]) -> ([24]);
return([24]);

fib_unary::fib_unary::fib@0([0]: felt) -> (felt);
fib_unary::fib_unary::inner::inner::fib_inner@17([0]: felt, [1]: felt, [2]: felt) -> (felt);
