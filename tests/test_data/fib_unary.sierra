type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc felt252_const<-1> = felt252_const<-1>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc function_call<user@examples::fib_unary::inner::inner::fib_inner> = function_call<user@examples::fib_unary::inner::inner::fib_inner>;
libfunc felt252_mul = felt252_mul;
libfunc snapshot_take<felt252> = snapshot_take<felt252>;
libfunc felt252_const<0> = felt252_const<0>;
libfunc drop<felt252> = drop<felt252>;
libfunc rename<felt252> = rename<felt252>;
libfunc felt252_sub = felt252_sub;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc jump = jump;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc dup<felt252> = dup<felt252>;
libfunc felt252_add = felt252_add;
libfunc felt252_const<1> = felt252_const<1>;

disable_ap_tracking() -> (); // 0
felt252_const<-1>() -> ([1]); // 1
felt252_const<-1>() -> ([2]); // 2
store_temp<felt252>([1]) -> ([4]); // 3
store_temp<felt252>([2]) -> ([5]); // 4
store_temp<felt252>([0]) -> ([6]); // 5
function_call<user@examples::fib_unary::inner::inner::fib_inner>([4], [5], [6]) -> ([3]); // 6
felt252_const<-1>() -> ([7]); // 7
felt252_mul([3], [7]) -> ([8]); // 8
store_temp<felt252>([8]) -> ([9]); // 9
return([9]); // 10
disable_ap_tracking() -> (); // 11
snapshot_take<felt252>([2]) -> ([3], [4]); // 12
felt252_const<0>() -> ([5]); // 13
snapshot_take<felt252>([5]) -> ([6], [7]); // 14
drop<felt252>([6]) -> (); // 15
rename<felt252>([4]) -> ([8]); // 16
snapshot_take<felt252>([8]) -> ([9], [10]); // 17
drop<felt252>([9]) -> (); // 18
rename<felt252>([7]) -> ([11]); // 19
snapshot_take<felt252>([11]) -> ([12], [13]); // 20
drop<felt252>([12]) -> (); // 21
rename<felt252>([10]) -> ([14]); // 22
rename<felt252>([13]) -> ([15]); // 23
felt252_sub([14], [15]) -> ([16]); // 24
store_temp<felt252>([16]) -> ([16]); // 25
felt252_is_zero([16]) { fallthrough() 32([17]) }; // 26
branch_align() -> (); // 27
drop<felt252>([1]) -> (); // 28
drop<felt252>([3]) -> (); // 29
store_temp<felt252>([0]) -> ([18]); // 30
jump() { 43() }; // 31
branch_align() -> (); // 32
drop<NonZero<felt252>>([17]) -> (); // 33
dup<felt252>([1]) -> ([1], [20]); // 34
felt252_add([0], [20]) -> ([19]); // 35
felt252_const<1>() -> ([21]); // 36
felt252_sub([3], [21]) -> ([22]); // 37
store_temp<felt252>([1]) -> ([24]); // 38
store_temp<felt252>([19]) -> ([25]); // 39
store_temp<felt252>([22]) -> ([26]); // 40
function_call<user@examples::fib_unary::inner::inner::fib_inner>([24], [25], [26]) -> ([23]); // 41
rename<felt252>([23]) -> ([18]); // 42
rename<felt252>([18]) -> ([27]); // 43
return([27]); // 44

examples::fib_unary::fib@0([0]: felt252) -> (felt252);
examples::fib_unary::inner::inner::fib_inner@11([0]: felt252, [1]: felt252, [2]: felt252) -> (felt252);
