type felt = felt;
type NonZero<felt> = NonZero<felt>;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_const<-1> = felt_const<-1>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc felt_mul = felt_mul;
libfunc rename<felt> = rename<felt>;
libfunc function_call<user@fib_unary::fib_unary::inner::inner::fib_inner> = function_call<user@fib_unary::fib_unary::inner::inner::fib_inner>;
libfunc felt_const<0> = felt_const<0>;
libfunc dup<felt> = dup<felt>;
libfunc felt_sub = felt_sub;
libfunc felt_jump_nz = felt_jump_nz;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc rename<core::bool> = rename<core::bool>;
libfunc jump = jump;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc bool_not_impl = bool_not_impl;
libfunc enum_match<core::bool> = enum_match<core::bool>;
libfunc drop<Unit> = drop<Unit>;
libfunc drop<felt> = drop<felt>;
libfunc felt_add = felt_add;

revoke_ap_tracking() -> ();
felt_const<1>() -> ([1]);
felt_const<-1>() -> ([2]);
store_temp<felt>([1]) -> ([1]);
felt_mul([1], [2]) -> ([3]);
store_temp<felt>([3]) -> ([3]);
rename<felt>([3]) -> ([4]);
felt_const<1>() -> ([5]);
felt_const<-1>() -> ([6]);
store_temp<felt>([5]) -> ([5]);
felt_mul([5], [6]) -> ([7]);
store_temp<felt>([7]) -> ([7]);
rename<felt>([7]) -> ([8]);
store_temp<felt>([4]) -> ([10]);
store_temp<felt>([8]) -> ([11]);
store_temp<felt>([0]) -> ([12]);
function_call<user@fib_unary::fib_unary::inner::inner::fib_inner>([10], [11], [12]) -> ([9]);
felt_const<-1>() -> ([13]);
felt_mul([9], [13]) -> ([14]);
store_temp<felt>([14]) -> ([14]);
rename<felt>([14]) -> ([15]);
rename<felt>([15]) -> ([16]);
return([16]);
revoke_ap_tracking() -> ();
felt_const<0>() -> ([3]);
dup<felt>([2]) -> ([2], [5]);
felt_sub([5], [3]) -> ([4]);
store_temp<felt>([4]) -> ([4]);
rename<felt>([4]) -> ([6]);
felt_jump_nz([6]) { fallthrough() 36([7]) };
branch_align() -> ();
struct_construct<Unit>() -> ([8]);
enum_init<core::bool, 1>([8]) -> ([9]);
store_temp<core::bool>([9]) -> ([9]);
rename<core::bool>([9]) -> ([10]);
jump() { 42() };
branch_align() -> ();
drop<NonZero<felt>>([7]) -> ();
struct_construct<Unit>() -> ([11]);
enum_init<core::bool, 0>([11]) -> ([12]);
store_temp<core::bool>([12]) -> ([12]);
rename<core::bool>([12]) -> ([10]);
rename<core::bool>([10]) -> ([13]);
bool_not_impl([13]) -> ([14]);
store_temp<core::bool>([14]) -> ([14]);
rename<core::bool>([14]) -> ([15]);
rename<core::bool>([15]) -> ([16]);
enum_match<core::bool>([16]) { 48([17]) 54([18]) };
branch_align() -> ();
drop<Unit>([17]) -> ();
drop<felt>([1]) -> ();
drop<felt>([2]) -> ();
store_temp<felt>([0]) -> ([19]);
jump() { 69() };
branch_align() -> ();
drop<Unit>([18]) -> ();
dup<felt>([1]) -> ([1], [21]);
felt_add([0], [21]) -> ([20]);
store_temp<felt>([20]) -> ([20]);
rename<felt>([20]) -> ([22]);
felt_const<1>() -> ([23]);
felt_sub([2], [23]) -> ([24]);
store_temp<felt>([24]) -> ([24]);
rename<felt>([24]) -> ([25]);
store_temp<felt>([1]) -> ([27]);
store_temp<felt>([22]) -> ([28]);
store_temp<felt>([25]) -> ([29]);
function_call<user@fib_unary::fib_unary::inner::inner::fib_inner>([27], [28], [29]) -> ([26]);
rename<felt>([26]) -> ([19]);
rename<felt>([19]) -> ([30]);
return([30]);

fib_unary::fib_unary::fib@0([0]: felt) -> (felt);
fib_unary::fib_unary::inner::inner::fib_inner@23([0]: felt, [1]: felt, [2]: felt) -> (felt);
