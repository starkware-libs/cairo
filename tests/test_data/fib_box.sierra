type felt = felt;
type Box<felt> = Box<felt>;
type NonZero<felt> = NonZero<felt>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc unbox<felt> = unbox<felt>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc dup<felt> = dup<felt>;
libfunc felt_jump_nz = felt_jump_nz;
libfunc branch_align = branch_align;
libfunc drop<Box<felt>> = drop<Box<felt>>;
libfunc drop<felt> = drop<felt>;
libfunc store_temp<Box<felt>> = store_temp<Box<felt>>;
libfunc jump = jump;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc dup<Box<felt>> = dup<Box<felt>>;
libfunc felt_add = felt_add;
libfunc rename<felt> = rename<felt>;
libfunc into_box<felt> = into_box<felt>;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_sub = felt_sub;
libfunc function_call<user@fib_box::fib_box::fib> = function_call<user@fib_box::fib_box::fib>;
libfunc rename<Box<felt>> = rename<Box<felt>>;

revoke_ap_tracking() -> ();
unbox<felt>([2]) -> ([3]);
store_temp<felt>([3]) -> ([3]);
dup<felt>([3]) -> ([3], [4]);
felt_jump_nz([4]) { fallthrough() 10([5]) };
branch_align() -> ();
drop<Box<felt>>([1]) -> ();
drop<felt>([3]) -> ();
store_temp<Box<felt>>([0]) -> ([6]);
jump() { 31() };
branch_align() -> ();
drop<NonZero<felt>>([5]) -> ();
unbox<felt>([0]) -> ([7]);
dup<Box<felt>>([1]) -> ([1], [9]);
unbox<felt>([9]) -> ([8]);
store_temp<felt>([7]) -> ([7]);
store_temp<felt>([8]) -> ([8]);
felt_add([7], [8]) -> ([10]);
store_temp<felt>([10]) -> ([10]);
rename<felt>([10]) -> ([11]);
into_box<felt>([11]) -> ([12]);
felt_const<1>() -> ([13]);
felt_sub([3], [13]) -> ([14]);
store_temp<felt>([14]) -> ([14]);
rename<felt>([14]) -> ([15]);
into_box<felt>([15]) -> ([16]);
store_temp<Box<felt>>([1]) -> ([18]);
store_temp<Box<felt>>([12]) -> ([19]);
store_temp<Box<felt>>([16]) -> ([20]);
function_call<user@fib_box::fib_box::fib>([18], [19], [20]) -> ([17]);
rename<Box<felt>>([17]) -> ([6]);
rename<Box<felt>>([6]) -> ([21]);
return([21]);

fib_box::fib_box::fib@0([0]: Box<felt>, [1]: Box<felt>, [2]: Box<felt>) -> (Box<felt>);
