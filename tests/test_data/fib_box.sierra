type felt = felt;
type Box<felt> = Box<felt>;
type NonZero<felt> = NonZero<felt>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc unbox<felt> = unbox<felt>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc dup<felt> = dup<felt>;
libfunc felt_jump_nz = felt_jump_nz;
libfunc branch_align = branch_align;
libfunc drop<Box<felt>> = drop<Box<felt>>;
libfunc drop<felt> = drop<felt>;
libfunc store_temp<Box<felt>> = store_temp<Box<felt>>;
libfunc jump = jump;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc dup<Box<felt>> = dup<Box<felt>>;
libfunc felt_add = felt_add;
libfunc into_box<felt> = into_box<felt>;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_sub = felt_sub;
libfunc function_call<user@fib_box::fib_box::fib> = function_call<user@fib_box::fib_box::fib>;
libfunc rename<Box<felt>> = rename<Box<felt>>;

revoke_ap_tracking() -> ();
unbox<felt>([2]) -> ([3]);
store_temp<felt>([3]) -> ([3]);
dup<felt>([3]) -> ([3], [19]);
felt_jump_nz([19]) { fallthrough() 10([4]) };
branch_align() -> ();
drop<Box<felt>>([1]) -> ();
drop<felt>([3]) -> ();
store_temp<Box<felt>>([0]) -> ([5]);
jump() { 29() };
branch_align() -> ();
drop<NonZero<felt>>([4]) -> ();
unbox<felt>([0]) -> ([6]);
dup<Box<felt>>([1]) -> ([1], [8]);
unbox<felt>([8]) -> ([7]);
store_temp<felt>([6]) -> ([6]);
store_temp<felt>([7]) -> ([7]);
felt_add([6], [7]) -> ([9]);
store_temp<felt>([9]) -> ([9]);
into_box<felt>([9]) -> ([10]);
felt_const<1>() -> ([11]);
felt_sub([3], [11]) -> ([12]);
store_temp<felt>([12]) -> ([12]);
into_box<felt>([12]) -> ([13]);
store_temp<Box<felt>>([1]) -> ([15]);
store_temp<Box<felt>>([10]) -> ([16]);
store_temp<Box<felt>>([13]) -> ([17]);
function_call<user@fib_box::fib_box::fib>([15], [16], [17]) -> ([14]);
rename<Box<felt>>([14]) -> ([5]);
rename<Box<felt>>([5]) -> ([18]);
return([18]);

fib_box::fib_box::fib@0([0]: Box<felt>, [1]: Box<felt>, [2]: Box<felt>) -> (Box<felt>);
