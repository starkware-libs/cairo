type felt = felt;
type Box<felt> = Box<felt>;
type NonZero<felt> = NonZero<felt>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc unbox<felt> = unbox<felt>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc dup<felt> = dup<felt>;
libfunc felt_is_zero = felt_is_zero;
libfunc branch_align = branch_align;
libfunc drop<Box<felt>> = drop<Box<felt>>;
libfunc drop<felt> = drop<felt>;
libfunc store_temp<Box<felt>> = store_temp<Box<felt>>;
libfunc jump = jump;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc dup<Box<felt>> = dup<Box<felt>>;
libfunc felt_add = felt_add;
libfunc into_box<felt> = into_box<felt>;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_sub = felt_sub;
libfunc function_call<user@fib_box::fib_box::fib> = function_call<user@fib_box::fib_box::fib>;
libfunc rename<Box<felt>> = rename<Box<felt>>;

revoke_ap_tracking() -> ();
unbox<felt>([2]) -> ([3]);
store_temp<felt>([3]) -> ([3]);
dup<felt>([3]) -> ([3], [5]);
felt_is_zero([5]) { fallthrough() 10([4]) };
branch_align() -> ();
drop<Box<felt>>([1]) -> ();
drop<felt>([3]) -> ();
store_temp<Box<felt>>([0]) -> ([6]);
jump() { 30() };
branch_align() -> ();
drop<NonZero<felt>>([4]) -> ();
unbox<felt>([0]) -> ([7]);
dup<Box<felt>>([1]) -> ([1], [9]);
unbox<felt>([9]) -> ([8]);
store_temp<felt>([7]) -> ([7]);
store_temp<felt>([8]) -> ([8]);
felt_add([7], [8]) -> ([10]);
store_temp<felt>([10]) -> ([10]);
into_box<felt>([10]) -> ([11]);
felt_const<1>() -> ([12]);
felt_sub([3], [12]) -> ([13]);
store_temp<felt>([13]) -> ([13]);
into_box<felt>([13]) -> ([14]);
store_temp<Box<felt>>([1]) -> ([16]);
store_temp<Box<felt>>([11]) -> ([17]);
store_temp<Box<felt>>([14]) -> ([18]);
function_call<user@fib_box::fib_box::fib>([16], [17], [18]) -> ([15]);
rename<Box<felt>>([15]) -> ([6]);
jump() { 30() };
rename<Box<felt>>([6]) -> ([19]);
return([19]);

fib_box::fib_box::fib@0([0]: Box<felt>, [1]: Box<felt>, [2]: Box<felt>) -> (Box<felt>);
