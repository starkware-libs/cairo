jmp rel 12 if [fp + -3] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel 63;
[ap + 0] = [ap + -1] + 62, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 2570, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 34;
[fp + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -36;
jmp rel 14 if [ap + -3] != 0;
[ap + -1] = [[ap + -4] + 0];
[fp + -3] = [[ap + -4] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -9] + 2], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
