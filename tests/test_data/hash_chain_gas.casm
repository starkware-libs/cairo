jmp rel 12 if [fp + -4] != 0;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = 29 < memory[fp + -6] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + -29, ap++;
[ap + 0] = [ap + -1] * -1, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 10;
[ap + 0] = [fp + -6] + -30, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 19;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = 0 < memory[ap + -1] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -2] + 0, ap++;
[ap + 0] = [ap + -1] * -1, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 10;
[ap + 0] = [ap + -2] + -1, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 19;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [fp + -5], ap++;
[fp + -4] = [ap + 0] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
call rel -84;
jmp rel 7 if [ap + -3] != 0;
jmp rel 2;
[ap + 0] = [ap + -2], ap++;
jmp rel 10;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + -1] = [[ap + -5] + 0];
[fp + -4] = [[ap + -5] + 1];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7] + 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + 0] = 0, ap++;
ret;
