type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;
type felt = felt;
type Array<felt> = Array<felt>;
type core::PanicResult::<()> = Enum<ut@core::PanicResult::<()>, Unit, Array<felt>>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc felt_const<1> = felt_const<1>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc rename<core::bool> = rename<core::bool>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc function_call<user@testing::testing::assert> = function_call<user@testing::testing::assert>;
libfunc enum_match<core::PanicResult::<()>> = enum_match<core::PanicResult::<()>>;
libfunc drop<Unit> = drop<Unit>;
libfunc burn_gas = burn_gas;
libfunc jump = jump;
libfunc enum_init<core::PanicResult::<()>, 1> = enum_init<core::PanicResult::<()>, 1>;
libfunc store_temp<core::PanicResult::<()>> = store_temp<core::PanicResult::<()>>;
libfunc rename<core::PanicResult::<()>> = rename<core::PanicResult::<()>>;
libfunc enum_init<core::PanicResult::<()>, 0> = enum_init<core::PanicResult::<()>, 0>;
libfunc enum_match<core::bool> = enum_match<core::bool>;
libfunc drop<felt> = drop<felt>;
libfunc array_new<felt> = array_new<felt>;
libfunc store_temp<Array<felt>> = store_temp<Array<felt>>;
libfunc array_append<felt> = array_append<felt>;

revoke_ap_tracking() -> ();
struct_construct<Unit>() -> ([0]);
store_temp<Unit>([0]) -> ([0]);
enum_init<core::bool, 1>([0]) -> ([1]);
felt_const<1>() -> ([2]);
store_temp<core::bool>([1]) -> ([1]);
rename<core::bool>([1]) -> ([4]);
store_temp<felt>([2]) -> ([5]);
function_call<user@testing::testing::assert>([4], [5]) -> ([3]);
enum_match<core::PanicResult::<()>>([3]) { 10([6]) 14([7]) };
store_temp<Unit>([6]) -> ([8]);
drop<Unit>([8]) -> ();
burn_gas() -> ();
jump() { 19() };
enum_init<core::PanicResult::<()>, 1>([7]) -> ([9]);
store_temp<core::PanicResult::<()>>([9]) -> ([9]);
rename<core::PanicResult::<()>>([9]) -> ([10]);
burn_gas() -> ();
return([10]);
struct_construct<Unit>() -> ([11]);
store_temp<Unit>([11]) -> ([11]);
enum_init<core::PanicResult::<()>, 0>([11]) -> ([12]);
store_temp<core::PanicResult::<()>>([12]) -> ([12]);
rename<core::PanicResult::<()>>([12]) -> ([13]);
burn_gas() -> ();
return([13]);
revoke_ap_tracking() -> ();
enum_match<core::bool>([0]) { 28([2]) 32([3]) };
drop<felt>([1]) -> ();
drop<Unit>([2]) -> ();
burn_gas() -> ();
jump() { 42() };
drop<Unit>([3]) -> ();
array_new<felt>() -> ([4]);
store_temp<Array<felt>>([4]) -> ([4]);
array_append<felt>([4], [1]) -> ([5]);
store_temp<Array<felt>>([5]) -> ([5]);
enum_init<core::PanicResult::<()>, 1>([5]) -> ([6]);
store_temp<core::PanicResult::<()>>([6]) -> ([6]);
rename<core::PanicResult::<()>>([6]) -> ([7]);
burn_gas() -> ();
return([7]);
struct_construct<Unit>() -> ([8]);
store_temp<Unit>([8]) -> ([8]);
enum_init<core::PanicResult::<()>, 0>([8]) -> ([9]);
store_temp<core::PanicResult::<()>>([9]) -> ([9]);
rename<core::PanicResult::<()>>([9]) -> ([10]);
burn_gas() -> ();
return([10]);

testing::testing::run_tests@0() -> (core::PanicResult::<()>);
testing::testing::assert@26([0]: core::bool, [1]: felt) -> (core::PanicResult::<()>);
