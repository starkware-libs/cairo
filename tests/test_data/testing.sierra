type Unit = Struct<ut@Tuple>;
type Tuple<Unit> = Struct<ut@Tuple, Unit>;
type core::panics::Panic = Struct<ut@core::panics::Panic>;
type felt252 = felt252;
type Array<felt252> = Array<felt252>;
type Tuple<core::panics::Panic, Array<felt252>> = Struct<ut@Tuple, core::panics::Panic, Array<felt252>>;
type core::panics::PanicResult::<((),)> = Enum<ut@core::panics::PanicResult::<((),)>, Tuple<Unit>, Tuple<core::panics::Panic, Array<felt252>>>;

libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc struct_construct<Tuple<Unit>> = struct_construct<Tuple<Unit>>;
libfunc enum_init<core::panics::PanicResult::<((),)>, 0> = enum_init<core::panics::PanicResult::<((),)>, 0>;
libfunc store_temp<core::panics::PanicResult::<((),)>> = store_temp<core::panics::PanicResult::<((),)>>;

struct_construct<Unit>() -> ([0]);
struct_construct<Tuple<Unit>>([0]) -> ([1]);
enum_init<core::panics::PanicResult::<((),)>, 0>([1]) -> ([2]);
store_temp<core::panics::PanicResult::<((),)>>([2]) -> ([3]);
return([3]);

examples::testing::run_tests@0() -> (core::panics::PanicResult::<((),)>);
