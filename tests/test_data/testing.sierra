type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;
type felt252 = felt252;
type Tuple<Unit> = Struct<ut@Tuple, Unit>;
type Array<felt252> = Array<felt252>;
type core::PanicResult::<((),)> = Enum<ut@core::PanicResult::<((),)>, Tuple<Unit>, Array<felt252>>;

libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc felt252_const<1> = felt252_const<1>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc function_call<user@examples::testing::assert> = function_call<user@examples::testing::assert>;
libfunc enum_match<core::PanicResult::<((),)>> = enum_match<core::PanicResult::<((),)>>;
libfunc branch_align = branch_align;
libfunc struct_deconstruct<Tuple<Unit>> = struct_deconstruct<Tuple<Unit>>;
libfunc drop<Unit> = drop<Unit>;
libfunc struct_construct<Tuple<Unit>> = struct_construct<Tuple<Unit>>;
libfunc enum_init<core::PanicResult::<((),)>, 0> = enum_init<core::PanicResult::<((),)>, 0>;
libfunc store_temp<core::PanicResult::<((),)>> = store_temp<core::PanicResult::<((),)>>;
libfunc enum_init<core::PanicResult::<((),)>, 1> = enum_init<core::PanicResult::<((),)>, 1>;
libfunc enum_match<core::bool> = enum_match<core::bool>;
libfunc array_new<felt252> = array_new<felt252>;
libfunc array_append<felt252> = array_append<felt252>;
libfunc drop<felt252> = drop<felt252>;

struct_construct<Unit>() -> ([0]);
enum_init<core::bool, 1>([0]) -> ([1]);
felt252_const<1>() -> ([2]);
store_temp<core::bool>([1]) -> ([4]);
store_temp<felt252>([2]) -> ([5]);
function_call<user@examples::testing::assert>([4], [5]) -> ([3]);
enum_match<core::PanicResult::<((),)>>([3]) { fallthrough([6]) 15([7]) };
branch_align() -> ();
struct_deconstruct<Tuple<Unit>>([6]) -> ([8]);
drop<Unit>([8]) -> ();
struct_construct<Unit>() -> ([9]);
struct_construct<Tuple<Unit>>([9]) -> ([10]);
enum_init<core::PanicResult::<((),)>, 0>([10]) -> ([11]);
store_temp<core::PanicResult::<((),)>>([11]) -> ([12]);
return([12]);
branch_align() -> ();
enum_init<core::PanicResult::<((),)>, 1>([7]) -> ([13]);
store_temp<core::PanicResult::<((),)>>([13]) -> ([14]);
return([14]);
enum_match<core::bool>([0]) { fallthrough([2]) 29([3]) };
branch_align() -> ();
drop<Unit>([2]) -> ();
array_new<felt252>() -> ([4]);
array_append<felt252>([4], [1]) -> ([5]);
struct_construct<Unit>() -> ([6]);
drop<Unit>([6]) -> ();
enum_init<core::PanicResult::<((),)>, 1>([5]) -> ([7]);
store_temp<core::PanicResult::<((),)>>([7]) -> ([8]);
return([8]);
branch_align() -> ();
drop<Unit>([3]) -> ();
drop<felt252>([1]) -> ();
struct_construct<Unit>() -> ([9]);
struct_construct<Tuple<Unit>>([9]) -> ([10]);
enum_init<core::PanicResult::<((),)>, 0>([10]) -> ([11]);
store_temp<core::PanicResult::<((),)>>([11]) -> ([12]);
return([12]);

examples::testing::run_tests@0() -> (core::PanicResult::<((),)>);
examples::testing::assert@19([0]: core::bool, [1]: felt252) -> (core::PanicResult::<((),)>);
