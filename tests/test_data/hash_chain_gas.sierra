type felt252 = felt252;
type NonZero<felt252> = NonZero<felt252>;
type Tuple<felt252> = Struct<ut@Tuple, felt252>;
type Array<felt252> = Array<felt252>;
type core::PanicResult::<(core::felt252,)> = Enum<ut@core::PanicResult::<(core::felt252,)>, Tuple<felt252>, Array<felt252>>;
type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type Pedersen = Pedersen;
type BuiltinCosts = BuiltinCosts;
type Unit = Struct<ut@Tuple>;

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<felt252> = dup<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc drop<felt252> = drop<felt252>;
libfunc felt252_const<0> = felt252_const<0>;
libfunc struct_construct<Tuple<felt252>> = struct_construct<Tuple<felt252>>;
libfunc enum_init<core::PanicResult::<(core::felt252,)>, 0> = enum_init<core::PanicResult::<(core::felt252,)>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<Pedersen> = store_temp<Pedersen>;
libfunc store_temp<core::PanicResult::<(core::felt252,)>> = store_temp<core::PanicResult::<(core::felt252,)>>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc get_builtin_costs = get_builtin_costs;
libfunc store_temp<BuiltinCosts> = store_temp<BuiltinCosts>;
libfunc withdraw_gas_all = withdraw_gas_all;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc drop<Unit> = drop<Unit>;
libfunc felt252_const<1> = felt252_const<1>;
libfunc felt252_sub = felt252_sub;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc function_call<user@examples::hash_chain_gas::hash_chain> = function_call<user@examples::hash_chain_gas::hash_chain>;
libfunc enum_match<core::PanicResult::<(core::felt252,)>> = enum_match<core::PanicResult::<(core::felt252,)>>;
libfunc struct_deconstruct<Tuple<felt252>> = struct_deconstruct<Tuple<felt252>>;
libfunc pedersen = pedersen;
libfunc enum_init<core::PanicResult::<(core::felt252,)>, 1> = enum_init<core::PanicResult::<(core::felt252,)>, 1>;
libfunc array_new<felt252> = array_new<felt252>;
libfunc felt252_const<375233589013918064796019> = felt252_const<375233589013918064796019>;
libfunc array_append<felt252> = array_append<felt252>;

disable_ap_tracking() -> ();
dup<felt252>([3]) -> ([3], [5]);
felt252_is_zero([5]) { fallthrough() 13([4]) };
branch_align() -> ();
drop<felt252>([3]) -> ();
felt252_const<0>() -> ([6]);
struct_construct<Tuple<felt252>>([6]) -> ([7]);
enum_init<core::PanicResult::<(core::felt252,)>, 0>([7]) -> ([8]);
store_temp<RangeCheck>([0]) -> ([9]);
store_temp<GasBuiltin>([1]) -> ([10]);
store_temp<Pedersen>([2]) -> ([11]);
store_temp<core::PanicResult::<(core::felt252,)>>([8]) -> ([12]);
return([9], [10], [11], [12]);
branch_align() -> ();
drop<NonZero<felt252>>([4]) -> ();
get_builtin_costs() -> ([13]);
store_temp<BuiltinCosts>([13]) -> ([13]);
withdraw_gas_all([0], [1], [13]) { fallthrough([14], [15]) 48([16], [17]) };
branch_align() -> ();
struct_construct<Unit>() -> ([18]);
drop<Unit>([18]) -> ();
felt252_const<1>() -> ([19]);
dup<felt252>([3]) -> ([3], [21]);
felt252_sub([21], [19]) -> ([20]);
store_temp<RangeCheck>([14]) -> ([26]);
store_temp<GasBuiltin>([15]) -> ([27]);
store_temp<Pedersen>([2]) -> ([28]);
store_temp<felt252>([20]) -> ([29]);
function_call<user@examples::hash_chain_gas::hash_chain>([26], [27], [28], [29]) -> ([22], [23], [24], [25]);
enum_match<core::PanicResult::<(core::felt252,)>>([25]) { fallthrough([30]) 40([31]) };
branch_align() -> ();
struct_deconstruct<Tuple<felt252>>([30]) -> ([32]);
pedersen([24], [32], [3]) -> ([33], [34]);
struct_construct<Tuple<felt252>>([34]) -> ([35]);
enum_init<core::PanicResult::<(core::felt252,)>, 0>([35]) -> ([36]);
store_temp<RangeCheck>([22]) -> ([37]);
store_temp<GasBuiltin>([23]) -> ([38]);
store_temp<Pedersen>([33]) -> ([39]);
store_temp<core::PanicResult::<(core::felt252,)>>([36]) -> ([40]);
return([37], [38], [39], [40]);
branch_align() -> ();
drop<felt252>([3]) -> ();
enum_init<core::PanicResult::<(core::felt252,)>, 1>([31]) -> ([41]);
store_temp<RangeCheck>([22]) -> ([42]);
store_temp<GasBuiltin>([23]) -> ([43]);
store_temp<Pedersen>([24]) -> ([44]);
store_temp<core::PanicResult::<(core::felt252,)>>([41]) -> ([45]);
return([42], [43], [44], [45]);
branch_align() -> ();
drop<felt252>([3]) -> ();
struct_construct<Unit>() -> ([46]);
drop<Unit>([46]) -> ();
array_new<felt252>() -> ([47]);
felt252_const<375233589013918064796019>() -> ([48]);
store_temp<felt252>([48]) -> ([48]);
array_append<felt252>([47], [48]) -> ([49]);
struct_construct<Unit>() -> ([50]);
drop<Unit>([50]) -> ();
enum_init<core::PanicResult::<(core::felt252,)>, 1>([49]) -> ([51]);
store_temp<RangeCheck>([16]) -> ([52]);
store_temp<GasBuiltin>([17]) -> ([53]);
store_temp<Pedersen>([2]) -> ([54]);
store_temp<core::PanicResult::<(core::felt252,)>>([51]) -> ([55]);
return([52], [53], [54], [55]);

examples::hash_chain_gas::hash_chain@0([0]: RangeCheck, [1]: GasBuiltin, [2]: Pedersen, [3]: felt252) -> (RangeCheck, GasBuiltin, Pedersen, core::PanicResult::<(core::felt252,)>);
