type felt = felt;
type NonZero<felt> = NonZero<felt>;
type Array<felt> = Array<felt>;
type core::PanicResult::<core::felt> = Enum<ut@core::PanicResult::<core::felt>, felt, Array<felt>>;
type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type Pedersen = Pedersen;
type BuiltinCosts = BuiltinCosts;
type Unit = Struct<ut@Tuple>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc dup<felt> = dup<felt>;
libfunc felt_jump_nz = felt_jump_nz;
libfunc branch_align = branch_align;
libfunc drop<felt> = drop<felt>;
libfunc felt_const<0> = felt_const<0>;
libfunc enum_init<core::PanicResult::<core::felt>, 0> = enum_init<core::PanicResult::<core::felt>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<Pedersen> = store_temp<Pedersen>;
libfunc store_temp<core::PanicResult::<core::felt>> = store_temp<core::PanicResult::<core::felt>>;
libfunc rename<core::PanicResult::<core::felt>> = rename<core::PanicResult::<core::felt>>;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc get_builtin_costs = get_builtin_costs;
libfunc store_temp<BuiltinCosts> = store_temp<BuiltinCosts>;
libfunc get_gas_all = get_gas_all;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc drop<Unit> = drop<Unit>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc jump = jump;
libfunc array_new<felt> = array_new<felt>;
libfunc felt_const<375233589013918064796019> = felt_const<375233589013918064796019>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc array_append<felt> = array_append<felt>;
libfunc enum_init<core::PanicResult::<core::felt>, 1> = enum_init<core::PanicResult::<core::felt>, 1>;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_sub = felt_sub;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc rename<felt> = rename<felt>;
libfunc function_call<user@hash_chain_gas::hash_chain_gas::hash_chain> = function_call<user@hash_chain_gas::hash_chain_gas::hash_chain>;
libfunc enum_match<core::PanicResult::<core::felt>> = enum_match<core::PanicResult::<core::felt>>;
libfunc pedersen = pedersen;
libfunc rename<Pedersen> = rename<Pedersen>;

revoke_ap_tracking() -> ();
dup<felt>([3]) -> ([3], [54]);
felt_jump_nz([54]) { fallthrough() 13([4]) };
branch_align() -> ();
drop<felt>([3]) -> ();
felt_const<0>() -> ([5]);
enum_init<core::PanicResult::<core::felt>, 0>([5]) -> ([6]);
store_temp<RangeCheck>([0]) -> ([7]);
store_temp<GasBuiltin>([1]) -> ([8]);
store_temp<Pedersen>([2]) -> ([9]);
store_temp<core::PanicResult::<core::felt>>([6]) -> ([6]);
rename<core::PanicResult::<core::felt>>([6]) -> ([10]);
return([7], [8], [9], [10]);
branch_align() -> ();
drop<NonZero<felt>>([4]) -> ();
get_builtin_costs() -> ([11]);
store_temp<BuiltinCosts>([11]) -> ([11]);
get_gas_all([0], [1], [11]) { fallthrough([12], [13]) 25([14], [15]) };
branch_align() -> ();
struct_construct<Unit>() -> ([16]);
drop<Unit>([16]) -> ();
store_temp<RangeCheck>([12]) -> ([12]);
rename<RangeCheck>([12]) -> ([17]);
store_temp<GasBuiltin>([13]) -> ([18]);
jump() { 41() };
branch_align() -> ();
drop<felt>([3]) -> ();
struct_construct<Unit>() -> ([19]);
drop<Unit>([19]) -> ();
array_new<felt>() -> ([20]);
felt_const<375233589013918064796019>() -> ([21]);
store_temp<felt>([21]) -> ([21]);
array_append<felt>([20], [21]) -> ([22]);
enum_init<core::PanicResult::<core::felt>, 1>([22]) -> ([23]);
store_temp<RangeCheck>([14]) -> ([14]);
rename<RangeCheck>([14]) -> ([24]);
store_temp<GasBuiltin>([15]) -> ([25]);
store_temp<Pedersen>([2]) -> ([26]);
store_temp<core::PanicResult::<core::felt>>([23]) -> ([23]);
rename<core::PanicResult::<core::felt>>([23]) -> ([27]);
return([24], [25], [26], [27]);
felt_const<1>() -> ([28]);
dup<felt>([3]) -> ([3], [30]);
felt_sub([30], [28]) -> ([29]);
rename<RangeCheck>([17]) -> ([35]);
rename<GasBuiltin>([18]) -> ([36]);
store_temp<Pedersen>([2]) -> ([37]);
store_temp<felt>([29]) -> ([29]);
rename<felt>([29]) -> ([38]);
function_call<user@hash_chain_gas::hash_chain_gas::hash_chain>([35], [36], [37], [38]) -> ([31], [32], [33], [34]);
enum_match<core::PanicResult::<core::felt>>([34]) { 51([39]) 54([40]) };
branch_align() -> ();
store_temp<felt>([39]) -> ([41]);
jump() { 63() };
branch_align() -> ();
drop<felt>([3]) -> ();
enum_init<core::PanicResult::<core::felt>, 1>([40]) -> ([42]);
store_temp<RangeCheck>([31]) -> ([43]);
store_temp<GasBuiltin>([32]) -> ([44]);
store_temp<Pedersen>([33]) -> ([45]);
store_temp<core::PanicResult::<core::felt>>([42]) -> ([42]);
rename<core::PanicResult::<core::felt>>([42]) -> ([46]);
return([43], [44], [45], [46]);
pedersen([33], [41], [3]) -> ([47], [48]);
enum_init<core::PanicResult::<core::felt>, 0>([48]) -> ([49]);
store_temp<RangeCheck>([31]) -> ([50]);
store_temp<GasBuiltin>([32]) -> ([51]);
store_temp<Pedersen>([47]) -> ([47]);
rename<Pedersen>([47]) -> ([52]);
store_temp<core::PanicResult::<core::felt>>([49]) -> ([49]);
rename<core::PanicResult::<core::felt>>([49]) -> ([53]);
return([50], [51], [52], [53]);

hash_chain_gas::hash_chain_gas::hash_chain@0([0]: RangeCheck, [1]: GasBuiltin, [2]: Pedersen, [3]: felt) -> (RangeCheck, GasBuiltin, Pedersen, core::PanicResult::<core::felt>);
