type felt = felt;
type NonZero<felt> = NonZero<felt>;
type PedersenBuiltinCost = PedersenBuiltinCost;
type Array<felt> = Array<felt>;
type core::PanicResult::<core::felt> = Enum<ut@core::PanicResult::<core::felt>, felt, Array<felt>>;
type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type Pedersen = Pedersen;
type Unit = Struct<ut@Tuple>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc dup<felt> = dup<felt>;
libfunc felt_jump_nz = felt_jump_nz;
libfunc drop<PedersenBuiltinCost> = drop<PedersenBuiltinCost>;
libfunc drop<felt> = drop<felt>;
libfunc felt_const<0> = felt_const<0>;
libfunc enum_init<core::PanicResult::<core::felt>, 0> = enum_init<core::PanicResult::<core::felt>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<Pedersen> = store_temp<Pedersen>;
libfunc store_temp<core::PanicResult::<core::felt>> = store_temp<core::PanicResult::<core::felt>>;
libfunc rename<core::PanicResult::<core::felt>> = rename<core::PanicResult::<core::felt>>;
libfunc burn_gas = burn_gas;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc get_gas = get_gas;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc jump = jump;
libfunc drop<Unit> = drop<Unit>;
libfunc array_new<felt> = array_new<felt>;
libfunc felt_const<1> = felt_const<1>;
libfunc store_temp<Array<felt>> = store_temp<Array<felt>>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc array_append<felt> = array_append<felt>;
libfunc enum_init<core::PanicResult::<core::felt>, 1> = enum_init<core::PanicResult::<core::felt>, 1>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc dup<PedersenBuiltinCost> = dup<PedersenBuiltinCost>;
libfunc pedersen_get_gas = pedersen_get_gas;
libfunc felt_sub = felt_sub;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc rename<felt> = rename<felt>;
libfunc store_temp<PedersenBuiltinCost> = store_temp<PedersenBuiltinCost>;
libfunc function_call<user@hash_chain_gas::hash_chain_gas::hash_chain> = function_call<user@hash_chain_gas::hash_chain_gas::hash_chain>;
libfunc enum_match<core::PanicResult::<core::felt>> = enum_match<core::PanicResult::<core::felt>>;
libfunc pedersen = pedersen;
libfunc rename<Pedersen> = rename<Pedersen>;

revoke_ap_tracking() -> ();
dup<felt>([3]) -> ([3], [70]);
felt_jump_nz([70]) { fallthrough() 14([5]) };
drop<PedersenBuiltinCost>([4]) -> ();
drop<felt>([3]) -> ();
felt_const<0>() -> ([6]);
enum_init<core::PanicResult::<core::felt>, 0>([6]) -> ([7]);
store_temp<RangeCheck>([0]) -> ([8]);
store_temp<GasBuiltin>([1]) -> ([9]);
store_temp<Pedersen>([2]) -> ([10]);
store_temp<core::PanicResult::<core::felt>>([7]) -> ([7]);
rename<core::PanicResult::<core::felt>>([7]) -> ([11]);
burn_gas() -> ();
return([8], [9], [10], [11]);
drop<NonZero<felt>>([5]) -> ();
burn_gas() -> ();
get_gas([0], [1]) { fallthrough([12], [13]) 23([14], [15]) };
struct_construct<Unit>() -> ([16]);
store_temp<RangeCheck>([12]) -> ([12]);
rename<RangeCheck>([12]) -> ([17]);
store_temp<GasBuiltin>([13]) -> ([18]);
burn_gas() -> ();
jump() { 41() };
drop<PedersenBuiltinCost>([4]) -> ();
drop<felt>([3]) -> ();
struct_construct<Unit>() -> ([19]);
drop<Unit>([19]) -> ();
array_new<felt>() -> ([20]);
felt_const<1>() -> ([21]);
store_temp<Array<felt>>([20]) -> ([20]);
store_temp<felt>([21]) -> ([21]);
array_append<felt>([20], [21]) -> ([22]);
enum_init<core::PanicResult::<core::felt>, 1>([22]) -> ([23]);
store_temp<RangeCheck>([14]) -> ([14]);
rename<RangeCheck>([14]) -> ([24]);
store_temp<GasBuiltin>([15]) -> ([25]);
store_temp<Pedersen>([2]) -> ([26]);
store_temp<core::PanicResult::<core::felt>>([23]) -> ([23]);
rename<core::PanicResult::<core::felt>>([23]) -> ([27]);
burn_gas() -> ();
return([24], [25], [26], [27]);
store_temp<Unit>([16]) -> ([16]);
drop<Unit>([16]) -> ();
dup<PedersenBuiltinCost>([4]) -> ([4], [71]);
pedersen_get_gas([17], [18], [71]) { fallthrough([28], [29]) 51([30], [31]) };
struct_construct<Unit>() -> ([32]);
store_temp<RangeCheck>([28]) -> ([28]);
rename<RangeCheck>([28]) -> ([33]);
store_temp<GasBuiltin>([29]) -> ([34]);
burn_gas() -> ();
jump() { 69() };
drop<felt>([3]) -> ();
drop<PedersenBuiltinCost>([4]) -> ();
struct_construct<Unit>() -> ([35]);
drop<Unit>([35]) -> ();
array_new<felt>() -> ([36]);
felt_const<1>() -> ([37]);
store_temp<Array<felt>>([36]) -> ([36]);
store_temp<felt>([37]) -> ([37]);
array_append<felt>([36], [37]) -> ([38]);
enum_init<core::PanicResult::<core::felt>, 1>([38]) -> ([39]);
store_temp<RangeCheck>([30]) -> ([30]);
rename<RangeCheck>([30]) -> ([40]);
store_temp<GasBuiltin>([31]) -> ([41]);
store_temp<Pedersen>([2]) -> ([42]);
store_temp<core::PanicResult::<core::felt>>([39]) -> ([39]);
rename<core::PanicResult::<core::felt>>([39]) -> ([43]);
burn_gas() -> ();
return([40], [41], [42], [43]);
felt_const<1>() -> ([44]);
dup<felt>([3]) -> ([3], [72]);
felt_sub([72], [44]) -> ([45]);
rename<RangeCheck>([33]) -> ([50]);
rename<GasBuiltin>([34]) -> ([51]);
store_temp<Pedersen>([2]) -> ([52]);
store_temp<felt>([45]) -> ([45]);
rename<felt>([45]) -> ([53]);
store_temp<PedersenBuiltinCost>([4]) -> ([54]);
function_call<user@hash_chain_gas::hash_chain_gas::hash_chain>([50], [51], [52], [53], [54]) -> ([46], [47], [48], [49]);
store_temp<Unit>([32]) -> ([32]);
drop<Unit>([32]) -> ();
enum_match<core::PanicResult::<core::felt>>([49]) { 82([55]) 85([56]) };
store_temp<felt>([55]) -> ([57]);
burn_gas() -> ();
jump() { 94() };
drop<felt>([3]) -> ();
enum_init<core::PanicResult::<core::felt>, 1>([56]) -> ([58]);
store_temp<RangeCheck>([46]) -> ([59]);
store_temp<GasBuiltin>([47]) -> ([60]);
store_temp<Pedersen>([48]) -> ([61]);
store_temp<core::PanicResult::<core::felt>>([58]) -> ([58]);
rename<core::PanicResult::<core::felt>>([58]) -> ([62]);
burn_gas() -> ();
return([59], [60], [61], [62]);
pedersen([48], [57], [3]) -> ([63], [64]);
enum_init<core::PanicResult::<core::felt>, 0>([64]) -> ([65]);
store_temp<RangeCheck>([46]) -> ([66]);
store_temp<GasBuiltin>([47]) -> ([67]);
store_temp<Pedersen>([63]) -> ([63]);
rename<Pedersen>([63]) -> ([68]);
store_temp<core::PanicResult::<core::felt>>([65]) -> ([65]);
rename<core::PanicResult::<core::felt>>([65]) -> ([69]);
burn_gas() -> ();
return([66], [67], [68], [69]);

hash_chain_gas::hash_chain_gas::hash_chain@0([0]: RangeCheck, [1]: GasBuiltin, [2]: Pedersen, [3]: felt, [4]: PedersenBuiltinCost) -> (RangeCheck, GasBuiltin, Pedersen, core::PanicResult::<core::felt>);
