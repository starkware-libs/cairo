type felt = felt;
type NonZero<felt> = NonZero<felt>;
type Array<felt> = Array<felt>;
type core::PanicResult::<core::felt> = Enum<ut@core::PanicResult::<core::felt>, felt, Array<felt>>;
type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type Pedersen = Pedersen;
type Unit = Struct<ut@Tuple>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc dup<felt> = dup<felt>;
libfunc felt_jump_nz = felt_jump_nz;
libfunc drop<felt> = drop<felt>;
libfunc felt_const<0> = felt_const<0>;
libfunc enum_init<core::PanicResult::<core::felt>, 0> = enum_init<core::PanicResult::<core::felt>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<Pedersen> = store_temp<Pedersen>;
libfunc store_temp<core::PanicResult::<core::felt>> = store_temp<core::PanicResult::<core::felt>>;
libfunc rename<core::PanicResult::<core::felt>> = rename<core::PanicResult::<core::felt>>;
libfunc burn_gas = burn_gas;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc get_gas = get_gas;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc jump = jump;
libfunc drop<Unit> = drop<Unit>;
libfunc array_new<felt> = array_new<felt>;
libfunc felt_const<1> = felt_const<1>;
libfunc store_temp<Array<felt>> = store_temp<Array<felt>>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc array_append<felt> = array_append<felt>;
libfunc enum_init<core::PanicResult::<core::felt>, 1> = enum_init<core::PanicResult::<core::felt>, 1>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc pedersen_get_gas = pedersen_get_gas;
libfunc felt_sub = felt_sub;
libfunc rename<felt> = rename<felt>;
libfunc function_call<user@hash_chain_gas::hash_chain_gas::hash_chain> = function_call<user@hash_chain_gas::hash_chain_gas::hash_chain>;
libfunc enum_match<core::PanicResult::<core::felt>> = enum_match<core::PanicResult::<core::felt>>;
libfunc pedersen = pedersen;
libfunc rename<Pedersen> = rename<Pedersen>;

revoke_ap_tracking() -> ();
dup<felt>([3]) -> ([3], [68]);
felt_jump_nz([68]) { fallthrough() 13([4]) };
drop<felt>([3]) -> ();
felt_const<0>() -> ([5]);
enum_init<core::PanicResult::<core::felt>, 0>([5]) -> ([6]);
store_temp<RangeCheck>([0]) -> ([7]);
store_temp<GasBuiltin>([1]) -> ([8]);
store_temp<Pedersen>([2]) -> ([9]);
store_temp<core::PanicResult::<core::felt>>([6]) -> ([6]);
rename<core::PanicResult::<core::felt>>([6]) -> ([10]);
burn_gas() -> ();
return([7], [8], [9], [10]);
drop<NonZero<felt>>([4]) -> ();
burn_gas() -> ();
get_gas([0], [1]) { fallthrough([11], [12]) 23([13], [14]) };
struct_construct<Unit>() -> ([15]);
store_temp<RangeCheck>([11]) -> ([11]);
rename<RangeCheck>([11]) -> ([16]);
store_temp<GasBuiltin>([12]) -> ([12]);
rename<GasBuiltin>([12]) -> ([17]);
burn_gas() -> ();
jump() { 40() };
drop<felt>([3]) -> ();
struct_construct<Unit>() -> ([18]);
drop<Unit>([18]) -> ();
array_new<felt>() -> ([19]);
felt_const<1>() -> ([20]);
store_temp<Array<felt>>([19]) -> ([19]);
store_temp<felt>([20]) -> ([20]);
array_append<felt>([19], [20]) -> ([21]);
enum_init<core::PanicResult::<core::felt>, 1>([21]) -> ([22]);
store_temp<RangeCheck>([13]) -> ([13]);
rename<RangeCheck>([13]) -> ([23]);
store_temp<GasBuiltin>([14]) -> ([24]);
store_temp<Pedersen>([2]) -> ([25]);
store_temp<core::PanicResult::<core::felt>>([22]) -> ([22]);
rename<core::PanicResult::<core::felt>>([22]) -> ([26]);
burn_gas() -> ();
return([23], [24], [25], [26]);
store_temp<Unit>([15]) -> ([15]);
drop<Unit>([15]) -> ();
pedersen_get_gas([16], [17]) { fallthrough([27], [28]) 50([29], [30]) };
struct_construct<Unit>() -> ([31]);
store_temp<RangeCheck>([27]) -> ([27]);
rename<RangeCheck>([27]) -> ([32]);
store_temp<GasBuiltin>([28]) -> ([28]);
rename<GasBuiltin>([28]) -> ([33]);
burn_gas() -> ();
jump() { 67() };
drop<felt>([3]) -> ();
struct_construct<Unit>() -> ([34]);
drop<Unit>([34]) -> ();
array_new<felt>() -> ([35]);
felt_const<1>() -> ([36]);
store_temp<Array<felt>>([35]) -> ([35]);
store_temp<felt>([36]) -> ([36]);
array_append<felt>([35], [36]) -> ([37]);
enum_init<core::PanicResult::<core::felt>, 1>([37]) -> ([38]);
store_temp<RangeCheck>([29]) -> ([29]);
rename<RangeCheck>([29]) -> ([39]);
store_temp<GasBuiltin>([30]) -> ([40]);
store_temp<Pedersen>([2]) -> ([41]);
store_temp<core::PanicResult::<core::felt>>([38]) -> ([38]);
rename<core::PanicResult::<core::felt>>([38]) -> ([42]);
burn_gas() -> ();
return([39], [40], [41], [42]);
felt_const<1>() -> ([43]);
dup<felt>([3]) -> ([3], [69]);
felt_sub([69], [43]) -> ([44]);
rename<RangeCheck>([32]) -> ([49]);
rename<GasBuiltin>([33]) -> ([50]);
store_temp<Pedersen>([2]) -> ([51]);
store_temp<felt>([44]) -> ([44]);
rename<felt>([44]) -> ([52]);
function_call<user@hash_chain_gas::hash_chain_gas::hash_chain>([49], [50], [51], [52]) -> ([45], [46], [47], [48]);
store_temp<Unit>([31]) -> ([31]);
drop<Unit>([31]) -> ();
enum_match<core::PanicResult::<core::felt>>([48]) { 79([53]) 82([54]) };
store_temp<felt>([53]) -> ([55]);
burn_gas() -> ();
jump() { 91() };
drop<felt>([3]) -> ();
enum_init<core::PanicResult::<core::felt>, 1>([54]) -> ([56]);
store_temp<RangeCheck>([45]) -> ([57]);
store_temp<GasBuiltin>([46]) -> ([58]);
store_temp<Pedersen>([47]) -> ([59]);
store_temp<core::PanicResult::<core::felt>>([56]) -> ([56]);
rename<core::PanicResult::<core::felt>>([56]) -> ([60]);
burn_gas() -> ();
return([57], [58], [59], [60]);
pedersen([47], [55], [3]) -> ([61], [62]);
enum_init<core::PanicResult::<core::felt>, 0>([62]) -> ([63]);
store_temp<RangeCheck>([45]) -> ([64]);
store_temp<GasBuiltin>([46]) -> ([65]);
store_temp<Pedersen>([61]) -> ([61]);
rename<Pedersen>([61]) -> ([66]);
store_temp<core::PanicResult::<core::felt>>([63]) -> ([63]);
rename<core::PanicResult::<core::felt>>([63]) -> ([67]);
burn_gas() -> ();
return([64], [65], [66], [67]);

hash_chain_gas::hash_chain_gas::hash_chain@0([0]: RangeCheck, [1]: GasBuiltin, [2]: Pedersen, [3]: felt) -> (RangeCheck, GasBuiltin, Pedersen, core::PanicResult::<core::felt>);
