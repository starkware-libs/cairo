type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::Panic = Struct<ut@core::panics::Panic> [storable: true, drop: true, dup: true, zero_sized: true];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Tuple<core::panics::Panic, Array<felt252>> = Struct<ut@Tuple, core::panics::Panic, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type BuiltinCosts = BuiltinCosts [storable: true, drop: true, dup: true, zero_sized: false];
type Pedersen = Pedersen [storable: true, drop: false, dup: false, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Tuple<felt252> = Struct<ut@Tuple, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::PanicResult::<(core::felt252,)> = Enum<ut@core::panics::PanicResult::<(core::felt252,)>, Tuple<felt252>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<felt252> = dup<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc drop<felt252> = drop<felt252>;
libfunc felt252_const<0> = felt252_const<0>;
libfunc struct_construct<Tuple<felt252>> = struct_construct<Tuple<felt252>>;
libfunc enum_init<core::panics::PanicResult::<(core::felt252,)>, 0> = enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<Pedersen> = store_temp<Pedersen>;
libfunc store_temp<core::panics::PanicResult::<(core::felt252,)>> = store_temp<core::panics::PanicResult::<(core::felt252,)>>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc get_builtin_costs = get_builtin_costs;
libfunc store_temp<BuiltinCosts> = store_temp<BuiltinCosts>;
libfunc withdraw_gas_all = withdraw_gas_all;
libfunc felt252_const<1> = felt252_const<1>;
libfunc felt252_sub = felt252_sub;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc function_call<user@examples::hash_chain_gas::hash_chain> = function_call<user@examples::hash_chain_gas::hash_chain>;
libfunc enum_match<core::panics::PanicResult::<(core::felt252,)>> = enum_match<core::panics::PanicResult::<(core::felt252,)>>;
libfunc struct_deconstruct<Tuple<felt252>> = struct_deconstruct<Tuple<felt252>>;
libfunc pedersen = pedersen;
libfunc enum_init<core::panics::PanicResult::<(core::felt252,)>, 1> = enum_init<core::panics::PanicResult::<(core::felt252,)>, 1>;
libfunc array_new<felt252> = array_new<felt252>;
libfunc felt252_const<375233589013918064796019> = felt252_const<375233589013918064796019>;
libfunc array_append<felt252> = array_append<felt252>;
libfunc struct_construct<core::panics::Panic> = struct_construct<core::panics::Panic>;
libfunc struct_construct<Tuple<core::panics::Panic, Array<felt252>>> = struct_construct<Tuple<core::panics::Panic, Array<felt252>>>;

disable_ap_tracking() -> (); // 0
dup<felt252>([3]) -> ([3], [4]); // 1
felt252_is_zero([4]) { fallthrough() 13([5]) }; // 2
branch_align() -> (); // 3
drop<felt252>([3]) -> (); // 4
felt252_const<0>() -> ([6]); // 5
struct_construct<Tuple<felt252>>([6]) -> ([7]); // 6
enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>([7]) -> ([8]); // 7
store_temp<RangeCheck>([0]) -> ([9]); // 8
store_temp<GasBuiltin>([1]) -> ([10]); // 9
store_temp<Pedersen>([2]) -> ([11]); // 10
store_temp<core::panics::PanicResult::<(core::felt252,)>>([8]) -> ([12]); // 11
return([9], [10], [11], [12]); // 12
branch_align() -> (); // 13
drop<NonZero<felt252>>([5]) -> (); // 14
get_builtin_costs() -> ([13]); // 15
store_temp<BuiltinCosts>([13]) -> ([13]); // 16
withdraw_gas_all([0], [1], [13]) { fallthrough([14], [15]) 46([16], [17]) }; // 17
branch_align() -> (); // 18
felt252_const<1>() -> ([18]); // 19
dup<felt252>([3]) -> ([3], [20]); // 20
felt252_sub([20], [18]) -> ([19]); // 21
store_temp<RangeCheck>([14]) -> ([25]); // 22
store_temp<GasBuiltin>([15]) -> ([26]); // 23
store_temp<Pedersen>([2]) -> ([27]); // 24
store_temp<felt252>([19]) -> ([28]); // 25
function_call<user@examples::hash_chain_gas::hash_chain>([25], [26], [27], [28]) -> ([21], [22], [23], [24]); // 26
enum_match<core::panics::PanicResult::<(core::felt252,)>>([24]) { fallthrough([29]) 38([30]) }; // 27
branch_align() -> (); // 28
struct_deconstruct<Tuple<felt252>>([29]) -> ([31]); // 29
pedersen([23], [31], [3]) -> ([32], [33]); // 30
struct_construct<Tuple<felt252>>([33]) -> ([34]); // 31
enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>([34]) -> ([35]); // 32
store_temp<RangeCheck>([21]) -> ([36]); // 33
store_temp<GasBuiltin>([22]) -> ([37]); // 34
store_temp<Pedersen>([32]) -> ([38]); // 35
store_temp<core::panics::PanicResult::<(core::felt252,)>>([35]) -> ([39]); // 36
return([36], [37], [38], [39]); // 37
branch_align() -> (); // 38
drop<felt252>([3]) -> (); // 39
enum_init<core::panics::PanicResult::<(core::felt252,)>, 1>([30]) -> ([40]); // 40
store_temp<RangeCheck>([21]) -> ([41]); // 41
store_temp<GasBuiltin>([22]) -> ([42]); // 42
store_temp<Pedersen>([23]) -> ([43]); // 43
store_temp<core::panics::PanicResult::<(core::felt252,)>>([40]) -> ([44]); // 44
return([41], [42], [43], [44]); // 45
branch_align() -> (); // 46
drop<felt252>([3]) -> (); // 47
array_new<felt252>() -> ([45]); // 48
felt252_const<375233589013918064796019>() -> ([46]); // 49
store_temp<felt252>([46]) -> ([46]); // 50
array_append<felt252>([45], [46]) -> ([47]); // 51
struct_construct<core::panics::Panic>() -> ([48]); // 52
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([48], [47]) -> ([49]); // 53
enum_init<core::panics::PanicResult::<(core::felt252,)>, 1>([49]) -> ([50]); // 54
store_temp<RangeCheck>([16]) -> ([51]); // 55
store_temp<GasBuiltin>([17]) -> ([52]); // 56
store_temp<Pedersen>([2]) -> ([53]); // 57
store_temp<core::panics::PanicResult::<(core::felt252,)>>([50]) -> ([54]); // 58
return([51], [52], [53], [54]); // 59

examples::hash_chain_gas::hash_chain@0([0]: RangeCheck, [1]: GasBuiltin, [2]: Pedersen, [3]: felt252) -> (RangeCheck, GasBuiltin, Pedersen, core::panics::PanicResult::<(core::felt252,)>);
