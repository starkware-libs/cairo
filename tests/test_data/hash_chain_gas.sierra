type felt = felt;
type NonZero<felt> = NonZero<felt>;
type Array<felt> = Array<felt>;
type core::PanicResult::<core::felt> = Enum<ut@core::PanicResult::<core::felt>, felt, Array<felt>>;
type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type Pedersen = Pedersen;
type BuiltinCosts = BuiltinCosts;
type Unit = Struct<ut@Tuple>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc dup<felt> = dup<felt>;
libfunc felt_is_zero = felt_is_zero;
libfunc branch_align = branch_align;
libfunc drop<felt> = drop<felt>;
libfunc felt_const<0> = felt_const<0>;
libfunc enum_init<core::PanicResult::<core::felt>, 0> = enum_init<core::PanicResult::<core::felt>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<Pedersen> = store_temp<Pedersen>;
libfunc store_temp<core::PanicResult::<core::felt>> = store_temp<core::PanicResult::<core::felt>>;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc jump = jump;
libfunc get_builtin_costs = get_builtin_costs;
libfunc store_temp<BuiltinCosts> = store_temp<BuiltinCosts>;
libfunc get_gas_all = get_gas_all;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc drop<Unit> = drop<Unit>;
libfunc array_new<felt> = array_new<felt>;
libfunc felt_const<375233589013918064796019> = felt_const<375233589013918064796019>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc array_append<felt> = array_append<felt>;
libfunc enum_init<core::PanicResult::<core::felt>, 1> = enum_init<core::PanicResult::<core::felt>, 1>;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_sub = felt_sub;
libfunc function_call<user@hash_chain_gas::hash_chain_gas::hash_chain> = function_call<user@hash_chain_gas::hash_chain_gas::hash_chain>;
libfunc enum_match<core::PanicResult::<core::felt>> = enum_match<core::PanicResult::<core::felt>>;
libfunc pedersen = pedersen;

revoke_ap_tracking() -> ();
dup<felt>([3]) -> ([3], [5]);
felt_is_zero([5]) { fallthrough() 12([4]) };
branch_align() -> ();
drop<felt>([3]) -> ();
felt_const<0>() -> ([6]);
enum_init<core::PanicResult::<core::felt>, 0>([6]) -> ([7]);
store_temp<RangeCheck>([0]) -> ([8]);
store_temp<GasBuiltin>([1]) -> ([9]);
store_temp<Pedersen>([2]) -> ([10]);
store_temp<core::PanicResult::<core::felt>>([7]) -> ([11]);
return([8], [9], [10], [11]);
branch_align() -> ();
drop<NonZero<felt>>([4]) -> ();
jump() { 15() };
get_builtin_costs() -> ([12]);
store_temp<BuiltinCosts>([12]) -> ([12]);
get_gas_all([0], [1], [12]) { fallthrough([13], [14]) 22([15], [16]) };
branch_align() -> ();
struct_construct<Unit>() -> ([17]);
drop<Unit>([17]) -> ();
jump() { 36() };
branch_align() -> ();
drop<felt>([3]) -> ();
struct_construct<Unit>() -> ([18]);
drop<Unit>([18]) -> ();
array_new<felt>() -> ([19]);
felt_const<375233589013918064796019>() -> ([20]);
store_temp<felt>([20]) -> ([20]);
array_append<felt>([19], [20]) -> ([21]);
enum_init<core::PanicResult::<core::felt>, 1>([21]) -> ([22]);
store_temp<RangeCheck>([15]) -> ([23]);
store_temp<GasBuiltin>([16]) -> ([24]);
store_temp<Pedersen>([2]) -> ([25]);
store_temp<core::PanicResult::<core::felt>>([22]) -> ([26]);
return([23], [24], [25], [26]);
felt_const<1>() -> ([27]);
dup<felt>([3]) -> ([3], [29]);
felt_sub([29], [27]) -> ([28]);
store_temp<RangeCheck>([13]) -> ([34]);
store_temp<GasBuiltin>([14]) -> ([35]);
store_temp<Pedersen>([2]) -> ([36]);
store_temp<felt>([28]) -> ([37]);
function_call<user@hash_chain_gas::hash_chain_gas::hash_chain>([34], [35], [36], [37]) -> ([30], [31], [32], [33]);
enum_match<core::PanicResult::<core::felt>>([33]) { fallthrough([38]) 47([39]) };
branch_align() -> ();
jump() { 55() };
branch_align() -> ();
drop<felt>([3]) -> ();
enum_init<core::PanicResult::<core::felt>, 1>([39]) -> ([40]);
store_temp<RangeCheck>([30]) -> ([41]);
store_temp<GasBuiltin>([31]) -> ([42]);
store_temp<Pedersen>([32]) -> ([43]);
store_temp<core::PanicResult::<core::felt>>([40]) -> ([44]);
return([41], [42], [43], [44]);
pedersen([32], [38], [3]) -> ([45], [46]);
enum_init<core::PanicResult::<core::felt>, 0>([46]) -> ([47]);
store_temp<RangeCheck>([30]) -> ([48]);
store_temp<GasBuiltin>([31]) -> ([49]);
store_temp<Pedersen>([45]) -> ([50]);
store_temp<core::PanicResult::<core::felt>>([47]) -> ([51]);
return([48], [49], [50], [51]);

hash_chain_gas::hash_chain_gas::hash_chain@0([0]: RangeCheck, [1]: GasBuiltin, [2]: Pedersen, [3]: felt) -> (RangeCheck, GasBuiltin, Pedersen, core::PanicResult::<core::felt>);
