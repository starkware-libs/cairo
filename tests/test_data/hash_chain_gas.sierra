type felt252 = felt252;
type NonZero<felt252> = NonZero<felt252>;
type Tuple<felt252> = Struct<ut@Tuple, felt252>;
type Array<felt252> = Array<felt252>;
type core::PanicResult::<(core::felt252,)> = Enum<ut@core::PanicResult::<(core::felt252,)>, Tuple<felt252>, Array<felt252>>;
type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type Pedersen = Pedersen;
type BuiltinCosts = BuiltinCosts;

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<felt252> = dup<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc drop<felt252> = drop<felt252>;
libfunc felt252_const<0> = felt252_const<0>;
libfunc struct_construct<Tuple<felt252>> = struct_construct<Tuple<felt252>>;
libfunc enum_init<core::PanicResult::<(core::felt252,)>, 0> = enum_init<core::PanicResult::<(core::felt252,)>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<Pedersen> = store_temp<Pedersen>;
libfunc store_temp<core::PanicResult::<(core::felt252,)>> = store_temp<core::PanicResult::<(core::felt252,)>>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc get_builtin_costs = get_builtin_costs;
libfunc store_temp<BuiltinCosts> = store_temp<BuiltinCosts>;
libfunc withdraw_gas_all = withdraw_gas_all;
libfunc felt252_const<1> = felt252_const<1>;
libfunc felt252_sub = felt252_sub;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc function_call<user@examples::hash_chain_gas::hash_chain> = function_call<user@examples::hash_chain_gas::hash_chain>;
libfunc enum_match<core::PanicResult::<(core::felt252,)>> = enum_match<core::PanicResult::<(core::felt252,)>>;
libfunc struct_deconstruct<Tuple<felt252>> = struct_deconstruct<Tuple<felt252>>;
libfunc pedersen = pedersen;
libfunc enum_init<core::PanicResult::<(core::felt252,)>, 1> = enum_init<core::PanicResult::<(core::felt252,)>, 1>;
libfunc array_new<felt252> = array_new<felt252>;
libfunc felt252_const<375233589013918064796019> = felt252_const<375233589013918064796019>;
libfunc array_append<felt252> = array_append<felt252>;

disable_ap_tracking() -> ();
dup<felt252>([3]) -> ([3], [4]);
felt252_is_zero([4]) { fallthrough() 13([5]) };
branch_align() -> ();
drop<felt252>([3]) -> ();
felt252_const<0>() -> ([6]);
struct_construct<Tuple<felt252>>([6]) -> ([7]);
enum_init<core::PanicResult::<(core::felt252,)>, 0>([7]) -> ([8]);
store_temp<RangeCheck>([0]) -> ([9]);
store_temp<GasBuiltin>([1]) -> ([10]);
store_temp<Pedersen>([2]) -> ([11]);
store_temp<core::PanicResult::<(core::felt252,)>>([8]) -> ([12]);
return([9], [10], [11], [12]);
branch_align() -> ();
drop<NonZero<felt252>>([5]) -> ();
get_builtin_costs() -> ([13]);
store_temp<BuiltinCosts>([13]) -> ([13]);
withdraw_gas_all([0], [1], [13]) { fallthrough([14], [15]) 46([16], [17]) };
branch_align() -> ();
felt252_const<1>() -> ([18]);
dup<felt252>([3]) -> ([3], [20]);
felt252_sub([20], [18]) -> ([19]);
store_temp<RangeCheck>([14]) -> ([25]);
store_temp<GasBuiltin>([15]) -> ([26]);
store_temp<Pedersen>([2]) -> ([27]);
store_temp<felt252>([19]) -> ([28]);
function_call<user@examples::hash_chain_gas::hash_chain>([25], [26], [27], [28]) -> ([21], [22], [23], [24]);
enum_match<core::PanicResult::<(core::felt252,)>>([24]) { fallthrough([29]) 38([30]) };
branch_align() -> ();
struct_deconstruct<Tuple<felt252>>([29]) -> ([31]);
pedersen([23], [31], [3]) -> ([32], [33]);
struct_construct<Tuple<felt252>>([33]) -> ([34]);
enum_init<core::PanicResult::<(core::felt252,)>, 0>([34]) -> ([35]);
store_temp<RangeCheck>([21]) -> ([36]);
store_temp<GasBuiltin>([22]) -> ([37]);
store_temp<Pedersen>([32]) -> ([38]);
store_temp<core::PanicResult::<(core::felt252,)>>([35]) -> ([39]);
return([36], [37], [38], [39]);
branch_align() -> ();
drop<felt252>([3]) -> ();
enum_init<core::PanicResult::<(core::felt252,)>, 1>([30]) -> ([40]);
store_temp<RangeCheck>([21]) -> ([41]);
store_temp<GasBuiltin>([22]) -> ([42]);
store_temp<Pedersen>([23]) -> ([43]);
store_temp<core::PanicResult::<(core::felt252,)>>([40]) -> ([44]);
return([41], [42], [43], [44]);
branch_align() -> ();
drop<felt252>([3]) -> ();
array_new<felt252>() -> ([45]);
felt252_const<375233589013918064796019>() -> ([46]);
store_temp<felt252>([46]) -> ([46]);
array_append<felt252>([45], [46]) -> ([47]);
enum_init<core::PanicResult::<(core::felt252,)>, 1>([47]) -> ([48]);
store_temp<RangeCheck>([16]) -> ([49]);
store_temp<GasBuiltin>([17]) -> ([50]);
store_temp<Pedersen>([2]) -> ([51]);
store_temp<core::PanicResult::<(core::felt252,)>>([48]) -> ([52]);
return([49], [50], [51], [52]);

examples::hash_chain_gas::hash_chain@0([0]: RangeCheck, [1]: GasBuiltin, [2]: Pedersen, [3]: felt252) -> (RangeCheck, GasBuiltin, Pedersen, core::PanicResult::<(core::felt252,)>);
