type felt = felt;
type NonZero<felt> = NonZero<felt>;
type Array<felt> = Array<felt>;
type core::PanicResult::<core::felt> = Enum<ut@core::PanicResult::<core::felt>, felt, Array<felt>>;
type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type Pedersen = Pedersen;
type BuiltinCosts = BuiltinCosts;
type Unit = Struct<ut@Tuple>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc dup<felt> = dup<felt>;
libfunc felt_is_zero = felt_is_zero;
libfunc branch_align = branch_align;
libfunc drop<felt> = drop<felt>;
libfunc felt_const<0> = felt_const<0>;
libfunc enum_init<core::PanicResult::<core::felt>, 0> = enum_init<core::PanicResult::<core::felt>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<Pedersen> = store_temp<Pedersen>;
libfunc store_temp<core::PanicResult::<core::felt>> = store_temp<core::PanicResult::<core::felt>>;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc get_builtin_costs = get_builtin_costs;
libfunc store_temp<BuiltinCosts> = store_temp<BuiltinCosts>;
libfunc try_fetch_gas_all = try_fetch_gas_all;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc drop<Unit> = drop<Unit>;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_sub = felt_sub;
libfunc store_temp<felt> = store_temp<felt>;
libfunc function_call<user@hash_chain_gas::hash_chain_gas::hash_chain> = function_call<user@hash_chain_gas::hash_chain_gas::hash_chain>;
libfunc enum_match<core::PanicResult::<core::felt>> = enum_match<core::PanicResult::<core::felt>>;
libfunc pedersen = pedersen;
libfunc enum_init<core::PanicResult::<core::felt>, 1> = enum_init<core::PanicResult::<core::felt>, 1>;
libfunc array_new<felt> = array_new<felt>;
libfunc felt_const<375233589013918064796019> = felt_const<375233589013918064796019>;
libfunc array_append<felt> = array_append<felt>;

revoke_ap_tracking() -> ();
dup<felt>([3]) -> ([3], [5]);
felt_is_zero([5]) { fallthrough() 12([4]) };
branch_align() -> ();
drop<felt>([3]) -> ();
felt_const<0>() -> ([6]);
enum_init<core::PanicResult::<core::felt>, 0>([6]) -> ([7]);
store_temp<RangeCheck>([0]) -> ([8]);
store_temp<GasBuiltin>([1]) -> ([9]);
store_temp<Pedersen>([2]) -> ([10]);
store_temp<core::PanicResult::<core::felt>>([7]) -> ([11]);
return([8], [9], [10], [11]);
branch_align() -> ();
drop<NonZero<felt>>([4]) -> ();
get_builtin_costs() -> ([12]);
store_temp<BuiltinCosts>([12]) -> ([12]);
try_fetch_gas_all([0], [1], [12]) { fallthrough([13], [14]) 45([15], [16]) };
branch_align() -> ();
struct_construct<Unit>() -> ([17]);
drop<Unit>([17]) -> ();
felt_const<1>() -> ([18]);
dup<felt>([3]) -> ([3], [20]);
felt_sub([20], [18]) -> ([19]);
store_temp<RangeCheck>([13]) -> ([25]);
store_temp<GasBuiltin>([14]) -> ([26]);
store_temp<Pedersen>([2]) -> ([27]);
store_temp<felt>([19]) -> ([28]);
function_call<user@hash_chain_gas::hash_chain_gas::hash_chain>([25], [26], [27], [28]) -> ([21], [22], [23], [24]);
enum_match<core::PanicResult::<core::felt>>([24]) { fallthrough([29]) 37([30]) };
branch_align() -> ();
pedersen([23], [29], [3]) -> ([31], [32]);
enum_init<core::PanicResult::<core::felt>, 0>([32]) -> ([33]);
store_temp<RangeCheck>([21]) -> ([34]);
store_temp<GasBuiltin>([22]) -> ([35]);
store_temp<Pedersen>([31]) -> ([36]);
store_temp<core::PanicResult::<core::felt>>([33]) -> ([37]);
return([34], [35], [36], [37]);
branch_align() -> ();
drop<felt>([3]) -> ();
enum_init<core::PanicResult::<core::felt>, 1>([30]) -> ([38]);
store_temp<RangeCheck>([21]) -> ([39]);
store_temp<GasBuiltin>([22]) -> ([40]);
store_temp<Pedersen>([23]) -> ([41]);
store_temp<core::PanicResult::<core::felt>>([38]) -> ([42]);
return([39], [40], [41], [42]);
branch_align() -> ();
drop<felt>([3]) -> ();
struct_construct<Unit>() -> ([43]);
drop<Unit>([43]) -> ();
array_new<felt>() -> ([44]);
felt_const<375233589013918064796019>() -> ([45]);
store_temp<felt>([45]) -> ([45]);
array_append<felt>([44], [45]) -> ([46]);
enum_init<core::PanicResult::<core::felt>, 1>([46]) -> ([47]);
store_temp<RangeCheck>([15]) -> ([48]);
store_temp<GasBuiltin>([16]) -> ([49]);
store_temp<Pedersen>([2]) -> ([50]);
store_temp<core::PanicResult::<core::felt>>([47]) -> ([51]);
return([48], [49], [50], [51]);

hash_chain_gas::hash_chain_gas::hash_chain@0([0]: RangeCheck, [1]: GasBuiltin, [2]: Pedersen, [3]: felt) -> (RangeCheck, GasBuiltin, Pedersen, core::PanicResult::<core::felt>);
