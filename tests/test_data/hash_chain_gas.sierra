type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::Panic = Struct<ut@core::panics::Panic> [storable: true, drop: true, dup: true, zero_sized: true];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Tuple<core::panics::Panic, Array<felt252>> = Struct<ut@Tuple, core::panics::Panic, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type BuiltinCosts = BuiltinCosts [storable: true, drop: true, dup: true, zero_sized: false];
type Pedersen = Pedersen [storable: true, drop: false, dup: false, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Tuple<felt252> = Struct<ut@Tuple, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::PanicResult::<(core::felt252,)> = Enum<ut@core::panics::PanicResult::<(core::felt252,)>, Tuple<felt252>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<felt252> = dup<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc drop<felt252> = drop<felt252>;
libfunc felt252_const<0> = felt252_const<0>;
libfunc struct_construct<Tuple<felt252>> = struct_construct<Tuple<felt252>>;
libfunc enum_init<core::panics::PanicResult::<(core::felt252,)>, 0> = enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<Pedersen> = store_temp<Pedersen>;
libfunc store_temp<core::panics::PanicResult::<(core::felt252,)>> = store_temp<core::panics::PanicResult::<(core::felt252,)>>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc get_builtin_costs = get_builtin_costs;
libfunc store_temp<BuiltinCosts> = store_temp<BuiltinCosts>;
libfunc withdraw_gas_all = withdraw_gas_all;
libfunc felt252_const<1> = felt252_const<1>;
libfunc felt252_sub = felt252_sub;
libfunc redeposit_gas = redeposit_gas;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc function_call<user@examples::hash_chain_gas::hash_chain> = function_call<user@examples::hash_chain_gas::hash_chain>;
libfunc enum_match<core::panics::PanicResult::<(core::felt252,)>> = enum_match<core::panics::PanicResult::<(core::felt252,)>>;
libfunc struct_deconstruct<Tuple<felt252>> = struct_deconstruct<Tuple<felt252>>;
libfunc pedersen = pedersen;
libfunc enum_init<core::panics::PanicResult::<(core::felt252,)>, 1> = enum_init<core::panics::PanicResult::<(core::felt252,)>, 1>;
libfunc array_new<felt252> = array_new<felt252>;
libfunc felt252_const<375233589013918064796019> = felt252_const<375233589013918064796019>;
libfunc array_append<felt252> = array_append<felt252>;
libfunc struct_construct<core::panics::Panic> = struct_construct<core::panics::Panic>;
libfunc struct_construct<Tuple<core::panics::Panic, Array<felt252>>> = struct_construct<Tuple<core::panics::Panic, Array<felt252>>>;

disable_ap_tracking() -> (); // 0
dup<felt252>([3]) -> ([3], [4]); // 1
felt252_is_zero([4]) { fallthrough() 13([5]) }; // 2
branch_align() -> (); // 3
drop<felt252>([3]) -> (); // 4
felt252_const<0>() -> ([6]); // 5
struct_construct<Tuple<felt252>>([6]) -> ([7]); // 6
enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>([7]) -> ([8]); // 7
store_temp<RangeCheck>([0]) -> ([0]); // 8
store_temp<GasBuiltin>([1]) -> ([1]); // 9
store_temp<Pedersen>([2]) -> ([2]); // 10
store_temp<core::panics::PanicResult::<(core::felt252,)>>([8]) -> ([8]); // 11
return([0], [1], [2], [8]); // 12
branch_align() -> (); // 13
drop<NonZero<felt252>>([5]) -> (); // 14
get_builtin_costs() -> ([9]); // 15
store_temp<BuiltinCosts>([9]) -> ([9]); // 16
withdraw_gas_all([0], [1], [9]) { fallthrough([10], [11]) 49([12], [13]) }; // 17
branch_align() -> (); // 18
felt252_const<1>() -> ([14]); // 19
dup<felt252>([3]) -> ([3], [15]); // 20
felt252_sub([15], [14]) -> ([16]); // 21
redeposit_gas([11]) -> ([11]); // 22
store_temp<RangeCheck>([10]) -> ([10]); // 23
store_temp<GasBuiltin>([11]) -> ([11]); // 24
store_temp<Pedersen>([2]) -> ([2]); // 25
store_temp<felt252>([16]) -> ([16]); // 26
function_call<user@examples::hash_chain_gas::hash_chain>([10], [11], [2], [16]) -> ([17], [18], [19], [20]); // 27
enum_match<core::panics::PanicResult::<(core::felt252,)>>([20]) { fallthrough([21]) 40([22]) }; // 28
branch_align() -> (); // 29
struct_deconstruct<Tuple<felt252>>([21]) -> ([23]); // 30
pedersen([19], [23], [3]) -> ([24], [25]); // 31
struct_construct<Tuple<felt252>>([25]) -> ([26]); // 32
enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>([26]) -> ([27]); // 33
redeposit_gas([18]) -> ([18]); // 34
store_temp<RangeCheck>([17]) -> ([17]); // 35
store_temp<GasBuiltin>([18]) -> ([18]); // 36
store_temp<Pedersen>([24]) -> ([24]); // 37
store_temp<core::panics::PanicResult::<(core::felt252,)>>([27]) -> ([27]); // 38
return([17], [18], [24], [27]); // 39
branch_align() -> (); // 40
drop<felt252>([3]) -> (); // 41
enum_init<core::panics::PanicResult::<(core::felt252,)>, 1>([22]) -> ([28]); // 42
redeposit_gas([18]) -> ([18]); // 43
store_temp<RangeCheck>([17]) -> ([17]); // 44
store_temp<GasBuiltin>([18]) -> ([18]); // 45
store_temp<Pedersen>([19]) -> ([19]); // 46
store_temp<core::panics::PanicResult::<(core::felt252,)>>([28]) -> ([28]); // 47
return([17], [18], [19], [28]); // 48
branch_align() -> (); // 49
drop<felt252>([3]) -> (); // 50
array_new<felt252>() -> ([29]); // 51
felt252_const<375233589013918064796019>() -> ([30]); // 52
store_temp<felt252>([30]) -> ([30]); // 53
array_append<felt252>([29], [30]) -> ([31]); // 54
struct_construct<core::panics::Panic>() -> ([32]); // 55
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([32], [31]) -> ([33]); // 56
enum_init<core::panics::PanicResult::<(core::felt252,)>, 1>([33]) -> ([34]); // 57
store_temp<RangeCheck>([12]) -> ([12]); // 58
store_temp<GasBuiltin>([13]) -> ([13]); // 59
store_temp<Pedersen>([2]) -> ([2]); // 60
store_temp<core::panics::PanicResult::<(core::felt252,)>>([34]) -> ([34]); // 61
return([12], [13], [2], [34]); // 62

examples::hash_chain_gas::hash_chain@0([0]: RangeCheck, [1]: GasBuiltin, [2]: Pedersen, [3]: felt252) -> (RangeCheck, GasBuiltin, Pedersen, core::panics::PanicResult::<(core::felt252,)>);
