type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Pedersen = Pedersen [storable: true, drop: false, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<felt252> = dup<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc drop<felt252> = drop<felt252>;
libfunc felt252_const<0> = felt252_const<0>;
libfunc store_temp<Pedersen> = store_temp<Pedersen>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc felt252_const<1> = felt252_const<1>;
libfunc felt252_sub = felt252_sub;
libfunc function_call<user@examples::hash_chain::hash_chain> = function_call<user@examples::hash_chain::hash_chain>;
libfunc pedersen = pedersen;

disable_ap_tracking() -> (); // 0
dup<felt252>([1]) -> ([1], [2]); // 1
felt252_is_zero([2]) { fallthrough() 9([3]) }; // 2
branch_align() -> (); // 3
drop<felt252>([1]) -> (); // 4
felt252_const<0>() -> ([4]); // 5
store_temp<Pedersen>([0]) -> ([5]); // 6
store_temp<felt252>([4]) -> ([6]); // 7
return([5], [6]); // 8
branch_align() -> (); // 9
drop<NonZero<felt252>>([3]) -> (); // 10
felt252_const<1>() -> ([7]); // 11
dup<felt252>([1]) -> ([1], [9]); // 12
felt252_sub([9], [7]) -> ([8]); // 13
store_temp<Pedersen>([0]) -> ([12]); // 14
store_temp<felt252>([8]) -> ([13]); // 15
function_call<user@examples::hash_chain::hash_chain>([12], [13]) -> ([10], [11]); // 16
pedersen([10], [11], [1]) -> ([14], [15]); // 17
store_temp<Pedersen>([14]) -> ([16]); // 18
store_temp<felt252>([15]) -> ([17]); // 19
return([16], [17]); // 20

examples::hash_chain::hash_chain@0([0]: Pedersen, [1]: felt252) -> (Pedersen, felt252);
