type felt252 = felt252;
type NonZero<felt252> = NonZero<felt252>;
type Pedersen = Pedersen;

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<felt252> = dup<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc drop<felt252> = drop<felt252>;
libfunc felt252_const<0> = felt252_const<0>;
libfunc store_temp<Pedersen> = store_temp<Pedersen>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc felt252_const<1> = felt252_const<1>;
libfunc felt252_sub = felt252_sub;
libfunc function_call<user@examples::hash_chain::hash_chain> = function_call<user@examples::hash_chain::hash_chain>;
libfunc pedersen = pedersen;

disable_ap_tracking() -> ();
dup<felt252>([1]) -> ([1], [3]);
felt252_is_zero([3]) { fallthrough() 9([2]) };
branch_align() -> ();
drop<felt252>([1]) -> ();
felt252_const<0>() -> ([4]);
store_temp<Pedersen>([0]) -> ([5]);
store_temp<felt252>([4]) -> ([6]);
return([5], [6]);
branch_align() -> ();
drop<NonZero<felt252>>([2]) -> ();
felt252_const<1>() -> ([7]);
dup<felt252>([1]) -> ([1], [9]);
felt252_sub([9], [7]) -> ([8]);
store_temp<Pedersen>([0]) -> ([12]);
store_temp<felt252>([8]) -> ([13]);
function_call<user@examples::hash_chain::hash_chain>([12], [13]) -> ([10], [11]);
pedersen([10], [11], [1]) -> ([14], [15]);
store_temp<Pedersen>([14]) -> ([16]);
store_temp<felt252>([15]) -> ([17]);
return([16], [17]);

examples::hash_chain::hash_chain@0([0]: Pedersen, [1]: felt252) -> (Pedersen, felt252);
