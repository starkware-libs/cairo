type felt = felt;
type NonZero<felt> = NonZero<felt>;
type Pedersen = Pedersen;

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<felt> = dup<felt>;
libfunc felt_is_zero = felt_is_zero;
libfunc branch_align = branch_align;
libfunc drop<felt> = drop<felt>;
libfunc felt_const<0> = felt_const<0>;
libfunc store_temp<Pedersen> = store_temp<Pedersen>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_sub = felt_sub;
libfunc function_call<user@hash_chain::hash_chain::hash_chain> = function_call<user@hash_chain::hash_chain::hash_chain>;
libfunc pedersen = pedersen;

disable_ap_tracking() -> ();
dup<felt>([1]) -> ([1], [3]);
felt_is_zero([3]) { fallthrough() 9([2]) };
branch_align() -> ();
drop<felt>([1]) -> ();
felt_const<0>() -> ([4]);
store_temp<Pedersen>([0]) -> ([5]);
store_temp<felt>([4]) -> ([6]);
return([5], [6]);
branch_align() -> ();
drop<NonZero<felt>>([2]) -> ();
felt_const<1>() -> ([7]);
dup<felt>([1]) -> ([1], [9]);
felt_sub([9], [7]) -> ([8]);
store_temp<Pedersen>([0]) -> ([12]);
store_temp<felt>([8]) -> ([13]);
function_call<user@hash_chain::hash_chain::hash_chain>([12], [13]) -> ([10], [11]);
pedersen([10], [11], [1]) -> ([14], [15]);
store_temp<Pedersen>([14]) -> ([16]);
store_temp<felt>([15]) -> ([17]);
return([16], [17]);

hash_chain::hash_chain::hash_chain@0([0]: Pedersen, [1]: felt) -> (Pedersen, felt);
