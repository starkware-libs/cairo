type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 1> = Const<felt252, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type examples::fib_struct::FibResult = Struct<ut@examples::fib_struct::FibResult, felt252, felt252, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 0> = Const<felt252, 0> [storable: false, drop: false, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<felt252> = dup<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc drop<felt252> = drop<felt252>;
libfunc const_as_immediate<Const<felt252, 0>> = const_as_immediate<Const<felt252, 0>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc struct_construct<examples::fib_struct::FibResult> = struct_construct<examples::fib_struct::FibResult>;
libfunc store_temp<examples::fib_struct::FibResult> = store_temp<examples::fib_struct::FibResult>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc const_as_immediate<Const<felt252, 1>> = const_as_immediate<Const<felt252, 1>>;
libfunc felt252_add = felt252_add;
libfunc felt252_sub = felt252_sub;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc function_call<user@examples::fib_struct::fib> = function_call<user@examples::fib_struct::fib>;
libfunc struct_deconstruct<examples::fib_struct::FibResult> = struct_deconstruct<examples::fib_struct::FibResult>;
libfunc drop<Unit> = drop<Unit>;

F0:
disable_ap_tracking() -> ();
dup<felt252>([2]) -> ([2], [3]);
felt252_is_zero([3]) { fallthrough() F0_B0([4]) };
branch_align() -> ();
drop<felt252>([1]) -> ();
drop<felt252>([2]) -> ();
const_as_immediate<Const<felt252, 0>>() -> ([5]);
struct_construct<Unit>() -> ([6]);
struct_construct<examples::fib_struct::FibResult>([0], [5], [6]) -> ([7]);
store_temp<examples::fib_struct::FibResult>([7]) -> ([7]);
return([7]);
F0_B0:
branch_align() -> ();
drop<NonZero<felt252>>([4]) -> ();
const_as_immediate<Const<felt252, 1>>() -> ([8]);
dup<felt252>([1]) -> ([1], [9]);
felt252_add([0], [9]) -> ([10]);
dup<felt252>([8]) -> ([8], [11]);
felt252_sub([2], [11]) -> ([12]);
store_temp<felt252>([1]) -> ([1]);
store_temp<felt252>([10]) -> ([10]);
store_temp<felt252>([12]) -> ([12]);
function_call<user@examples::fib_struct::fib>([1], [10], [12]) -> ([13]);
struct_deconstruct<examples::fib_struct::FibResult>([13]) -> ([14], [15], [16]);
drop<Unit>([16]) -> ();
felt252_add([15], [8]) -> ([17]);
struct_construct<Unit>() -> ([18]);
struct_construct<examples::fib_struct::FibResult>([14], [17], [18]) -> ([19]);
store_temp<examples::fib_struct::FibResult>([19]) -> ([19]);
return([19]);

examples::fib_struct::fib@F0([0]: felt252, [1]: felt252, [2]: felt252) -> (examples::fib_struct::FibResult);
