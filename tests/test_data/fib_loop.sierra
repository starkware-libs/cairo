type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc felt252_const<1> = felt252_const<1>;
libfunc felt252_const<7> = felt252_const<7>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc function_call<user@examples::fib_loop::fib[expr23]> = function_call<user@examples::fib_loop::fib[expr23]>;
libfunc drop<felt252> = drop<felt252>;
libfunc dup<felt252> = dup<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc felt252_sub = felt252_sub;
libfunc felt252_add = felt252_add;

disable_ap_tracking() -> (); // 0
felt252_const<1>() -> ([0]); // 1
felt252_const<1>() -> ([1]); // 2
felt252_const<7>() -> ([2]); // 3
store_temp<felt252>([2]) -> ([2]); // 4
store_temp<felt252>([0]) -> ([0]); // 5
store_temp<felt252>([1]) -> ([1]); // 6
function_call<user@examples::fib_loop::fib[expr23]>([2], [0], [1]) -> ([3], [4], [5], [6]); // 7
drop<felt252>([3]) -> (); // 8
drop<felt252>([4]) -> (); // 9
drop<felt252>([5]) -> (); // 10
return([6]); // 11
disable_ap_tracking() -> (); // 12
store_temp<felt252>([2]) -> ([2]); // 13
store_temp<felt252>([0]) -> ([0]); // 14
store_temp<felt252>([1]) -> ([1]); // 15
function_call<user@examples::fib_loop::fib[expr23]>([2], [0], [1]) -> ([3], [4], [5], [6]); // 16
drop<felt252>([3]) -> (); // 17
drop<felt252>([4]) -> (); // 18
drop<felt252>([5]) -> (); // 19
return([6]); // 20
disable_ap_tracking() -> (); // 21
dup<felt252>([0]) -> ([0], [3]); // 22
felt252_is_zero([3]) { fallthrough() 31([4]) }; // 23
branch_align() -> (); // 24
store_temp<felt252>([0]) -> ([0]); // 25
store_temp<felt252>([2]) -> ([2]); // 26
dup<felt252>([1]) -> ([1], [5]); // 27
store_temp<felt252>([5]) -> ([5]); // 28
store_temp<felt252>([1]) -> ([1]); // 29
return([0], [2], [5], [1]); // 30
branch_align() -> (); // 31
drop<NonZero<felt252>>([4]) -> (); // 32
felt252_const<1>() -> ([6]); // 33
felt252_sub([0], [6]) -> ([7]); // 34
dup<felt252>([2]) -> ([2], [8]); // 35
felt252_add([1], [8]) -> ([9]); // 36
store_temp<felt252>([7]) -> ([7]); // 37
store_temp<felt252>([2]) -> ([2]); // 38
store_temp<felt252>([9]) -> ([9]); // 39
function_call<user@examples::fib_loop::fib[expr23]>([7], [2], [9]) -> ([10], [11], [12], [13]); // 40
return([10], [11], [12], [13]); // 41

examples::fib_loop::main@0() -> (felt252);
examples::fib_loop::fib@12([0]: felt252, [1]: felt252, [2]: felt252) -> (felt252);
examples::fib_loop::fib[expr23]@21([0]: felt252, [1]: felt252, [2]: felt252) -> (felt252, felt252, felt252, felt252);
