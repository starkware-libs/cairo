type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::panics::Panic = Struct<ut@core::panics::Panic> [storable: true, drop: true, dup: true, zero_sized: true];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Const<felt252, 608642104203229548495787928534675319> = Const<felt252, 608642104203229548495787928534675319> [storable: false, drop: false, dup: false, zero_sized: false];
type Tuple<core::panics::Panic, Array<felt252>> = Struct<ut@Tuple, core::panics::Panic, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type u8 = u8 [storable: true, drop: true, dup: true, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<felt252> = Struct<ut@Tuple, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::PanicResult::<(core::felt252,)> = Enum<ut@core::panics::PanicResult::<(core::felt252,)>, Tuple<felt252>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type examples::match_or::P = Struct<ut@examples::match_or::P, u8, u8, u8> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<u8, u8, u8> = Struct<ut@Tuple, u8, u8, u8> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<felt252, felt252> = Struct<ut@Tuple, felt252, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type examples::match_or::MyEnum = Enum<ut@examples::match_or::MyEnum, Tuple<felt252, felt252>, Tuple<felt252, felt252>, Tuple<u8, u8, u8>, examples::match_or::P> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<Unit> = Struct<ut@Tuple, Unit> [storable: true, drop: true, dup: true, zero_sized: true];
type core::panics::PanicResult::<((),)> = Enum<ut@core::panics::PanicResult::<((),)>, Tuple<Unit>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];

libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc struct_construct<Tuple<Unit>> = struct_construct<Tuple<Unit>>;
libfunc enum_init<core::panics::PanicResult::<((),)>, 0> = enum_init<core::panics::PanicResult::<((),)>, 0>;
libfunc store_temp<core::panics::PanicResult::<((),)>> = store_temp<core::panics::PanicResult::<((),)>>;
libfunc enum_match<examples::match_or::MyEnum> = enum_match<examples::match_or::MyEnum>;
libfunc branch_align = branch_align;
libfunc struct_deconstruct<Tuple<felt252, felt252>> = struct_deconstruct<Tuple<felt252, felt252>>;
libfunc drop<felt252> = drop<felt252>;
libfunc struct_construct<Tuple<felt252>> = struct_construct<Tuple<felt252>>;
libfunc enum_init<core::panics::PanicResult::<(core::felt252,)>, 0> = enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::panics::PanicResult::<(core::felt252,)>> = store_temp<core::panics::PanicResult::<(core::felt252,)>>;
libfunc struct_deconstruct<Tuple<u8, u8, u8>> = struct_deconstruct<Tuple<u8, u8, u8>>;
libfunc drop<u8> = drop<u8>;
libfunc store_temp<u8> = store_temp<u8>;
libfunc jump = jump;
libfunc struct_deconstruct<examples::match_or::P> = struct_deconstruct<examples::match_or::P>;
libfunc u8_overflowing_add = u8_overflowing_add;
libfunc u8_to_felt252 = u8_to_felt252;
libfunc function_call<user@core::panic_with_const_felt252::<608642104203229548495787928534675319>> = function_call<user@core::panic_with_const_felt252::<608642104203229548495787928534675319>>;
libfunc enum_init<core::panics::PanicResult::<(core::felt252,)>, 1> = enum_init<core::panics::PanicResult::<(core::felt252,)>, 1>;
libfunc const_as_immediate<Const<felt252, 608642104203229548495787928534675319>> = const_as_immediate<Const<felt252, 608642104203229548495787928534675319>>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc function_call<user@core::panic_with_felt252> = function_call<user@core::panic_with_felt252>;
libfunc array_new<felt252> = array_new<felt252>;
libfunc array_append<felt252> = array_append<felt252>;
libfunc struct_construct<core::panics::Panic> = struct_construct<core::panics::Panic>;
libfunc struct_construct<Tuple<core::panics::Panic, Array<felt252>>> = struct_construct<Tuple<core::panics::Panic, Array<felt252>>>;
libfunc store_temp<Tuple<core::panics::Panic, Array<felt252>>> = store_temp<Tuple<core::panics::Panic, Array<felt252>>>;

F0:
struct_construct<Unit>() -> ([0]);
struct_construct<Tuple<Unit>>([0]) -> ([1]);
enum_init<core::panics::PanicResult::<((),)>, 0>([1]) -> ([2]);
store_temp<core::panics::PanicResult::<((),)>>([2]) -> ([2]);
return([2]);
F1:
enum_match<examples::match_or::MyEnum>([1]) { fallthrough([2]) F1_B0([3]) F1_B1([4]) F1_B2([5]) };
branch_align() -> ();
struct_deconstruct<Tuple<felt252, felt252>>([2]) -> ([6], [7]);
drop<felt252>([6]) -> ();
struct_construct<Tuple<felt252>>([7]) -> ([8]);
enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>([8]) -> ([9]);
store_temp<RangeCheck>([0]) -> ([0]);
store_temp<core::panics::PanicResult::<(core::felt252,)>>([9]) -> ([9]);
return([0], [9]);
F1_B0:
branch_align() -> ();
struct_deconstruct<Tuple<felt252, felt252>>([3]) -> ([10], [11]);
drop<felt252>([11]) -> ();
struct_construct<Tuple<felt252>>([10]) -> ([12]);
enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>([12]) -> ([13]);
store_temp<RangeCheck>([0]) -> ([0]);
store_temp<core::panics::PanicResult::<(core::felt252,)>>([13]) -> ([13]);
return([0], [13]);
F1_B1:
branch_align() -> ();
struct_deconstruct<Tuple<u8, u8, u8>>([4]) -> ([14], [15], [16]);
drop<u8>([15]) -> ();
store_temp<u8>([14]) -> ([17]);
store_temp<u8>([16]) -> ([18]);
jump() { F1_B3() };
F1_B2:
branch_align() -> ();
struct_deconstruct<examples::match_or::P>([5]) -> ([19], [20], [21]);
drop<u8>([20]) -> ();
store_temp<u8>([19]) -> ([17]);
store_temp<u8>([21]) -> ([18]);
F1_B3:
u8_overflowing_add([0], [17], [18]) { fallthrough([22], [23]) F1_B4([24], [25]) };
branch_align() -> ();
u8_to_felt252([23]) -> ([26]);
struct_construct<Tuple<felt252>>([26]) -> ([27]);
enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>([27]) -> ([28]);
store_temp<RangeCheck>([22]) -> ([22]);
store_temp<core::panics::PanicResult::<(core::felt252,)>>([28]) -> ([28]);
return([22], [28]);
F1_B4:
branch_align() -> ();
drop<u8>([25]) -> ();
function_call<user@core::panic_with_const_felt252::<608642104203229548495787928534675319>>() -> ([29]);
enum_init<core::panics::PanicResult::<(core::felt252,)>, 1>([29]) -> ([30]);
store_temp<RangeCheck>([24]) -> ([24]);
store_temp<core::panics::PanicResult::<(core::felt252,)>>([30]) -> ([30]);
return([24], [30]);
F2:
const_as_immediate<Const<felt252, 608642104203229548495787928534675319>>() -> ([0]);
store_temp<felt252>([0]) -> ([0]);
function_call<user@core::panic_with_felt252>([0]) -> ([1]);
return([1]);
F3:
array_new<felt252>() -> ([1]);
array_append<felt252>([1], [0]) -> ([2]);
struct_construct<core::panics::Panic>() -> ([3]);
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([3], [2]) -> ([4]);
store_temp<Tuple<core::panics::Panic, Array<felt252>>>([4]) -> ([4]);
return([4]);

examples::match_or::main@F0() -> (core::panics::PanicResult::<((),)>);
examples::match_or::foo@F1([0]: RangeCheck, [1]: examples::match_or::MyEnum) -> (RangeCheck, core::panics::PanicResult::<(core::felt252,)>);
core::panic_with_const_felt252::<608642104203229548495787928534675319>@F2() -> (Tuple<core::panics::Panic, Array<felt252>>);
core::panic_with_felt252@F3([0]: felt252) -> (Tuple<core::panics::Panic, Array<felt252>>);
