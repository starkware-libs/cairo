type u8 = u8 [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<felt252> = Struct<ut@Tuple, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::Panic = Struct<ut@core::panics::Panic> [storable: true, drop: true, dup: true, zero_sized: true];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Tuple<core::panics::Panic, Array<felt252>> = Struct<ut@Tuple, core::panics::Panic, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type core::panics::PanicResult::<(core::felt252,)> = Enum<ut@core::panics::PanicResult::<(core::felt252,)>, Tuple<felt252>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type Const<felt252, 608642104203229548495787928534675319> = Const<felt252, 608642104203229548495787928534675319> [storable: false, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Tuple<Unit> = Struct<ut@Tuple, Unit> [storable: true, drop: true, dup: true, zero_sized: true];
type core::panics::PanicResult::<((),)> = Enum<ut@core::panics::PanicResult::<((),)>, Tuple<Unit>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Tuple<felt252, felt252> = Struct<ut@Tuple, felt252, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<u8, u8, u8> = Struct<ut@Tuple, u8, u8, u8> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<u8, 3> = Const<u8, 3> [storable: false, drop: false, dup: false, zero_sized: false];
type examples::match_or::P = Struct<ut@examples::match_or::P, u8, u8, u8> [storable: true, drop: true, dup: true, zero_sized: false];
type examples::match_or::MyEnum = Enum<ut@examples::match_or::MyEnum, Tuple<felt252, felt252>, Tuple<felt252, felt252>, Tuple<u8, u8, u8>, examples::match_or::P> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<u8, 9> = Const<u8, 9> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u8, 2> = Const<u8, 2> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u8, 1> = Const<u8, 1> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<u8, 1>> = const_as_immediate<Const<u8, 1>>;
libfunc const_as_immediate<Const<u8, 2>> = const_as_immediate<Const<u8, 2>>;
libfunc const_as_immediate<Const<u8, 9>> = const_as_immediate<Const<u8, 9>>;
libfunc struct_construct<examples::match_or::P> = struct_construct<examples::match_or::P>;
libfunc enum_init<examples::match_or::MyEnum, 3> = enum_init<examples::match_or::MyEnum, 3>;
libfunc const_as_immediate<Const<u8, 3>> = const_as_immediate<Const<u8, 3>>;
libfunc struct_construct<Tuple<u8, u8, u8>> = struct_construct<Tuple<u8, u8, u8>>;
libfunc enum_init<examples::match_or::MyEnum, 2> = enum_init<examples::match_or::MyEnum, 2>;
libfunc store_temp<examples::match_or::MyEnum> = store_temp<examples::match_or::MyEnum>;
libfunc enum_match<examples::match_or::MyEnum> = enum_match<examples::match_or::MyEnum>;
libfunc branch_align = branch_align;
libfunc drop<Tuple<felt252, felt252>> = drop<Tuple<felt252, felt252>>;
libfunc jump = jump;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc struct_deconstruct<Tuple<u8, u8, u8>> = struct_deconstruct<Tuple<u8, u8, u8>>;
libfunc drop<u8> = drop<u8>;
libfunc store_temp<u8> = store_temp<u8>;
libfunc struct_deconstruct<examples::match_or::P> = struct_deconstruct<examples::match_or::P>;
libfunc u8_overflowing_add = u8_overflowing_add;
libfunc u8_to_felt252 = u8_to_felt252;
libfunc drop<felt252> = drop<felt252>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc struct_construct<Tuple<Unit>> = struct_construct<Tuple<Unit>>;
libfunc enum_init<core::panics::PanicResult::<((),)>, 0> = enum_init<core::panics::PanicResult::<((),)>, 0>;
libfunc store_temp<core::panics::PanicResult::<((),)>> = store_temp<core::panics::PanicResult::<((),)>>;
libfunc array_new<felt252> = array_new<felt252>;
libfunc const_as_immediate<Const<felt252, 608642104203229548495787928534675319>> = const_as_immediate<Const<felt252, 608642104203229548495787928534675319>>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc array_append<felt252> = array_append<felt252>;
libfunc struct_construct<core::panics::Panic> = struct_construct<core::panics::Panic>;
libfunc struct_construct<Tuple<core::panics::Panic, Array<felt252>>> = struct_construct<Tuple<core::panics::Panic, Array<felt252>>>;
libfunc enum_init<core::panics::PanicResult::<((),)>, 1> = enum_init<core::panics::PanicResult::<((),)>, 1>;
libfunc drop<examples::match_or::MyEnum> = drop<examples::match_or::MyEnum>;
libfunc struct_deconstruct<Tuple<felt252, felt252>> = struct_deconstruct<Tuple<felt252, felt252>>;
libfunc struct_construct<Tuple<felt252>> = struct_construct<Tuple<felt252>>;
libfunc enum_init<core::panics::PanicResult::<(core::felt252,)>, 0> = enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>;
libfunc store_temp<core::panics::PanicResult::<(core::felt252,)>> = store_temp<core::panics::PanicResult::<(core::felt252,)>>;
libfunc enum_init<core::panics::PanicResult::<(core::felt252,)>, 1> = enum_init<core::panics::PanicResult::<(core::felt252,)>, 1>;

const_as_immediate<Const<u8, 1>>() -> ([1]); // 0
const_as_immediate<Const<u8, 2>>() -> ([2]); // 1
const_as_immediate<Const<u8, 9>>() -> ([3]); // 2
struct_construct<examples::match_or::P>([1], [2], [3]) -> ([4]); // 3
enum_init<examples::match_or::MyEnum, 3>([4]) -> ([5]); // 4
const_as_immediate<Const<u8, 1>>() -> ([6]); // 5
const_as_immediate<Const<u8, 2>>() -> ([7]); // 6
const_as_immediate<Const<u8, 3>>() -> ([8]); // 7
struct_construct<Tuple<u8, u8, u8>>([6], [7], [8]) -> ([9]); // 8
enum_init<examples::match_or::MyEnum, 2>([9]) -> ([10]); // 9
store_temp<examples::match_or::MyEnum>([10]) -> ([10]); // 10
store_temp<examples::match_or::MyEnum>([5]) -> ([5]); // 11
enum_match<examples::match_or::MyEnum>([10]) { fallthrough([11]) 16([12]) 20([13]) 26([14]) }; // 12
branch_align() -> (); // 13
drop<Tuple<felt252, felt252>>([11]) -> (); // 14
jump() { 18() }; // 15
branch_align() -> (); // 16
drop<Tuple<felt252, felt252>>([12]) -> (); // 17
store_temp<RangeCheck>([0]) -> ([15]); // 18
jump() { 36() }; // 19
branch_align() -> (); // 20
struct_deconstruct<Tuple<u8, u8, u8>>([13]) -> ([16], [17], [18]); // 21
drop<u8>([17]) -> (); // 22
store_temp<u8>([16]) -> ([19]); // 23
store_temp<u8>([18]) -> ([20]); // 24
jump() { 31() }; // 25
branch_align() -> (); // 26
struct_deconstruct<examples::match_or::P>([14]) -> ([21], [22], [23]); // 27
drop<u8>([22]) -> (); // 28
store_temp<u8>([21]) -> ([19]); // 29
store_temp<u8>([23]) -> ([20]); // 30
u8_overflowing_add([0], [19], [20]) { fallthrough([24], [25]) 77([26], [27]) }; // 31
branch_align() -> (); // 32
u8_to_felt252([25]) -> ([28]); // 33
drop<felt252>([28]) -> (); // 34
store_temp<RangeCheck>([24]) -> ([15]); // 35
enum_match<examples::match_or::MyEnum>([5]) { fallthrough([29]) 40([30]) 44([31]) 50([32]) }; // 36
branch_align() -> (); // 37
drop<Tuple<felt252, felt252>>([29]) -> (); // 38
jump() { 42() }; // 39
branch_align() -> (); // 40
drop<Tuple<felt252, felt252>>([30]) -> (); // 41
store_temp<RangeCheck>([15]) -> ([33]); // 42
jump() { 60() }; // 43
branch_align() -> (); // 44
struct_deconstruct<Tuple<u8, u8, u8>>([31]) -> ([34], [35], [36]); // 45
drop<u8>([35]) -> (); // 46
store_temp<u8>([34]) -> ([37]); // 47
store_temp<u8>([36]) -> ([38]); // 48
jump() { 55() }; // 49
branch_align() -> (); // 50
struct_deconstruct<examples::match_or::P>([32]) -> ([39], [40], [41]); // 51
drop<u8>([40]) -> (); // 52
store_temp<u8>([39]) -> ([37]); // 53
store_temp<u8>([41]) -> ([38]); // 54
u8_overflowing_add([15], [37], [38]) { fallthrough([42], [43]) 65([44], [45]) }; // 55
branch_align() -> (); // 56
u8_to_felt252([43]) -> ([46]); // 57
drop<felt252>([46]) -> (); // 58
store_temp<RangeCheck>([42]) -> ([33]); // 59
struct_construct<Unit>() -> ([47]); // 60
struct_construct<Tuple<Unit>>([47]) -> ([48]); // 61
enum_init<core::panics::PanicResult::<((),)>, 0>([48]) -> ([49]); // 62
store_temp<core::panics::PanicResult::<((),)>>([49]) -> ([49]); // 63
return([33], [49]); // 64
branch_align() -> (); // 65
drop<u8>([45]) -> (); // 66
array_new<felt252>() -> ([50]); // 67
const_as_immediate<Const<felt252, 608642104203229548495787928534675319>>() -> ([51]); // 68
store_temp<felt252>([51]) -> ([51]); // 69
array_append<felt252>([50], [51]) -> ([52]); // 70
struct_construct<core::panics::Panic>() -> ([53]); // 71
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([53], [52]) -> ([54]); // 72
enum_init<core::panics::PanicResult::<((),)>, 1>([54]) -> ([55]); // 73
store_temp<RangeCheck>([44]) -> ([44]); // 74
store_temp<core::panics::PanicResult::<((),)>>([55]) -> ([55]); // 75
return([44], [55]); // 76
branch_align() -> (); // 77
drop<u8>([27]) -> (); // 78
drop<examples::match_or::MyEnum>([5]) -> (); // 79
array_new<felt252>() -> ([56]); // 80
const_as_immediate<Const<felt252, 608642104203229548495787928534675319>>() -> ([57]); // 81
store_temp<felt252>([57]) -> ([57]); // 82
array_append<felt252>([56], [57]) -> ([58]); // 83
struct_construct<core::panics::Panic>() -> ([59]); // 84
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([59], [58]) -> ([60]); // 85
enum_init<core::panics::PanicResult::<((),)>, 1>([60]) -> ([61]); // 86
store_temp<RangeCheck>([26]) -> ([26]); // 87
store_temp<core::panics::PanicResult::<((),)>>([61]) -> ([61]); // 88
return([26], [61]); // 89
enum_match<examples::match_or::MyEnum>([1]) { fallthrough([2]) 96([3]) 103([4]) 109([5]) }; // 90
branch_align() -> (); // 91
struct_deconstruct<Tuple<felt252, felt252>>([2]) -> ([6], [7]); // 92
drop<felt252>([6]) -> (); // 93
store_temp<felt252>([7]) -> ([8]); // 94
jump() { 100() }; // 95
branch_align() -> (); // 96
struct_deconstruct<Tuple<felt252, felt252>>([3]) -> ([9], [10]); // 97
drop<felt252>([10]) -> (); // 98
store_temp<felt252>([9]) -> ([8]); // 99
store_temp<RangeCheck>([0]) -> ([11]); // 100
store_temp<felt252>([8]) -> ([12]); // 101
jump() { 119() }; // 102
branch_align() -> (); // 103
struct_deconstruct<Tuple<u8, u8, u8>>([4]) -> ([13], [14], [15]); // 104
drop<u8>([14]) -> (); // 105
store_temp<u8>([13]) -> ([16]); // 106
store_temp<u8>([15]) -> ([17]); // 107
jump() { 114() }; // 108
branch_align() -> (); // 109
struct_deconstruct<examples::match_or::P>([5]) -> ([18], [19], [20]); // 110
drop<u8>([19]) -> (); // 111
store_temp<u8>([18]) -> ([16]); // 112
store_temp<u8>([20]) -> ([17]); // 113
u8_overflowing_add([0], [16], [17]) { fallthrough([21], [22]) 124([23], [24]) }; // 114
branch_align() -> (); // 115
u8_to_felt252([22]) -> ([25]); // 116
store_temp<RangeCheck>([21]) -> ([11]); // 117
store_temp<felt252>([25]) -> ([12]); // 118
struct_construct<Tuple<felt252>>([12]) -> ([26]); // 119
enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>([26]) -> ([27]); // 120
store_temp<RangeCheck>([11]) -> ([11]); // 121
store_temp<core::panics::PanicResult::<(core::felt252,)>>([27]) -> ([27]); // 122
return([11], [27]); // 123
branch_align() -> (); // 124
drop<u8>([24]) -> (); // 125
array_new<felt252>() -> ([28]); // 126
const_as_immediate<Const<felt252, 608642104203229548495787928534675319>>() -> ([29]); // 127
store_temp<felt252>([29]) -> ([29]); // 128
array_append<felt252>([28], [29]) -> ([30]); // 129
struct_construct<core::panics::Panic>() -> ([31]); // 130
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([31], [30]) -> ([32]); // 131
enum_init<core::panics::PanicResult::<(core::felt252,)>, 1>([32]) -> ([33]); // 132
store_temp<RangeCheck>([23]) -> ([23]); // 133
store_temp<core::panics::PanicResult::<(core::felt252,)>>([33]) -> ([33]); // 134
return([23], [33]); // 135

examples::match_or::main@0([0]: RangeCheck) -> (RangeCheck, core::panics::PanicResult::<((),)>);
examples::match_or::foo@90([0]: RangeCheck, [1]: examples::match_or::MyEnum) -> (RangeCheck, core::panics::PanicResult::<(core::felt252,)>);
