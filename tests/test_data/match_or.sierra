type u8 = u8 [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<felt252> = Struct<ut@Tuple, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::Panic = Struct<ut@core::panics::Panic> [storable: true, drop: true, dup: true, zero_sized: true];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Tuple<core::panics::Panic, Array<felt252>> = Struct<ut@Tuple, core::panics::Panic, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type core::panics::PanicResult::<(core::felt252,)> = Enum<ut@core::panics::PanicResult::<(core::felt252,)>, Tuple<felt252>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type Const<felt252, 608642104203229548495787928534675319> = Const<felt252, 608642104203229548495787928534675319> [storable: false, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Tuple<Unit> = Struct<ut@Tuple, Unit> [storable: true, drop: true, dup: true, zero_sized: true];
type core::panics::PanicResult::<((),)> = Enum<ut@core::panics::PanicResult::<((),)>, Tuple<Unit>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Tuple<felt252, felt252> = Struct<ut@Tuple, felt252, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<u8, u8, u8> = Struct<ut@Tuple, u8, u8, u8> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<u8, 3> = Const<u8, 3> [storable: false, drop: false, dup: false, zero_sized: false];
type examples::match_or::P = Struct<ut@examples::match_or::P, u8, u8, u8> [storable: true, drop: true, dup: true, zero_sized: false];
type examples::match_or::MyEnum = Enum<ut@examples::match_or::MyEnum, Tuple<felt252, felt252>, Tuple<felt252, felt252>, Tuple<u8, u8, u8>, examples::match_or::P> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<u8, 9> = Const<u8, 9> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u8, 2> = Const<u8, 2> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u8, 1> = Const<u8, 1> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<u8, 1>> = const_as_immediate<Const<u8, 1>>;
libfunc const_as_immediate<Const<u8, 2>> = const_as_immediate<Const<u8, 2>>;
libfunc const_as_immediate<Const<u8, 9>> = const_as_immediate<Const<u8, 9>>;
libfunc struct_construct<examples::match_or::P> = struct_construct<examples::match_or::P>;
libfunc enum_init<examples::match_or::MyEnum, 3> = enum_init<examples::match_or::MyEnum, 3>;
libfunc const_as_immediate<Const<u8, 3>> = const_as_immediate<Const<u8, 3>>;
libfunc struct_construct<Tuple<u8, u8, u8>> = struct_construct<Tuple<u8, u8, u8>>;
libfunc enum_init<examples::match_or::MyEnum, 2> = enum_init<examples::match_or::MyEnum, 2>;
libfunc store_temp<examples::match_or::MyEnum> = store_temp<examples::match_or::MyEnum>;
libfunc enum_match<examples::match_or::MyEnum> = enum_match<examples::match_or::MyEnum>;
libfunc branch_align = branch_align;
libfunc drop<Tuple<felt252, felt252>> = drop<Tuple<felt252, felt252>>;
libfunc jump = jump;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc struct_deconstruct<Tuple<u8, u8, u8>> = struct_deconstruct<Tuple<u8, u8, u8>>;
libfunc drop<u8> = drop<u8>;
libfunc store_temp<u8> = store_temp<u8>;
libfunc struct_deconstruct<examples::match_or::P> = struct_deconstruct<examples::match_or::P>;
libfunc u8_overflowing_add = u8_overflowing_add;
libfunc u8_to_felt252 = u8_to_felt252;
libfunc drop<felt252> = drop<felt252>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc struct_construct<Tuple<Unit>> = struct_construct<Tuple<Unit>>;
libfunc enum_init<core::panics::PanicResult::<((),)>, 0> = enum_init<core::panics::PanicResult::<((),)>, 0>;
libfunc store_temp<core::panics::PanicResult::<((),)>> = store_temp<core::panics::PanicResult::<((),)>>;
libfunc array_new<felt252> = array_new<felt252>;
libfunc const_as_immediate<Const<felt252, 608642104203229548495787928534675319>> = const_as_immediate<Const<felt252, 608642104203229548495787928534675319>>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc array_append<felt252> = array_append<felt252>;
libfunc struct_construct<core::panics::Panic> = struct_construct<core::panics::Panic>;
libfunc struct_construct<Tuple<core::panics::Panic, Array<felt252>>> = struct_construct<Tuple<core::panics::Panic, Array<felt252>>>;
libfunc enum_init<core::panics::PanicResult::<((),)>, 1> = enum_init<core::panics::PanicResult::<((),)>, 1>;
libfunc drop<examples::match_or::MyEnum> = drop<examples::match_or::MyEnum>;
libfunc struct_deconstruct<Tuple<felt252, felt252>> = struct_deconstruct<Tuple<felt252, felt252>>;
libfunc struct_construct<Tuple<felt252>> = struct_construct<Tuple<felt252>>;
libfunc enum_init<core::panics::PanicResult::<(core::felt252,)>, 0> = enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>;
libfunc store_temp<core::panics::PanicResult::<(core::felt252,)>> = store_temp<core::panics::PanicResult::<(core::felt252,)>>;
libfunc enum_init<core::panics::PanicResult::<(core::felt252,)>, 1> = enum_init<core::panics::PanicResult::<(core::felt252,)>, 1>;

F0:
const_as_immediate<Const<u8, 1>>() -> ([1]);
const_as_immediate<Const<u8, 2>>() -> ([2]);
const_as_immediate<Const<u8, 9>>() -> ([3]);
struct_construct<examples::match_or::P>([1], [2], [3]) -> ([4]);
enum_init<examples::match_or::MyEnum, 3>([4]) -> ([5]);
const_as_immediate<Const<u8, 1>>() -> ([6]);
const_as_immediate<Const<u8, 2>>() -> ([7]);
const_as_immediate<Const<u8, 3>>() -> ([8]);
struct_construct<Tuple<u8, u8, u8>>([6], [7], [8]) -> ([9]);
enum_init<examples::match_or::MyEnum, 2>([9]) -> ([10]);
store_temp<examples::match_or::MyEnum>([10]) -> ([10]);
store_temp<examples::match_or::MyEnum>([5]) -> ([5]);
enum_match<examples::match_or::MyEnum>([10]) { fallthrough([11]) F0_B0([12]) F0_B2([13]) F0_B3([14]) };
branch_align() -> ();
drop<Tuple<felt252, felt252>>([11]) -> ();
jump() { F0_B1() };
F0_B0:
branch_align() -> ();
drop<Tuple<felt252, felt252>>([12]) -> ();
F0_B1:
store_temp<RangeCheck>([0]) -> ([15]);
jump() { F0_B5() };
F0_B2:
branch_align() -> ();
struct_deconstruct<Tuple<u8, u8, u8>>([13]) -> ([16], [17], [18]);
drop<u8>([17]) -> ();
store_temp<u8>([16]) -> ([19]);
store_temp<u8>([18]) -> ([20]);
jump() { F0_B4() };
F0_B3:
branch_align() -> ();
struct_deconstruct<examples::match_or::P>([14]) -> ([21], [22], [23]);
drop<u8>([22]) -> ();
store_temp<u8>([21]) -> ([19]);
store_temp<u8>([23]) -> ([20]);
F0_B4:
u8_overflowing_add([0], [19], [20]) { fallthrough([24], [25]) F0_B13([26], [27]) };
branch_align() -> ();
u8_to_felt252([25]) -> ([28]);
drop<felt252>([28]) -> ();
store_temp<RangeCheck>([24]) -> ([15]);
F0_B5:
enum_match<examples::match_or::MyEnum>([5]) { fallthrough([29]) F0_B6([30]) F0_B8([31]) F0_B9([32]) };
branch_align() -> ();
drop<Tuple<felt252, felt252>>([29]) -> ();
jump() { F0_B7() };
F0_B6:
branch_align() -> ();
drop<Tuple<felt252, felt252>>([30]) -> ();
F0_B7:
store_temp<RangeCheck>([15]) -> ([33]);
jump() { F0_B11() };
F0_B8:
branch_align() -> ();
struct_deconstruct<Tuple<u8, u8, u8>>([31]) -> ([34], [35], [36]);
drop<u8>([35]) -> ();
store_temp<u8>([34]) -> ([37]);
store_temp<u8>([36]) -> ([38]);
jump() { F0_B10() };
F0_B9:
branch_align() -> ();
struct_deconstruct<examples::match_or::P>([32]) -> ([39], [40], [41]);
drop<u8>([40]) -> ();
store_temp<u8>([39]) -> ([37]);
store_temp<u8>([41]) -> ([38]);
F0_B10:
u8_overflowing_add([15], [37], [38]) { fallthrough([42], [43]) F0_B12([44], [45]) };
branch_align() -> ();
u8_to_felt252([43]) -> ([46]);
drop<felt252>([46]) -> ();
store_temp<RangeCheck>([42]) -> ([33]);
F0_B11:
struct_construct<Unit>() -> ([47]);
struct_construct<Tuple<Unit>>([47]) -> ([48]);
enum_init<core::panics::PanicResult::<((),)>, 0>([48]) -> ([49]);
store_temp<core::panics::PanicResult::<((),)>>([49]) -> ([49]);
return([33], [49]);
F0_B12:
branch_align() -> ();
drop<u8>([45]) -> ();
array_new<felt252>() -> ([50]);
const_as_immediate<Const<felt252, 608642104203229548495787928534675319>>() -> ([51]);
store_temp<felt252>([51]) -> ([51]);
array_append<felt252>([50], [51]) -> ([52]);
struct_construct<core::panics::Panic>() -> ([53]);
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([53], [52]) -> ([54]);
enum_init<core::panics::PanicResult::<((),)>, 1>([54]) -> ([55]);
store_temp<RangeCheck>([44]) -> ([44]);
store_temp<core::panics::PanicResult::<((),)>>([55]) -> ([55]);
return([44], [55]);
F0_B13:
branch_align() -> ();
drop<u8>([27]) -> ();
drop<examples::match_or::MyEnum>([5]) -> ();
array_new<felt252>() -> ([56]);
const_as_immediate<Const<felt252, 608642104203229548495787928534675319>>() -> ([57]);
store_temp<felt252>([57]) -> ([57]);
array_append<felt252>([56], [57]) -> ([58]);
struct_construct<core::panics::Panic>() -> ([59]);
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([59], [58]) -> ([60]);
enum_init<core::panics::PanicResult::<((),)>, 1>([60]) -> ([61]);
store_temp<RangeCheck>([26]) -> ([26]);
store_temp<core::panics::PanicResult::<((),)>>([61]) -> ([61]);
return([26], [61]);
F1:
enum_match<examples::match_or::MyEnum>([1]) { fallthrough([2]) F1_B0([3]) F1_B2([4]) F1_B3([5]) };
branch_align() -> ();
struct_deconstruct<Tuple<felt252, felt252>>([2]) -> ([6], [7]);
drop<felt252>([6]) -> ();
store_temp<felt252>([7]) -> ([8]);
jump() { F1_B1() };
F1_B0:
branch_align() -> ();
struct_deconstruct<Tuple<felt252, felt252>>([3]) -> ([9], [10]);
drop<felt252>([10]) -> ();
store_temp<felt252>([9]) -> ([8]);
F1_B1:
store_temp<RangeCheck>([0]) -> ([11]);
store_temp<felt252>([8]) -> ([12]);
jump() { F1_B5() };
F1_B2:
branch_align() -> ();
struct_deconstruct<Tuple<u8, u8, u8>>([4]) -> ([13], [14], [15]);
drop<u8>([14]) -> ();
store_temp<u8>([13]) -> ([16]);
store_temp<u8>([15]) -> ([17]);
jump() { F1_B4() };
F1_B3:
branch_align() -> ();
struct_deconstruct<examples::match_or::P>([5]) -> ([18], [19], [20]);
drop<u8>([19]) -> ();
store_temp<u8>([18]) -> ([16]);
store_temp<u8>([20]) -> ([17]);
F1_B4:
u8_overflowing_add([0], [16], [17]) { fallthrough([21], [22]) F1_B6([23], [24]) };
branch_align() -> ();
u8_to_felt252([22]) -> ([25]);
store_temp<RangeCheck>([21]) -> ([11]);
store_temp<felt252>([25]) -> ([12]);
F1_B5:
struct_construct<Tuple<felt252>>([12]) -> ([26]);
enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>([26]) -> ([27]);
store_temp<RangeCheck>([11]) -> ([11]);
store_temp<core::panics::PanicResult::<(core::felt252,)>>([27]) -> ([27]);
return([11], [27]);
F1_B6:
branch_align() -> ();
drop<u8>([24]) -> ();
array_new<felt252>() -> ([28]);
const_as_immediate<Const<felt252, 608642104203229548495787928534675319>>() -> ([29]);
store_temp<felt252>([29]) -> ([29]);
array_append<felt252>([28], [29]) -> ([30]);
struct_construct<core::panics::Panic>() -> ([31]);
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([31], [30]) -> ([32]);
enum_init<core::panics::PanicResult::<(core::felt252,)>, 1>([32]) -> ([33]);
store_temp<RangeCheck>([23]) -> ([23]);
store_temp<core::panics::PanicResult::<(core::felt252,)>>([33]) -> ([33]);
return([23], [33]);

examples::match_or::main@F0([0]: RangeCheck) -> (RangeCheck, core::panics::PanicResult::<((),)>);
examples::match_or::foo@F1([0]: RangeCheck, [1]: examples::match_or::MyEnum) -> (RangeCheck, core::panics::PanicResult::<(core::felt252,)>);
