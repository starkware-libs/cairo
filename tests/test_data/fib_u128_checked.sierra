type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Const<u128, 1> = Const<u128, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type core::option::Option::<core::integer::u128> = Enum<ut@core::option::Option::<core::integer::u128>, u128, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<u128> = dup<u128>;
libfunc u128_to_felt252 = u128_to_felt252;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc drop<u128> = drop<u128>;
libfunc enum_init<core::option::Option::<core::integer::u128>, 0> = enum_init<core::option::Option::<core::integer::u128>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::integer::u128>> = store_temp<core::option::Option::<core::integer::u128>>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc u128_overflowing_add = u128_overflowing_add;
libfunc const_as_immediate<Const<u128, 1>> = const_as_immediate<Const<u128, 1>>;
libfunc store_temp<u128> = store_temp<u128>;
libfunc u128_overflowing_sub = u128_overflowing_sub;
libfunc function_call<user@examples::fib_u128_checked::fib> = function_call<user@examples::fib_u128_checked::fib>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::integer::u128>, 1> = enum_init<core::option::Option::<core::integer::u128>, 1>;

disable_ap_tracking() -> (); // 0
dup<u128>([3]) -> ([3], [4]); // 1
u128_to_felt252([4]) -> ([5]); // 2
felt252_is_zero([5]) { fallthrough() 11([6]) }; // 3
branch_align() -> (); // 4
drop<u128>([2]) -> (); // 5
drop<u128>([3]) -> (); // 6
enum_init<core::option::Option::<core::integer::u128>, 0>([1]) -> ([7]); // 7
store_temp<RangeCheck>([0]) -> ([0]); // 8
store_temp<core::option::Option::<core::integer::u128>>([7]) -> ([7]); // 9
return([0], [7]); // 10
branch_align() -> (); // 11
drop<NonZero<felt252>>([6]) -> (); // 12
dup<u128>([2]) -> ([2], [8]); // 13
u128_overflowing_add([0], [1], [8]) { fallthrough([9], [10]) 35([11], [12]) }; // 14
branch_align() -> (); // 15
const_as_immediate<Const<u128, 1>>() -> ([13]); // 16
store_temp<u128>([13]) -> ([13]); // 17
u128_overflowing_sub([9], [3], [13]) { fallthrough([14], [15]) 26([16], [17]) }; // 18
branch_align() -> (); // 19
store_temp<RangeCheck>([14]) -> ([14]); // 20
store_temp<u128>([2]) -> ([2]); // 21
store_temp<u128>([10]) -> ([10]); // 22
store_temp<u128>([15]) -> ([15]); // 23
function_call<user@examples::fib_u128_checked::fib>([14], [2], [10], [15]) -> ([18], [19]); // 24
return([18], [19]); // 25
branch_align() -> (); // 26
drop<u128>([17]) -> (); // 27
drop<u128>([2]) -> (); // 28
drop<u128>([10]) -> (); // 29
struct_construct<Unit>() -> ([20]); // 30
enum_init<core::option::Option::<core::integer::u128>, 1>([20]) -> ([21]); // 31
store_temp<RangeCheck>([16]) -> ([16]); // 32
store_temp<core::option::Option::<core::integer::u128>>([21]) -> ([21]); // 33
return([16], [21]); // 34
branch_align() -> (); // 35
drop<u128>([12]) -> (); // 36
drop<u128>([2]) -> (); // 37
drop<u128>([3]) -> (); // 38
struct_construct<Unit>() -> ([22]); // 39
enum_init<core::option::Option::<core::integer::u128>, 1>([22]) -> ([23]); // 40
store_temp<RangeCheck>([11]) -> ([11]); // 41
store_temp<core::option::Option::<core::integer::u128>>([23]) -> ([23]); // 42
return([11], [23]); // 43

examples::fib_u128_checked::fib@0([0]: RangeCheck, [1]: u128, [2]: u128, [3]: u128) -> (RangeCheck, core::option::Option::<core::integer::u128>);
