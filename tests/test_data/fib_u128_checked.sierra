type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Const<u128, 1> = Const<u128, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type core::option::Option::<core::integer::u128> = Enum<ut@core::option::Option::<core::integer::u128>, u128, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<u128> = dup<u128>;
libfunc u128_to_felt252 = u128_to_felt252;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc drop<u128> = drop<u128>;
libfunc enum_init<core::option::Option::<core::integer::u128>, 0> = enum_init<core::option::Option::<core::integer::u128>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::integer::u128>> = store_temp<core::option::Option::<core::integer::u128>>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc u128_overflowing_add = u128_overflowing_add;
libfunc const_as_immediate<Const<u128, 1>> = const_as_immediate<Const<u128, 1>>;
libfunc store_temp<u128> = store_temp<u128>;
libfunc u128_overflowing_sub = u128_overflowing_sub;
libfunc function_call<user@examples::fib_u128_checked::fib> = function_call<user@examples::fib_u128_checked::fib>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::integer::u128>, 1> = enum_init<core::option::Option::<core::integer::u128>, 1>;

F0:
disable_ap_tracking() -> ();
dup<u128>([3]) -> ([3], [4]);
u128_to_felt252([4]) -> ([5]);
felt252_is_zero([5]) { fallthrough() F0_B0([6]) };
branch_align() -> ();
drop<u128>([2]) -> ();
drop<u128>([3]) -> ();
enum_init<core::option::Option::<core::integer::u128>, 0>([1]) -> ([7]);
store_temp<RangeCheck>([0]) -> ([0]);
store_temp<core::option::Option::<core::integer::u128>>([7]) -> ([7]);
return([0], [7]);
F0_B0:
branch_align() -> ();
drop<NonZero<felt252>>([6]) -> ();
dup<u128>([2]) -> ([2], [8]);
u128_overflowing_add([0], [1], [8]) { fallthrough([9], [10]) F0_B2([11], [12]) };
branch_align() -> ();
const_as_immediate<Const<u128, 1>>() -> ([13]);
store_temp<u128>([13]) -> ([13]);
u128_overflowing_sub([9], [3], [13]) { fallthrough([14], [15]) F0_B1([16], [17]) };
branch_align() -> ();
store_temp<RangeCheck>([14]) -> ([14]);
store_temp<u128>([2]) -> ([2]);
store_temp<u128>([10]) -> ([10]);
store_temp<u128>([15]) -> ([15]);
function_call<user@examples::fib_u128_checked::fib>([14], [2], [10], [15]) -> ([18], [19]);
return([18], [19]);
F0_B1:
branch_align() -> ();
drop<u128>([17]) -> ();
drop<u128>([2]) -> ();
drop<u128>([10]) -> ();
struct_construct<Unit>() -> ([20]);
enum_init<core::option::Option::<core::integer::u128>, 1>([20]) -> ([21]);
store_temp<RangeCheck>([16]) -> ([16]);
store_temp<core::option::Option::<core::integer::u128>>([21]) -> ([21]);
return([16], [21]);
F0_B2:
branch_align() -> ();
drop<u128>([12]) -> ();
drop<u128>([2]) -> ();
drop<u128>([3]) -> ();
struct_construct<Unit>() -> ([22]);
enum_init<core::option::Option::<core::integer::u128>, 1>([22]) -> ([23]);
store_temp<RangeCheck>([11]) -> ([11]);
store_temp<core::option::Option::<core::integer::u128>>([23]) -> ([23]);
return([11], [23]);

examples::fib_u128_checked::fib@F0([0]: RangeCheck, [1]: u128, [2]: u128, [3]: u128) -> (RangeCheck, core::option::Option::<core::integer::u128>);
