type u128 = u128;
type felt252 = felt252;
type NonZero<felt252> = NonZero<felt252>;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<core::integer::u128> = Enum<ut@core::option::Option::<core::integer::u128>, u128, Unit>;
type RangeCheck = RangeCheck;

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<u128> = dup<u128>;
libfunc u128_to_felt252 = u128_to_felt252;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc drop<u128> = drop<u128>;
libfunc enum_init<core::option::Option::<core::integer::u128>, 0> = enum_init<core::option::Option::<core::integer::u128>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::integer::u128>> = store_temp<core::option::Option::<core::integer::u128>>;
libfunc jump = jump;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc store_temp<u128> = store_temp<u128>;
libfunc function_call<user@core::integer::u128_checked_add> = function_call<user@core::integer::u128_checked_add>;
libfunc enum_match<core::option::Option::<core::integer::u128>> = enum_match<core::option::Option::<core::integer::u128>>;
libfunc u128_const<1> = u128_const<1>;
libfunc function_call<user@core::integer::u128_checked_sub> = function_call<user@core::integer::u128_checked_sub>;
libfunc function_call<user@examples::fib_u128_checked::fib> = function_call<user@examples::fib_u128_checked::fib>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::option::Option::<core::integer::u128>> = rename<core::option::Option::<core::integer::u128>>;
libfunc enum_init<core::option::Option::<core::integer::u128>, 1> = enum_init<core::option::Option::<core::integer::u128>, 1>;
libfunc u128_overflowing_add = u128_overflowing_add;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc u128_overflowing_sub = u128_overflowing_sub;

disable_ap_tracking() -> ();
dup<u128>([3]) -> ([3], [5]);
u128_to_felt252([5]) -> ([4]);
felt252_is_zero([4]) { fallthrough() 11([6]) };
branch_align() -> ();
drop<u128>([2]) -> ();
drop<u128>([3]) -> ();
enum_init<core::option::Option::<core::integer::u128>, 0>([1]) -> ([7]);
store_temp<RangeCheck>([0]) -> ([8]);
store_temp<core::option::Option::<core::integer::u128>>([7]) -> ([9]);
jump() { 37() };
branch_align() -> ();
drop<NonZero<felt252>>([6]) -> ();
store_temp<RangeCheck>([0]) -> ([12]);
store_temp<u128>([1]) -> ([13]);
dup<u128>([2]) -> ([2], [14]);
store_temp<u128>([14]) -> ([14]);
function_call<user@core::integer::u128_checked_add>([12], [13], [14]) -> ([10], [11]);
enum_match<core::option::Option::<core::integer::u128>>([11]) { fallthrough([15]) 52([16]) };
branch_align() -> ();
u128_const<1>() -> ([17]);
store_temp<RangeCheck>([10]) -> ([20]);
store_temp<u128>([3]) -> ([21]);
store_temp<u128>([17]) -> ([22]);
function_call<user@core::integer::u128_checked_sub>([20], [21], [22]) -> ([18], [19]);
enum_match<core::option::Option::<core::integer::u128>>([19]) { fallthrough([23]) 45([24]) };
branch_align() -> ();
store_temp<RangeCheck>([18]) -> ([27]);
store_temp<u128>([2]) -> ([28]);
store_temp<u128>([15]) -> ([29]);
store_temp<u128>([23]) -> ([30]);
function_call<user@examples::fib_u128_checked::fib>([27], [28], [29], [30]) -> ([25], [26]);
enum_match<core::option::Option::<core::integer::u128>>([26]) { fallthrough([31]) 40([32]) };
branch_align() -> ();
enum_init<core::option::Option::<core::integer::u128>, 0>([31]) -> ([33]);
store_temp<RangeCheck>([25]) -> ([8]);
store_temp<core::option::Option::<core::integer::u128>>([33]) -> ([9]);
rename<RangeCheck>([8]) -> ([34]);
rename<core::option::Option::<core::integer::u128>>([9]) -> ([35]);
return([34], [35]);
branch_align() -> ();
enum_init<core::option::Option::<core::integer::u128>, 1>([32]) -> ([36]);
store_temp<RangeCheck>([25]) -> ([37]);
store_temp<core::option::Option::<core::integer::u128>>([36]) -> ([38]);
return([37], [38]);
branch_align() -> ();
drop<u128>([15]) -> ();
drop<u128>([2]) -> ();
enum_init<core::option::Option::<core::integer::u128>, 1>([24]) -> ([39]);
store_temp<RangeCheck>([18]) -> ([40]);
store_temp<core::option::Option::<core::integer::u128>>([39]) -> ([41]);
return([40], [41]);
branch_align() -> ();
drop<u128>([2]) -> ();
drop<u128>([3]) -> ();
enum_init<core::option::Option::<core::integer::u128>, 1>([16]) -> ([42]);
store_temp<RangeCheck>([10]) -> ([43]);
store_temp<core::option::Option::<core::integer::u128>>([42]) -> ([44]);
return([43], [44]);
u128_overflowing_add([0], [1], [2]) { fallthrough([3], [4]) 65([5], [6]) };
branch_align() -> ();
enum_init<core::option::Option::<core::integer::u128>, 0>([4]) -> ([7]);
store_temp<RangeCheck>([3]) -> ([8]);
store_temp<core::option::Option::<core::integer::u128>>([7]) -> ([9]);
jump() { 71() };
branch_align() -> ();
drop<u128>([6]) -> ();
struct_construct<Unit>() -> ([10]);
enum_init<core::option::Option::<core::integer::u128>, 1>([10]) -> ([11]);
store_temp<RangeCheck>([5]) -> ([8]);
store_temp<core::option::Option::<core::integer::u128>>([11]) -> ([9]);
rename<RangeCheck>([8]) -> ([12]);
rename<core::option::Option::<core::integer::u128>>([9]) -> ([13]);
return([12], [13]);
u128_overflowing_sub([0], [1], [2]) { fallthrough([3], [4]) 80([5], [6]) };
branch_align() -> ();
enum_init<core::option::Option::<core::integer::u128>, 0>([4]) -> ([7]);
store_temp<RangeCheck>([3]) -> ([8]);
store_temp<core::option::Option::<core::integer::u128>>([7]) -> ([9]);
jump() { 86() };
branch_align() -> ();
drop<u128>([6]) -> ();
struct_construct<Unit>() -> ([10]);
enum_init<core::option::Option::<core::integer::u128>, 1>([10]) -> ([11]);
store_temp<RangeCheck>([5]) -> ([8]);
store_temp<core::option::Option::<core::integer::u128>>([11]) -> ([9]);
rename<RangeCheck>([8]) -> ([12]);
rename<core::option::Option::<core::integer::u128>>([9]) -> ([13]);
return([12], [13]);

examples::fib_u128_checked::fib@0([0]: RangeCheck, [1]: u128, [2]: u128, [3]: u128) -> (RangeCheck, core::option::Option::<core::integer::u128>);
core::integer::u128_checked_add@59([0]: RangeCheck, [1]: u128, [2]: u128) -> (RangeCheck, core::option::Option::<core::integer::u128>);
core::integer::u128_checked_sub@74([0]: RangeCheck, [1]: u128, [2]: u128) -> (RangeCheck, core::option::Option::<core::integer::u128>);
