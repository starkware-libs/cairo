type uint128 = uint128;
type felt = felt;
type NonZero<felt> = NonZero<felt>;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<core::integer::uint128> = Enum<ut@core::option::Option::<core::integer::uint128>, uint128, Unit>;
type RangeCheck = RangeCheck;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc dup<uint128> = dup<uint128>;
libfunc uint128_to_felt = uint128_to_felt;
libfunc felt_jump_nz = felt_jump_nz;
libfunc drop<uint128> = drop<uint128>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::integer::uint128>, 0> = enum_init<core::option::Option::<core::integer::uint128>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::integer::uint128>> = store_temp<core::option::Option::<core::integer::uint128>>;
libfunc rename<core::option::Option::<core::integer::uint128>> = rename<core::option::Option::<core::integer::uint128>>;
libfunc jump = jump;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc store_temp<uint128> = store_temp<uint128>;
libfunc function_call<user@core::integer::uint128_checked_add> = function_call<user@core::integer::uint128_checked_add>;
libfunc enum_match<core::option::Option::<core::integer::uint128>> = enum_match<core::option::Option::<core::integer::uint128>>;
libfunc enum_init<core::option::Option::<core::integer::uint128>, 1> = enum_init<core::option::Option::<core::integer::uint128>, 1>;
libfunc felt_const<1> = felt_const<1>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc function_call<user@core::integer::uint128_from_felt_low> = function_call<user@core::integer::uint128_from_felt_low>;
libfunc function_call<user@core::integer::uint128_checked_sub> = function_call<user@core::integer::uint128_checked_sub>;
libfunc function_call<user@fib_uint128_checked::fib_uint128_checked::fib> = function_call<user@fib_uint128_checked::fib_uint128_checked::fib>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc uint128_overflow_add = uint128_overflow_add;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc uint128s_from_felt = uint128s_from_felt;
libfunc rename<uint128> = rename<uint128>;
libfunc uint128_overflow_sub = uint128_overflow_sub;

revoke_ap_tracking() -> ();
dup<uint128>([3]) -> ([3], [53]);
uint128_to_felt([53]) -> ([4]);
felt_jump_nz([4]) { fallthrough() 12([5]) };
drop<uint128>([2]) -> ();
drop<uint128>([3]) -> ();
branch_align() -> ();
enum_init<core::option::Option::<core::integer::uint128>, 0>([1]) -> ([6]);
store_temp<RangeCheck>([0]) -> ([7]);
store_temp<core::option::Option::<core::integer::uint128>>([6]) -> ([6]);
rename<core::option::Option::<core::integer::uint128>>([6]) -> ([8]);
jump() { 72() };
drop<NonZero<felt>>([5]) -> ();
branch_align() -> ();
store_temp<RangeCheck>([0]) -> ([11]);
store_temp<uint128>([1]) -> ([12]);
dup<uint128>([2]) -> ([2], [54]);
store_temp<uint128>([54]) -> ([13]);
function_call<user@core::integer::uint128_checked_add>([11], [12], [13]) -> ([9], [10]);
enum_match<core::option::Option::<core::integer::uint128>>([10]) { 20([14]) 23([15]) };
branch_align() -> ();
store_temp<uint128>([14]) -> ([16]);
jump() { 31() };
drop<uint128>([3]) -> ();
drop<uint128>([2]) -> ();
branch_align() -> ();
enum_init<core::option::Option::<core::integer::uint128>, 1>([15]) -> ([17]);
store_temp<RangeCheck>([9]) -> ([18]);
store_temp<core::option::Option::<core::integer::uint128>>([17]) -> ([17]);
rename<core::option::Option::<core::integer::uint128>>([17]) -> ([19]);
return([18], [19]);
felt_const<1>() -> ([20]);
store_temp<RangeCheck>([9]) -> ([23]);
store_temp<felt>([20]) -> ([24]);
function_call<user@core::integer::uint128_from_felt_low>([23], [24]) -> ([21], [22]);
store_temp<RangeCheck>([21]) -> ([27]);
store_temp<uint128>([3]) -> ([28]);
store_temp<uint128>([22]) -> ([29]);
function_call<user@core::integer::uint128_checked_sub>([27], [28], [29]) -> ([25], [26]);
enum_match<core::option::Option::<core::integer::uint128>>([26]) { 40([30]) 43([31]) };
branch_align() -> ();
store_temp<uint128>([30]) -> ([32]);
jump() { 51() };
drop<uint128>([2]) -> ();
drop<uint128>([16]) -> ();
branch_align() -> ();
enum_init<core::option::Option::<core::integer::uint128>, 1>([31]) -> ([33]);
store_temp<RangeCheck>([25]) -> ([34]);
store_temp<core::option::Option::<core::integer::uint128>>([33]) -> ([33]);
rename<core::option::Option::<core::integer::uint128>>([33]) -> ([35]);
return([34], [35]);
store_temp<RangeCheck>([25]) -> ([38]);
store_temp<uint128>([2]) -> ([39]);
store_temp<uint128>([16]) -> ([40]);
store_temp<uint128>([32]) -> ([41]);
function_call<user@fib_uint128_checked::fib_uint128_checked::fib>([38], [39], [40], [41]) -> ([36], [37]);
enum_match<core::option::Option::<core::integer::uint128>>([37]) { 57([42]) 60([43]) };
branch_align() -> ();
store_temp<uint128>([42]) -> ([44]);
jump() { 66() };
branch_align() -> ();
enum_init<core::option::Option::<core::integer::uint128>, 1>([43]) -> ([45]);
store_temp<RangeCheck>([36]) -> ([46]);
store_temp<core::option::Option::<core::integer::uint128>>([45]) -> ([45]);
rename<core::option::Option::<core::integer::uint128>>([45]) -> ([47]);
return([46], [47]);
enum_init<core::option::Option::<core::integer::uint128>, 0>([44]) -> ([48]);
store_temp<RangeCheck>([36]) -> ([49]);
store_temp<core::option::Option::<core::integer::uint128>>([48]) -> ([48]);
rename<core::option::Option::<core::integer::uint128>>([48]) -> ([50]);
rename<RangeCheck>([49]) -> ([7]);
rename<core::option::Option::<core::integer::uint128>>([50]) -> ([8]);
rename<RangeCheck>([7]) -> ([51]);
rename<core::option::Option::<core::integer::uint128>>([8]) -> ([52]);
return([51], [52]);
uint128_overflow_add([0], [1], [2]) { fallthrough([3], [4]) 83([5], [6]) };
branch_align() -> ();
enum_init<core::option::Option::<core::integer::uint128>, 0>([4]) -> ([7]);
store_temp<RangeCheck>([3]) -> ([3]);
rename<RangeCheck>([3]) -> ([8]);
store_temp<core::option::Option::<core::integer::uint128>>([7]) -> ([7]);
rename<core::option::Option::<core::integer::uint128>>([7]) -> ([9]);
jump() { 91() };
drop<uint128>([6]) -> ();
branch_align() -> ();
struct_construct<Unit>() -> ([10]);
enum_init<core::option::Option::<core::integer::uint128>, 1>([10]) -> ([11]);
store_temp<RangeCheck>([5]) -> ([5]);
rename<RangeCheck>([5]) -> ([8]);
store_temp<core::option::Option::<core::integer::uint128>>([11]) -> ([11]);
rename<core::option::Option::<core::integer::uint128>>([11]) -> ([9]);
rename<RangeCheck>([8]) -> ([12]);
rename<core::option::Option::<core::integer::uint128>>([9]) -> ([13]);
return([12], [13]);
uint128s_from_felt([0], [1]) { fallthrough([2], [3]) 100([4], [5], [6]) };
branch_align() -> ();
store_temp<RangeCheck>([2]) -> ([2]);
rename<RangeCheck>([2]) -> ([7]);
store_temp<uint128>([3]) -> ([8]);
jump() { 105() };
drop<uint128>([6]) -> ();
branch_align() -> ();
store_temp<RangeCheck>([4]) -> ([4]);
rename<RangeCheck>([4]) -> ([7]);
store_temp<uint128>([5]) -> ([8]);
rename<RangeCheck>([7]) -> ([9]);
rename<uint128>([8]) -> ([10]);
return([9], [10]);
uint128_overflow_sub([0], [1], [2]) { fallthrough([3], [4]) 116([5], [6]) };
branch_align() -> ();
enum_init<core::option::Option::<core::integer::uint128>, 0>([4]) -> ([7]);
store_temp<RangeCheck>([3]) -> ([3]);
rename<RangeCheck>([3]) -> ([8]);
store_temp<core::option::Option::<core::integer::uint128>>([7]) -> ([7]);
rename<core::option::Option::<core::integer::uint128>>([7]) -> ([9]);
jump() { 124() };
drop<uint128>([6]) -> ();
branch_align() -> ();
struct_construct<Unit>() -> ([10]);
enum_init<core::option::Option::<core::integer::uint128>, 1>([10]) -> ([11]);
store_temp<RangeCheck>([5]) -> ([5]);
rename<RangeCheck>([5]) -> ([8]);
store_temp<core::option::Option::<core::integer::uint128>>([11]) -> ([11]);
rename<core::option::Option::<core::integer::uint128>>([11]) -> ([9]);
rename<RangeCheck>([8]) -> ([12]);
rename<core::option::Option::<core::integer::uint128>>([9]) -> ([13]);
return([12], [13]);

fib_uint128_checked::fib_uint128_checked::fib@0([0]: RangeCheck, [1]: uint128, [2]: uint128, [3]: uint128) -> (RangeCheck, core::option::Option::<core::integer::uint128>);
core::integer::uint128_checked_add@75([0]: RangeCheck, [1]: uint128, [2]: uint128) -> (RangeCheck, core::option::Option::<core::integer::uint128>);
core::integer::uint128_from_felt_low@94([0]: RangeCheck, [1]: felt) -> (RangeCheck, uint128);
core::integer::uint128_checked_sub@108([0]: RangeCheck, [1]: uint128, [2]: uint128) -> (RangeCheck, core::option::Option::<core::integer::uint128>);
