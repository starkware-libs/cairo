type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 1> = Const<felt252, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc dup<felt252> = dup<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc branch_align = branch_align;
libfunc drop<felt252> = drop<felt252>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc felt252_add = felt252_add;
libfunc const_as_immediate<Const<felt252, 1>> = const_as_immediate<Const<felt252, 1>>;
libfunc felt252_sub = felt252_sub;
libfunc function_call<user@examples::fib::fib> = function_call<user@examples::fib::fib>;

F0:
disable_ap_tracking() -> ();
dup<felt252>([2]) -> ([2], [3]);
felt252_is_zero([3]) { fallthrough() F0_B0([4]) };
branch_align() -> ();
drop<felt252>([1]) -> ();
drop<felt252>([2]) -> ();
store_temp<felt252>([0]) -> ([0]);
return([0]);
F0_B0:
branch_align() -> ();
drop<NonZero<felt252>>([4]) -> ();
dup<felt252>([1]) -> ([1], [5]);
felt252_add([0], [5]) -> ([6]);
const_as_immediate<Const<felt252, 1>>() -> ([7]);
felt252_sub([2], [7]) -> ([8]);
store_temp<felt252>([1]) -> ([1]);
store_temp<felt252>([6]) -> ([6]);
store_temp<felt252>([8]) -> ([8]);
function_call<user@examples::fib::fib>([1], [6], [8]) -> ([9]);
return([9]);

examples::fib::fib@F0([0]: felt252, [1]: felt252, [2]: felt252) -> (felt252);
