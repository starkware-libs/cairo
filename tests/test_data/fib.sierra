type felt = felt;
type NonZero<felt> = NonZero<felt>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc dup<felt> = dup<felt>;
libfunc felt_jump_nz = felt_jump_nz;
libfunc branch_align = branch_align;
libfunc drop<felt> = drop<felt>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc jump = jump;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc felt_add = felt_add;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_sub = felt_sub;
libfunc rename<felt> = rename<felt>;
libfunc function_call<user@fib::fib::fib> = function_call<user@fib::fib::fib>;

revoke_ap_tracking() -> ();
dup<felt>([2]) -> ([2], [14]);
felt_jump_nz([14]) { fallthrough() 8([3]) };
branch_align() -> ();
drop<felt>([1]) -> ();
drop<felt>([2]) -> ();
store_temp<felt>([0]) -> ([4]);
jump() { 21() };
branch_align() -> ();
drop<NonZero<felt>>([3]) -> ();
dup<felt>([1]) -> ([1], [6]);
felt_add([0], [6]) -> ([5]);
felt_const<1>() -> ([7]);
felt_sub([2], [7]) -> ([8]);
store_temp<felt>([1]) -> ([10]);
store_temp<felt>([5]) -> ([5]);
rename<felt>([5]) -> ([11]);
store_temp<felt>([8]) -> ([8]);
rename<felt>([8]) -> ([12]);
function_call<user@fib::fib::fib>([10], [11], [12]) -> ([9]);
rename<felt>([9]) -> ([4]);
rename<felt>([4]) -> ([13]);
return([13]);

fib::fib::fib@0([0]: felt, [1]: felt, [2]: felt) -> (felt);
