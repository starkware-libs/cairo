type felt = felt;
type NonZero<felt> = NonZero<felt>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc dup<felt> = dup<felt>;
libfunc felt_is_zero = felt_is_zero;
libfunc branch_align = branch_align;
libfunc drop<felt> = drop<felt>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc jump = jump;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc felt_add = felt_add;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_sub = felt_sub;
libfunc function_call<user@fib::fib::fib> = function_call<user@fib::fib::fib>;
libfunc rename<felt> = rename<felt>;

revoke_ap_tracking() -> ();
dup<felt>([2]) -> ([2], [4]);
felt_is_zero([4]) { fallthrough() 8([3]) };
branch_align() -> ();
drop<felt>([1]) -> ();
drop<felt>([2]) -> ();
store_temp<felt>([0]) -> ([5]);
jump() { 20() };
branch_align() -> ();
drop<NonZero<felt>>([3]) -> ();
dup<felt>([1]) -> ([1], [7]);
felt_add([0], [7]) -> ([6]);
felt_const<1>() -> ([8]);
felt_sub([2], [8]) -> ([9]);
store_temp<felt>([1]) -> ([11]);
store_temp<felt>([6]) -> ([12]);
store_temp<felt>([9]) -> ([13]);
function_call<user@fib::fib::fib>([11], [12], [13]) -> ([10]);
rename<felt>([10]) -> ([5]);
jump() { 20() };
rename<felt>([5]) -> ([14]);
return([14]);

fib::fib::fib@0([0]: felt, [1]: felt, [2]: felt) -> (felt);
