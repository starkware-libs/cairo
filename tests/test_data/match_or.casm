[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 9, ap++;
jmp rel [ap + -8];
jmp rel 20;
jmp rel 14;
jmp rel 7;
ap += 5;
[ap + 0] = [fp + -3], ap++;
jmp rel 27;
ap += 5;
[ap + 0] = [fp + -3], ap++;
jmp rel 22;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -6], ap++;
jmp rel 4;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -3] + 0];
jmp rel 58;
[ap + 1] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -3] + 0];
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel [ap + -10];
jmp rel 20;
jmp rel 14;
jmp rel 7;
ap += 14;
[ap + 0] = [ap + -15], ap++;
jmp rel 29;
ap += 14;
[ap + 0] = [ap + -15], ap++;
jmp rel 24;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 4;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 17;
[ap + 1] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -6] + 0];
ap += 9;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -6] + 1, ap++;
jmp rel 6;
ap += 6;
[ap + 0] = [fp + -3] + 1, ap++;
call rel 70;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
jmp rel [fp + -6];
jmp rel 28;
jmp rel 22;
jmp rel 11;
ap += 13;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
ap += 13;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 4;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 16;
[ap + 1] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -7] + 0];
ap += 8;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
ret;
call rel 9;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = 608642104203229548495787928534675319, ap++;
call rel 3;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -3] = [[ap + -1] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -2] + 1, ap++;
ret;
