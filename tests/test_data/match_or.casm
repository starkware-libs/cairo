[ap + 0] = [fp + -3], ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 2, ap++;
call rel 81;
jmp rel 71 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 2, ap++;
call rel 68;
jmp rel 50 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 3, ap++;
call rel 55;
jmp rel 29 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 9, ap++;
call rel 42;
jmp rel 10 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 35;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -39], ap++;
ret;
ap += 70;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -74], ap++;
ret;
ap += 105;
[ap + 0] = [ap + -109], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -109], ap++;
[ap + 0] = [ap + -109], ap++;
ret;
jmp rel [fp + -6];
jmp rel 37;
jmp rel 16;
jmp rel 8;
ap += 22;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 36;
ap += 22;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 30;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 40;
jmp rel 6 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 19;
ap += 2;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 21;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 2;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = (memory[fp + -4] + memory[fp + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 13;
[ap + 1] = [fp + -4] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 608642104203229548495787928534675319, ap++;
call rel 7;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
jmp rel 10 if [fp + -5] != 0;
ap += 1;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -3] = [[ap + -1] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
