[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 9, ap++;
jmp rel [ap + -16];
jmp rel 19;
jmp rel 13;
jmp rel 6;
ap += 5;
jmp rel 4;
ap += 5;
[ap + 0] = [fp + -3], ap++;
jmp rel 22;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 4;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -14], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -3] + 0];
jmp rel 168;
[ap + 1] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -3] + 0];
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel [ap + -18];
jmp rel 19;
jmp rel 13;
jmp rel 6;
ap += 5;
jmp rel 4;
ap += 5;
[ap + 0] = [ap + -6], ap++;
jmp rel 22;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -16], ap++;
jmp rel 4;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -16], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 117;
[ap + 1] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
jmp rel [ap + -20];
jmp rel 19;
jmp rel 13;
jmp rel 6;
ap += 5;
jmp rel 4;
ap += 5;
[ap + 0] = [ap + -6], ap++;
jmp rel 22;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -18], ap++;
jmp rel 4;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -18], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 66;
[ap + 1] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
jmp rel [ap + -22];
jmp rel 19;
jmp rel 13;
jmp rel 6;
ap += 7;
jmp rel 4;
ap += 7;
[ap + 0] = [ap + -8], ap++;
jmp rel 24;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -20], ap++;
jmp rel 4;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -20], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 17;
[ap + 1] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -6] + 0];
ap += 2;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 608642104203229548495787928534675319, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
ap += 6;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 608642104203229548495787928534675319, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
ap += 12;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 608642104203229548495787928534675319, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
ap += 18;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 608642104203229548495787928534675319, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
jmp rel [fp + -6];
jmp rel 22;
jmp rel 16;
jmp rel 7;
ap += 4;
[ap + 0] = [fp + -3], ap++;
jmp rel 5;
ap += 4;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 23;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 4;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 16;
[ap + 1] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 608642104203229548495787928534675319, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
