type RangeCheck = RangeCheck;
type uint128 = uint128;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc uint128_lt = uint128_lt;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc rename<core::bool> = rename<core::bool>;
libfunc burn_gas = burn_gas;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;

revoke_ap_tracking() -> ();
uint128_lt([0], [1], [2]) { fallthrough([3]) 11([4]) };
struct_construct<Unit>() -> ([5]);
store_temp<Unit>([5]) -> ([5]);
enum_init<core::bool, 0>([5]) -> ([6]);
store_temp<RangeCheck>([3]) -> ([3]);
rename<RangeCheck>([3]) -> ([7]);
store_temp<core::bool>([6]) -> ([6]);
rename<core::bool>([6]) -> ([8]);
burn_gas() -> ();
jump() { 19() };
struct_construct<Unit>() -> ([9]);
store_temp<Unit>([9]) -> ([9]);
enum_init<core::bool, 1>([9]) -> ([10]);
store_temp<RangeCheck>([4]) -> ([4]);
rename<RangeCheck>([4]) -> ([7]);
store_temp<core::bool>([10]) -> ([10]);
rename<core::bool>([10]) -> ([8]);
burn_gas() -> ();
rename<RangeCheck>([7]) -> ([11]);
rename<core::bool>([8]) -> ([12]);
burn_gas() -> ();
return([11], [12]);

uint128_le::uint128_le::uint128_less_than@0([0]: RangeCheck, [1]: uint128, [2]: uint128) -> (RangeCheck, core::bool);
