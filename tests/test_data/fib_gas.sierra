type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type felt = felt;
type Array<felt> = Array<felt>;
type core::PanicResult::<core::felt> = Enum<ut@core::PanicResult::<core::felt>, felt, Array<felt>>;
type NonZero<felt> = NonZero<felt>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc get_gas = get_gas;
libfunc branch_align = branch_align;
libfunc jump = jump;
libfunc drop<felt> = drop<felt>;
libfunc array_new<felt> = array_new<felt>;
libfunc felt_const<5197639> = felt_const<5197639>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc array_append<felt> = array_append<felt>;
libfunc enum_init<core::PanicResult::<core::felt>, 1> = enum_init<core::PanicResult::<core::felt>, 1>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<core::PanicResult::<core::felt>> = store_temp<core::PanicResult::<core::felt>>;
libfunc dup<felt> = dup<felt>;
libfunc felt_is_zero = felt_is_zero;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc felt_add = felt_add;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_sub = felt_sub;
libfunc function_call<user@fib_gas::fib_gas::fib> = function_call<user@fib_gas::fib_gas::fib>;
libfunc enum_match<core::PanicResult::<core::felt>> = enum_match<core::PanicResult::<core::felt>>;
libfunc enum_init<core::PanicResult::<core::felt>, 0> = enum_init<core::PanicResult::<core::felt>, 0>;

revoke_ap_tracking() -> ();
get_gas([0], [1]) { fallthrough([5], [6]) 4([7], [8]) };
branch_align() -> ();
jump() { 17() };
branch_align() -> ();
drop<felt>([4]) -> ();
drop<felt>([3]) -> ();
drop<felt>([2]) -> ();
array_new<felt>() -> ([9]);
felt_const<5197639>() -> ([10]);
store_temp<felt>([10]) -> ([10]);
array_append<felt>([9], [10]) -> ([11]);
enum_init<core::PanicResult::<core::felt>, 1>([11]) -> ([12]);
store_temp<RangeCheck>([7]) -> ([13]);
store_temp<GasBuiltin>([8]) -> ([14]);
store_temp<core::PanicResult::<core::felt>>([12]) -> ([15]);
return([13], [14], [15]);
dup<felt>([4]) -> ([4], [17]);
store_temp<RangeCheck>([5]) -> ([5]);
felt_is_zero([17]) { fallthrough() 27([16]) };
branch_align() -> ();
drop<felt>([4]) -> ();
drop<felt>([3]) -> ();
store_temp<RangeCheck>([5]) -> ([18]);
store_temp<GasBuiltin>([6]) -> ([19]);
store_temp<felt>([2]) -> ([20]);
jump() { 52() };
branch_align() -> ();
drop<NonZero<felt>>([16]) -> ();
dup<felt>([3]) -> ([3], [22]);
felt_add([2], [22]) -> ([21]);
felt_const<1>() -> ([23]);
felt_sub([4], [23]) -> ([24]);
store_temp<RangeCheck>([5]) -> ([28]);
store_temp<GasBuiltin>([6]) -> ([29]);
store_temp<felt>([3]) -> ([30]);
store_temp<felt>([21]) -> ([31]);
store_temp<felt>([24]) -> ([32]);
function_call<user@fib_gas::fib_gas::fib>([28], [29], [30], [31], [32]) -> ([25], [26], [27]);
enum_match<core::PanicResult::<core::felt>>([27]) { fallthrough([33]) 42([34]) };
branch_align() -> ();
jump() { 48() };
branch_align() -> ();
enum_init<core::PanicResult::<core::felt>, 1>([34]) -> ([35]);
store_temp<RangeCheck>([25]) -> ([36]);
store_temp<GasBuiltin>([26]) -> ([37]);
store_temp<core::PanicResult::<core::felt>>([35]) -> ([38]);
return([36], [37], [38]);
store_temp<RangeCheck>([25]) -> ([18]);
store_temp<GasBuiltin>([26]) -> ([19]);
store_temp<felt>([33]) -> ([20]);
jump() { 52() };
enum_init<core::PanicResult::<core::felt>, 0>([20]) -> ([39]);
store_temp<RangeCheck>([18]) -> ([40]);
store_temp<GasBuiltin>([19]) -> ([41]);
store_temp<core::PanicResult::<core::felt>>([39]) -> ([42]);
return([40], [41], [42]);

fib_gas::fib_gas::fib@0([0]: RangeCheck, [1]: GasBuiltin, [2]: felt, [3]: felt, [4]: felt) -> (RangeCheck, GasBuiltin, core::PanicResult::<core::felt>);
