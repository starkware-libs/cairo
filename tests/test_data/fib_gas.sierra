type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type Unit = Struct<ut@Tuple>;
type felt = felt;
type core::option::Option::<core::felt> = Enum<ut@core::option::Option::<core::felt>, felt, Unit>;
type NonZero<felt> = NonZero<felt>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc get_gas = get_gas;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc rename<Unit> = rename<Unit>;
libfunc drop<Unit> = drop<Unit>;
libfunc burn_gas = burn_gas;
libfunc jump = jump;
libfunc drop<felt> = drop<felt>;
libfunc enum_init<core::option::Option::<core::felt>, 1> = enum_init<core::option::Option::<core::felt>, 1>;
libfunc store_temp<core::option::Option::<core::felt>> = store_temp<core::option::Option::<core::felt>>;
libfunc rename<core::option::Option::<core::felt>> = rename<core::option::Option::<core::felt>>;
libfunc dup<felt> = dup<felt>;
libfunc felt_jump_nz = felt_jump_nz;
libfunc enum_init<core::option::Option::<core::felt>, 0> = enum_init<core::option::Option::<core::felt>, 0>;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc felt_add = felt_add;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_sub = felt_sub;
libfunc store_temp<felt> = store_temp<felt>;
libfunc rename<felt> = rename<felt>;
libfunc function_call<user@fib_gas::fib_gas::fib> = function_call<user@fib_gas::fib_gas::fib>;

revoke_ap_tracking() -> ();
get_gas([0], [1]) { fallthrough([5], [6]) 12([7], [8]) };
struct_construct<Unit>() -> ([9]);
store_temp<RangeCheck>([5]) -> ([5]);
rename<RangeCheck>([5]) -> ([10]);
store_temp<GasBuiltin>([6]) -> ([6]);
rename<GasBuiltin>([6]) -> ([11]);
store_temp<Unit>([9]) -> ([9]);
rename<Unit>([9]) -> ([12]);
drop<Unit>([12]) -> ();
burn_gas() -> ();
jump() { 25() };
drop<felt>([4]) -> ();
drop<felt>([2]) -> ();
drop<felt>([3]) -> ();
struct_construct<Unit>() -> ([13]);
store_temp<Unit>([13]) -> ([13]);
enum_init<core::option::Option::<core::felt>, 1>([13]) -> ([14]);
store_temp<RangeCheck>([7]) -> ([7]);
rename<RangeCheck>([7]) -> ([15]);
store_temp<GasBuiltin>([8]) -> ([16]);
store_temp<core::option::Option::<core::felt>>([14]) -> ([14]);
rename<core::option::Option::<core::felt>>([14]) -> ([17]);
burn_gas() -> ();
return([15], [16], [17]);
dup<felt>([4]) -> ([4], [37]);
felt_jump_nz([37]) { fallthrough() 36([18]) };
drop<felt>([3]) -> ();
drop<felt>([4]) -> ();
enum_init<core::option::Option::<core::felt>, 0>([2]) -> ([19]);
store_temp<RangeCheck>([10]) -> ([20]);
store_temp<GasBuiltin>([11]) -> ([21]);
store_temp<core::option::Option::<core::felt>>([19]) -> ([19]);
rename<core::option::Option::<core::felt>>([19]) -> ([22]);
burn_gas() -> ();
jump() { 53() };
drop<NonZero<felt>>([18]) -> ();
dup<felt>([3]) -> ([3], [38]);
felt_add([2], [38]) -> ([23]);
felt_const<1>() -> ([24]);
felt_sub([4], [24]) -> ([25]);
store_temp<RangeCheck>([10]) -> ([29]);
store_temp<GasBuiltin>([11]) -> ([30]);
store_temp<felt>([3]) -> ([31]);
store_temp<felt>([23]) -> ([23]);
rename<felt>([23]) -> ([32]);
store_temp<felt>([25]) -> ([25]);
rename<felt>([25]) -> ([33]);
function_call<user@fib_gas::fib_gas::fib>([29], [30], [31], [32], [33]) -> ([26], [27], [28]);
rename<RangeCheck>([26]) -> ([20]);
rename<GasBuiltin>([27]) -> ([21]);
rename<core::option::Option::<core::felt>>([28]) -> ([22]);
burn_gas() -> ();
rename<RangeCheck>([20]) -> ([34]);
rename<GasBuiltin>([21]) -> ([35]);
rename<core::option::Option::<core::felt>>([22]) -> ([36]);
burn_gas() -> ();
return([34], [35], [36]);

fib_gas::fib_gas::fib@0([0]: RangeCheck, [1]: GasBuiltin, [2]: felt, [3]: felt, [4]: felt) -> (RangeCheck, GasBuiltin, core::option::Option::<core::felt>);
