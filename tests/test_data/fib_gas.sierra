type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type felt = felt;
type Array<felt> = Array<felt>;
type core::PanicResult::<core::felt> = Enum<ut@core::PanicResult::<core::felt>, felt, Array<felt>>;
type NonZero<felt> = NonZero<felt>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc try_fetch_gas = try_fetch_gas;
libfunc branch_align = branch_align;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc jump = jump;
libfunc drop<felt> = drop<felt>;
libfunc array_new<felt> = array_new<felt>;
libfunc felt_const<5197639> = felt_const<5197639>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc array_append<felt> = array_append<felt>;
libfunc enum_init<core::PanicResult::<core::felt>, 1> = enum_init<core::PanicResult::<core::felt>, 1>;
libfunc store_temp<core::PanicResult::<core::felt>> = store_temp<core::PanicResult::<core::felt>>;
libfunc dup<felt> = dup<felt>;
libfunc felt_is_zero = felt_is_zero;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc felt_add = felt_add;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_sub = felt_sub;
libfunc function_call<user@fib_gas::fib_gas::fib> = function_call<user@fib_gas::fib_gas::fib>;
libfunc enum_match<core::PanicResult::<core::felt>> = enum_match<core::PanicResult::<core::felt>>;
libfunc enum_init<core::PanicResult::<core::felt>, 0> = enum_init<core::PanicResult::<core::felt>, 0>;

revoke_ap_tracking() -> ();
try_fetch_gas([0], [1]) { fallthrough([5], [6]) 6([7], [8]) };
branch_align() -> ();
store_temp<RangeCheck>([5]) -> ([9]);
store_temp<GasBuiltin>([6]) -> ([10]);
jump() { 19() };
branch_align() -> ();
drop<felt>([2]) -> ();
drop<felt>([4]) -> ();
drop<felt>([3]) -> ();
array_new<felt>() -> ([11]);
felt_const<5197639>() -> ([12]);
store_temp<felt>([12]) -> ([12]);
array_append<felt>([11], [12]) -> ([13]);
enum_init<core::PanicResult::<core::felt>, 1>([13]) -> ([14]);
store_temp<RangeCheck>([7]) -> ([15]);
store_temp<GasBuiltin>([8]) -> ([16]);
store_temp<core::PanicResult::<core::felt>>([14]) -> ([17]);
return([15], [16], [17]);
dup<felt>([4]) -> ([4], [19]);
felt_is_zero([19]) { fallthrough() 28([18]) };
branch_align() -> ();
drop<felt>([4]) -> ();
drop<felt>([3]) -> ();
store_temp<RangeCheck>([9]) -> ([20]);
store_temp<GasBuiltin>([10]) -> ([21]);
store_temp<felt>([2]) -> ([22]);
jump() { 53() };
branch_align() -> ();
drop<NonZero<felt>>([18]) -> ();
dup<felt>([3]) -> ([3], [24]);
felt_add([2], [24]) -> ([23]);
felt_const<1>() -> ([25]);
felt_sub([4], [25]) -> ([26]);
store_temp<RangeCheck>([9]) -> ([30]);
store_temp<GasBuiltin>([10]) -> ([31]);
store_temp<felt>([3]) -> ([32]);
store_temp<felt>([23]) -> ([33]);
store_temp<felt>([26]) -> ([34]);
function_call<user@fib_gas::fib_gas::fib>([30], [31], [32], [33], [34]) -> ([27], [28], [29]);
enum_match<core::PanicResult::<core::felt>>([29]) { fallthrough([35]) 44([36]) };
branch_align() -> ();
store_temp<felt>([35]) -> ([37]);
jump() { 50() };
branch_align() -> ();
enum_init<core::PanicResult::<core::felt>, 1>([36]) -> ([38]);
store_temp<RangeCheck>([27]) -> ([39]);
store_temp<GasBuiltin>([28]) -> ([40]);
store_temp<core::PanicResult::<core::felt>>([38]) -> ([41]);
return([39], [40], [41]);
store_temp<RangeCheck>([27]) -> ([20]);
store_temp<GasBuiltin>([28]) -> ([21]);
store_temp<felt>([37]) -> ([22]);
enum_init<core::PanicResult::<core::felt>, 0>([22]) -> ([42]);
store_temp<RangeCheck>([20]) -> ([43]);
store_temp<GasBuiltin>([21]) -> ([44]);
store_temp<core::PanicResult::<core::felt>>([42]) -> ([45]);
return([43], [44], [45]);

fib_gas::fib_gas::fib@0([0]: RangeCheck, [1]: GasBuiltin, [2]: felt, [3]: felt, [4]: felt) -> (RangeCheck, GasBuiltin, core::PanicResult::<core::felt>);
