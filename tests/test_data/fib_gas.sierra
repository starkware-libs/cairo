type BuiltinCosts = BuiltinCosts [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::Panic = Struct<ut@core::panics::Panic> [storable: true, drop: true, dup: true, zero_sized: true];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Tuple<core::panics::Panic, Array<felt252>> = Struct<ut@Tuple, core::panics::Panic, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<felt252> = Struct<ut@Tuple, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::PanicResult::<(core::felt252,)> = Enum<ut@core::panics::PanicResult::<(core::felt252,)>, Tuple<felt252>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc get_builtin_costs = get_builtin_costs;
libfunc store_temp<BuiltinCosts> = store_temp<BuiltinCosts>;
libfunc withdraw_gas_all = withdraw_gas_all;
libfunc branch_align = branch_align;
libfunc dup<felt252> = dup<felt252>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc drop<felt252> = drop<felt252>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc jump = jump;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc felt252_add = felt252_add;
libfunc felt252_const<1> = felt252_const<1>;
libfunc felt252_sub = felt252_sub;
libfunc function_call<user@examples::fib::fib> = function_call<user@examples::fib::fib>;
libfunc enum_match<core::panics::PanicResult::<(core::felt252,)>> = enum_match<core::panics::PanicResult::<(core::felt252,)>>;
libfunc struct_deconstruct<Tuple<felt252>> = struct_deconstruct<Tuple<felt252>>;
libfunc struct_construct<Tuple<felt252>> = struct_construct<Tuple<felt252>>;
libfunc enum_init<core::panics::PanicResult::<(core::felt252,)>, 0> = enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>;
libfunc store_temp<core::panics::PanicResult::<(core::felt252,)>> = store_temp<core::panics::PanicResult::<(core::felt252,)>>;
libfunc enum_init<core::panics::PanicResult::<(core::felt252,)>, 1> = enum_init<core::panics::PanicResult::<(core::felt252,)>, 1>;
libfunc array_new<felt252> = array_new<felt252>;
libfunc felt252_const<375233589013918064796019> = felt252_const<375233589013918064796019>;
libfunc array_append<felt252> = array_append<felt252>;
libfunc struct_construct<core::panics::Panic> = struct_construct<core::panics::Panic>;
libfunc struct_construct<Tuple<core::panics::Panic, Array<felt252>>> = struct_construct<Tuple<core::panics::Panic, Array<felt252>>>;

disable_ap_tracking() -> (); // 0
get_builtin_costs() -> ([5]); // 1
store_temp<BuiltinCosts>([5]) -> ([5]); // 2
withdraw_gas_all([0], [1], [5]) { fallthrough([6], [7]) 45([8], [9]) }; // 3
branch_align() -> (); // 4
dup<felt252>([4]) -> ([4], [10]); // 5
store_temp<RangeCheck>([6]) -> ([6]); // 6
felt252_is_zero([10]) { fallthrough() 15([11]) }; // 7
branch_align() -> (); // 8
drop<felt252>([4]) -> (); // 9
drop<felt252>([3]) -> (); // 10
store_temp<RangeCheck>([6]) -> ([12]); // 11
store_temp<GasBuiltin>([7]) -> ([13]); // 12
store_temp<felt252>([2]) -> ([14]); // 13
jump() { 33() }; // 14
branch_align() -> (); // 15
drop<NonZero<felt252>>([11]) -> (); // 16
dup<felt252>([3]) -> ([3], [16]); // 17
felt252_add([2], [16]) -> ([15]); // 18
felt252_const<1>() -> ([17]); // 19
felt252_sub([4], [17]) -> ([18]); // 20
store_temp<RangeCheck>([6]) -> ([22]); // 21
store_temp<GasBuiltin>([7]) -> ([23]); // 22
store_temp<felt252>([3]) -> ([24]); // 23
store_temp<felt252>([15]) -> ([25]); // 24
store_temp<felt252>([18]) -> ([26]); // 25
function_call<user@examples::fib::fib>([22], [23], [24], [25], [26]) -> ([19], [20], [21]); // 26
enum_match<core::panics::PanicResult::<(core::felt252,)>>([21]) { fallthrough([27]) 39([28]) }; // 27
branch_align() -> (); // 28
struct_deconstruct<Tuple<felt252>>([27]) -> ([29]); // 29
store_temp<RangeCheck>([19]) -> ([12]); // 30
store_temp<GasBuiltin>([20]) -> ([13]); // 31
store_temp<felt252>([29]) -> ([14]); // 32
struct_construct<Tuple<felt252>>([14]) -> ([30]); // 33
enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>([30]) -> ([31]); // 34
store_temp<RangeCheck>([12]) -> ([32]); // 35
store_temp<GasBuiltin>([13]) -> ([33]); // 36
store_temp<core::panics::PanicResult::<(core::felt252,)>>([31]) -> ([34]); // 37
return([32], [33], [34]); // 38
branch_align() -> (); // 39
enum_init<core::panics::PanicResult::<(core::felt252,)>, 1>([28]) -> ([35]); // 40
store_temp<RangeCheck>([19]) -> ([36]); // 41
store_temp<GasBuiltin>([20]) -> ([37]); // 42
store_temp<core::panics::PanicResult::<(core::felt252,)>>([35]) -> ([38]); // 43
return([36], [37], [38]); // 44
branch_align() -> (); // 45
drop<felt252>([4]) -> (); // 46
drop<felt252>([2]) -> (); // 47
drop<felt252>([3]) -> (); // 48
array_new<felt252>() -> ([39]); // 49
felt252_const<375233589013918064796019>() -> ([40]); // 50
store_temp<felt252>([40]) -> ([40]); // 51
array_append<felt252>([39], [40]) -> ([41]); // 52
struct_construct<core::panics::Panic>() -> ([42]); // 53
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([42], [41]) -> ([43]); // 54
enum_init<core::panics::PanicResult::<(core::felt252,)>, 1>([43]) -> ([44]); // 55
store_temp<RangeCheck>([8]) -> ([45]); // 56
store_temp<GasBuiltin>([9]) -> ([46]); // 57
store_temp<core::panics::PanicResult::<(core::felt252,)>>([44]) -> ([47]); // 58
return([45], [46], [47]); // 59

examples::fib::fib@0([0]: RangeCheck, [1]: GasBuiltin, [2]: felt252, [3]: felt252, [4]: felt252) -> (RangeCheck, GasBuiltin, core::panics::PanicResult::<(core::felt252,)>);
