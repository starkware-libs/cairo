type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type felt = felt;
type NonZero<felt> = NonZero<felt>;
type Array<felt> = Array<felt>;
type core::PanicResult::<core::felt> = Enum<ut@core::PanicResult::<core::felt>, felt, Array<felt>>;

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc try_fetch_gas = try_fetch_gas;
libfunc branch_align = branch_align;
libfunc dup<felt> = dup<felt>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc felt_is_zero = felt_is_zero;
libfunc drop<felt> = drop<felt>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc jump = jump;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc felt_add = felt_add;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_sub = felt_sub;
libfunc function_call<user@fib_gas::fib_gas::fib> = function_call<user@fib_gas::fib_gas::fib>;
libfunc enum_match<core::PanicResult::<core::felt>> = enum_match<core::PanicResult::<core::felt>>;
libfunc enum_init<core::PanicResult::<core::felt>, 0> = enum_init<core::PanicResult::<core::felt>, 0>;
libfunc store_temp<core::PanicResult::<core::felt>> = store_temp<core::PanicResult::<core::felt>>;
libfunc enum_init<core::PanicResult::<core::felt>, 1> = enum_init<core::PanicResult::<core::felt>, 1>;
libfunc array_new<felt> = array_new<felt>;
libfunc felt_const<5197639> = felt_const<5197639>;
libfunc array_append<felt> = array_append<felt>;

disable_ap_tracking() -> ();
try_fetch_gas([0], [1]) { fallthrough([5], [6]) 41([7], [8]) };
branch_align() -> ();
dup<felt>([4]) -> ([4], [10]);
store_temp<RangeCheck>([5]) -> ([5]);
felt_is_zero([10]) { fallthrough() 13([9]) };
branch_align() -> ();
drop<felt>([4]) -> ();
drop<felt>([3]) -> ();
store_temp<RangeCheck>([5]) -> ([11]);
store_temp<GasBuiltin>([6]) -> ([12]);
store_temp<felt>([2]) -> ([13]);
jump() { 30() };
branch_align() -> ();
drop<NonZero<felt>>([9]) -> ();
dup<felt>([3]) -> ([3], [15]);
felt_add([2], [15]) -> ([14]);
felt_const<1>() -> ([16]);
felt_sub([4], [16]) -> ([17]);
store_temp<RangeCheck>([5]) -> ([21]);
store_temp<GasBuiltin>([6]) -> ([22]);
store_temp<felt>([3]) -> ([23]);
store_temp<felt>([14]) -> ([24]);
store_temp<felt>([17]) -> ([25]);
function_call<user@fib_gas::fib_gas::fib>([21], [22], [23], [24], [25]) -> ([18], [19], [20]);
enum_match<core::PanicResult::<core::felt>>([20]) { fallthrough([26]) 35([27]) };
branch_align() -> ();
store_temp<RangeCheck>([18]) -> ([11]);
store_temp<GasBuiltin>([19]) -> ([12]);
store_temp<felt>([26]) -> ([13]);
enum_init<core::PanicResult::<core::felt>, 0>([13]) -> ([28]);
store_temp<RangeCheck>([11]) -> ([29]);
store_temp<GasBuiltin>([12]) -> ([30]);
store_temp<core::PanicResult::<core::felt>>([28]) -> ([31]);
return([29], [30], [31]);
branch_align() -> ();
enum_init<core::PanicResult::<core::felt>, 1>([27]) -> ([32]);
store_temp<RangeCheck>([18]) -> ([33]);
store_temp<GasBuiltin>([19]) -> ([34]);
store_temp<core::PanicResult::<core::felt>>([32]) -> ([35]);
return([33], [34], [35]);
branch_align() -> ();
drop<felt>([4]) -> ();
drop<felt>([3]) -> ();
drop<felt>([2]) -> ();
array_new<felt>() -> ([36]);
felt_const<5197639>() -> ([37]);
store_temp<felt>([37]) -> ([37]);
array_append<felt>([36], [37]) -> ([38]);
enum_init<core::PanicResult::<core::felt>, 1>([38]) -> ([39]);
store_temp<RangeCheck>([7]) -> ([40]);
store_temp<GasBuiltin>([8]) -> ([41]);
store_temp<core::PanicResult::<core::felt>>([39]) -> ([42]);
return([40], [41], [42]);

fib_gas::fib_gas::fib@0([0]: RangeCheck, [1]: GasBuiltin, [2]: felt, [3]: felt, [4]: felt) -> (RangeCheck, GasBuiltin, core::PanicResult::<core::felt>);
