type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type felt = felt;
type NonZero<felt> = NonZero<felt>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc get_gas = get_gas;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc burn_gas = burn_gas;
libfunc jump = jump;
libfunc drop<felt> = drop<felt>;
libfunc felt_const<1111111> = felt_const<1111111>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc dup<felt> = dup<felt>;
libfunc felt_jump_nz = felt_jump_nz;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc felt_add = felt_add;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_sub = felt_sub;
libfunc rename<felt> = rename<felt>;
libfunc function_call<user@test_crate::fib> = function_call<user@test_crate::fib>;

revoke_ap_tracking() -> ();
get_gas([0], [1]) { fallthrough([5], [6]) 8([7], [8]) };
store_temp<RangeCheck>([5]) -> ([5]);
rename<RangeCheck>([5]) -> ([9]);
store_temp<GasBuiltin>([6]) -> ([6]);
rename<GasBuiltin>([6]) -> ([10]);
burn_gas() -> ();
jump() { 18() };
drop<felt>([4]) -> ();
drop<felt>([2]) -> ();
drop<felt>([3]) -> ();
felt_const<1111111>() -> ([11]);
store_temp<RangeCheck>([7]) -> ([7]);
rename<RangeCheck>([7]) -> ([12]);
store_temp<GasBuiltin>([8]) -> ([13]);
store_temp<felt>([11]) -> ([14]);
burn_gas() -> ();
return([12], [13], [14]);
dup<felt>([4]) -> ([4], [33]);
felt_jump_nz([33]) { fallthrough() 27([15]) };
drop<felt>([3]) -> ();
drop<felt>([4]) -> ();
rename<RangeCheck>([9]) -> ([16]);
rename<GasBuiltin>([10]) -> ([17]);
store_temp<felt>([2]) -> ([18]);
burn_gas() -> ();
jump() { 44() };
drop<NonZero<felt>>([15]) -> ();
dup<felt>([3]) -> ([3], [34]);
felt_add([2], [34]) -> ([19]);
felt_const<1>() -> ([20]);
felt_sub([4], [20]) -> ([21]);
rename<RangeCheck>([9]) -> ([25]);
rename<GasBuiltin>([10]) -> ([26]);
store_temp<felt>([3]) -> ([27]);
store_temp<felt>([19]) -> ([19]);
rename<felt>([19]) -> ([28]);
store_temp<felt>([21]) -> ([21]);
rename<felt>([21]) -> ([29]);
function_call<user@test_crate::fib>([25], [26], [27], [28], [29]) -> ([22], [23], [24]);
rename<RangeCheck>([22]) -> ([16]);
rename<GasBuiltin>([23]) -> ([17]);
rename<felt>([24]) -> ([18]);
burn_gas() -> ();
rename<RangeCheck>([16]) -> ([30]);
rename<GasBuiltin>([17]) -> ([31]);
rename<felt>([18]) -> ([32]);
burn_gas() -> ();
return([30], [31], [32]);

test_crate::fib@0([0]: RangeCheck, [1]: GasBuiltin, [2]: felt, [3]: felt, [4]: felt) -> (RangeCheck, GasBuiltin, felt);
