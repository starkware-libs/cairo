type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type felt252 = felt252;
type NonZero<felt252> = NonZero<felt252>;
type Tuple<felt252> = Struct<ut@Tuple, felt252>;
type Array<felt252> = Array<felt252>;
type core::PanicResult::<(core::felt252,)> = Enum<ut@core::PanicResult::<(core::felt252,)>, Tuple<felt252>, Array<felt252>>;
type Unit = Struct<ut@Tuple>;

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc withdraw_gas = withdraw_gas;
libfunc branch_align = branch_align;
libfunc dup<felt252> = dup<felt252>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc drop<felt252> = drop<felt252>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc jump = jump;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc felt252_add = felt252_add;
libfunc felt252_const<1> = felt252_const<1>;
libfunc felt252_sub = felt252_sub;
libfunc function_call<user@examples::fib_gas::fib> = function_call<user@examples::fib_gas::fib>;
libfunc enum_match<core::PanicResult::<(core::felt252,)>> = enum_match<core::PanicResult::<(core::felt252,)>>;
libfunc struct_deconstruct<Tuple<felt252>> = struct_deconstruct<Tuple<felt252>>;
libfunc struct_construct<Tuple<felt252>> = struct_construct<Tuple<felt252>>;
libfunc enum_init<core::PanicResult::<(core::felt252,)>, 0> = enum_init<core::PanicResult::<(core::felt252,)>, 0>;
libfunc store_temp<core::PanicResult::<(core::felt252,)>> = store_temp<core::PanicResult::<(core::felt252,)>>;
libfunc enum_init<core::PanicResult::<(core::felt252,)>, 1> = enum_init<core::PanicResult::<(core::felt252,)>, 1>;
libfunc array_new<felt252> = array_new<felt252>;
libfunc felt252_const<5197639> = felt252_const<5197639>;
libfunc array_append<felt252> = array_append<felt252>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc drop<Unit> = drop<Unit>;

disable_ap_tracking() -> ();
withdraw_gas([0], [1]) { fallthrough([5], [6]) 43([7], [8]) };
branch_align() -> ();
dup<felt252>([4]) -> ([4], [10]);
store_temp<RangeCheck>([5]) -> ([5]);
felt252_is_zero([10]) { fallthrough() 13([9]) };
branch_align() -> ();
drop<felt252>([4]) -> ();
drop<felt252>([3]) -> ();
store_temp<RangeCheck>([5]) -> ([11]);
store_temp<GasBuiltin>([6]) -> ([12]);
store_temp<felt252>([2]) -> ([13]);
jump() { 31() };
branch_align() -> ();
drop<NonZero<felt252>>([9]) -> ();
dup<felt252>([3]) -> ([3], [15]);
felt252_add([2], [15]) -> ([14]);
felt252_const<1>() -> ([16]);
felt252_sub([4], [16]) -> ([17]);
store_temp<RangeCheck>([5]) -> ([21]);
store_temp<GasBuiltin>([6]) -> ([22]);
store_temp<felt252>([3]) -> ([23]);
store_temp<felt252>([14]) -> ([24]);
store_temp<felt252>([17]) -> ([25]);
function_call<user@examples::fib_gas::fib>([21], [22], [23], [24], [25]) -> ([18], [19], [20]);
enum_match<core::PanicResult::<(core::felt252,)>>([20]) { fallthrough([26]) 37([27]) };
branch_align() -> ();
struct_deconstruct<Tuple<felt252>>([26]) -> ([28]);
store_temp<RangeCheck>([18]) -> ([11]);
store_temp<GasBuiltin>([19]) -> ([12]);
store_temp<felt252>([28]) -> ([13]);
struct_construct<Tuple<felt252>>([13]) -> ([29]);
enum_init<core::PanicResult::<(core::felt252,)>, 0>([29]) -> ([30]);
store_temp<RangeCheck>([11]) -> ([31]);
store_temp<GasBuiltin>([12]) -> ([32]);
store_temp<core::PanicResult::<(core::felt252,)>>([30]) -> ([33]);
return([31], [32], [33]);
branch_align() -> ();
enum_init<core::PanicResult::<(core::felt252,)>, 1>([27]) -> ([34]);
store_temp<RangeCheck>([18]) -> ([35]);
store_temp<GasBuiltin>([19]) -> ([36]);
store_temp<core::PanicResult::<(core::felt252,)>>([34]) -> ([37]);
return([35], [36], [37]);
branch_align() -> ();
drop<felt252>([4]) -> ();
drop<felt252>([3]) -> ();
drop<felt252>([2]) -> ();
array_new<felt252>() -> ([38]);
felt252_const<5197639>() -> ([39]);
store_temp<felt252>([39]) -> ([39]);
array_append<felt252>([38], [39]) -> ([40]);
struct_construct<Unit>() -> ([41]);
drop<Unit>([41]) -> ();
enum_init<core::PanicResult::<(core::felt252,)>, 1>([40]) -> ([42]);
store_temp<RangeCheck>([7]) -> ([43]);
store_temp<GasBuiltin>([8]) -> ([44]);
store_temp<core::PanicResult::<(core::felt252,)>>([42]) -> ([45]);
return([43], [44], [45]);

examples::fib_gas::fib@0([0]: RangeCheck, [1]: GasBuiltin, [2]: felt252, [3]: felt252, [4]: felt252) -> (RangeCheck, GasBuiltin, core::PanicResult::<(core::felt252,)>);
