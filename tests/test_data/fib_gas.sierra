type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type Unit = Struct<ut@Tuple>;
type felt = felt;
type Array<felt> = Array<felt>;
type core::PanicResult::<core::felt> = Enum<ut@core::PanicResult::<core::felt>, felt, Array<felt>>;
type NonZero<felt> = NonZero<felt>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc get_gas = get_gas;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc enum_init<core::PanicResult::<core::felt>, 0> = enum_init<core::PanicResult::<core::felt>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc store_temp<core::PanicResult::<core::felt>> = store_temp<core::PanicResult::<core::felt>>;
libfunc rename<core::PanicResult::<core::felt>> = rename<core::PanicResult::<core::felt>>;
libfunc drop<core::PanicResult::<core::felt>> = drop<core::PanicResult::<core::felt>>;
libfunc burn_gas = burn_gas;
libfunc drop<Unit> = drop<Unit>;
libfunc jump = jump;
libfunc drop<felt> = drop<felt>;
libfunc array_new<felt> = array_new<felt>;
libfunc felt_const<1> = felt_const<1>;
libfunc store_temp<Array<felt>> = store_temp<Array<felt>>;
libfunc array_append<felt> = array_append<felt>;
libfunc enum_init<core::PanicResult::<core::felt>, 1> = enum_init<core::PanicResult::<core::felt>, 1>;
libfunc dup<felt> = dup<felt>;
libfunc felt_jump_nz = felt_jump_nz;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc felt_add = felt_add;
libfunc felt_sub = felt_sub;
libfunc store_temp<felt> = store_temp<felt>;
libfunc rename<felt> = rename<felt>;
libfunc function_call<user@fib_gas::fib_gas::fib> = function_call<user@fib_gas::fib_gas::fib>;
libfunc enum_match<core::PanicResult::<core::felt>> = enum_match<core::PanicResult::<core::felt>>;

revoke_ap_tracking() -> ();
get_gas([0], [1]) { fallthrough([5], [6]) 17([7], [8]) };
struct_construct<Unit>() -> ([9]);
struct_construct<Unit>() -> ([10]);
store_temp<Unit>([10]) -> ([10]);
enum_init<core::PanicResult::<core::felt>, 0>([10]) -> ([11]);
store_temp<RangeCheck>([5]) -> ([5]);
rename<RangeCheck>([5]) -> ([12]);
store_temp<GasBuiltin>([6]) -> ([6]);
rename<GasBuiltin>([6]) -> ([13]);
store_temp<core::PanicResult::<core::felt>>([11]) -> ([11]);
rename<core::PanicResult::<core::felt>>([11]) -> ([14]);
drop<core::PanicResult::<core::felt>>([14]) -> ();
burn_gas() -> ();
store_temp<Unit>([9]) -> ([9]);
drop<Unit>([9]) -> ();
jump() { 35() };
drop<felt>([4]) -> ();
drop<felt>([2]) -> ();
drop<felt>([3]) -> ();
struct_construct<Unit>() -> ([15]);
drop<Unit>([15]) -> ();
array_new<felt>() -> ([16]);
felt_const<1>() -> ([17]);
store_temp<Array<felt>>([16]) -> ([16]);
array_append<felt>([16], [17]) -> ([18]);
store_temp<Array<felt>>([18]) -> ([18]);
enum_init<core::PanicResult::<core::felt>, 1>([18]) -> ([19]);
store_temp<RangeCheck>([7]) -> ([7]);
rename<RangeCheck>([7]) -> ([20]);
store_temp<GasBuiltin>([8]) -> ([21]);
store_temp<core::PanicResult::<core::felt>>([19]) -> ([19]);
rename<core::PanicResult::<core::felt>>([19]) -> ([22]);
burn_gas() -> ();
return([20], [21], [22]);
dup<felt>([4]) -> ([4], [51]);
felt_jump_nz([51]) { fallthrough() 46([23]) };
drop<felt>([3]) -> ();
drop<felt>([4]) -> ();
enum_init<core::PanicResult::<core::felt>, 0>([2]) -> ([24]);
store_temp<RangeCheck>([12]) -> ([25]);
store_temp<GasBuiltin>([13]) -> ([26]);
store_temp<core::PanicResult::<core::felt>>([24]) -> ([24]);
rename<core::PanicResult::<core::felt>>([24]) -> ([27]);
burn_gas() -> ();
jump() { 76() };
drop<NonZero<felt>>([23]) -> ();
dup<felt>([3]) -> ([3], [52]);
felt_add([2], [52]) -> ([28]);
felt_const<1>() -> ([29]);
felt_sub([4], [29]) -> ([30]);
store_temp<RangeCheck>([12]) -> ([34]);
store_temp<GasBuiltin>([13]) -> ([35]);
store_temp<felt>([3]) -> ([36]);
store_temp<felt>([28]) -> ([28]);
rename<felt>([28]) -> ([37]);
store_temp<felt>([30]) -> ([30]);
rename<felt>([30]) -> ([38]);
function_call<user@fib_gas::fib_gas::fib>([34], [35], [36], [37], [38]) -> ([31], [32], [33]);
enum_match<core::PanicResult::<core::felt>>([33]) { 60([39]) 63([40]) };
store_temp<felt>([39]) -> ([41]);
burn_gas() -> ();
jump() { 70() };
enum_init<core::PanicResult::<core::felt>, 0>([40]) -> ([42]);
store_temp<RangeCheck>([31]) -> ([43]);
store_temp<GasBuiltin>([32]) -> ([44]);
store_temp<core::PanicResult::<core::felt>>([42]) -> ([42]);
rename<core::PanicResult::<core::felt>>([42]) -> ([45]);
burn_gas() -> ();
return([43], [44], [45]);
enum_init<core::PanicResult::<core::felt>, 0>([41]) -> ([46]);
store_temp<RangeCheck>([31]) -> ([25]);
store_temp<GasBuiltin>([32]) -> ([26]);
store_temp<core::PanicResult::<core::felt>>([46]) -> ([46]);
rename<core::PanicResult::<core::felt>>([46]) -> ([27]);
burn_gas() -> ();
enum_init<core::PanicResult::<core::felt>, 0>([27]) -> ([47]);
store_temp<RangeCheck>([25]) -> ([48]);
store_temp<GasBuiltin>([26]) -> ([49]);
store_temp<core::PanicResult::<core::felt>>([47]) -> ([47]);
rename<core::PanicResult::<core::felt>>([47]) -> ([50]);
burn_gas() -> ();
return([48], [49], [50]);

fib_gas::fib_gas::fib@0([0]: RangeCheck, [1]: GasBuiltin, [2]: felt, [3]: felt, [4]: felt) -> (RangeCheck, GasBuiltin, felt);
