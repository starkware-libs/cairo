type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type felt = felt;
type Array<felt> = Array<felt>;
type core::PanicResult::<core::felt> = Enum<ut@core::PanicResult::<core::felt>, felt, Array<felt>>;
type NonZero<felt> = NonZero<felt>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc get_gas = get_gas;
libfunc branch_align = branch_align;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc jump = jump;
libfunc drop<felt> = drop<felt>;
libfunc array_new<felt> = array_new<felt>;
libfunc felt_const<5197639> = felt_const<5197639>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc array_append<felt> = array_append<felt>;
libfunc enum_init<core::PanicResult::<core::felt>, 1> = enum_init<core::PanicResult::<core::felt>, 1>;
libfunc store_temp<core::PanicResult::<core::felt>> = store_temp<core::PanicResult::<core::felt>>;
libfunc rename<core::PanicResult::<core::felt>> = rename<core::PanicResult::<core::felt>>;
libfunc dup<felt> = dup<felt>;
libfunc felt_jump_nz = felt_jump_nz;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc felt_add = felt_add;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_sub = felt_sub;
libfunc rename<felt> = rename<felt>;
libfunc function_call<user@fib_gas::fib_gas::fib> = function_call<user@fib_gas::fib_gas::fib>;
libfunc enum_match<core::PanicResult::<core::felt>> = enum_match<core::PanicResult::<core::felt>>;
libfunc enum_init<core::PanicResult::<core::felt>, 0> = enum_init<core::PanicResult::<core::felt>, 0>;

revoke_ap_tracking() -> ();
get_gas([0], [1]) { fallthrough([5], [6]) 7([7], [8]) };
branch_align() -> ();
store_temp<RangeCheck>([5]) -> ([5]);
rename<RangeCheck>([5]) -> ([9]);
store_temp<GasBuiltin>([6]) -> ([10]);
jump() { 22() };
drop<felt>([4]) -> ();
drop<felt>([2]) -> ();
drop<felt>([3]) -> ();
branch_align() -> ();
array_new<felt>() -> ([11]);
felt_const<5197639>() -> ([12]);
store_temp<felt>([12]) -> ([12]);
array_append<felt>([11], [12]) -> ([13]);
enum_init<core::PanicResult::<core::felt>, 1>([13]) -> ([14]);
store_temp<RangeCheck>([7]) -> ([7]);
rename<RangeCheck>([7]) -> ([15]);
store_temp<GasBuiltin>([8]) -> ([16]);
store_temp<core::PanicResult::<core::felt>>([14]) -> ([14]);
rename<core::PanicResult::<core::felt>>([14]) -> ([17]);
return([15], [16], [17]);
dup<felt>([4]) -> ([4], [44]);
felt_jump_nz([44]) { fallthrough() 31([18]) };
drop<felt>([3]) -> ();
drop<felt>([4]) -> ();
branch_align() -> ();
store_temp<RangeCheck>([9]) -> ([19]);
store_temp<GasBuiltin>([10]) -> ([20]);
store_temp<felt>([2]) -> ([21]);
jump() { 59() };
drop<NonZero<felt>>([18]) -> ();
branch_align() -> ();
dup<felt>([3]) -> ([3], [45]);
felt_add([2], [45]) -> ([22]);
felt_const<1>() -> ([23]);
felt_sub([4], [23]) -> ([24]);
store_temp<RangeCheck>([9]) -> ([28]);
store_temp<GasBuiltin>([10]) -> ([29]);
store_temp<felt>([3]) -> ([30]);
store_temp<felt>([22]) -> ([22]);
rename<felt>([22]) -> ([31]);
store_temp<felt>([24]) -> ([24]);
rename<felt>([24]) -> ([32]);
function_call<user@fib_gas::fib_gas::fib>([28], [29], [30], [31], [32]) -> ([25], [26], [27]);
enum_match<core::PanicResult::<core::felt>>([27]) { 46([33]) 49([34]) };
branch_align() -> ();
store_temp<felt>([33]) -> ([35]);
jump() { 56() };
branch_align() -> ();
enum_init<core::PanicResult::<core::felt>, 1>([34]) -> ([36]);
store_temp<RangeCheck>([25]) -> ([37]);
store_temp<GasBuiltin>([26]) -> ([38]);
store_temp<core::PanicResult::<core::felt>>([36]) -> ([36]);
rename<core::PanicResult::<core::felt>>([36]) -> ([39]);
return([37], [38], [39]);
store_temp<RangeCheck>([25]) -> ([19]);
store_temp<GasBuiltin>([26]) -> ([20]);
store_temp<felt>([35]) -> ([21]);
enum_init<core::PanicResult::<core::felt>, 0>([21]) -> ([40]);
store_temp<RangeCheck>([19]) -> ([41]);
store_temp<GasBuiltin>([20]) -> ([42]);
store_temp<core::PanicResult::<core::felt>>([40]) -> ([40]);
rename<core::PanicResult::<core::felt>>([40]) -> ([43]);
return([41], [42], [43]);

fib_gas::fib_gas::fib@0([0]: RangeCheck, [1]: GasBuiltin, [2]: felt, [3]: felt, [4]: felt) -> (RangeCheck, GasBuiltin, core::PanicResult::<core::felt>);
