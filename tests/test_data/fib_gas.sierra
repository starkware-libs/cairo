type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type Unit = Struct<ut@Tuple>;
type felt = felt;
type Array<felt> = Array<felt>;
type core::PanicResult::<core::felt> = Enum<ut@core::PanicResult::<core::felt>, felt, Array<felt>>;
type NonZero<felt> = NonZero<felt>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc get_gas = get_gas;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc jump = jump;
libfunc drop<felt> = drop<felt>;
libfunc drop<Unit> = drop<Unit>;
libfunc array_new<felt> = array_new<felt>;
libfunc felt_const<1> = felt_const<1>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc array_append<felt> = array_append<felt>;
libfunc enum_init<core::PanicResult::<core::felt>, 1> = enum_init<core::PanicResult::<core::felt>, 1>;
libfunc store_temp<core::PanicResult::<core::felt>> = store_temp<core::PanicResult::<core::felt>>;
libfunc rename<core::PanicResult::<core::felt>> = rename<core::PanicResult::<core::felt>>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc dup<felt> = dup<felt>;
libfunc felt_jump_nz = felt_jump_nz;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc felt_add = felt_add;
libfunc felt_sub = felt_sub;
libfunc rename<felt> = rename<felt>;
libfunc function_call<user@fib_gas::fib_gas::fib> = function_call<user@fib_gas::fib_gas::fib>;
libfunc enum_match<core::PanicResult::<core::felt>> = enum_match<core::PanicResult::<core::felt>>;
libfunc enum_init<core::PanicResult::<core::felt>, 0> = enum_init<core::PanicResult::<core::felt>, 0>;

revoke_ap_tracking() -> ();
get_gas([0], [1]) { fallthrough([5], [6]) 8([7], [8]) };
branch_align() -> ();
struct_construct<Unit>() -> ([9]);
store_temp<RangeCheck>([5]) -> ([5]);
rename<RangeCheck>([5]) -> ([10]);
store_temp<GasBuiltin>([6]) -> ([11]);
jump() { 25() };
drop<felt>([4]) -> ();
drop<felt>([2]) -> ();
drop<felt>([3]) -> ();
branch_align() -> ();
struct_construct<Unit>() -> ([12]);
drop<Unit>([12]) -> ();
array_new<felt>() -> ([13]);
felt_const<1>() -> ([14]);
store_temp<felt>([14]) -> ([14]);
array_append<felt>([13], [14]) -> ([15]);
enum_init<core::PanicResult::<core::felt>, 1>([15]) -> ([16]);
store_temp<RangeCheck>([7]) -> ([7]);
rename<RangeCheck>([7]) -> ([17]);
store_temp<GasBuiltin>([8]) -> ([18]);
store_temp<core::PanicResult::<core::felt>>([16]) -> ([16]);
rename<core::PanicResult::<core::felt>>([16]) -> ([19]);
return([17], [18], [19]);
store_temp<Unit>([9]) -> ([9]);
drop<Unit>([9]) -> ();
dup<felt>([4]) -> ([4], [46]);
felt_jump_nz([46]) { fallthrough() 36([20]) };
drop<felt>([3]) -> ();
drop<felt>([4]) -> ();
branch_align() -> ();
store_temp<RangeCheck>([10]) -> ([21]);
store_temp<GasBuiltin>([11]) -> ([22]);
store_temp<felt>([2]) -> ([23]);
jump() { 64() };
drop<NonZero<felt>>([20]) -> ();
branch_align() -> ();
dup<felt>([3]) -> ([3], [47]);
felt_add([2], [47]) -> ([24]);
felt_const<1>() -> ([25]);
felt_sub([4], [25]) -> ([26]);
store_temp<RangeCheck>([10]) -> ([30]);
store_temp<GasBuiltin>([11]) -> ([31]);
store_temp<felt>([3]) -> ([32]);
store_temp<felt>([24]) -> ([24]);
rename<felt>([24]) -> ([33]);
store_temp<felt>([26]) -> ([26]);
rename<felt>([26]) -> ([34]);
function_call<user@fib_gas::fib_gas::fib>([30], [31], [32], [33], [34]) -> ([27], [28], [29]);
enum_match<core::PanicResult::<core::felt>>([29]) { 51([35]) 54([36]) };
branch_align() -> ();
store_temp<felt>([35]) -> ([37]);
jump() { 61() };
branch_align() -> ();
enum_init<core::PanicResult::<core::felt>, 1>([36]) -> ([38]);
store_temp<RangeCheck>([27]) -> ([39]);
store_temp<GasBuiltin>([28]) -> ([40]);
store_temp<core::PanicResult::<core::felt>>([38]) -> ([38]);
rename<core::PanicResult::<core::felt>>([38]) -> ([41]);
return([39], [40], [41]);
store_temp<RangeCheck>([27]) -> ([21]);
store_temp<GasBuiltin>([28]) -> ([22]);
store_temp<felt>([37]) -> ([23]);
enum_init<core::PanicResult::<core::felt>, 0>([23]) -> ([42]);
store_temp<RangeCheck>([21]) -> ([43]);
store_temp<GasBuiltin>([22]) -> ([44]);
store_temp<core::PanicResult::<core::felt>>([42]) -> ([42]);
rename<core::PanicResult::<core::felt>>([42]) -> ([45]);
return([43], [44], [45]);

fib_gas::fib_gas::fib@0([0]: RangeCheck, [1]: GasBuiltin, [2]: felt, [3]: felt, [4]: felt) -> (RangeCheck, GasBuiltin, core::PanicResult::<core::felt>);
