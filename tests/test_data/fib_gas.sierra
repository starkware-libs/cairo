type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type felt = felt;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<core::felt> = Enum<ut@core::option::Option::<core::felt>, felt, Unit>;
type NonZero<felt> = NonZero<felt>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc get_gas = get_gas;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc burn_gas = burn_gas;
libfunc jump = jump;
libfunc drop<felt> = drop<felt>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc enum_init<core::option::Option::<core::felt>, 1> = enum_init<core::option::Option::<core::felt>, 1>;
libfunc store_temp<core::option::Option::<core::felt>> = store_temp<core::option::Option::<core::felt>>;
libfunc rename<core::option::Option::<core::felt>> = rename<core::option::Option::<core::felt>>;
libfunc dup<felt> = dup<felt>;
libfunc felt_jump_nz = felt_jump_nz;
libfunc enum_init<core::option::Option::<core::felt>, 0> = enum_init<core::option::Option::<core::felt>, 0>;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc felt_add = felt_add;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_sub = felt_sub;
libfunc store_temp<felt> = store_temp<felt>;
libfunc rename<felt> = rename<felt>;
libfunc function_call<user@test_crate::fib> = function_call<user@test_crate::fib>;

revoke_ap_tracking() -> ();
get_gas([0], [1]) { fallthrough([5], [6]) 8([7], [8]) };
store_temp<RangeCheck>([5]) -> ([5]);
rename<RangeCheck>([5]) -> ([9]);
store_temp<GasBuiltin>([6]) -> ([6]);
rename<GasBuiltin>([6]) -> ([10]);
burn_gas() -> ();
jump() { 21() };
drop<felt>([4]) -> ();
drop<felt>([2]) -> ();
drop<felt>([3]) -> ();
struct_construct<Unit>() -> ([11]);
store_temp<Unit>([11]) -> ([11]);
enum_init<core::option::Option::<core::felt>, 1>([11]) -> ([12]);
store_temp<RangeCheck>([7]) -> ([7]);
rename<RangeCheck>([7]) -> ([13]);
store_temp<GasBuiltin>([8]) -> ([14]);
store_temp<core::option::Option::<core::felt>>([12]) -> ([12]);
rename<core::option::Option::<core::felt>>([12]) -> ([15]);
burn_gas() -> ();
return([13], [14], [15]);
dup<felt>([4]) -> ([4], [35]);
felt_jump_nz([35]) { fallthrough() 32([16]) };
drop<felt>([3]) -> ();
drop<felt>([4]) -> ();
enum_init<core::option::Option::<core::felt>, 0>([2]) -> ([17]);
rename<RangeCheck>([9]) -> ([18]);
rename<GasBuiltin>([10]) -> ([19]);
store_temp<core::option::Option::<core::felt>>([17]) -> ([17]);
rename<core::option::Option::<core::felt>>([17]) -> ([20]);
burn_gas() -> ();
jump() { 49() };
drop<NonZero<felt>>([16]) -> ();
dup<felt>([3]) -> ([3], [36]);
felt_add([2], [36]) -> ([21]);
felt_const<1>() -> ([22]);
felt_sub([4], [22]) -> ([23]);
rename<RangeCheck>([9]) -> ([27]);
rename<GasBuiltin>([10]) -> ([28]);
store_temp<felt>([3]) -> ([29]);
store_temp<felt>([21]) -> ([21]);
rename<felt>([21]) -> ([30]);
store_temp<felt>([23]) -> ([23]);
rename<felt>([23]) -> ([31]);
function_call<user@test_crate::fib>([27], [28], [29], [30], [31]) -> ([24], [25], [26]);
rename<RangeCheck>([24]) -> ([18]);
rename<GasBuiltin>([25]) -> ([19]);
rename<core::option::Option::<core::felt>>([26]) -> ([20]);
burn_gas() -> ();
rename<RangeCheck>([18]) -> ([32]);
rename<GasBuiltin>([19]) -> ([33]);
rename<core::option::Option::<core::felt>>([20]) -> ([34]);
burn_gas() -> ();
return([32], [33], [34]);

test_crate::fib@0([0]: RangeCheck, [1]: GasBuiltin, [2]: felt, [3]: felt, [4]: felt) -> (RangeCheck, GasBuiltin, core::option::Option::<core::felt>);
