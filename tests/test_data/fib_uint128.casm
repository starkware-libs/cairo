ap += 1;
jmp rel 6 if [fp + -3] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
jmp rel 78;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
call rel 80;
jmp rel 7 if [ap + -3] != 0;
jmp rel 2;
[ap + 0] = [ap + -2], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[fp + 0] = [ap + -3];
call rel 94;
jmp rel 7 if [ap + -3] != 0;
jmp rel 2;
[ap + 0] = [ap + -2], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -3], ap++;
call rel 119;
jmp rel 7 if [ap + -3] != 0;
jmp rel 2;
[ap + 0] = [ap + -2], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -4], ap++;
call rel -67;
jmp rel 7 if [ap + -3] != 0;
jmp rel 2;
[ap + 0] = [ap + -2], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 106;
jmp rel 7 if [ap + -2] != 0;
jmp rel 2;
[ap + 0] = [ap + -1], ap++;
jmp rel 16;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = memory[fp + -3] < 340282366920938463463374607431768211456 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -3], 340282366920938463463374607431768211456) %}
ap += 2;
[ap + 0] = [ap + -2] * 340282366920938463463374607431768211456, ap++;
[fp + -3] = [ap + -1] + [ap + -2];
[ap + -1] = [ap + 0] + 1, ap++;
[ap + -1] = [[fp + -4] + 0];
[ap + -2] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
jmp rel 9;
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 17;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 53;
jmp rel 7 if [ap + -2] != 0;
jmp rel 2;
[ap + 0] = [ap + -1], ap++;
jmp rel 16;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -2] + -340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 10;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 8;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -4] = [ap + 0] + [fp + -3], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 10;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 8;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;
