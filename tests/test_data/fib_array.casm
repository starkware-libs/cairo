%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
call rel 91;
jmp rel 8 if [ap + -3] != 0;
jmp rel 2;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[fp + -4] = [ap + 0] + [fp + -5], ap++;
[ap + 0] = [fp + -3] * 1, ap++;
%{ memory[ap + 0] = memory[ap + -1] < memory[ap + -2] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
[ap + -1] = [ap + 0] * 1, ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 16;
[ap + 0] = [ap + -2] + 1, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + 0] = [fp + -5] + [ap + -4], ap++;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -5] + 0], ap++;
jmp rel 12;
ap += 2;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 9 if [ap + -2] != 0;
jmp rel 2;
ap += 3;
[ap + 0] = [ap + -4], ap++;
jmp rel 18;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
call rel 119;
jmp rel 6 if [ap + -1] != 0;
jmp rel 2;
jmp rel 8;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
call rel 124;
jmp rel 7 if [ap + -3] != 0;
jmp rel 2;
[ap + 0] = [ap + -2], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
call rel -109;
jmp rel 7 if [ap + -3] != 0;
jmp rel 2;
[ap + 0] = [ap + -2], ap++;
jmp rel 8;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = 2, ap++;
call rel 86;
jmp rel 7 if [ap + -3] != 0;
jmp rel 2;
[ap + 0] = [ap + -2], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -4], ap++;
call rel -147;
jmp rel 7 if [ap + -3] != 0;
jmp rel 2;
[ap + 0] = [ap + -2], ap++;
jmp rel 8;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -53] + [ap + -1], ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
call rel -100;
jmp rel 8 if [ap + -3] != 0;
jmp rel 2;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
%{ memory[ap + 0] = memory[fp + -4] < memory[fp + -3] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -4] = [ap + 0] + [fp + -3], ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 12;
[ap + 0] = [fp + -4] + 1, ap++;
[fp + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 32;
jmp rel 9 if [ap + -2] != 0;
jmp rel 2;
ap += 3;
[ap + 0] = [ap + -4], ap++;
jmp rel 16;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -4] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 12;
[ap + -1] = [[fp + -5] + 0];
ap += 1;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 8;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;
