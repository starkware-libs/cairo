%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
call rel 68;
jmp rel 6 if [ap + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 12;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
[ap + 0] = 1, ap++;
call rel 173;
jmp rel 5 if [ap + -3] != 0;
[ap + 0] = [ap + -2], ap++;
jmp rel 12;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -4], ap++;
call rel 201;
jmp rel 5 if [ap + -3] != 0;
[ap + 0] = [ap + -2], ap++;
jmp rel 12;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -58], ap++;
ret;
ap += 1;
[fp + -3] = [fp + 0] + [fp + -4];
[fp + 0] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = 340282366920938463463374607431768211456 <= memory[ap + 0] %}
jmp rel 5 if [ap + -1] != 0, ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 11;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 1, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 8;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
call rel 91;
jmp rel 5 if [ap + -3] != 0;
[ap + 0] = [ap + -2], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
call rel 123;
jmp rel 5 if [ap + -3] != 0;
[ap + 0] = [ap + -2], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 2, ap++;
call rel 57;
jmp rel 5 if [ap + -3] != 0;
[ap + 0] = [ap + -2], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
call rel 89;
jmp rel 5 if [ap + -3] != 0;
[ap + 0] = [ap + -2], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -55] + [ap + -1], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -107;
jmp rel 6 if [ap + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[fp + -4] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 9 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 4294967296, ap++;
jmp rel 12;
[ap + -1] = [[fp + -5] + 0];
ap += 2;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 7;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
call rel 48;
jmp rel 5 if [ap + -3] != 0;
[ap + 0] = [ap + -2], ap++;
jmp rel 10;
ap += 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 42;
jmp rel 5 if [ap + -3] != 0;
[ap + 0] = [ap + -2], ap++;
jmp rel 10;
ap += 1;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
ret;
jmp rel 5 if [fp + -5] != 0;
[ap + 0] = [fp + -4], ap++;
jmp rel 11;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -3] = [[ap + -1] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -4] = [ap + 0] + [fp + -5], ap++;
%{ memory[ap + 0] = memory[fp + -3] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -3] = [[fp + -6] + 0];
jmp rel 12;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + -1] = [ap + 0] + [ap + -3], ap++;
[ap + -2] = [[fp + -6] + 0];
[ap + 0] = [fp + -5] + [fp + -3], ap++;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
jmp rel 17;
ap += 2;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
ret;
