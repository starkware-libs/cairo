%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
call rel 59;
jmp rel 47 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
[ap + 0] = 1, ap++;
call rel 150;
jmp rel 29 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -4], ap++;
call rel 185;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -42], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + -1] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + -2] < memory[fp + -5] %}
jmp rel 5 if [ap + -1] != 0, ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 87;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
call rel 84;
jmp rel 69 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
call rel 119;
jmp rel 55 if [ap + -3] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = 2, ap++;
call rel 67;
jmp rel 40 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
call rel 102;
jmp rel 26 if [ap + -3] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -39] + [ap + -1], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -52;
jmp rel 8 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[fp + -4] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[fp + -3] <= memory[fp + -4] %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 12;
[ap + -1] = [[fp + -5] + 0];
ap += 1;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 8;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4] + 4294967296, ap++;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
call rel 51;
jmp rel 9 if [ap + -3] != 0;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[fp + -4] = [ap + 0] + [fp + -5], ap++;
%{ memory[ap + 0] = memory[fp + -3] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 16;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -6] + 0];
ap += 1;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + [fp + -3], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
jmp rel 10 if [fp + -5] != 0;
ap += 1;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -3] = [[ap + -1] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
