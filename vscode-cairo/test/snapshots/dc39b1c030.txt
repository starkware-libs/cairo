//! > cairo_code
mod submod;
use submod::something;

// Func foo
// Second line
;
fn foo(,var1: int,, mut ref var2: felt252,) -> int {
    let bla3 = --7; // succeeds, ok
    let bla4 = -!-!8; // succeeds, ok
    let x = 1;
    let y = match x {
        0 => { 1 },
        _ => 0,
    };
    let z = if 0 + x == y {
        1
    } else {
        2
    };
    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
        - if cond { 32 } else { 1 };
    let w = calc_with_error(x, y?, z)?;
    let member_value = value.member?;
    let method_return = value.method()?;
    let x = true; // bla1
                  // bla2
    z = 5;
    func1(x);
    func2::<int>(x)
    return x;

fn bar<A, B>() -> felt252 { }

extern type S<>;
extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;

struct A<A, B> {
    pub member: bool,
    #[annot(a)]
    member2: (bool, felt252, ())
}

pub(crate) enum E<A, B> {
    V1: A,
    V2: B,
    VEmpty,
}

fn match_e_enum(e: E) -> felt252 {
    match e {
        E::V1(_) => 1,
        E::V2(x) => 2,
        E::VEmpty => 0,
    }
}

type Renamed = submod::inner::Other;
type Generic<T> = super::other::OtherGeneric::<T>;

inline_item_macro!(x, y, z);

#[attribute_without_item]


//! > syntax
mod submod;
^^^ source.cairo storage.type.cairo

mod submod;
    ^^^^^^ source.cairo entity.name.module.cairo

mod submod;
          ^ source.cairo punctuation.semi.cairo

use submod::something;
^^^ source.cairo meta.use.cairo keyword.other.cairo

use submod::something;
   ^ source.cairo meta.use.cairo

use submod::something;
    ^^^^^^ source.cairo meta.use.cairo entity.name.namespace.cairo

use submod::something;
          ^^ source.cairo meta.use.cairo keyword.operator.namespace.cairo

use submod::something;
            ^^^^^^^^^ source.cairo meta.use.cairo

use submod::something;
                     ^ source.cairo meta.use.cairo punctuation.semi.cairo

// Func foo
^^ source.cairo comment.line.double-slash.cairo punctuation.definition.comment.cairo

// Func foo
  ^^^^^^^^^ source.cairo comment.line.double-slash.cairo

// Second line
^^ source.cairo comment.line.double-slash.cairo punctuation.definition.comment.cairo

// Second line
  ^^^^^^^^^^^^ source.cairo comment.line.double-slash.cairo

;
^ source.cairo punctuation.semi.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
^^ source.cairo meta.function.definition.cairo keyword.other.fn.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
  ^ source.cairo meta.function.definition.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
   ^^^ source.cairo meta.function.definition.cairo entity.name.function.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
      ^ source.cairo meta.function.definition.cairo punctuation.brackets.round.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
       ^ source.cairo meta.function.definition.cairo punctuation.comma.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
        ^^^^ source.cairo meta.function.definition.cairo variable.other.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
            ^ source.cairo meta.function.definition.cairo keyword.operator.key-value.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
             ^ source.cairo meta.function.definition.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
              ^^^ source.cairo meta.function.definition.cairo variable.other.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
                 ^ source.cairo meta.function.definition.cairo punctuation.comma.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
                  ^ source.cairo meta.function.definition.cairo punctuation.comma.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
                   ^ source.cairo meta.function.definition.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
                    ^^^ source.cairo meta.function.definition.cairo storage.modifier.mut.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
                       ^ source.cairo meta.function.definition.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
                        ^^^ source.cairo meta.function.definition.cairo storage.modifier.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
                           ^ source.cairo meta.function.definition.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
                            ^^^^ source.cairo meta.function.definition.cairo variable.other.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
                                ^ source.cairo meta.function.definition.cairo keyword.operator.key-value.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
                                 ^ source.cairo meta.function.definition.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
                                  ^^^^^^^ source.cairo meta.function.definition.cairo entity.name.type.numeric.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
                                         ^ source.cairo meta.function.definition.cairo punctuation.comma.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
                                          ^ source.cairo meta.function.definition.cairo punctuation.brackets.round.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
                                           ^ source.cairo meta.function.definition.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
                                            ^^ source.cairo meta.function.definition.cairo keyword.operator.arrow.skinny.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
                                              ^ source.cairo meta.function.definition.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
                                               ^^^ source.cairo meta.function.definition.cairo variable.other.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
                                                  ^ source.cairo meta.function.definition.cairo

fn foo(,var1: int,, mut ref var2: felt252,) -> int {
                                                   ^ source.cairo meta.function.definition.cairo punctuation.brackets.curly.cairo

    let bla3 = --7; // succeeds, ok
    ^^^ source.cairo keyword.other.cairo storage.type.cairo

    let bla3 = --7; // succeeds, ok
        ^^^^ source.cairo variable.other.cairo

    let bla3 = --7; // succeeds, ok
             ^ source.cairo keyword.operator.assignment.equal.cairo

    let bla3 = --7; // succeeds, ok
               ^ source.cairo keyword.operator.math.cairo

    let bla3 = --7; // succeeds, ok
                ^ source.cairo keyword.operator.math.cairo

    let bla3 = --7; // succeeds, ok
                 ^ source.cairo constant.numeric.decimal.cairo

    let bla3 = --7; // succeeds, ok
                  ^ source.cairo punctuation.semi.cairo

    let bla3 = --7; // succeeds, ok
                    ^^ source.cairo comment.line.double-slash.cairo punctuation.definition.comment.cairo

    let bla3 = --7; // succeeds, ok
                      ^^^^^^^^^^^^^ source.cairo comment.line.double-slash.cairo

    let bla4 = -!-!8; // succeeds, ok
    ^^^ source.cairo keyword.other.cairo storage.type.cairo

    let bla4 = -!-!8; // succeeds, ok
        ^^^^ source.cairo variable.other.cairo

    let bla4 = -!-!8; // succeeds, ok
             ^ source.cairo keyword.operator.assignment.equal.cairo

    let bla4 = -!-!8; // succeeds, ok
               ^ source.cairo keyword.operator.math.cairo

    let bla4 = -!-!8; // succeeds, ok
                ^ source.cairo keyword.operator.logical.cairo

    let bla4 = -!-!8; // succeeds, ok
                 ^ source.cairo keyword.operator.math.cairo

    let bla4 = -!-!8; // succeeds, ok
                  ^ source.cairo keyword.operator.logical.cairo

    let bla4 = -!-!8; // succeeds, ok
                   ^ source.cairo constant.numeric.decimal.cairo

    let bla4 = -!-!8; // succeeds, ok
                    ^ source.cairo punctuation.semi.cairo

    let bla4 = -!-!8; // succeeds, ok
                      ^^ source.cairo comment.line.double-slash.cairo punctuation.definition.comment.cairo

    let bla4 = -!-!8; // succeeds, ok
                        ^^^^^^^^^^^^^ source.cairo comment.line.double-slash.cairo

    let x = 1;
    ^^^ source.cairo keyword.other.cairo storage.type.cairo

    let x = 1;
        ^ source.cairo variable.other.cairo

    let x = 1;
          ^ source.cairo keyword.operator.assignment.equal.cairo

    let x = 1;
            ^ source.cairo constant.numeric.decimal.cairo

    let x = 1;
             ^ source.cairo punctuation.semi.cairo

    let y = match x {
    ^^^ source.cairo keyword.other.cairo storage.type.cairo

    let y = match x {
        ^ source.cairo variable.other.cairo

    let y = match x {
          ^ source.cairo keyword.operator.assignment.equal.cairo

    let y = match x {
            ^^^^^ source.cairo keyword.control.cairo

    let y = match x {
                  ^ source.cairo variable.other.cairo

    let y = match x {
                    ^ source.cairo punctuation.brackets.curly.cairo

        0 => { 1 },
        ^ source.cairo constant.numeric.decimal.cairo

        0 => { 1 },
          ^^ source.cairo keyword.operator.arrow.fat.cairo

        0 => { 1 },
             ^ source.cairo punctuation.brackets.curly.cairo

        0 => { 1 },
               ^ source.cairo constant.numeric.decimal.cairo

        0 => { 1 },
                 ^ source.cairo punctuation.brackets.curly.cairo

        0 => { 1 },
                  ^ source.cairo punctuation.comma.cairo

        _ => 0,
        ^ source.cairo variable.other.cairo

        _ => 0,
          ^^ source.cairo keyword.operator.arrow.fat.cairo

        _ => 0,
             ^ source.cairo constant.numeric.decimal.cairo

        _ => 0,
              ^ source.cairo punctuation.comma.cairo

    };
    ^ source.cairo punctuation.brackets.curly.cairo

    };
     ^ source.cairo punctuation.semi.cairo

    let z = if 0 + x == y {
    ^^^ source.cairo keyword.other.cairo storage.type.cairo

    let z = if 0 + x == y {
        ^ source.cairo variable.other.cairo

    let z = if 0 + x == y {
          ^ source.cairo keyword.operator.assignment.equal.cairo

    let z = if 0 + x == y {
            ^^ source.cairo keyword.control.cairo

    let z = if 0 + x == y {
               ^ source.cairo constant.numeric.decimal.cairo

    let z = if 0 + x == y {
                 ^ source.cairo keyword.operator.math.cairo

    let z = if 0 + x == y {
                   ^ source.cairo variable.other.cairo

    let z = if 0 + x == y {
                     ^^ source.cairo keyword.operator.comparison.cairo

    let z = if 0 + x == y {
                        ^ source.cairo variable.other.cairo

    let z = if 0 + x == y {
                          ^ source.cairo punctuation.brackets.curly.cairo

        1
        ^ source.cairo constant.numeric.decimal.cairo

    } else {
    ^ source.cairo punctuation.brackets.curly.cairo

    } else {
      ^^^^ source.cairo keyword.control.cairo

    } else {
           ^ source.cairo punctuation.brackets.curly.cairo

        2
        ^ source.cairo constant.numeric.decimal.cairo

    };
    ^ source.cairo punctuation.brackets.curly.cairo

    };
     ^ source.cairo punctuation.semi.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
    ^^^ source.cairo keyword.other.cairo storage.type.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
        ^^^^^^^^^^^^^^^^^ source.cairo variable.other.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                          ^ source.cairo keyword.operator.assignment.equal.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                            ^ source.cairo punctuation.brackets.curly.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                             ^ source.cairo constant.numeric.decimal.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                              ^ source.cairo punctuation.brackets.curly.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                                ^ source.cairo keyword.operator.math.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                                  ^^^^^ source.cairo keyword.control.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                                        ^ source.cairo variable.other.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                                          ^ source.cairo punctuation.brackets.curly.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                                            ^ source.cairo entity.name.type.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                                             ^^ source.cairo keyword.operator.namespace.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                                               ^^ source.cairo meta.function.call.cairo entity.name.function.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                                                 ^ source.cairo meta.function.call.cairo punctuation.brackets.round.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                                                  ^ source.cairo meta.function.call.cairo variable.other.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                                                   ^ source.cairo meta.function.call.cairo punctuation.brackets.round.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                                                     ^^ source.cairo keyword.operator.arrow.fat.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                                                        ^ source.cairo constant.numeric.decimal.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                                                         ^ source.cairo punctuation.comma.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                                                           ^ source.cairo entity.name.type.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                                                            ^^ source.cairo keyword.operator.namespace.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                                                              ^^ source.cairo meta.function.call.cairo entity.name.function.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                                                                ^ source.cairo meta.function.call.cairo punctuation.brackets.round.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                                                                 ^ source.cairo meta.function.call.cairo variable.other.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                                                                  ^ source.cairo meta.function.call.cairo punctuation.brackets.round.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                                                                    ^^ source.cairo keyword.operator.arrow.fat.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                                                                       ^ source.cairo constant.numeric.decimal.cairo

    let block_combination = {5} + match x { E::V1(_) => 4, E::V2(_) => 2 }
                                                                         ^ source.cairo punctuation.brackets.curly.cairo

        - if cond { 32 } else { 1 };
        ^ source.cairo keyword.operator.math.cairo

        - if cond { 32 } else { 1 };
          ^^ source.cairo keyword.control.cairo

        - if cond { 32 } else { 1 };
             ^^^^ source.cairo variable.other.cairo

        - if cond { 32 } else { 1 };
                  ^ source.cairo punctuation.brackets.curly.cairo

        - if cond { 32 } else { 1 };
                    ^^ source.cairo constant.numeric.decimal.cairo

        - if cond { 32 } else { 1 };
                       ^ source.cairo punctuation.brackets.curly.cairo

        - if cond { 32 } else { 1 };
                         ^^^^ source.cairo keyword.control.cairo

        - if cond { 32 } else { 1 };
                              ^ source.cairo punctuation.brackets.curly.cairo

        - if cond { 32 } else { 1 };
                                ^ source.cairo constant.numeric.decimal.cairo

        - if cond { 32 } else { 1 };
                                  ^ source.cairo punctuation.brackets.curly.cairo

        - if cond { 32 } else { 1 };
                                   ^ source.cairo punctuation.semi.cairo

    let w = calc_with_error(x, y?, z)?;
    ^^^ source.cairo keyword.other.cairo storage.type.cairo

    let w = calc_with_error(x, y?, z)?;
        ^ source.cairo variable.other.cairo

    let w = calc_with_error(x, y?, z)?;
          ^ source.cairo keyword.operator.assignment.equal.cairo

    let w = calc_with_error(x, y?, z)?;
            ^^^^^^^^^^^^^^^ source.cairo meta.function.call.cairo entity.name.function.cairo

    let w = calc_with_error(x, y?, z)?;
                           ^ source.cairo meta.function.call.cairo punctuation.brackets.round.cairo

    let w = calc_with_error(x, y?, z)?;
                            ^ source.cairo meta.function.call.cairo variable.other.cairo

    let w = calc_with_error(x, y?, z)?;
                             ^ source.cairo meta.function.call.cairo punctuation.comma.cairo

    let w = calc_with_error(x, y?, z)?;
                              ^ source.cairo meta.function.call.cairo

    let w = calc_with_error(x, y?, z)?;
                               ^ source.cairo meta.function.call.cairo variable.other.cairo

    let w = calc_with_error(x, y?, z)?;
                                ^ source.cairo meta.function.call.cairo keyword.operator.question.cairo

    let w = calc_with_error(x, y?, z)?;
                                 ^ source.cairo meta.function.call.cairo punctuation.comma.cairo

    let w = calc_with_error(x, y?, z)?;
                                  ^ source.cairo meta.function.call.cairo

    let w = calc_with_error(x, y?, z)?;
                                   ^ source.cairo meta.function.call.cairo variable.other.cairo

    let w = calc_with_error(x, y?, z)?;
                                    ^ source.cairo meta.function.call.cairo punctuation.brackets.round.cairo

    let w = calc_with_error(x, y?, z)?;
                                     ^ source.cairo keyword.operator.question.cairo

    let w = calc_with_error(x, y?, z)?;
                                      ^ source.cairo punctuation.semi.cairo

    let member_value = value.member?;
    ^^^ source.cairo keyword.other.cairo storage.type.cairo

    let member_value = value.member?;
        ^^^^^^^^^^^^ source.cairo variable.other.cairo

    let member_value = value.member?;
                     ^ source.cairo keyword.operator.assignment.equal.cairo

    let member_value = value.member?;
                       ^^^^^ source.cairo variable.other.cairo

    let member_value = value.member?;
                            ^ source.cairo keyword.operator.access.dot.cairo

    let member_value = value.member?;
                             ^^^^^^ source.cairo

    let member_value = value.member?;
                                   ^ source.cairo keyword.operator.question.cairo

    let member_value = value.member?;
                                    ^ source.cairo punctuation.semi.cairo

    let method_return = value.method()?;
    ^^^ source.cairo keyword.other.cairo storage.type.cairo

    let method_return = value.method()?;
        ^^^^^^^^^^^^^ source.cairo variable.other.cairo

    let method_return = value.method()?;
                      ^ source.cairo keyword.operator.assignment.equal.cairo

    let method_return = value.method()?;
                        ^^^^^ source.cairo variable.other.cairo

    let method_return = value.method()?;
                             ^ source.cairo keyword.operator.access.dot.cairo

    let method_return = value.method()?;
                              ^^^^^^ source.cairo meta.function.call.cairo entity.name.function.cairo

    let method_return = value.method()?;
                                    ^ source.cairo meta.function.call.cairo punctuation.brackets.round.cairo

    let method_return = value.method()?;
                                     ^ source.cairo meta.function.call.cairo punctuation.brackets.round.cairo

    let method_return = value.method()?;
                                      ^ source.cairo keyword.operator.question.cairo

    let method_return = value.method()?;
                                       ^ source.cairo punctuation.semi.cairo

    let x = true; // bla1
    ^^^ source.cairo keyword.other.cairo storage.type.cairo

    let x = true; // bla1
        ^ source.cairo variable.other.cairo

    let x = true; // bla1
          ^ source.cairo keyword.operator.assignment.equal.cairo

    let x = true; // bla1
            ^^^^ source.cairo constant.language.bool.cairo

    let x = true; // bla1
                ^ source.cairo punctuation.semi.cairo

    let x = true; // bla1
                  ^^ source.cairo comment.line.double-slash.cairo punctuation.definition.comment.cairo

    let x = true; // bla1
                    ^^^^^ source.cairo comment.line.double-slash.cairo

                  // bla2
                  ^^ source.cairo comment.line.double-slash.cairo punctuation.definition.comment.cairo

                  // bla2
                    ^^^^^ source.cairo comment.line.double-slash.cairo

    z = 5;
    ^ source.cairo variable.other.cairo

    z = 5;
      ^ source.cairo keyword.operator.assignment.equal.cairo

    z = 5;
        ^ source.cairo constant.numeric.decimal.cairo

    z = 5;
         ^ source.cairo punctuation.semi.cairo

    func1(x);
    ^^^^^ source.cairo meta.function.call.cairo entity.name.function.cairo

    func1(x);
         ^ source.cairo meta.function.call.cairo punctuation.brackets.round.cairo

    func1(x);
          ^ source.cairo meta.function.call.cairo variable.other.cairo

    func1(x);
           ^ source.cairo meta.function.call.cairo punctuation.brackets.round.cairo

    func1(x);
            ^ source.cairo punctuation.semi.cairo

    func2::<int>(x)
    ^^^^^ source.cairo meta.function.call.cairo entity.name.function.cairo

    func2::<int>(x)
         ^^ source.cairo meta.function.call.cairo keyword.operator.namespace.cairo

    func2::<int>(x)
           ^ source.cairo meta.function.call.cairo punctuation.brackets.angle.cairo

    func2::<int>(x)
            ^^^ source.cairo meta.function.call.cairo variable.other.cairo

    func2::<int>(x)
               ^ source.cairo meta.function.call.cairo punctuation.brackets.angle.cairo

    func2::<int>(x)
                ^ source.cairo meta.function.call.cairo punctuation.brackets.round.cairo

    func2::<int>(x)
                 ^ source.cairo meta.function.call.cairo variable.other.cairo

    func2::<int>(x)
                  ^ source.cairo meta.function.call.cairo punctuation.brackets.round.cairo

    return x;
    ^^^^^^ source.cairo keyword.control.cairo

    return x;
           ^ source.cairo variable.other.cairo

    return x;
            ^ source.cairo punctuation.semi.cairo

fn bar<A, B>() -> felt252 { }
^^ source.cairo meta.function.definition.cairo keyword.other.fn.cairo

fn bar<A, B>() -> felt252 { }
  ^ source.cairo meta.function.definition.cairo

fn bar<A, B>() -> felt252 { }
   ^^^ source.cairo meta.function.definition.cairo entity.name.function.cairo

fn bar<A, B>() -> felt252 { }
      ^ source.cairo meta.function.definition.cairo punctuation.brackets.angle.cairo

fn bar<A, B>() -> felt252 { }
       ^ source.cairo meta.function.definition.cairo entity.name.type.cairo

fn bar<A, B>() -> felt252 { }
        ^ source.cairo meta.function.definition.cairo punctuation.comma.cairo

fn bar<A, B>() -> felt252 { }
         ^ source.cairo meta.function.definition.cairo

fn bar<A, B>() -> felt252 { }
          ^ source.cairo meta.function.definition.cairo entity.name.type.cairo

fn bar<A, B>() -> felt252 { }
           ^ source.cairo meta.function.definition.cairo punctuation.brackets.angle.cairo

fn bar<A, B>() -> felt252 { }
            ^ source.cairo meta.function.definition.cairo punctuation.brackets.round.cairo

fn bar<A, B>() -> felt252 { }
             ^ source.cairo meta.function.definition.cairo punctuation.brackets.round.cairo

fn bar<A, B>() -> felt252 { }
              ^ source.cairo meta.function.definition.cairo

fn bar<A, B>() -> felt252 { }
               ^^ source.cairo meta.function.definition.cairo keyword.operator.arrow.skinny.cairo

fn bar<A, B>() -> felt252 { }
                 ^ source.cairo meta.function.definition.cairo

fn bar<A, B>() -> felt252 { }
                  ^^^^^^^ source.cairo meta.function.definition.cairo entity.name.type.numeric.cairo

fn bar<A, B>() -> felt252 { }
                         ^ source.cairo meta.function.definition.cairo

fn bar<A, B>() -> felt252 { }
                          ^ source.cairo meta.function.definition.cairo punctuation.brackets.curly.cairo

fn bar<A, B>() -> felt252 { }
                            ^ source.cairo punctuation.brackets.curly.cairo

extern type S<>;
^^^^^^ source.cairo keyword.other.cairo storage.type.cairo

extern type S<>;
       ^^^^ source.cairo keyword.declaration.type.cairo storage.type.cairo

extern type S<>;
            ^ source.cairo entity.name.type.declaration.cairo

extern type S<>;
             ^ source.cairo punctuation.brackets.angle.cairo

extern type S<>;
              ^ source.cairo punctuation.brackets.angle.cairo

extern type S<>;
               ^ source.cairo punctuation.semi.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
^^^^^^ source.cairo keyword.other.cairo storage.type.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
       ^^ source.cairo meta.function.definition.cairo keyword.other.fn.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
         ^ source.cairo meta.function.definition.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
          ^^^^ source.cairo meta.function.definition.cairo entity.name.function.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
              ^ source.cairo meta.function.definition.cairo punctuation.brackets.angle.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
               ^ source.cairo meta.function.definition.cairo entity.name.type.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                ^ source.cairo meta.function.definition.cairo punctuation.comma.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                 ^ source.cairo meta.function.definition.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                  ^ source.cairo meta.function.definition.cairo variable.other.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                   ^ source.cairo meta.function.definition.cairo punctuation.brackets.angle.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                    ^ source.cairo meta.function.definition.cairo punctuation.brackets.round.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                     ^^^^ source.cairo meta.function.definition.cairo variable.other.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                         ^ source.cairo meta.function.definition.cairo keyword.operator.key-value.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                          ^ source.cairo meta.function.definition.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                           ^^^ source.cairo meta.function.definition.cairo variable.other.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                              ^ source.cairo meta.function.definition.cairo punctuation.comma.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                               ^ source.cairo meta.function.definition.cairo punctuation.brackets.round.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                                ^ source.cairo meta.function.definition.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                                 ^^ source.cairo meta.function.definition.cairo keyword.operator.arrow.skinny.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                                   ^ source.cairo meta.function.definition.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                                    ^^^^^ source.cairo meta.function.definition.cairo keyword.other.crate.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                                         ^^ source.cairo meta.function.definition.cairo keyword.operator.namespace.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                                           ^ source.cairo meta.function.definition.cairo entity.name.type.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                                            ^ source.cairo meta.function.definition.cairo punctuation.brackets.angle.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                                             ^^^ source.cairo meta.function.definition.cairo variable.other.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                                                ^ source.cairo meta.function.definition.cairo punctuation.brackets.angle.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                                                 ^ source.cairo meta.function.definition.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                                                  ^^^^^^^ source.cairo meta.function.definition.cairo keyword.other.cairo

extern fn glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                                                         ^ source.cairo meta.function.definition.cairo punctuation.brackets.curly.cairo

struct A<A, B> {
^^^^^^ source.cairo keyword.declaration.struct.cairo storage.type.cairo

struct A<A, B> {
       ^ source.cairo entity.name.type.struct.cairo

struct A<A, B> {
        ^ source.cairo punctuation.brackets.angle.cairo

struct A<A, B> {
         ^ source.cairo entity.name.type.cairo

struct A<A, B> {
          ^ source.cairo punctuation.comma.cairo

struct A<A, B> {
            ^ source.cairo entity.name.type.cairo

struct A<A, B> {
             ^ source.cairo punctuation.brackets.angle.cairo

struct A<A, B> {
               ^ source.cairo punctuation.brackets.curly.cairo

    pub member: bool,
    ^^^ source.cairo keyword.other.cairo

    pub member: bool,
        ^^^^^^ source.cairo variable.other.cairo

    pub member: bool,
              ^ source.cairo keyword.operator.key-value.cairo

    pub member: bool,
                ^^^^ source.cairo entity.name.type.primitive.cairo

    pub member: bool,
                    ^ source.cairo punctuation.comma.cairo

    #[annot(a)]
    ^ source.cairo meta.attribute.cairo punctuation.definition.attribute.cairo

    #[annot(a)]
     ^ source.cairo meta.attribute.cairo punctuation.brackets.attribute.cairo

    #[annot(a)]
      ^^^^^ source.cairo meta.attribute.cairo

    #[annot(a)]
           ^ source.cairo meta.attribute.cairo punctuation.brackets.round.cairo

    #[annot(a)]
            ^ source.cairo meta.attribute.cairo

    #[annot(a)]
             ^ source.cairo meta.attribute.cairo punctuation.brackets.round.cairo

    #[annot(a)]
              ^ source.cairo meta.attribute.cairo punctuation.brackets.attribute.cairo

    member2: (bool, felt252, ())
    ^^^^^^^ source.cairo variable.other.cairo

    member2: (bool, felt252, ())
           ^ source.cairo keyword.operator.key-value.cairo

    member2: (bool, felt252, ())
             ^ source.cairo punctuation.brackets.round.cairo

    member2: (bool, felt252, ())
              ^^^^ source.cairo entity.name.type.primitive.cairo

    member2: (bool, felt252, ())
                  ^ source.cairo punctuation.comma.cairo

    member2: (bool, felt252, ())
                    ^^^^^^^ source.cairo entity.name.type.numeric.cairo

    member2: (bool, felt252, ())
                           ^ source.cairo punctuation.comma.cairo

    member2: (bool, felt252, ())
                             ^ source.cairo punctuation.brackets.round.cairo

    member2: (bool, felt252, ())
                              ^ source.cairo punctuation.brackets.round.cairo

    member2: (bool, felt252, ())
                               ^ source.cairo punctuation.brackets.round.cairo

}
^ source.cairo punctuation.brackets.curly.cairo

pub(crate) enum E<A, B> {
^^^ source.cairo keyword.other.cairo

pub(crate) enum E<A, B> {
   ^ source.cairo punctuation.brackets.round.cairo

pub(crate) enum E<A, B> {
    ^^^^^ source.cairo keyword.other.crate.cairo

pub(crate) enum E<A, B> {
         ^ source.cairo punctuation.brackets.round.cairo

pub(crate) enum E<A, B> {
           ^^^^ source.cairo keyword.declaration.enum.cairo storage.type.cairo

pub(crate) enum E<A, B> {
                ^ source.cairo entity.name.type.enum.cairo

pub(crate) enum E<A, B> {
                 ^ source.cairo punctuation.brackets.angle.cairo

pub(crate) enum E<A, B> {
                  ^ source.cairo entity.name.type.cairo

pub(crate) enum E<A, B> {
                   ^ source.cairo punctuation.comma.cairo

pub(crate) enum E<A, B> {
                     ^ source.cairo entity.name.type.cairo

pub(crate) enum E<A, B> {
                      ^ source.cairo punctuation.brackets.angle.cairo

pub(crate) enum E<A, B> {
                        ^ source.cairo punctuation.brackets.curly.cairo

    V1: A,
    ^^ source.cairo entity.name.type.cairo

    V1: A,
      ^ source.cairo keyword.operator.key-value.cairo

    V1: A,
        ^ source.cairo entity.name.type.cairo

    V1: A,
         ^ source.cairo punctuation.comma.cairo

    V2: B,
    ^^ source.cairo entity.name.type.cairo

    V2: B,
      ^ source.cairo keyword.operator.key-value.cairo

    V2: B,
        ^ source.cairo entity.name.type.cairo

    V2: B,
         ^ source.cairo punctuation.comma.cairo

    VEmpty,
    ^^^^^^ source.cairo entity.name.type.cairo

    VEmpty,
          ^ source.cairo punctuation.comma.cairo

}
^ source.cairo punctuation.brackets.curly.cairo

fn match_e_enum(e: E) -> felt252 {
^^ source.cairo meta.function.definition.cairo keyword.other.fn.cairo

fn match_e_enum(e: E) -> felt252 {
  ^ source.cairo meta.function.definition.cairo

fn match_e_enum(e: E) -> felt252 {
   ^^^^^^^^^^^^ source.cairo meta.function.definition.cairo entity.name.function.cairo

fn match_e_enum(e: E) -> felt252 {
               ^ source.cairo meta.function.definition.cairo punctuation.brackets.round.cairo

fn match_e_enum(e: E) -> felt252 {
                ^ source.cairo meta.function.definition.cairo variable.other.cairo

fn match_e_enum(e: E) -> felt252 {
                 ^ source.cairo meta.function.definition.cairo keyword.operator.key-value.cairo

fn match_e_enum(e: E) -> felt252 {
                  ^ source.cairo meta.function.definition.cairo

fn match_e_enum(e: E) -> felt252 {
                   ^ source.cairo meta.function.definition.cairo entity.name.type.cairo

fn match_e_enum(e: E) -> felt252 {
                    ^ source.cairo meta.function.definition.cairo punctuation.brackets.round.cairo

fn match_e_enum(e: E) -> felt252 {
                     ^ source.cairo meta.function.definition.cairo

fn match_e_enum(e: E) -> felt252 {
                      ^^ source.cairo meta.function.definition.cairo keyword.operator.arrow.skinny.cairo

fn match_e_enum(e: E) -> felt252 {
                        ^ source.cairo meta.function.definition.cairo

fn match_e_enum(e: E) -> felt252 {
                         ^^^^^^^ source.cairo meta.function.definition.cairo entity.name.type.numeric.cairo

fn match_e_enum(e: E) -> felt252 {
                                ^ source.cairo meta.function.definition.cairo

fn match_e_enum(e: E) -> felt252 {
                                 ^ source.cairo meta.function.definition.cairo punctuation.brackets.curly.cairo

    match e {
    ^^^^^ source.cairo keyword.control.cairo

    match e {
          ^ source.cairo variable.other.cairo

    match e {
            ^ source.cairo punctuation.brackets.curly.cairo

        E::V1(_) => 1,
        ^ source.cairo entity.name.type.cairo

        E::V1(_) => 1,
         ^^ source.cairo keyword.operator.namespace.cairo

        E::V1(_) => 1,
           ^^ source.cairo meta.function.call.cairo entity.name.function.cairo

        E::V1(_) => 1,
             ^ source.cairo meta.function.call.cairo punctuation.brackets.round.cairo

        E::V1(_) => 1,
              ^ source.cairo meta.function.call.cairo variable.other.cairo

        E::V1(_) => 1,
               ^ source.cairo meta.function.call.cairo punctuation.brackets.round.cairo

        E::V1(_) => 1,
                 ^^ source.cairo keyword.operator.arrow.fat.cairo

        E::V1(_) => 1,
                    ^ source.cairo constant.numeric.decimal.cairo

        E::V1(_) => 1,
                     ^ source.cairo punctuation.comma.cairo

        E::V2(x) => 2,
        ^ source.cairo entity.name.type.cairo

        E::V2(x) => 2,
         ^^ source.cairo keyword.operator.namespace.cairo

        E::V2(x) => 2,
           ^^ source.cairo meta.function.call.cairo entity.name.function.cairo

        E::V2(x) => 2,
             ^ source.cairo meta.function.call.cairo punctuation.brackets.round.cairo

        E::V2(x) => 2,
              ^ source.cairo meta.function.call.cairo variable.other.cairo

        E::V2(x) => 2,
               ^ source.cairo meta.function.call.cairo punctuation.brackets.round.cairo

        E::V2(x) => 2,
                 ^^ source.cairo keyword.operator.arrow.fat.cairo

        E::V2(x) => 2,
                    ^ source.cairo constant.numeric.decimal.cairo

        E::V2(x) => 2,
                     ^ source.cairo punctuation.comma.cairo

        E::VEmpty => 0,
        ^ source.cairo entity.name.type.cairo

        E::VEmpty => 0,
         ^^ source.cairo keyword.operator.namespace.cairo

        E::VEmpty => 0,
           ^^^^^^ source.cairo entity.name.type.cairo

        E::VEmpty => 0,
                  ^^ source.cairo keyword.operator.arrow.fat.cairo

        E::VEmpty => 0,
                     ^ source.cairo constant.numeric.decimal.cairo

        E::VEmpty => 0,
                      ^ source.cairo punctuation.comma.cairo

    }
    ^ source.cairo punctuation.brackets.curly.cairo

}
^ source.cairo punctuation.brackets.curly.cairo

type Renamed = submod::inner::Other;
^^^^ source.cairo keyword.declaration.type.cairo storage.type.cairo

type Renamed = submod::inner::Other;
     ^^^^^^^ source.cairo entity.name.type.declaration.cairo

type Renamed = submod::inner::Other;
             ^ source.cairo keyword.operator.assignment.equal.cairo

type Renamed = submod::inner::Other;
               ^^^^^^ source.cairo entity.name.namespace.cairo

type Renamed = submod::inner::Other;
                     ^^ source.cairo keyword.operator.namespace.cairo

type Renamed = submod::inner::Other;
                       ^^^^^ source.cairo entity.name.namespace.cairo

type Renamed = submod::inner::Other;
                            ^^ source.cairo keyword.operator.namespace.cairo

type Renamed = submod::inner::Other;
                              ^^^^^ source.cairo entity.name.type.cairo

type Renamed = submod::inner::Other;
                                   ^ source.cairo punctuation.semi.cairo

type Generic<T> = super::other::OtherGeneric::<T>;
^^^^ source.cairo keyword.declaration.type.cairo storage.type.cairo

type Generic<T> = super::other::OtherGeneric::<T>;
     ^^^^^^^ source.cairo entity.name.type.declaration.cairo

type Generic<T> = super::other::OtherGeneric::<T>;
            ^ source.cairo punctuation.brackets.angle.cairo

type Generic<T> = super::other::OtherGeneric::<T>;
             ^ source.cairo entity.name.type.cairo

type Generic<T> = super::other::OtherGeneric::<T>;
              ^ source.cairo punctuation.brackets.angle.cairo

type Generic<T> = super::other::OtherGeneric::<T>;
                ^ source.cairo keyword.operator.assignment.equal.cairo

type Generic<T> = super::other::OtherGeneric::<T>;
                  ^^^^^ source.cairo variable.language.super.cairo

type Generic<T> = super::other::OtherGeneric::<T>;
                       ^^ source.cairo keyword.operator.namespace.cairo

type Generic<T> = super::other::OtherGeneric::<T>;
                         ^^^^^ source.cairo entity.name.namespace.cairo

type Generic<T> = super::other::OtherGeneric::<T>;
                              ^^ source.cairo keyword.operator.namespace.cairo

type Generic<T> = super::other::OtherGeneric::<T>;
                                ^^^^^^^^^^^^ source.cairo entity.name.type.cairo

type Generic<T> = super::other::OtherGeneric::<T>;
                                            ^^ source.cairo keyword.operator.namespace.cairo

type Generic<T> = super::other::OtherGeneric::<T>;
                                              ^ source.cairo punctuation.brackets.angle.cairo

type Generic<T> = super::other::OtherGeneric::<T>;
                                               ^ source.cairo entity.name.type.cairo

type Generic<T> = super::other::OtherGeneric::<T>;
                                                ^ source.cairo punctuation.brackets.angle.cairo

type Generic<T> = super::other::OtherGeneric::<T>;
                                                 ^ source.cairo punctuation.semi.cairo

inline_item_macro!(x, y, z);
^^^^^^^^^^^^^^^^^^ source.cairo meta.macro.cairo entity.name.function.macro.cairo

inline_item_macro!(x, y, z);
                  ^ source.cairo punctuation.brackets.round.cairo

inline_item_macro!(x, y, z);
                   ^ source.cairo variable.other.cairo

inline_item_macro!(x, y, z);
                    ^ source.cairo punctuation.comma.cairo

inline_item_macro!(x, y, z);
                      ^ source.cairo variable.other.cairo

inline_item_macro!(x, y, z);
                       ^ source.cairo punctuation.comma.cairo

inline_item_macro!(x, y, z);
                         ^ source.cairo variable.other.cairo

inline_item_macro!(x, y, z);
                          ^ source.cairo punctuation.brackets.round.cairo

inline_item_macro!(x, y, z);
                           ^ source.cairo punctuation.semi.cairo

#[attribute_without_item]
^ source.cairo meta.attribute.cairo punctuation.definition.attribute.cairo

#[attribute_without_item]
 ^ source.cairo meta.attribute.cairo punctuation.brackets.attribute.cairo

#[attribute_without_item]
  ^^^^^^^^^^^^^^^^^^^^^^ source.cairo meta.attribute.cairo

#[attribute_without_item]
                        ^ source.cairo meta.attribute.cairo punctuation.brackets.attribute.cairo

