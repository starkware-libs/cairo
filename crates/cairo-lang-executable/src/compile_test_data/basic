//! > Basic executable.

//! > test_runner_name
CompileExecutableTestRunner(expect_diagnostics: false)

//! > cairo_code
#[executable]
fn main() {}

//! > result
Compilation failed.

//! > expected_diagnostics

//! > ==========================================================================

//! > Test executable with arguments.

//! > test_runner_name
CompileExecutableTestRunner(expect_diagnostics: false)

//! > cairo_code
#[executable]
fn main(a: felt252, b: felt252) -> felt252 {
    a + b
}

//! > result
Compilation failed.

//! > expected_diagnostics

//! > ==========================================================================

//! > Test executable with recursion.

//! > test_runner_name
CompileExecutableTestRunner(expect_diagnostics: false)

//! > cairo_code
#[executable]
fn fib(a: u128, b: u128, n: u128) -> u128 {
    if n == 0 {
        a
    } else {
        fib(b, a + b, n - 1)
    }
}

//! > result
Compilation failed.

//! > expected_diagnostics

//! > ==========================================================================

//! > Test raw executable.

//! > test_runner_name
CompileExecutableTestRunner(expect_diagnostics: false)

//! > cairo_code
#[executable_raw]
fn main(mut _input: Span<felt252>, ref _output: Array<felt252>) {}

//! > result
Compilation failed.

//! > expected_diagnostics

//! > ==========================================================================

//! > Test executable with gas builtin.

//! > test_runner_name
CompileExecutableTestRunner(expect_diagnostics: false)

//! > cairo_code
#[executable]
fn require_gas() -> felt252 {
    match core::gas::withdraw_gas() {
        Some(()) => 1,
        None => 2,
    }
}

//! > result
Compilation failed.

//! > expected_diagnostics

//! > ==========================================================================

//! > Test executable with dict.

//! > test_runner_name
CompileExecutableTestRunner(expect_diagnostics: false)

//! > cairo_code
#[executable]
fn use_dict() {
    let _dict: Felt252Dict<u8> = Default::default();
}

//! > result
Compilation failed.

//! > expected_diagnostics

//! > ==========================================================================

//! > Test use System implicit with keccak.

//! > test_runner_name
CompileExecutableTestRunner(expect_diagnostics: false)

//! > cairo_code
#[executable]
fn use_system() {
    core::keccak::compute_keccak_byte_array(@"not allowed without starknet.");
}

//! > result
Compilation failed.

//! > expected_diagnostics

//! > ==========================================================================

//! > Test use System implicit with sha256.

//! > test_runner_name
CompileExecutableTestRunner(expect_diagnostics: false)

//! > cairo_code
#[executable]
fn use_system() {
    core::sha256::compute_sha256_byte_array(@"not allowed without starknet.");
}

//! > result
Compilation failed.

//! > expected_diagnostics
