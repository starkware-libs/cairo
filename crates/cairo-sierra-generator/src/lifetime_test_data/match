//! > Last use in one branch

//! > test_function_name
check_variable_lifetime

//! > function_name
foo

//! > function_code
fn foo(x: felt, y: felt) -> felt {
    if x == 0 { y } else { 0 }
}

//! > module_code

//! > lowering_format
blk0:
Inputs:
Statements:
Drops:
End:
  Callsite(v1)

blk1:
Inputs: v2: core::NonZero::<core::felt>
Statements:
  (v3: core::felt) <- 0u
Drops: v2, v1
End:
  Callsite(v3)

blk2 (root):
Inputs: v0: core::felt, v1: core::felt
Statements:
  (v4: core::felt) <- match core::felt_jump_nz(v0) {
    () => blk0,
    (v2) => blk1,
  }
Drops: v0, v1
End:
  Callsite(v4)

//! > last_use
v4: [(BlockId(2), 1)]
v1: [(BlockId(0), 0)]
v3: [(BlockId(1), 1)]
v0: [(BlockId(2), 0)]

//! > drops
BeginningOfBlock(BlockId(1)): v2, v1

//! > ==========================================================================

//! > Last use after branch

//! > test_function_name
check_variable_lifetime

//! > function_name
foo

//! > function_code
fn foo(x: felt, y: felt) -> felt {
    let z = if x == 0 { y } else { 0 };
    y
}

//! > module_code

//! > lowering_format
blk0:
Inputs:
Statements:
Drops:
End:
  Callsite(v1)

blk1:
Inputs: v2: core::NonZero::<core::felt>
Statements:
  (v3: core::felt) <- 0u
Drops: v2, v1
End:
  Callsite(v3)

blk2 (root):
Inputs: v0: core::felt, v1: core::felt
Statements:
  (v4: core::felt) <- match core::felt_jump_nz(v0) {
    () => blk0,
    (v2) => blk1,
  }
Drops: v0, v4
End:
  Callsite(v1)

//! > last_use
v1: [(BlockId(2), 1)]
v3: [(BlockId(1), 1)]
v0: [(BlockId(2), 0)]

//! > drops
PostStatement((BlockId(2), 0)): v4
BeginningOfBlock(BlockId(1)): v2

//! > ==========================================================================

//! > Last use in both branches

//! > test_function_name
check_variable_lifetime

//! > function_name
foo

//! > function_code
fn foo(x: felt, y: felt) {
    let z = if x == 0 { y } else { y + 3 };
}

//! > module_code

//! > lowering_format
blk0:
Inputs:
Statements:
Drops:
End:
  Callsite(v1)

blk1:
Inputs: v2: core::NonZero::<core::felt>
Statements:
  (v3: core::felt) <- 3u
  (v4: core::felt) <- core::felt_add(v1, v3)
Drops: v2, v1, v3
End:
  Callsite(v4)

blk2 (root):
Inputs: v0: core::felt, v1: core::felt
Statements:
  (v5: core::felt) <- match core::felt_jump_nz(v0) {
    () => blk0,
    (v2) => blk1,
  }
  (v6: ()) <- struct_construct()
Drops: v0, v1, v5
End:
  Callsite(v6)

//! > last_use
v6: [(BlockId(2), 2)]
v1: [(BlockId(0), 0), (BlockId(1), 1)]
v4: [(BlockId(1), 2)]
v3: [(BlockId(1), 1)]
v0: [(BlockId(2), 0)]

//! > drops
PostStatement((BlockId(2), 0)): v5
BeginningOfBlock(BlockId(1)): v2

//! > ==========================================================================

//! > Nested ifs

//! > test_function_name
check_variable_lifetime

//! > function_name
foo

//! > function_code
fn foo(x: felt, y: felt) {
    let z = if x == 0 {
        y
    } else {
        if x == 1 {
            if x == y {
                y
            } else {
                1234
            }
        } else {
            1000
        }
    };
}

//! > module_code

//! > lowering_format
blk0:
Inputs:
Statements:
Drops:
End:
  Callsite(v1)

blk1:
Inputs: v6: core::NonZero::<core::felt>
Statements:
  (v7: core::felt) <- 1234u
Drops: v6, v1
End:
  Callsite(v7)

blk2:
Inputs:
Statements:
  (v5: core::felt) <- core::felt_sub(v0, v1)
  (v8: core::felt) <- match core::felt_jump_nz(v5) {
    () => blk0,
    (v6) => blk1,
  }
Drops: v5
End:
  Callsite(v8)

blk3:
Inputs: v9: core::NonZero::<core::felt>
Statements:
  (v10: core::felt) <- 1000u
Drops: v9
End:
  Callsite(v10)

blk4:
Inputs:
Statements:
Drops:
End:
  Callsite(v1)

blk5:
Inputs: v2: core::NonZero::<core::felt>
Statements:
  (v3: core::felt) <- 1u
  (v4: core::felt) <- core::felt_sub(v0, v3)
  (v11: core::felt) <- match core::felt_jump_nz(v4) {
    () => blk2,
    (v9) => blk3,
  }
Drops: v2, v1, v3, v4
End:
  Callsite(v11)

blk6 (root):
Inputs: v0: core::felt, v1: core::felt
Statements:
  (v12: core::felt) <- match core::felt_jump_nz(v0) {
    () => blk4,
    (v2) => blk5,
  }
  (v13: ()) <- struct_construct()
Drops: v0, v1, v12
End:
  Callsite(v13)

//! > last_use
v13: [(BlockId(6), 2)]
v1: [(BlockId(4), 0), (BlockId(0), 0)]
v11: [(BlockId(5), 3)]
v8: [(BlockId(2), 2)]
v7: [(BlockId(1), 1)]
v5: [(BlockId(2), 1)]
v0: [(BlockId(2), 0)]
v10: [(BlockId(3), 1)]
v4: [(BlockId(5), 2)]
v3: [(BlockId(5), 1)]

//! > drops
PostStatement((BlockId(6), 0)): v12
BeginningOfBlock(BlockId(1)): v6, v1
BeginningOfBlock(BlockId(3)): v9, v1, v0
BeginningOfBlock(BlockId(5)): v2
BeginningOfBlock(BlockId(4)): v0
