//! > Test function with return type.

//! > test_comments
// TODO(spapini): Remove duplicated diagnostics.

//! > test_function_name
test_expr_diagnostics

//! > expr_code
1 + foo()

//! > module_code
3 + 4 +;

//! > function_body

//! > expected_diagnostics
error: Skipped tokens. Expected: Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/Attribute.
 --> lib.cairo:1:1
3 + 4 +;
^

error: Skipped tokens. Expected: Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/Attribute.
 --> lib.cairo:1:3
3 + 4 +;
  ^

error: Skipped tokens. Expected: Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/Attribute.
 --> lib.cairo:1:5
3 + 4 +;
    ^

error: Skipped tokens. Expected: Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/Attribute.
 --> lib.cairo:1:7
3 + 4 +;
      ^

error: Skipped tokens. Expected: Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/Attribute.
 --> lib.cairo:1:8
3 + 4 +;
       ^

error: Function not found.
 --> lib.cairo:3:5
1 + foo()
    ^*^

//! > ==========================================================================

//! > Test function lookup

//! > test_function_name
test_expr_diagnostics

//! > expr_code
{
  foo();
  core::felt_add(1,1);
  test::foo();
  bad_module::foo();
  super::foo();
  test::super::foo();
}

//! > module_code
func foo() {
}

//! > function_body

//! > expected_diagnostics
error: Identifier not found.
 --> lib.cairo:8:3
  bad_module::foo();
  ^********^

error: 'super' cannot be used for the crate's root module.
 --> lib.cairo:9:3
  super::foo();
  ^***^

error: Invalid path.
 --> lib.cairo:10:9
  test::super::foo();
        ^***^

//! > ==========================================================================

//! > Test duplicate 'ref'.

//! > test_function_name
test_expr_diagnostics

//! > expr_code
{
}

//! > module_code
func foo(ref ref v: felt) {
  let mut a = 1;
  foo(a);
}

//! > function_body

//! > expected_diagnostics
error: `ref` modifier was specified after another modifier (`ref`). Only a single modifier is allowed.
 --> lib.cairo:1:14
func foo(ref ref v: felt) {
             ^*^

//! > ==========================================================================

//! > Test bad argument for ref param (not a variable).

//! > test_function_name
test_expr_diagnostics

//! > expr_code
{
}

//! > module_code
func foo(ref v: felt) {
  foo(1);
}

//! > function_body

//! > expected_diagnostics
error: ref argument must be a variable.
 --> lib.cairo:2:7
  foo(1);
      ^

//! > ==========================================================================

//! > Test bad argument for ref param (variable not mutable).

//! > test_function_name
test_expr_diagnostics

//! > expr_code
{
}

//! > module_code
func foo(ref v: felt) {
  let a = 3;
  foo(a);
}

//! > function_body

//! > expected_diagnostics
error: ref argument must be a mutable variable.
 --> lib.cairo:3:7
  foo(a);
      ^

//! > ==========================================================================

//! > Test numerical literal of unsupported type.

//! > test_function_name
test_expr_diagnostics

//! > expr_code
{
    let a = 123_felt;
    let a = 123_u128;
    let b = 123_NonZero;
    let b = 123_u129;
}

//! > module_code
func foo() {
}

//! > function_body

//! > expected_diagnostics
error: A literal with this type cannot be created.
 --> lib.cairo:7:13
    let b = 123_NonZero;
            ^*********^

error: Unknown type.
 --> lib.cairo:8:13
    let b = 123_u129;
            ^******^
