//! > Test unexpected argument types for operators.

//! > test_function_name
test_function_diagnostics

//! > function
func foo(a: MyType) {
    a + a * a
}

//! > function_name
foo

//! > module_code
extern type MyType;

//! > expected_diagnostics
error: Unexpected argument type. Expected: "core::felt", found: "test_crate::MyType".
 --> lib.cairo:3:9
    a + a * a
        ^

error: Unexpected argument type. Expected: "core::felt", found: "test_crate::MyType".
 --> lib.cairo:3:13
    a + a * a
            ^

error: Unexpected argument type. Expected: "core::felt", found: "test_crate::MyType".
 --> lib.cairo:3:5
    a + a * a
    ^

//! > ==========================================================================

//! > Test operators.

//! > test_function_name
test_function_diagnostics

//! > function
func foo(a: felt, b: bool) {
    // Valid.
    a + a * a - a;
    b && b || b && (a == a || a > a)
    && (a<a) && (a<=a) && (a>=a);
    // Errors.
    a>a>a;
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Unexpected argument type. Expected: "core::felt", found: "core::bool".
 --> lib.cairo:7:5
    a>a>a;
    ^*^

//! > ==========================================================================

//! > Test generics substitution.

//! > test_function_name
test_function_diagnostics

//! > function
extern type A<S>;
extern func bar<T>(x:T) -> A::<T>;

func foo(a: A::<felt>) -> A::<A::<felt>> {
    let res = bar::<A::<felt>>(a);
    let bad : A::<A::<bool>> = res;
    res
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Unexpected argument type. Expected: "test_crate::A::<test_crate::A::<core::bool>>", found: "test_crate::A::<test_crate::A::<core::felt>>".
 --> lib.cairo:6:32
    let bad : A::<A::<bool>> = res;
                               ^*^

//! > ==========================================================================

//! > Test enum

//! > test_function_name
test_function_diagnostics

//! > function
enum A {
    a: (),
    b: felt,
}

func foo() {
    let a : A = A::a(());
    let a : A = A::b(5);
    let b : bool = bool::True(());
    let b : bool = true;

    // Failures.
    let a : A = A::a();
    let a : A = A::b(1,2);
    let a : A = A::a::a(());
    let a : A = A::c();
    let a : A = A::d;
    let a : A = A;
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Wrong number of arguments. Expected 1, found: 0
 --> lib.cairo:13:21
    let a : A = A::a();
                    ^^

error: Wrong number of arguments. Expected 1, found: 2
 --> lib.cairo:14:21
    let a : A = A::b(1,2);
                    ^***^

error: Invalid path.
 --> lib.cairo:15:23
    let a : A = A::a::a(());
                      ^

error: Enum test_crate::A has no variant c
 --> lib.cairo:16:20
    let a : A = A::c();
                   ^

error: Unsupported feature.
 --> lib.cairo:17:17
    let a : A = A::d;
                ^**^

error: Variable A not found.
 --> lib.cairo:18:17
    let a : A = A;
                ^
//! > ==========================================================================

//! > Test match

//! > test_function_name
test_function_diagnostics

//! > function
enum A {
    a: (),
    b: felt,
}

func foo(b: A) -> felt {
	match b {
      A::a(x) => { 1 },
      A::b(x) => { x },
	}
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
