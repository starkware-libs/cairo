// Autogenerated file.
// TODO(Gil): push the generating code and point to it from here.

use syntax::node::db::SyntaxGroup;
use syntax::node::kind::SyntaxKind;

use crate::formatter::{NodePath, SyntaxNodeFormat};

impl SyntaxNodeFormat for SyntaxKind {
    fn force_no_space_before(&self, _db: &dyn SyntaxGroup, _node_path: &NodePath) -> bool {
        // TODO(yg): add more exhaustiveness protection? Here and elsewhere.
        match &*self {
            SyntaxKind::TokenColon
            | SyntaxKind::TokenColonColon
            | SyntaxKind::TokenComma
            | SyntaxKind::TokenSemicolon
            | SyntaxKind::TokenRParen => true,
            _ => false,
        }
    }

    fn force_no_space_after(&self, _db: &dyn SyntaxGroup, node_path: &NodePath) -> bool {
        match &*self {
            SyntaxKind::TokenColonColon | SyntaxKind::TokenLParen => true,
            SyntaxKind::TokenMinus => node_path.is_parent_of_kind(SyntaxKind::ExprUnary),
            _ => false,
        }
    }

    fn should_change_indent(&self, _db: &dyn SyntaxGroup, _node_path: &NodePath) -> bool {
        match &*self {
            SyntaxKind::StatementList => true,
            _ => false,
        }
    }

    fn force_line_break(&self, _db: &dyn SyntaxGroup, node_path: &NodePath) -> bool {
        match &*self {
            SyntaxKind::StatementLet
            | SyntaxKind::StatementExpr
            | SyntaxKind::StatementReturn
            | SyntaxKind::ItemFreeFunction
            | SyntaxKind::ItemExternFunction
            | SyntaxKind::ItemTrait
            | SyntaxKind::ItemImpl
            | SyntaxKind::ItemStruct
            | SyntaxKind::ItemEnum
            | SyntaxKind::ItemUse => true,
            SyntaxKind::TokenLBrace => node_path.is_parent_of_kind(SyntaxKind::ExprBlock),
            SyntaxKind::TokenSingleLineComment => node_path.is_leading_trivia,
            _ => false,
        }
    }

    fn should_ignore(&self, _db: &dyn SyntaxGroup, _node_path: &NodePath) -> bool {
        match &*self {
            // Ignore whitespaces and newlines as those are injected by the formatter.
            SyntaxKind::TokenWhitespace
            | SyntaxKind::TokenNewline
            | SyntaxKind::TokenMissing
            | SyntaxKind::TokenBadCharacters => true,
            _ => false,
        }
    }
}
