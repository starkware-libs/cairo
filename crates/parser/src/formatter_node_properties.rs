// Autogenerated file.
// TODO(Gil): push the generating code and point to it from here.

use syntax::node::db::SyntaxGroup;
use syntax::node::kind::SyntaxKind;
use syntax::node::SyntaxNode;

use crate::formatter::SyntaxNodeFormat;

fn token_parent_kind(db: &dyn SyntaxGroup, syntax_node: &SyntaxNode) -> Option<SyntaxKind> {
    Some(syntax_node.parent()?.kind(db))
}
fn token_parent_parent_kind(db: &dyn SyntaxGroup, syntax_node: &SyntaxNode) -> Option<SyntaxKind> {
    Some(syntax_node.parent()?.parent()?.kind(db))
}

impl SyntaxNodeFormat for SyntaxNode {
    fn force_no_space_before(&self, db: &dyn SyntaxGroup) -> bool {
        // TODO(yg): add more exhaustiveness protection? Here and elsewhere.
        match self.kind(db) {
            SyntaxKind::TokenColon
            | SyntaxKind::TokenColonColon
            | SyntaxKind::TokenComma
            | SyntaxKind::TokenSemicolon
            | SyntaxKind::TokenRParen => true,
            SyntaxKind::TokenLT | SyntaxKind::TokenGT
                if matches!(
                    token_parent_parent_kind(db, self),
                    Some(SyntaxKind::PathSegmentWithGenericArgs | SyntaxKind::GenericArgs)
                ) =>
            {
                true
            }
            _ => false,
        }
    }

    fn force_no_space_after(&self, db: &dyn SyntaxGroup) -> bool {
        match self.kind(db) {
            SyntaxKind::TokenColonColon | SyntaxKind::TokenLParen => true,
            SyntaxKind::TokenMinus => {
                matches!(token_parent_parent_kind(db, self), Some(SyntaxKind::ExprUnary))
            }
            SyntaxKind::TokenLT | SyntaxKind::TokenGT
                if matches!(
                    token_parent_parent_kind(db, self),
                    Some(SyntaxKind::PathSegmentWithGenericArgs | SyntaxKind::GenericArgs)
                ) =>
            {
                true
            }
            _ => false,
        }
    }

    fn should_change_indent(&self, db: &dyn SyntaxGroup) -> bool {
        matches!(
            self.kind(db),
            SyntaxKind::StatementList
                | SyntaxKind::MatchArms
                | SyntaxKind::ExprList
                | SyntaxKind::StructArgList
                | SyntaxKind::ParamList
                | SyntaxKind::GenericParamList
                | SyntaxKind::GenericArgList
        )
    }

    fn force_line_break(&self, db: &dyn SyntaxGroup) -> bool {
        match self.kind(db) {
            SyntaxKind::StatementLet
            | SyntaxKind::StatementExpr
            | SyntaxKind::StatementReturn
            | SyntaxKind::ItemFreeFunction
            | SyntaxKind::ItemExternFunction
            | SyntaxKind::ItemTrait
            | SyntaxKind::ItemImpl
            | SyntaxKind::ItemStruct
            | SyntaxKind::ItemEnum
            | SyntaxKind::ItemUse => true,
            SyntaxKind::TerminalComma
                if matches!(token_parent_kind(db, self), Some(SyntaxKind::MatchArms)) =>
            {
                true
            }
            SyntaxKind::TerminalLBrace => {
                matches!(
                    token_parent_kind(db, self),
                    Some(SyntaxKind::ExprBlock | SyntaxKind::ExprMatch)
                )
            }
            _ => false,
        }
    }

    fn allow_newline_after(&self, db: &dyn SyntaxGroup) -> bool {
        match self.kind(db) {
            SyntaxKind::TerminalLParen => true,
            SyntaxKind::TerminalComma
                if matches!(
                    token_parent_kind(db, self),
                    Some(SyntaxKind::ParamList | SyntaxKind::ExprList | SyntaxKind::StructArgList)
                ) =>
            {
                true
            }
            _ => false,
        }
    }

    fn allowed_empty_between(&self, db: &dyn SyntaxGroup) -> usize {
        match self.kind(db) {
            SyntaxKind::ItemList => 2,
            SyntaxKind::StatementList => 1,
            _ => 0,
        }
    }
}
