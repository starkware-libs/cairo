└── root (kind: SyntaxFile)
    ├── items (kind: ItemList)
    │   ├── child #0 (kind: ItemModule)
    │   │   ├── modkw (kind: Module): 'mod'
    │   │   ├── name (kind: Identifier): 'submod'
    │   │   └── semicolon (kind: Semicolon): ';'
    │   ├── child #1 (kind: ItemUse)
    │   │   ├── usekw (kind: Use): 'use'
    │   │   ├── name (kind: ExprPath)
    │   │   │   ├── item #0 (kind: PathSegmentIdent)
    │   │   │   │   └── ident (kind: Identifier): 'submod'
    │   │   │   ├── separator #0 (kind: ColonColon): '::'
    │   │   │   └── item #1 (kind: PathSegmentIdent)
    │   │   │       └── ident (kind: Identifier): 'something'
    │   │   └── semicolon (kind: Semicolon): ';'
    │   ├── child #2 (kind: ItemFreeFunction)
    │   │   ├── funckw (kind: Function): 'func'
    │   │   ├── name (kind: Identifier): 'foo'
    │   │   ├── generic_args (kind: OptionGenericArgsEmpty) []
    │   │   ├── signature (kind: FunctionSignature)
    │   │   │   ├── lparen (kind: LParen): '('
    │   │   │   ├── parameters (kind: ParamList)
    │   │   │   │   ├── item #0 (kind: Param)
    │   │   │   │   │   ├── name (kind: Identifier): 'var1'
    │   │   │   │   │   └── type_clause (kind: TypeClause)
    │   │   │   │   │       ├── colon (kind: Colon): ':'
    │   │   │   │   │       └── ty (kind: ExprPath)
    │   │   │   │   │           └── item #0 (kind: PathSegmentIdent)
    │   │   │   │   │               └── ident (kind: Identifier): 'int'
    │   │   │   │   ├── separator #0 (kind: Comma): ','
    │   │   │   │   ├── item #1 (kind: Param)
    │   │   │   │   │   ├── name (kind: Identifier): 'var2'
    │   │   │   │   │   └── type_clause (kind: TypeClause)
    │   │   │   │   │       ├── colon (kind: Colon): ':'
    │   │   │   │   │       └── ty (kind: ExprPath)
    │   │   │   │   │           └── item #0 (kind: PathSegmentIdent)
    │   │   │   │   │               └── ident (kind: Identifier): 'felt'
    │   │   │   │   └── separator #1 (kind: Comma): ','
    │   │   │   ├── rparen (kind: RParen): ')'
    │   │   │   └── ret_ty (kind: ReturnTypeClause)
    │   │   │       ├── arrow (kind: Arrow): '->'
    │   │   │       └── ty (kind: ExprPath)
    │   │   │           └── item #0 (kind: PathSegmentIdent)
    │   │   │               └── ident (kind: Identifier): 'int'
    │   │   └── body (kind: ExprBlock)
    │   │       ├── lbrace (kind: LBrace): '{'
    │   │       ├── statements (kind: StatementList)
    │   │       │   ├── child #0 (kind: StatementLet)
    │   │       │   │   ├── letkw (kind: Let): 'let'
    │   │       │   │   ├── name (kind: Identifier): 'bla3'
    │   │       │   │   ├── type_clause (kind: OptionTypeClauseEmpty) []
    │   │       │   │   ├── eq (kind: Eq): '='
    │   │       │   │   ├── rhs (kind: ExprUnary)
    │   │       │   │   │   ├── op (kind: Minus): '-'
    │   │       │   │   │   └── expr (kind: ExprUnary)
    │   │       │   │   │       ├── op (kind: Minus): '-'
    │   │       │   │   │       └── expr (kind: ExprLiteral)
    │   │       │   │   │           └── terminal (kind: LiteralNumber): '7'
    │   │       │   │   └── semicolon (kind: Semicolon): ';'
    │   │       │   ├── child #1 (kind: StatementLet)
    │   │       │   │   ├── letkw (kind: Let): 'let'
    │   │       │   │   ├── name (kind: Identifier): 'bla4'
    │   │       │   │   ├── type_clause (kind: OptionTypeClauseEmpty) []
    │   │       │   │   ├── eq (kind: Eq): '='
    │   │       │   │   ├── rhs (kind: ExprUnary)
    │   │       │   │   │   ├── op (kind: Minus): '-'
    │   │       │   │   │   └── expr (kind: ExprUnary)
    │   │       │   │   │       ├── op (kind: Not): '!'
    │   │       │   │   │       └── expr (kind: ExprUnary)
    │   │       │   │   │           ├── op (kind: Minus): '-'
    │   │       │   │   │           └── expr (kind: ExprUnary)
    │   │       │   │   │               ├── op (kind: Not): '!'
    │   │       │   │   │               └── expr (kind: ExprLiteral)
    │   │       │   │   │                   └── terminal (kind: LiteralNumber): '8'
    │   │       │   │   └── semicolon (kind: Semicolon): ';'
    │   │       │   ├── child #2 (kind: StatementLet)
    │   │       │   │   ├── letkw (kind: Let): 'let'
    │   │       │   │   ├── name (kind: Identifier): 'x'
    │   │       │   │   ├── type_clause (kind: OptionTypeClauseEmpty) []
    │   │       │   │   ├── eq (kind: Eq): '='
    │   │       │   │   ├── rhs (kind: ExprLiteral)
    │   │       │   │   │   └── terminal (kind: LiteralNumber): '1'
    │   │       │   │   └── semicolon (kind: Semicolon): ';'
    │   │       │   ├── child #3 (kind: StatementLet)
    │   │       │   │   ├── letkw (kind: Let): 'let'
    │   │       │   │   ├── name (kind: Identifier): 'y'
    │   │       │   │   ├── type_clause (kind: OptionTypeClauseEmpty) []
    │   │       │   │   ├── eq (kind: Eq): '='
    │   │       │   │   ├── rhs (kind: ExprMatch)
    │   │       │   │   │   ├── matchkw (kind: Match): 'match'
    │   │       │   │   │   ├── expr (kind: ExprPath)
    │   │       │   │   │   │   └── item #0 (kind: PathSegmentIdent)
    │   │       │   │   │   │       └── ident (kind: Identifier): 'x'
    │   │       │   │   │   ├── lbrace (kind: LBrace): '{'
    │   │       │   │   │   ├── arms (kind: MatchArms)
    │   │       │   │   │   │   ├── item #0 (kind: MatchArm)
    │   │       │   │   │   │   │   ├── pattern (kind: ExprLiteral)
    │   │       │   │   │   │   │   │   └── terminal (kind: LiteralNumber): '0'
    │   │       │   │   │   │   │   ├── arrow (kind: MatchArrow): '=>'
    │   │       │   │   │   │   │   └── expression (kind: ExprBlock)
    │   │       │   │   │   │   │       ├── lbrace (kind: LBrace): '{'
    │   │       │   │   │   │   │       ├── statements (kind: StatementList)
    │   │       │   │   │   │   │       │   └── child #0 (kind: StatementExpr)
    │   │       │   │   │   │   │       │       ├── expr (kind: ExprLiteral)
    │   │       │   │   │   │   │       │       │   └── terminal (kind: LiteralNumber): '1'
    │   │       │   │   │   │   │       │       └── semicolon (kind: OptionSemicolonEmpty) []
    │   │       │   │   │   │   │       └── rbrace (kind: RBrace): '}'
    │   │       │   │   │   │   ├── separator #0 (kind: Comma): ','
    │   │       │   │   │   │   ├── item #1 (kind: MatchArm)
    │   │       │   │   │   │   │   ├── pattern (kind: Underscore): '_'
    │   │       │   │   │   │   │   ├── arrow (kind: MatchArrow): '=>'
    │   │       │   │   │   │   │   └── expression (kind: ExprLiteral)
    │   │       │   │   │   │   │       └── terminal (kind: LiteralNumber): '0'
    │   │       │   │   │   │   └── separator #1 (kind: Comma): ','
    │   │       │   │   │   └── rbrace (kind: RBrace): '}'
    │   │       │   │   └── semicolon (kind: Semicolon): ';'
    │   │       │   ├── child #4 (kind: StatementLet)
    │   │       │   │   ├── letkw (kind: Let): 'let'
    │   │       │   │   ├── name (kind: Identifier): 'x'
    │   │       │   │   ├── type_clause (kind: OptionTypeClauseEmpty) []
    │   │       │   │   ├── eq (kind: Eq): '='
    │   │       │   │   ├── rhs (kind: ExprLiteral)
    │   │       │   │   │   └── terminal (kind: True): 'true'
    │   │       │   │   └── semicolon (kind: Semicolon): ';'
    │   │       │   ├── child #5 (kind: StatementExpr)
    │   │       │   │   ├── expr (kind: ExprFunctionCall)
    │   │       │   │   │   ├── path (kind: ExprPath)
    │   │       │   │   │   │   └── item #0 (kind: PathSegmentIdent)
    │   │       │   │   │   │       └── ident (kind: Identifier): 'func1'
    │   │       │   │   │   └── arguments (kind: ExprListParenthesized)
    │   │       │   │   │       ├── lparen (kind: LParen): '('
    │   │       │   │   │       ├── expressions (kind: ExprList)
    │   │       │   │   │       │   └── item #0 (kind: ExprPath)
    │   │       │   │   │       │       └── item #0 (kind: PathSegmentIdent)
    │   │       │   │   │       │           └── ident (kind: Identifier): 'x'
    │   │       │   │   │       └── rparen (kind: RParen): ')'
    │   │       │   │   └── semicolon (kind: Semicolon): ';'
    │   │       │   ├── child #6 (kind: StatementExpr)
    │   │       │   │   ├── expr (kind: ExprFunctionCall)
    │   │       │   │   │   ├── path (kind: ExprPath)
    │   │       │   │   │   │   ├── item #0 (kind: PathSegmentIdent)
    │   │       │   │   │   │   │   └── ident (kind: Identifier): 'func2'
    │   │       │   │   │   │   ├── separator #0 (kind: ColonColon): '::'
    │   │       │   │   │   │   └── item #1 (kind: PathSegmentGenericArgs)
    │   │       │   │   │   │       └── generic_args (kind: OptionGenericArgsSome)
    │   │       │   │   │   │           ├── langle (kind: LT): '<'
    │   │       │   │   │   │           ├── generic_args (kind: GenericArgList)
    │   │       │   │   │   │           │   └── item #0 (kind: ExprPath)
    │   │       │   │   │   │           │       └── item #0 (kind: PathSegmentIdent)
    │   │       │   │   │   │           │           └── ident (kind: Identifier): 'int'
    │   │       │   │   │   │           └── rangle (kind: GT): '>'
    │   │       │   │   │   └── arguments (kind: ExprListParenthesized)
    │   │       │   │   │       ├── lparen (kind: LParen): '('
    │   │       │   │   │       ├── expressions (kind: ExprList)
    │   │       │   │   │       │   └── item #0 (kind: ExprPath)
    │   │       │   │   │       │       └── item #0 (kind: PathSegmentIdent)
    │   │       │   │   │       │           └── ident (kind: Identifier): 'x'
    │   │       │   │   │       └── rparen (kind: RParen): ')'
    │   │       │   │   └── semicolon (kind: OptionSemicolonEmpty) []
    │   │       │   └── child #7 (kind: StatementReturn)
    │   │       │       ├── returnkw (kind: Return): 'return'
    │   │       │       ├── expr (kind: ExprPath)
    │   │       │       │   └── item #0 (kind: PathSegmentIdent)
    │   │       │       │       └── ident (kind: Identifier): 'x'
    │   │       │       └── semicolon (kind: Semicolon): ';'
    │   │       └── rbrace: Missing
    │   ├── child #3 (kind: ItemFreeFunction)
    │   │   ├── funckw (kind: Function): 'func'
    │   │   ├── name (kind: Identifier): 'bar'
    │   │   ├── generic_args (kind: OptionGenericArgsSome)
    │   │   │   ├── langle (kind: LT): '<'
    │   │   │   ├── generic_args (kind: GenericArgList)
    │   │   │   │   ├── item #0 (kind: ExprPath)
    │   │   │   │   │   └── item #0 (kind: PathSegmentIdent)
    │   │   │   │   │       └── ident (kind: Identifier): 'A'
    │   │   │   │   ├── separator #0 (kind: Comma): ','
    │   │   │   │   └── item #1 (kind: ExprPath)
    │   │   │   │       └── item #0 (kind: PathSegmentIdent)
    │   │   │   │           └── ident (kind: Identifier): 'B'
    │   │   │   └── rangle (kind: GT): '>'
    │   │   ├── signature (kind: FunctionSignature)
    │   │   │   ├── lparen (kind: LParen): '('
    │   │   │   ├── parameters (kind: ParamList) []
    │   │   │   ├── rparen (kind: RParen): ')'
    │   │   │   └── ret_ty (kind: ReturnTypeClause)
    │   │   │       ├── arrow (kind: Arrow): '->'
    │   │   │       └── ty (kind: ExprPath)
    │   │   │           └── item #0 (kind: PathSegmentIdent)
    │   │   │               └── ident (kind: Identifier): 'felt'
    │   │   └── body (kind: ExprBlock)
    │   │       ├── lbrace (kind: LBrace): '{'
    │   │       ├── statements (kind: StatementList) []
    │   │       └── rbrace (kind: RBrace): '}'
    │   ├── child #4 (kind: ItemExternType)
    │   │   ├── externkw (kind: Extern): 'extern'
    │   │   ├── typekw (kind: Type): 'type'
    │   │   ├── name (kind: Identifier): 'S'
    │   │   ├── generic_args (kind: OptionGenericArgsSome)
    │   │   │   ├── langle (kind: LT): '<'
    │   │   │   ├── generic_args (kind: GenericArgList) []
    │   │   │   └── rangle (kind: GT): '>'
    │   │   └── semicolon (kind: Semicolon): ';'
    │   ├── child #5 (kind: ItemExternFunction)
    │   │   ├── externkw (kind: Extern): 'extern'
    │   │   ├── funckw (kind: Function): 'func'
    │   │   ├── name (kind: Identifier): 'glee'
    │   │   ├── generic_args (kind: OptionGenericArgsSome)
    │   │   │   ├── langle (kind: LT): '<'
    │   │   │   ├── generic_args (kind: GenericArgList)
    │   │   │   │   ├── item #0 (kind: ExprPath)
    │   │   │   │   │   └── item #0 (kind: PathSegmentIdent)
    │   │   │   │   │       └── ident (kind: Identifier): 'A'
    │   │   │   │   ├── separator #0 (kind: Comma): ','
    │   │   │   │   └── item #1 (kind: ExprPath)
    │   │   │   │       └── item #0 (kind: PathSegmentIdent)
    │   │   │   │           └── ident (kind: Identifier): 'b'
    │   │   │   └── rangle (kind: GT): '>'
    │   │   ├── signature (kind: FunctionSignature)
    │   │   │   ├── lparen (kind: LParen): '('
    │   │   │   ├── parameters (kind: ParamList)
    │   │   │   │   ├── item #0 (kind: Param)
    │   │   │   │   │   ├── name (kind: Identifier): 'var1'
    │   │   │   │   │   └── type_clause (kind: TypeClause)
    │   │   │   │   │       ├── colon (kind: Colon): ':'
    │   │   │   │   │       └── ty (kind: ExprPath)
    │   │   │   │   │           └── item #0 (kind: PathSegmentIdent)
    │   │   │   │   │               └── ident (kind: Identifier): 'int'
    │   │   │   │   └── separator #0 (kind: Comma): ','
    │   │   │   ├── rparen (kind: RParen): ')'
    │   │   │   └── ret_ty (kind: ReturnTypeClause)
    │   │   │       ├── arrow (kind: Arrow): '->'
    │   │   │       └── ty (kind: ExprPath)
    │   │   │           ├── item #0 (kind: PathSegmentIdent)
    │   │   │           │   └── ident (kind: Identifier): 'crate'
    │   │   │           ├── separator #0 (kind: ColonColon): '::'
    │   │   │           └── item #1 (kind: PathSegmentIdent)
    │   │   │               └── ident (kind: Identifier): 'S'
    │   │   └── semicolon: Missing
    │   └── child #6 (kind: ItemStruct)
    │       ├── structkw (kind: Struct): 'struct'
    │       ├── name (kind: Identifier): 'A'
    │       ├── generic_args (kind: OptionGenericArgsSome)
    │       │   ├── langle (kind: LT): '<'
    │       │   ├── generic_args (kind: GenericArgList)
    │       │   │   ├── item #0 (kind: ExprPath)
    │       │   │   │   └── item #0 (kind: PathSegmentIdent)
    │       │   │   │       └── ident (kind: Identifier): 'A'
    │       │   │   ├── separator #0 (kind: Comma): ','
    │       │   │   └── item #1 (kind: ExprPath)
    │       │   │       └── item #0 (kind: PathSegmentIdent)
    │       │   │           └── ident (kind: Identifier): 'B'
    │       │   └── rangle (kind: GT): '>'
    │       ├── lbrace (kind: LBrace): '{'
    │       ├── members (kind: ParamList)
    │       │   ├── item #0 (kind: Param)
    │       │   │   ├── name (kind: Identifier): 'member'
    │       │   │   └── type_clause (kind: TypeClause)
    │       │   │       ├── colon (kind: Colon): ':'
    │       │   │       └── ty (kind: ExprPath)
    │       │   │           └── item #0 (kind: PathSegmentIdent)
    │       │   │               └── ident (kind: Identifier): 'bool'
    │       │   ├── separator #0 (kind: Comma): ','
    │       │   └── item #1 (kind: Param)
    │       │       ├── name (kind: Identifier): 'member2'
    │       │       └── type_clause (kind: TypeClause)
    │       │           ├── colon (kind: Colon): ':'
    │       │           └── ty (kind: ExprTuple)
    │       │               ├── lparen (kind: LParen): '('
    │       │               ├── expressions (kind: ExprList)
    │       │               │   ├── item #0 (kind: ExprPath)
    │       │               │   │   └── item #0 (kind: PathSegmentIdent)
    │       │               │   │       └── ident (kind: Identifier): 'bool'
    │       │               │   ├── separator #0 (kind: Comma): ','
    │       │               │   ├── item #1 (kind: ExprPath)
    │       │               │   │   └── item #0 (kind: PathSegmentIdent)
    │       │               │   │       └── ident (kind: Identifier): 'felt'
    │       │               │   ├── separator #1 (kind: Comma): ','
    │       │               │   └── item #2 (kind: ExprTuple)
    │       │               │       ├── lparen (kind: LParen): '('
    │       │               │       ├── expressions (kind: ExprList) []
    │       │               │       └── rparen (kind: RParen): ')'
    │       │               └── rparen (kind: RParen): ')'
    │       └── rbrace (kind: RBrace): '}'
    └── eof (kind: EndOfFile).
--------------------
error: Skipped tokens. Expected element: item.
 --> test1.cairo:6:1
;
^

error: Skipped tokens. Expected element: parameter.
 --> test1.cairo:7:10
func foo(,var1: int,, var2: felt,) -> int {
         ^

error: Skipped tokens. Expected element: parameter.
 --> test1.cairo:7:21
func foo(,var1: int,, var2: felt,) -> int {
                    ^

error: Missing token RBrace.
 --> test1.cairo:21:1
func bar<A, B>() -> felt { }
^**^

error: Missing token Semicolon.
 --> test1.cairo:24:47
extern func glee<A, b>(var1: int,) -> crate::S<int>;
                                              ^

error: Skipped tokens. Expected element: item.
 --> test1.cairo:24:47
extern func glee<A, b>(var1: int,) -> crate::S<int>;
                                              ^

error: Skipped tokens. Expected element: item.
 --> test1.cairo:24:48
extern func glee<A, b>(var1: int,) -> crate::S<int>;
                                               ^*^

error: Skipped tokens. Expected element: item.
 --> test1.cairo:24:51
extern func glee<A, b>(var1: int,) -> crate::S<int>;
                                                  ^

error: Skipped tokens. Expected element: item.
 --> test1.cairo:24:52
extern func glee<A, b>(var1: int,) -> crate::S<int>;
                                                   ^

