└── root (kind: SyntaxFile)
    ├── items (kind: ItemList)
    │   ├── child #0 (kind: ItemModule)
    │   │   ├── attributes (kind: AttributeList) []
    │   │   ├── module_kw (kind: TokenModule): 'mod'
    │   │   ├── name (kind: TokenIdentifier): 'submod'
    │   │   └── body (kind: TokenSemicolon): ';'
    │   ├── child #1 (kind: ItemUse)
    │   │   ├── attributes (kind: AttributeList) []
    │   │   ├── use_kw (kind: TokenUse): 'use'
    │   │   ├── name (kind: ExprPath)
    │   │   │   ├── item #0 (kind: PathSegmentSimple)
    │   │   │   │   └── ident (kind: TokenIdentifier): 'submod'
    │   │   │   ├── separator #0 (kind: TokenColonColon): '::'
    │   │   │   └── item #1 (kind: PathSegmentSimple)
    │   │   │       └── ident (kind: TokenIdentifier): 'something'
    │   │   └── semicolon (kind: TokenSemicolon): ';'
    │   ├── child #2 (kind: ItemFreeFunction)
    │   │   ├── attributes (kind: AttributeList) []
    │   │   ├── function_kw (kind: TokenFunction): 'func'
    │   │   ├── name (kind: TokenIdentifier): 'foo'
    │   │   ├── generic_params (kind: OptionWrappedGenericParamListEmpty) []
    │   │   ├── signature (kind: FunctionSignature)
    │   │   │   ├── lparen (kind: TokenLParen): '('
    │   │   │   ├── parameters (kind: ParamList)
    │   │   │   │   ├── item #0 (kind: Param)
    │   │   │   │   │   ├── modifiers (kind: ModifierList) []
    │   │   │   │   │   ├── name (kind: TokenIdentifier): 'var1'
    │   │   │   │   │   └── type_clause (kind: TypeClause)
    │   │   │   │   │       ├── colon (kind: TokenColon): ':'
    │   │   │   │   │       └── ty (kind: ExprPath)
    │   │   │   │   │           └── item #0 (kind: PathSegmentSimple)
    │   │   │   │   │               └── ident (kind: TokenIdentifier): 'int'
    │   │   │   │   ├── separator #0 (kind: TokenComma): ','
    │   │   │   │   ├── item #1 (kind: Param)
    │   │   │   │   │   ├── modifiers (kind: ModifierList)
    │   │   │   │   │   │   ├── child #0 (kind: TokenMut): 'mut'
    │   │   │   │   │   │   └── child #1 (kind: TokenRef): 'ref'
    │   │   │   │   │   ├── name (kind: TokenIdentifier): 'var2'
    │   │   │   │   │   └── type_clause (kind: TypeClause)
    │   │   │   │   │       ├── colon (kind: TokenColon): ':'
    │   │   │   │   │       └── ty (kind: ExprPath)
    │   │   │   │   │           └── item #0 (kind: PathSegmentSimple)
    │   │   │   │   │               └── ident (kind: TokenIdentifier): 'felt'
    │   │   │   │   └── separator #1 (kind: TokenComma): ','
    │   │   │   ├── rparen (kind: TokenRParen): ')'
    │   │   │   ├── ret_ty (kind: ReturnTypeClause)
    │   │   │   │   ├── arrow (kind: TokenArrow): '->'
    │   │   │   │   └── ty (kind: ExprPath)
    │   │   │   │       └── item #0 (kind: PathSegmentSimple)
    │   │   │   │           └── ident (kind: TokenIdentifier): 'int'
    │   │   │   ├── implicits_clause (kind: OptionImplicitsClauseEmpty) []
    │   │   │   └── optional_no_panic (kind: OptionTerminalNoPanicEmpty) []
    │   │   └── body (kind: ExprBlock)
    │   │       ├── lbrace (kind: TokenLBrace): '{'
    │   │       ├── statements (kind: StatementList)
    │   │       │   ├── child #0 (kind: StatementLet)
    │   │       │   │   ├── let_kw (kind: TokenLet): 'let'
    │   │       │   │   ├── pattern (kind: ExprPath)
    │   │       │   │   │   └── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │       └── ident (kind: TokenIdentifier): 'bla3'
    │   │       │   │   ├── type_clause (kind: OptionTypeClauseEmpty) []
    │   │       │   │   ├── eq (kind: TokenEq): '='
    │   │       │   │   ├── rhs (kind: ExprUnary)
    │   │       │   │   │   ├── op (kind: TokenMinus): '-'
    │   │       │   │   │   └── expr (kind: ExprUnary)
    │   │       │   │   │       ├── op (kind: TokenMinus): '-'
    │   │       │   │   │       └── expr (kind: TokenLiteralNumber): '7'
    │   │       │   │   └── semicolon (kind: TokenSemicolon): ';'
    │   │       │   ├── child #1 (kind: StatementLet)
    │   │       │   │   ├── let_kw (kind: TokenLet): 'let'
    │   │       │   │   ├── pattern (kind: ExprPath)
    │   │       │   │   │   └── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │       └── ident (kind: TokenIdentifier): 'bla4'
    │   │       │   │   ├── type_clause (kind: OptionTypeClauseEmpty) []
    │   │       │   │   ├── eq (kind: TokenEq): '='
    │   │       │   │   ├── rhs (kind: ExprUnary)
    │   │       │   │   │   ├── op (kind: TokenMinus): '-'
    │   │       │   │   │   └── expr (kind: ExprUnary)
    │   │       │   │   │       ├── op (kind: TokenNot): '!'
    │   │       │   │   │       └── expr (kind: ExprUnary)
    │   │       │   │   │           ├── op (kind: TokenMinus): '-'
    │   │       │   │   │           └── expr (kind: ExprUnary)
    │   │       │   │   │               ├── op (kind: TokenNot): '!'
    │   │       │   │   │               └── expr (kind: TokenLiteralNumber): '8'
    │   │       │   │   └── semicolon (kind: TokenSemicolon): ';'
    │   │       │   ├── child #2 (kind: StatementLet)
    │   │       │   │   ├── let_kw (kind: TokenLet): 'let'
    │   │       │   │   ├── pattern (kind: ExprPath)
    │   │       │   │   │   └── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │       └── ident (kind: TokenIdentifier): 'x'
    │   │       │   │   ├── type_clause (kind: OptionTypeClauseEmpty) []
    │   │       │   │   ├── eq (kind: TokenEq): '='
    │   │       │   │   ├── rhs (kind: TokenLiteralNumber): '1'
    │   │       │   │   └── semicolon (kind: TokenSemicolon): ';'
    │   │       │   ├── child #3 (kind: StatementLet)
    │   │       │   │   ├── let_kw (kind: TokenLet): 'let'
    │   │       │   │   ├── pattern (kind: ExprPath)
    │   │       │   │   │   └── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │       └── ident (kind: TokenIdentifier): 'y'
    │   │       │   │   ├── type_clause (kind: OptionTypeClauseEmpty) []
    │   │       │   │   ├── eq (kind: TokenEq): '='
    │   │       │   │   ├── rhs (kind: ExprMatch)
    │   │       │   │   │   ├── match_kw (kind: TokenMatch): 'match'
    │   │       │   │   │   ├── expr (kind: ExprPath)
    │   │       │   │   │   │   └── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │   │       └── ident (kind: TokenIdentifier): 'x'
    │   │       │   │   │   ├── lbrace (kind: TokenLBrace): '{'
    │   │       │   │   │   ├── arms (kind: MatchArms)
    │   │       │   │   │   │   ├── item #0 (kind: MatchArm)
    │   │       │   │   │   │   │   ├── pattern (kind: TokenLiteralNumber): '0'
    │   │       │   │   │   │   │   ├── arrow (kind: TokenMatchArrow): '=>'
    │   │       │   │   │   │   │   └── expression (kind: ExprBlock)
    │   │       │   │   │   │   │       ├── lbrace (kind: TokenLBrace): '{'
    │   │       │   │   │   │   │       ├── statements (kind: StatementList)
    │   │       │   │   │   │   │       │   └── child #0 (kind: StatementExpr)
    │   │       │   │   │   │   │       │       ├── expr (kind: TokenLiteralNumber): '1'
    │   │       │   │   │   │   │       │       └── semicolon (kind: OptionTerminalSemicolonEmpty) []
    │   │       │   │   │   │   │       └── rbrace (kind: TokenRBrace): '}'
    │   │       │   │   │   │   ├── separator #0 (kind: TokenComma): ','
    │   │       │   │   │   │   ├── item #1 (kind: MatchArm)
    │   │       │   │   │   │   │   ├── pattern (kind: TokenUnderscore): '_'
    │   │       │   │   │   │   │   ├── arrow (kind: TokenMatchArrow): '=>'
    │   │       │   │   │   │   │   └── expression (kind: TokenLiteralNumber): '0'
    │   │       │   │   │   │   └── separator #1 (kind: TokenComma): ','
    │   │       │   │   │   └── rbrace (kind: TokenRBrace): '}'
    │   │       │   │   └── semicolon (kind: TokenSemicolon): ';'
    │   │       │   ├── child #4 (kind: StatementLet)
    │   │       │   │   ├── let_kw (kind: TokenLet): 'let'
    │   │       │   │   ├── pattern (kind: ExprPath)
    │   │       │   │   │   └── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │       └── ident (kind: TokenIdentifier): 'z'
    │   │       │   │   ├── type_clause (kind: OptionTypeClauseEmpty) []
    │   │       │   │   ├── eq (kind: TokenEq): '='
    │   │       │   │   ├── rhs (kind: ExprIf)
    │   │       │   │   │   ├── if_kw (kind: TokenIf): 'if'
    │   │       │   │   │   ├── condition (kind: ExprBinary)
    │   │       │   │   │   │   ├── lhs (kind: ExprBinary)
    │   │       │   │   │   │   │   ├── lhs (kind: TokenLiteralNumber): '0'
    │   │       │   │   │   │   │   ├── op (kind: TokenPlus): '+'
    │   │       │   │   │   │   │   └── rhs (kind: ExprPath)
    │   │       │   │   │   │   │       └── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │   │   │           └── ident (kind: TokenIdentifier): 'x'
    │   │       │   │   │   │   ├── op (kind: TokenEqEq): '=='
    │   │       │   │   │   │   └── rhs (kind: ExprPath)
    │   │       │   │   │   │       └── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │   │           └── ident (kind: TokenIdentifier): 'y'
    │   │       │   │   │   ├── if_block (kind: ExprBlock)
    │   │       │   │   │   │   ├── lbrace (kind: TokenLBrace): '{'
    │   │       │   │   │   │   ├── statements (kind: StatementList)
    │   │       │   │   │   │   │   └── child #0 (kind: StatementExpr)
    │   │       │   │   │   │   │       ├── expr (kind: TokenLiteralNumber): '1'
    │   │       │   │   │   │   │       └── semicolon (kind: OptionTerminalSemicolonEmpty) []
    │   │       │   │   │   │   └── rbrace (kind: TokenRBrace): '}'
    │   │       │   │   │   └── else_clause (kind: ElseClause)
    │   │       │   │   │       ├── else_kw (kind: TokenElse): 'else'
    │   │       │   │   │       └── else_block_or_if (kind: ExprBlock)
    │   │       │   │   │           ├── lbrace (kind: TokenLBrace): '{'
    │   │       │   │   │           ├── statements (kind: StatementList)
    │   │       │   │   │           │   └── child #0 (kind: StatementExpr)
    │   │       │   │   │           │       ├── expr (kind: TokenLiteralNumber): '2'
    │   │       │   │   │           │       └── semicolon (kind: OptionTerminalSemicolonEmpty) []
    │   │       │   │   │           └── rbrace (kind: TokenRBrace): '}'
    │   │       │   │   └── semicolon (kind: TokenSemicolon): ';'
    │   │       │   ├── child #5 (kind: StatementLet)
    │   │       │   │   ├── let_kw (kind: TokenLet): 'let'
    │   │       │   │   ├── pattern (kind: ExprPath)
    │   │       │   │   │   └── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │       └── ident (kind: TokenIdentifier): 'block_combination'
    │   │       │   │   ├── type_clause (kind: OptionTypeClauseEmpty) []
    │   │       │   │   ├── eq (kind: TokenEq): '='
    │   │       │   │   ├── rhs (kind: ExprBinary)
    │   │       │   │   │   ├── lhs (kind: ExprBinary)
    │   │       │   │   │   │   ├── lhs (kind: ExprBlock)
    │   │       │   │   │   │   │   ├── lbrace (kind: TokenLBrace): '{'
    │   │       │   │   │   │   │   ├── statements (kind: StatementList)
    │   │       │   │   │   │   │   │   └── child #0 (kind: StatementExpr)
    │   │       │   │   │   │   │   │       ├── expr (kind: TokenLiteralNumber): '5'
    │   │       │   │   │   │   │   │       └── semicolon (kind: OptionTerminalSemicolonEmpty) []
    │   │       │   │   │   │   │   └── rbrace (kind: TokenRBrace): '}'
    │   │       │   │   │   │   ├── op (kind: TokenPlus): '+'
    │   │       │   │   │   │   └── rhs (kind: ExprMatch)
    │   │       │   │   │   │       ├── match_kw (kind: TokenMatch): 'match'
    │   │       │   │   │   │       ├── expr (kind: ExprPath)
    │   │       │   │   │   │       │   └── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │   │       │       └── ident (kind: TokenIdentifier): 'x'
    │   │       │   │   │   │       ├── lbrace (kind: TokenLBrace): '{'
    │   │       │   │   │   │       ├── arms (kind: MatchArms)
    │   │       │   │   │   │       │   ├── item #0 (kind: MatchArm)
    │   │       │   │   │   │       │   │   ├── pattern (kind: PatternEnum)
    │   │       │   │   │   │       │   │   │   ├── path (kind: ExprPath)
    │   │       │   │   │   │       │   │   │   │   ├── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │   │       │   │   │   │   │   └── ident (kind: TokenIdentifier): 'E'
    │   │       │   │   │   │       │   │   │   │   ├── separator #0 (kind: TokenColonColon): '::'
    │   │       │   │   │   │       │   │   │   │   └── item #1 (kind: PathSegmentSimple)
    │   │       │   │   │   │       │   │   │   │       └── ident (kind: TokenIdentifier): 'V1'
    │   │       │   │   │   │       │   │   │   ├── lparen (kind: TokenLParen): '('
    │   │       │   │   │   │       │   │   │   ├── pattern (kind: TokenUnderscore): '_'
    │   │       │   │   │   │       │   │   │   └── rparen (kind: TokenRParen): ')'
    │   │       │   │   │   │       │   │   ├── arrow (kind: TokenMatchArrow): '=>'
    │   │       │   │   │   │       │   │   └── expression (kind: TokenLiteralNumber): '4'
    │   │       │   │   │   │       │   ├── separator #0 (kind: TokenComma): ','
    │   │       │   │   │   │       │   └── item #1 (kind: MatchArm)
    │   │       │   │   │   │       │       ├── pattern (kind: PatternEnum)
    │   │       │   │   │   │       │       │   ├── path (kind: ExprPath)
    │   │       │   │   │   │       │       │   │   ├── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │   │       │       │   │   │   └── ident (kind: TokenIdentifier): 'E'
    │   │       │   │   │   │       │       │   │   ├── separator #0 (kind: TokenColonColon): '::'
    │   │       │   │   │   │       │       │   │   └── item #1 (kind: PathSegmentSimple)
    │   │       │   │   │   │       │       │   │       └── ident (kind: TokenIdentifier): 'V2'
    │   │       │   │   │   │       │       │   ├── lparen (kind: TokenLParen): '('
    │   │       │   │   │   │       │       │   ├── pattern (kind: TokenUnderscore): '_'
    │   │       │   │   │   │       │       │   └── rparen (kind: TokenRParen): ')'
    │   │       │   │   │   │       │       ├── arrow (kind: TokenMatchArrow): '=>'
    │   │       │   │   │   │       │       └── expression (kind: TokenLiteralNumber): '2'
    │   │       │   │   │   │       └── rbrace (kind: TokenRBrace): '}'
    │   │       │   │   │   ├── op (kind: TokenMinus): '-'
    │   │       │   │   │   └── rhs (kind: ExprIf)
    │   │       │   │   │       ├── if_kw (kind: TokenIf): 'if'
    │   │       │   │   │       ├── condition (kind: ExprPath)
    │   │       │   │   │       │   └── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │       │       └── ident (kind: TokenIdentifier): 'cond'
    │   │       │   │   │       ├── if_block (kind: ExprBlock)
    │   │       │   │   │       │   ├── lbrace (kind: TokenLBrace): '{'
    │   │       │   │   │       │   ├── statements (kind: StatementList)
    │   │       │   │   │       │   │   └── child #0 (kind: StatementExpr)
    │   │       │   │   │       │   │       ├── expr (kind: TokenLiteralNumber): '32'
    │   │       │   │   │       │   │       └── semicolon (kind: OptionTerminalSemicolonEmpty) []
    │   │       │   │   │       │   └── rbrace (kind: TokenRBrace): '}'
    │   │       │   │   │       └── else_clause (kind: ElseClause)
    │   │       │   │   │           ├── else_kw (kind: TokenElse): 'else'
    │   │       │   │   │           └── else_block_or_if (kind: ExprBlock)
    │   │       │   │   │               ├── lbrace (kind: TokenLBrace): '{'
    │   │       │   │   │               ├── statements (kind: StatementList)
    │   │       │   │   │               │   └── child #0 (kind: StatementExpr)
    │   │       │   │   │               │       ├── expr (kind: TokenLiteralNumber): '1'
    │   │       │   │   │               │       └── semicolon (kind: OptionTerminalSemicolonEmpty) []
    │   │       │   │   │               └── rbrace (kind: TokenRBrace): '}'
    │   │       │   │   └── semicolon (kind: TokenSemicolon): ';'
    │   │       │   ├── child #6 (kind: StatementLet)
    │   │       │   │   ├── let_kw (kind: TokenLet): 'let'
    │   │       │   │   ├── pattern (kind: ExprPath)
    │   │       │   │   │   └── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │       └── ident (kind: TokenIdentifier): 'w'
    │   │       │   │   ├── type_clause (kind: OptionTypeClauseEmpty) []
    │   │       │   │   ├── eq (kind: TokenEq): '='
    │   │       │   │   ├── rhs (kind: ExprErrorPropagate)
    │   │       │   │   │   ├── expr (kind: ExprFunctionCall)
    │   │       │   │   │   │   ├── path (kind: ExprPath)
    │   │       │   │   │   │   │   └── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │   │   │       └── ident (kind: TokenIdentifier): 'calc_with_error'
    │   │       │   │   │   │   └── arguments (kind: ExprListParenthesized)
    │   │       │   │   │   │       ├── lparen (kind: TokenLParen): '('
    │   │       │   │   │   │       ├── expressions (kind: ExprList)
    │   │       │   │   │   │       │   ├── item #0 (kind: ExprPath)
    │   │       │   │   │   │       │   │   └── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │   │       │   │       └── ident (kind: TokenIdentifier): 'x'
    │   │       │   │   │   │       │   ├── separator #0 (kind: TokenComma): ','
    │   │       │   │   │   │       │   ├── item #1 (kind: ExprErrorPropagate)
    │   │       │   │   │   │       │   │   ├── expr (kind: ExprPath)
    │   │       │   │   │   │       │   │   │   └── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │   │       │   │   │       └── ident (kind: TokenIdentifier): 'y'
    │   │       │   │   │   │       │   │   └── op (kind: TokenQuestionMark): '?'
    │   │       │   │   │   │       │   ├── separator #1 (kind: TokenComma): ','
    │   │       │   │   │   │       │   └── item #2 (kind: ExprPath)
    │   │       │   │   │   │       │       └── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │   │       │           └── ident (kind: TokenIdentifier): 'z'
    │   │       │   │   │   │       └── rparen (kind: TokenRParen): ')'
    │   │       │   │   │   └── op (kind: TokenQuestionMark): '?'
    │   │       │   │   └── semicolon (kind: TokenSemicolon): ';'
    │   │       │   ├── child #7 (kind: StatementLet)
    │   │       │   │   ├── let_kw (kind: TokenLet): 'let'
    │   │       │   │   ├── pattern (kind: ExprPath)
    │   │       │   │   │   └── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │       └── ident (kind: TokenIdentifier): 'x'
    │   │       │   │   ├── type_clause (kind: OptionTypeClauseEmpty) []
    │   │       │   │   ├── eq (kind: TokenEq): '='
    │   │       │   │   ├── rhs (kind: TokenTrue): 'true'
    │   │       │   │   └── semicolon (kind: TokenSemicolon): ';'
    │   │       │   ├── child #8 (kind: StatementExpr)
    │   │       │   │   ├── expr (kind: ExprBinary)
    │   │       │   │   │   ├── lhs (kind: ExprPath)
    │   │       │   │   │   │   └── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │   │       └── ident (kind: TokenIdentifier): 'z'
    │   │       │   │   │   ├── op (kind: TokenEq): '='
    │   │       │   │   │   └── rhs (kind: TokenLiteralNumber): '5'
    │   │       │   │   └── semicolon (kind: TokenSemicolon): ';'
    │   │       │   ├── child #9 (kind: StatementExpr)
    │   │       │   │   ├── expr (kind: ExprFunctionCall)
    │   │       │   │   │   ├── path (kind: ExprPath)
    │   │       │   │   │   │   └── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │   │       └── ident (kind: TokenIdentifier): 'func1'
    │   │       │   │   │   └── arguments (kind: ExprListParenthesized)
    │   │       │   │   │       ├── lparen (kind: TokenLParen): '('
    │   │       │   │   │       ├── expressions (kind: ExprList)
    │   │       │   │   │       │   └── item #0 (kind: ExprPath)
    │   │       │   │   │       │       └── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │       │           └── ident (kind: TokenIdentifier): 'x'
    │   │       │   │   │       └── rparen (kind: TokenRParen): ')'
    │   │       │   │   └── semicolon (kind: TokenSemicolon): ';'
    │   │       │   ├── child #10 (kind: StatementExpr)
    │   │       │   │   ├── expr (kind: ExprFunctionCall)
    │   │       │   │   │   ├── path (kind: ExprPath)
    │   │       │   │   │   │   └── item #0 (kind: PathSegmentWithGenericArgs)
    │   │       │   │   │   │       ├── ident (kind: TokenIdentifier): 'func2'
    │   │       │   │   │   │       ├── separator (kind: TokenColonColon): '::'
    │   │       │   │   │   │       └── generic_args (kind: GenericArgs)
    │   │       │   │   │   │           ├── langle (kind: TokenLT): '<'
    │   │       │   │   │   │           ├── generic_args (kind: GenericArgList)
    │   │       │   │   │   │           │   └── item #0 (kind: ExprPath)
    │   │       │   │   │   │           │       └── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │   │           │           └── ident (kind: TokenIdentifier): 'int'
    │   │       │   │   │   │           └── rangle (kind: TokenGT): '>'
    │   │       │   │   │   └── arguments (kind: ExprListParenthesized)
    │   │       │   │   │       ├── lparen (kind: TokenLParen): '('
    │   │       │   │   │       ├── expressions (kind: ExprList)
    │   │       │   │   │       │   └── item #0 (kind: ExprPath)
    │   │       │   │   │       │       └── item #0 (kind: PathSegmentSimple)
    │   │       │   │   │       │           └── ident (kind: TokenIdentifier): 'x'
    │   │       │   │   │       └── rparen (kind: TokenRParen): ')'
    │   │       │   │   └── semicolon (kind: OptionTerminalSemicolonEmpty) []
    │   │       │   └── child #11 (kind: StatementReturn)
    │   │       │       ├── return_kw (kind: TokenReturn): 'return'
    │   │       │       ├── expr (kind: ExprPath)
    │   │       │       │   └── item #0 (kind: PathSegmentSimple)
    │   │       │       │       └── ident (kind: TokenIdentifier): 'x'
    │   │       │       └── semicolon (kind: TokenSemicolon): ';'
    │   │       └── rbrace: Missing
    │   ├── child #3 (kind: ItemFreeFunction)
    │   │   ├── attributes (kind: AttributeList) []
    │   │   ├── function_kw (kind: TokenFunction): 'func'
    │   │   ├── name (kind: TokenIdentifier): 'bar'
    │   │   ├── generic_params (kind: WrappedGenericParamList)
    │   │   │   ├── langle (kind: TokenLT): '<'
    │   │   │   ├── generic_params (kind: GenericParamList)
    │   │   │   │   ├── item #0 (kind: GenericParam)
    │   │   │   │   │   └── name (kind: TokenIdentifier): 'A'
    │   │   │   │   ├── separator #0 (kind: TokenComma): ','
    │   │   │   │   └── item #1 (kind: GenericParam)
    │   │   │   │       └── name (kind: TokenIdentifier): 'B'
    │   │   │   └── rangle (kind: TokenGT): '>'
    │   │   ├── signature (kind: FunctionSignature)
    │   │   │   ├── lparen (kind: TokenLParen): '('
    │   │   │   ├── parameters (kind: ParamList) []
    │   │   │   ├── rparen (kind: TokenRParen): ')'
    │   │   │   ├── ret_ty (kind: ReturnTypeClause)
    │   │   │   │   ├── arrow (kind: TokenArrow): '->'
    │   │   │   │   └── ty (kind: ExprPath)
    │   │   │   │       └── item #0 (kind: PathSegmentSimple)
    │   │   │   │           └── ident (kind: TokenIdentifier): 'felt'
    │   │   │   ├── implicits_clause (kind: OptionImplicitsClauseEmpty) []
    │   │   │   └── optional_no_panic (kind: OptionTerminalNoPanicEmpty) []
    │   │   └── body (kind: ExprBlock)
    │   │       ├── lbrace (kind: TokenLBrace): '{'
    │   │       ├── statements (kind: StatementList) []
    │   │       └── rbrace (kind: TokenRBrace): '}'
    │   ├── child #4 (kind: ItemExternType)
    │   │   ├── extern_kw (kind: TokenExtern): 'extern'
    │   │   ├── type_kw (kind: TokenType): 'type'
    │   │   ├── name (kind: TokenIdentifier): 'S'
    │   │   ├── generic_params (kind: WrappedGenericParamList)
    │   │   │   ├── langle (kind: TokenLT): '<'
    │   │   │   ├── generic_params (kind: GenericParamList) []
    │   │   │   └── rangle (kind: TokenGT): '>'
    │   │   └── semicolon (kind: TokenSemicolon): ';'
    │   ├── child #5 (kind: ItemExternFunction)
    │   │   ├── attributes (kind: AttributeList) []
    │   │   ├── extern_kw (kind: TokenExtern): 'extern'
    │   │   ├── function_kw (kind: TokenFunction): 'func'
    │   │   ├── name (kind: TokenIdentifier): 'glee'
    │   │   ├── generic_params (kind: WrappedGenericParamList)
    │   │   │   ├── langle (kind: TokenLT): '<'
    │   │   │   ├── generic_params (kind: GenericParamList)
    │   │   │   │   ├── item #0 (kind: GenericParam)
    │   │   │   │   │   └── name (kind: TokenIdentifier): 'A'
    │   │   │   │   ├── separator #0 (kind: TokenComma): ','
    │   │   │   │   └── item #1 (kind: GenericParam)
    │   │   │   │       └── name (kind: TokenIdentifier): 'b'
    │   │   │   └── rangle (kind: TokenGT): '>'
    │   │   ├── signature (kind: FunctionSignature)
    │   │   │   ├── lparen (kind: TokenLParen): '('
    │   │   │   ├── parameters (kind: ParamList)
    │   │   │   │   ├── item #0 (kind: Param)
    │   │   │   │   │   ├── modifiers (kind: ModifierList) []
    │   │   │   │   │   ├── name (kind: TokenIdentifier): 'var1'
    │   │   │   │   │   └── type_clause (kind: TypeClause)
    │   │   │   │   │       ├── colon (kind: TokenColon): ':'
    │   │   │   │   │       └── ty (kind: ExprPath)
    │   │   │   │   │           └── item #0 (kind: PathSegmentSimple)
    │   │   │   │   │               └── ident (kind: TokenIdentifier): 'int'
    │   │   │   │   └── separator #0 (kind: TokenComma): ','
    │   │   │   ├── rparen (kind: TokenRParen): ')'
    │   │   │   ├── ret_ty (kind: ReturnTypeClause)
    │   │   │   │   ├── arrow (kind: TokenArrow): '->'
    │   │   │   │   └── ty (kind: ExprPath)
    │   │   │   │       ├── item #0 (kind: PathSegmentSimple)
    │   │   │   │       │   └── ident (kind: TokenIdentifier): 'crate'
    │   │   │   │       ├── separator #0 (kind: TokenColonColon): '::'
    │   │   │   │       └── item #1 (kind: PathSegmentSimple)
    │   │   │   │           └── ident (kind: TokenIdentifier): 'S'
    │   │   │   ├── implicits_clause (kind: OptionImplicitsClauseEmpty) []
    │   │   │   └── optional_no_panic (kind: OptionTerminalNoPanicEmpty) []
    │   │   └── semicolon: Missing
    │   └── child #6 (kind: ItemStruct)
    │       ├── attributes (kind: AttributeList) []
    │       ├── struct_kw (kind: TokenStruct): 'struct'
    │       ├── name (kind: TokenIdentifier): 'A'
    │       ├── generic_params (kind: WrappedGenericParamList)
    │       │   ├── langle (kind: TokenLT): '<'
    │       │   ├── generic_params (kind: GenericParamList)
    │       │   │   ├── item #0 (kind: GenericParam)
    │       │   │   │   └── name (kind: TokenIdentifier): 'A'
    │       │   │   ├── separator #0 (kind: TokenComma): ','
    │       │   │   └── item #1 (kind: GenericParam)
    │       │   │       └── name (kind: TokenIdentifier): 'B'
    │       │   └── rangle (kind: TokenGT): '>'
    │       ├── lbrace (kind: TokenLBrace): '{'
    │       ├── members (kind: MemberList)
    │       │   ├── item #0 (kind: Member)
    │       │   │   ├── name (kind: TokenIdentifier): 'member'
    │       │   │   └── type_clause (kind: TypeClause)
    │       │   │       ├── colon (kind: TokenColon): ':'
    │       │   │       └── ty (kind: ExprPath)
    │       │   │           └── item #0 (kind: PathSegmentSimple)
    │       │   │               └── ident (kind: TokenIdentifier): 'bool'
    │       │   ├── separator #0 (kind: TokenComma): ','
    │       │   └── item #1 (kind: Member)
    │       │       ├── name (kind: TokenIdentifier): 'member2'
    │       │       └── type_clause (kind: TypeClause)
    │       │           ├── colon (kind: TokenColon): ':'
    │       │           └── ty (kind: ExprTuple)
    │       │               ├── lparen (kind: TokenLParen): '('
    │       │               ├── expressions (kind: ExprList)
    │       │               │   ├── item #0 (kind: ExprPath)
    │       │               │   │   └── item #0 (kind: PathSegmentSimple)
    │       │               │   │       └── ident (kind: TokenIdentifier): 'bool'
    │       │               │   ├── separator #0 (kind: TokenComma): ','
    │       │               │   ├── item #1 (kind: ExprPath)
    │       │               │   │   └── item #0 (kind: PathSegmentSimple)
    │       │               │   │       └── ident (kind: TokenIdentifier): 'felt'
    │       │               │   ├── separator #1 (kind: TokenComma): ','
    │       │               │   └── item #2 (kind: ExprTuple)
    │       │               │       ├── lparen (kind: TokenLParen): '('
    │       │               │       ├── expressions (kind: ExprList) []
    │       │               │       └── rparen (kind: TokenRParen): ')'
    │       │               └── rparen (kind: TokenRParen): ')'
    │       └── rbrace (kind: TokenRBrace): '}'
    └── eof (kind: TokenEndOfFile).
--------------------
error: Skipped tokens. Expected: Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/Attribute.
 --> test1.cairo:6:1
;
^

error: Skipped tokens. Expected: parameter.
 --> test1.cairo:7:10
func foo(,var1: int,, mut ref var2: felt,) -> int {
         ^

error: Skipped tokens. Expected: parameter.
 --> test1.cairo:7:21
func foo(,var1: int,, mut ref var2: felt,) -> int {
                    ^

error: Missing token TerminalRBrace.
 --> test1.cairo:28:14
    return x;
             ^

error: Missing token TerminalSemicolon.
 --> test1.cairo:33:47
extern func glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                                              ^

error: Skipped tokens. Expected: Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/Attribute.
 --> test1.cairo:33:47
extern func glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                                              ^

error: Skipped tokens. Expected: Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/Attribute.
 --> test1.cairo:33:48
extern func glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                                               ^*^

error: Skipped tokens. Expected: Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/Attribute.
 --> test1.cairo:33:51
extern func glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                                                  ^

error: Skipped tokens. Expected: Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/Attribute.
 --> test1.cairo:33:53
extern func glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                                                    ^*****^

error: Skipped tokens. Expected: Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/Attribute.
 --> test1.cairo:33:60
extern func glee<A, b>(var1: int,) -> crate::S<int> nopanic;
                                                           ^

