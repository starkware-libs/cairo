└── root (kind: SyntaxFile)
    ├── items (kind: ItemList)
    │   ├── child #0 (kind: ItemFreeFunction)
    │   │   ├── funckw (kind: Function): 'func'
    │   │   ├── name (kind: Identifier): 'foo'
    │   │   ├── signature (kind: FunctionSignature)
    │   │   │   ├── lparen (kind: LParen): '('
    │   │   │   ├── parameters (kind: ParamList)
    │   │   │   │   └── item #0 (kind: Param)
    │   │   │   │       ├── name (kind: Identifier): 'x'
    │   │   │   │       └── type_clause (kind: TypeClause)
    │   │   │   │           ├── colon (kind: Colon): ':'
    │   │   │   │           └── ty (kind: ExprPath)
    │   │   │   │               └── item #0 (kind: PathSegment)
    │   │   │   │                   ├── ident (kind: Identifier): 'T'
    │   │   │   │                   └── generic_args (kind: OptionGenericArgsEmpty) []
    │   │   │   ├── rparen (kind: RParen): ')'
    │   │   │   └── ret_ty (kind: ReturnTypeClause)
    │   │   │       ├── arrow (kind: Arrow): '->'
    │   │   │       └── ty (kind: ExprPath)
    │   │   │           └── item #0 (kind: PathSegment)
    │   │   │               ├── ident (kind: Identifier): 'S'
    │   │   │               └── generic_args (kind: OptionGenericArgsEmpty) []
    │   │   └── body (kind: ExprBlock)
    │   │       ├── lbrace (kind: LBrace): '{'
    │   │       ├── statements (kind: StatementList)
    │   │       │   ├── child #0 (kind: StatementLet)
    │   │       │   │   ├── letkw (kind: Let): 'let'
    │   │       │   │   ├── name (kind: Identifier): 'x'
    │   │       │   │   ├── type_clause (kind: OptionTypeClauseEmpty) []
    │   │       │   │   ├── eq (kind: Eq): '='
    │   │       │   │   ├── rhs (kind: ExprBinary)
    │   │       │   │   │   ├── lhs (kind: ExprUnary)
    │   │       │   │   │   │   ├── op (kind: Minus): '-'
    │   │       │   │   │   │   └── expr (kind: ExprLiteral)
    │   │       │   │   │   │       └── terminal (kind: LiteralNumber): '5'
    │   │       │   │   │   ├── op (kind: Plus): '+'
    │   │       │   │   │   └── rhs (kind: ExprLiteral)
    │   │       │   │   │       └── terminal (kind: LiteralNumber): '3'
    │   │       │   │   └── semicolon (kind: Semicolon): ';'
    │   │       │   ├── child #1 (kind: StatementLet)
    │   │       │   │   ├── letkw (kind: Let): 'let'
    │   │       │   │   ├── name (kind: Identifier): 'y'
    │   │       │   │   ├── type_clause (kind: TypeClause)
    │   │       │   │   │   ├── colon (kind: Colon): ':'
    │   │       │   │   │   └── ty (kind: ExprPath)
    │   │       │   │   │       └── item #0 (kind: PathSegment)
    │   │       │   │   │           ├── ident (kind: Identifier): 'T'
    │   │       │   │   │           └── generic_args (kind: OptionGenericArgsEmpty) []
    │   │       │   │   ├── eq (kind: Eq): '='
    │   │       │   │   ├── rhs (kind: ExprBinary)
    │   │       │   │   │   ├── lhs (kind: ExprBinary)
    │   │       │   │   │   │   ├── lhs (kind: ExprPath)
    │   │       │   │   │   │   │   └── item #0 (kind: PathSegment)
    │   │       │   │   │   │   │       ├── ident (kind: Identifier): 'x'
    │   │       │   │   │   │   │       └── generic_args (kind: OptionGenericArgsEmpty) []
    │   │       │   │   │   │   ├── op (kind: Mul): '*'
    │   │       │   │   │   │   └── rhs (kind: ExprLiteral)
    │   │       │   │   │   │       └── terminal (kind: LiteralNumber): '2'
    │   │       │   │   │   ├── op (kind: Plus): '+'
    │   │       │   │   │   └── rhs (kind: ExprBinary)
    │   │       │   │   │       ├── lhs (kind: ExprLiteral)
    │   │       │   │   │       │   └── terminal (kind: LiteralNumber): '3'
    │   │       │   │   │       ├── op (kind: Mul): '*'
    │   │       │   │   │       └── rhs (kind: ExprLiteral)
    │   │       │   │   │           └── terminal (kind: LiteralNumber): '5'
    │   │       │   │   └── semicolon (kind: Semicolon): ';'
    │   │       │   ├── child #2 (kind: StatementLet)
    │   │       │   │   ├── letkw (kind: Let): 'let'
    │   │       │   │   ├── name (kind: Identifier): 'z'
    │   │       │   │   ├── type_clause (kind: OptionTypeClauseEmpty) []
    │   │       │   │   ├── eq (kind: Eq): '='
    │   │       │   │   ├── rhs: Missing []
    │   │       │   │   └── semicolon (kind: Semicolon): ';'
    │   │       │   ├── child #3 (kind: StatementExpr)
    │   │       │   │   ├── expr (kind: ExprBinary)
    │   │       │   │   │   ├── lhs (kind: ExprLiteral)
    │   │       │   │   │   │   └── terminal (kind: LiteralNumber): '5'
    │   │       │   │   │   ├── op (kind: Plus): '+'
    │   │       │   │   │   └── rhs (kind: ExprStructCtorCall)
    │   │       │   │   │       ├── path (kind: ExprPath)
    │   │       │   │   │       │   └── item #0 (kind: PathSegment)
    │   │       │   │   │       │       ├── ident (kind: Identifier): 'Struct'
    │   │       │   │   │       │       └── generic_args (kind: OptionGenericArgsEmpty) []
    │   │       │   │   │       └── arguments (kind: ArgListBraced)
    │   │       │   │   │           ├── lbrace (kind: LBrace): '{'
    │   │       │   │   │           ├── arguments (kind: StructArgList)
    │   │       │   │   │           │   ├── item #0 (kind: StructArgSingle)
    │   │       │   │   │           │   │   ├── identifier (kind: Identifier): 'a'
    │   │       │   │   │           │   │   └── arg_expr (kind: StructArgExpr)
    │   │       │   │   │           │   │       ├── colon (kind: Colon): ':'
    │   │       │   │   │           │   │       └── expr (kind: ExprLiteral)
    │   │       │   │   │           │   │           └── terminal (kind: LiteralNumber): '5'
    │   │       │   │   │           │   ├── separator #0 (kind: Comma): ','
    │   │       │   │   │           │   └── item #1 (kind: StructArgSingle)
    │   │       │   │   │           │       ├── identifier (kind: Identifier): 'b'
    │   │       │   │   │           │       └── arg_expr (kind: StructArgExpr)
    │   │       │   │   │           │           ├── colon (kind: Colon): ':'
    │   │       │   │   │           │           └── expr (kind: ExprStructCtorCall)
    │   │       │   │   │           │               ├── path (kind: ExprPath)
    │   │       │   │   │           │               │   └── item #0 (kind: PathSegment)
    │   │       │   │   │           │               │       ├── ident (kind: Identifier): 'Struct2'
    │   │       │   │   │           │               │       └── generic_args (kind: OptionGenericArgsEmpty) []
    │   │       │   │   │           │               └── arguments (kind: ArgListBraced)
    │   │       │   │   │           │                   ├── lbrace (kind: LBrace): '{'
    │   │       │   │   │           │                   ├── arguments (kind: StructArgList)
    │   │       │   │   │           │                   │   └── item #0 (kind: StructArgSingle)
    │   │       │   │   │           │                   │       ├── identifier (kind: Identifier): '_gg'
    │   │       │   │   │           │                   │       └── arg_expr (kind: StructArgExpr)
    │   │       │   │   │           │                   │           ├── colon (kind: Colon): ':'
    │   │       │   │   │           │                   │           └── expr (kind: ExprTuple)
    │   │       │   │   │           │                   │               ├── lparen (kind: LParen): '('
    │   │       │   │   │           │                   │               ├── expressions (kind: ExprList) []
    │   │       │   │   │           │                   │               └── rparen (kind: RParen): ')'
    │   │       │   │   │           │                   └── rbrace (kind: RBrace): '}'
    │   │       │   │   │           └── rbrace (kind: RBrace): '}'
    │   │       │   │   └── semicolon (kind: Semicolon): ';'
    │   │       │   ├── child #4 (kind: StatementReturn)
    │   │       │   │   ├── returnkw (kind: Return): 'return'
    │   │       │   │   ├── expr (kind: ExprBinary)
    │   │       │   │   │   ├── lhs (kind: ExprPath)
    │   │       │   │   │   │   └── item #0 (kind: PathSegment)
    │   │       │   │   │   │       ├── ident (kind: Identifier): 'df'
    │   │       │   │   │   │       └── generic_args (kind: OptionGenericArgsEmpty) []
    │   │       │   │   │   ├── op (kind: EqEq): '=='
    │   │       │   │   │   └── rhs (kind: ExprLiteral)
    │   │       │   │   │       └── terminal (kind: LiteralNumber): '6'
    │   │       │   │   └── semicolon (kind: Semicolon): ';'
    │   │       │   └── child #5 (kind: StatementExpr)
    │   │       │       ├── expr (kind: ExprBinary)
    │   │       │       │   ├── lhs (kind: ExprPath)
    │   │       │       │   │   └── item #0 (kind: PathSegment)
    │   │       │       │   │       ├── ident (kind: Identifier): 'x'
    │   │       │       │   │       └── generic_args (kind: OptionGenericArgsEmpty) []
    │   │       │       │   ├── op (kind: Plus): '+'
    │   │       │       │   └── rhs (kind: ExprPath)
    │   │       │       │       └── item #0 (kind: PathSegment)
    │   │       │       │           ├── ident (kind: Identifier): 'y'
    │   │       │       │           └── generic_args (kind: OptionGenericArgsEmpty) []
    │   │       │       └── semicolon (kind: OptionSemicolonEmpty) []
    │   │       └── rbrace (kind: RBrace): '}'
    │   ├── child #1 (kind: ItemModule)
    │   │   ├── modkw (kind: Module): 'mod'
    │   │   ├── name (kind: Identifier): 'my_mod'
    │   │   └── semicolon: Missing
    │   ├── child #2 (kind: ItemFreeFunction)
    │   │   ├── funckw (kind: Function): 'func'
    │   │   ├── name (kind: Identifier): 'bar'
    │   │   ├── signature (kind: FunctionSignature)
    │   │   │   ├── lparen (kind: LParen): '('
    │   │   │   ├── parameters (kind: ParamList)
    │   │   │   │   ├── item #0 (kind: Param)
    │   │   │   │   │   ├── name (kind: Identifier): 'x'
    │   │   │   │   │   └── type_clause (kind: TypeClause)
    │   │   │   │   │       ├── colon (kind: Colon): ':'
    │   │   │   │   │       └── ty (kind: ExprPath)
    │   │   │   │   │           └── item #0 (kind: PathSegment)
    │   │   │   │   │               ├── ident (kind: Identifier): 'T0'
    │   │   │   │   │               └── generic_args (kind: OptionGenericArgsEmpty) []
    │   │   │   │   ├── separator #0 (kind: Comma): ','
    │   │   │   │   └── item #1 (kind: Param)
    │   │   │   │       ├── name (kind: Identifier): 's'
    │   │   │   │       └── type_clause (kind: TypeClause)
    │   │   │   │           ├── colon (kind: Colon): ':'
    │   │   │   │           └── ty (kind: ExprPath)
    │   │   │   │               └── item #0 (kind: PathSegment)
    │   │   │   │                   ├── ident (kind: Identifier): 'S'
    │   │   │   │                   └── generic_args (kind: OptionGenericArgsEmpty) []
    │   │   │   ├── rparen (kind: RParen): ')'
    │   │   │   └── ret_ty (kind: ReturnTypeClause)
    │   │   │       ├── arrow (kind: Arrow): '->'
    │   │   │       └── ty (kind: ExprPath)
    │   │   │           └── item #0 (kind: PathSegment)
    │   │   │               ├── ident (kind: Identifier): 'X'
    │   │   │               └── generic_args (kind: OptionGenericArgsEmpty) []
    │   │   └── body (kind: ExprBlock)
    │   │       ├── lbrace (kind: LBrace): '{'
    │   │       ├── statements (kind: StatementList)
    │   │       │   └── child #0 (kind: StatementExpr)
    │   │       │       ├── expr (kind: ExprBinary)
    │   │       │       │   ├── lhs (kind: ExprBinary)
    │   │       │       │   │   ├── lhs (kind: ExprBinary)
    │   │       │       │   │   │   ├── lhs (kind: ExprPath)
    │   │       │       │   │   │   │   └── item #0 (kind: PathSegment)
    │   │       │       │   │   │   │       ├── ident (kind: Identifier): 'x'
    │   │       │       │   │   │   │       └── generic_args (kind: OptionGenericArgsEmpty) []
    │   │       │       │   │   │   ├── op (kind: Dot): '.'
    │   │       │       │   │   │   └── rhs (kind: ExprPath)
    │   │       │       │   │   │       └── item #0 (kind: PathSegment)
    │   │       │       │   │   │           ├── ident (kind: Identifier): 'a'
    │   │       │       │   │   │           └── generic_args (kind: OptionGenericArgsEmpty) []
    │   │       │       │   │   ├── op (kind: Mul): '*'
    │   │       │       │   │   └── rhs: Missing []
    │   │       │       │   ├── op (kind: Plus): '+'
    │   │       │       │   └── rhs (kind: ExprBinary)
    │   │       │       │       ├── lhs (kind: ExprBinary)
    │   │       │       │       │   ├── lhs (kind: ExprBinary)
    │   │       │       │       │   │   ├── lhs (kind: ExprUnary)
    │   │       │       │       │   │   │   ├── op (kind: Minus): '-'
    │   │       │       │       │   │   │   └── expr: Missing []
    │   │       │       │       │   │   ├── op (kind: Dot): '.'
    │   │       │       │       │   │   └── rhs (kind: ExprPath)
    │   │       │       │       │   │       └── item #0 (kind: PathSegment)
    │   │       │       │       │   │           ├── ident (kind: Identifier): 's'
    │   │       │       │       │   │           └── generic_args (kind: OptionGenericArgsEmpty) []
    │   │       │       │       │   ├── op (kind: Dot): '.'
    │   │       │       │       │   └── rhs (kind: ExprPath)
    │   │       │       │       │       └── item #0 (kind: PathSegment)
    │   │       │       │       │           ├── ident (kind: Identifier): 's'
    │   │       │       │       │           └── generic_args (kind: OptionGenericArgsEmpty) []
    │   │       │       │       ├── op (kind: Mul): '*'
    │   │       │       │       └── rhs (kind: ExprFunctionCall)
    │   │       │       │           ├── path (kind: ExprPath)
    │   │       │       │           │   └── item #0 (kind: PathSegment)
    │   │       │       │           │       ├── ident (kind: Identifier): 'foo'
    │   │       │       │           │       └── generic_args (kind: OptionGenericArgsEmpty) []
    │   │       │       │           └── arguments (kind: ExprListParenthesized)
    │   │       │       │               ├── lparen (kind: LParen): '('
    │   │       │       │               ├── expressions (kind: ExprList)
    │   │       │       │               │   ├── item #0 (kind: ExprLiteral)
    │   │       │       │               │   │   └── terminal (kind: LiteralNumber): '1'
    │   │       │       │               │   ├── separator #0 (kind: Comma): ','
    │   │       │       │               │   └── item #1 (kind: ExprLiteral)
    │   │       │       │               │       └── terminal (kind: LiteralNumber): '3'
    │   │       │       │               └── rparen (kind: RParen): ')'
    │   │       │       └── semicolon (kind: OptionSemicolonEmpty) []
    │   │       └── rbrace (kind: RBrace): '}'
    │   └── child #3 (kind: ItemStruct)
    │       ├── structkw (kind: Struct): 'struct'
    │       ├── name (kind: Identifier): 'A'
    │       ├── lbrace (kind: LBrace): '{'
    │       ├── members (kind: ParamList)
    │       │   ├── item #0 (kind: Param)
    │       │   │   ├── name (kind: Identifier): 'x'
    │       │   │   └── type_clause (kind: TypeClause)
    │       │   │       ├── colon (kind: Colon): ':'
    │       │   │       └── ty (kind: ExprPath)
    │       │   │           └── item #0 (kind: PathSegment)
    │       │   │               ├── ident (kind: Identifier): 'a'
    │       │   │               └── generic_args (kind: OptionGenericArgsEmpty) []
    │       │   ├── separator #0 (kind: Comma): ','
    │       │   └── item #1 (kind: Param)
    │       │       ├── name (kind: Identifier): 'y'
    │       │       └── type_clause (kind: TypeClause)
    │       │           ├── colon (kind: Colon): ':'
    │       │           └── ty (kind: ExprPath)
    │       │               └── item #0 (kind: PathSegment)
    │       │                   ├── ident (kind: Identifier): 'int'
    │       │                   └── generic_args (kind: OptionGenericArgsEmpty) []
    │       └── rbrace (kind: RBrace): '}'
    └── eof (kind: EndOfFile).
--------------------
error: Skipped tokens
 --> test2.cairo:13:11
mod my_mod{
          ^

error: Skipped tokens
 --> test2.cairo:22:1
}
^

error: Skipped tokens
 --> test2.cairo:24:1
skipped tokens
^*****^

error: Skipped tokens
 --> test2.cairo:24:9
skipped tokens
        ^****^

