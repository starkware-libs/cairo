//! > Test return type inference

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() -> Option::<felt252> {
    Option::Some(5)
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics

//! > ==========================================================================

//! > Test array inference

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() {
   let mut arr = array::array_new();
   array::array_append(ref arr, 1);
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics

//! > ==========================================================================

//! > Test cycles

//! > test_runner_name
test_function_diagnostics

//! > comments
// TODO(spapini): Make better diagnostics.

//! > function
fn foo() {
    let mut arr = array::array_new();
    array::array_append(arr, arr)
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: ref argument must be passed with a preceding 'ref'.
 --> lib.cairo:3:25
    array::array_append(arr, arr)
                        ^*^

error: Unexpected argument type. Expected: "?0", found: "core::array::Array::<?0>".
 --> lib.cairo:3:30
    array::array_append(arr, arr)
                             ^*^

error: Type annotations needed. Failed to infer ?0
 --> lib.cairo:2:26
    let mut arr = array::array_new();
                         ^*******^

//! > ==========================================================================

//! > Test undetermined system

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() {
    let mut arr = array::array_new();
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Type annotations needed. Failed to infer ?0
 --> lib.cairo:2:26
    let mut arr = array::array_new();
                         ^*******^

//! > ==========================================================================

//! > Test type mismatch

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() {
    let mut arr: felt252 = array::array_new::<felt252>();
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Unexpected argument type. Expected: "core::felt252", found: "core::array::Array::<core::felt252>".
 --> lib.cairo:2:28
    let mut arr: felt252 = array::array_new::<felt252>();
                           ^***************************^

//! > ==========================================================================

//! > Test never type

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() -> felt252 {
    panic(array::array_new())
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics

//! > ==========================================================================

//! > Test anti never type

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() -> never {
    5_felt252
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Unexpected return type. Expected: "core::never", found: "core::felt252".
 --> lib.cairo:1:19
fn foo() -> never {
                  ^

//! > ==========================================================================

//! > Test trait inference.

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() {
   MyTrait::foo(5);
   MyTrait::foo(true);
   MyTrait::foo(Option::None(()));
}

//! > function_name
foo

//! > module_code
trait MyTrait<T> {
   fn foo(x: T);
}
impl MyImpl1 of MyTrait::<felt252> {
   fn foo(x: felt252) {}
}
impl MyImpl2 of MyTrait::<bool> {
   fn foo(x: bool) {}
}
impl MyImpl3 of MyTrait::<Option::<felt252>> {
    fn foo(x: Option::<felt252>) {}
 }

//! > expected_diagnostics

//! > ==========================================================================

//! > Test trait inference no impl failure.

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() {
   MyTrait::foo(true);
}

//! > function_name
foo

//! > module_code
trait MyTrait<T> {
   fn foo(x: T);
}
impl MyImpl1 of MyTrait::<felt252> {
   fn foo(x: felt252) {}
}
impl MyImpl2 of MyTrait::<felt252> {
   fn foo(x: felt252) {}
}
impl MyImpl3 of MyTrait::<Option::<felt252>> {
    fn foo(x: Option::<felt252>) {}
}
impl MyImpl4 of MyTrait::<Option::<bool>> {
    fn foo(x: Option::<bool>) {}
}

//! > expected_diagnostics
error: Trait has no implementation in context: test::MyTrait::<core::bool>
 --> lib.cairo:17:13
   MyTrait::foo(true);
            ^*^

//! > ==========================================================================

//! > Test trait inference multiple impl failure.

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() {
   MyTrait::foo(5);
   MyTrait::foo(Option::<felt252>::None(()));
}

//! > function_name
foo

//! > module_code
trait MyTrait<T> {
   fn foo(x: T);
}
impl MyImpl1 of MyTrait::<felt252> {
   fn foo(x: felt252) {}
}
impl MyImpl2 of MyTrait::<felt252> {
   fn foo(x: felt252) {}
}
impl MyImpl3 of MyTrait::<Option::<felt252>> {
    fn foo(x: Option::<felt252>) {}
}
impl MyImpl4 of MyTrait::<Option::<bool>> {
    fn foo(x: Option::<bool>) {}
}

//! > expected_diagnostics
error: Trait `test::MyTrait::<core::felt252>` has multiple implementations, in: test::MyImpl1, test::MyImpl2
 --> lib.cairo:17:13
   MyTrait::foo(5);
            ^*^

//! > ==========================================================================

//! > Test trait inference unresolved type for impl.

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() {
   MyTrait::foo(Option::None(()));
}

//! > function_name
foo

//! > module_code
trait MyTrait<T> {
   fn foo(x: T);
}
impl MyImpl1 of MyTrait::<felt252> {
   fn foo(x: felt252) {}
}
impl MyImpl2 of MyTrait::<felt252> {
   fn foo(x: felt252) {}
}
impl MyImpl3 of MyTrait::<Option::<felt252>> {
    fn foo(x: Option::<felt252>) {}
}
impl MyImpl4 of MyTrait::<Option::<bool>> {
    fn foo(x: Option::<bool>) {}
}

//! > expected_diagnostics
error: Type annotations needed. Failed to infer ?1
 --> lib.cairo:17:17
   MyTrait::foo(Option::None(()));
                ^****^

//! > ==========================================================================

//! > Test dot_expr inference.

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo(my_box: Box::<MyStruct>) -> felt252 {
   box::unbox(my_box).a
}

//! > function_name
foo

//! > module_code
struct MyStruct {
   a: felt252
}

//! > expected_diagnostics

//! > ==========================================================================

//! > Infer impl

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() {
   bar(true);
}

//! > function_name
foo

//! > module_code
fn bar<impl Tr: MyTrait::<bool>>(x: bool){
}

trait MyTrait<T> {
   fn foo(x: T);
}
impl MyImpl1 of MyTrait::<bool> {
   fn foo(x: bool) {}
}

//! > expected_diagnostics

//! > ==========================================================================

//! > Infer impl after inferring type

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() {
   bar(Option::Some(5));
}

//! > function_name
foo

//! > module_code
fn bar<S, impl Tr: MyTrait::<S>>(x: S){
}

trait MyTrait<T> {
   fn foo(x: T);
}
impl MyImpl1 of MyTrait::<felt252> {
   fn foo(x: felt252) {}
}
impl MyImpl2 of MyTrait::<felt252> {
   fn foo(x: felt252) {}
}
impl MyImpl3 of MyTrait::<Option::<felt252>> {
    fn foo(x: Option::<felt252>) {}
}
impl MyImpl4 of MyTrait::<Option::<bool>> {
    fn foo(x: Option::<bool>) {}
}

//! > expected_diagnostics

//! > ==========================================================================

//! > Infer impl failure

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() {
   bar(true);
}

//! > function_name
foo

//! > module_code
fn bar<S, impl Tr: MyTrait::<S>>(x: S){
}

trait MyTrait<T> {
   fn foo(x: T);
}
impl MyImpl1 of MyTrait::<felt252> {
   fn foo(x: felt252) {}
}
impl MyImpl2 of MyTrait::<felt252> {
   fn foo(x: felt252) {}
}
impl MyImpl3 of MyTrait::<Option::<felt252>> {
    fn foo(x: Option::<felt252>) {}
}
impl MyImpl4 of MyTrait::<Option::<bool>> {
    fn foo(x: Option::<bool>) {}
}

//! > expected_diagnostics
error: Trait has no implementation in context: test::MyTrait::<core::bool>
 --> lib.cairo:20:4
   bar(true);
   ^*^

//! > ==========================================================================

//! > Infer impl generic param from generic param.

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() {
   A::<felt252>{}.foo();
}

//! > function_name
foo

//! > module_code
struct A<T> { }
trait MyTrait<T> {
   fn foo<impl TDrop: Drop::<T>>(self:A<T>);
   fn bar<impl TDrop: Drop::<T>>(self:A<T>);
}
impl MyImpl<T> of MyTrait::<T> {
   fn foo<impl TDrop: Drop::<T>>(self:A<T>){self.bar()}
   fn bar<impl TDrop: Drop::<T>>(self:A<T>){}
}

//! > expected_diagnostics

//! > ==========================================================================

//! > Complex clone inference.

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() {
   (@5).clone();
   5.clone();
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics

//! > ==========================================================================

//! > infer generic impl in a function.

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() {
   clone_loop(5)
}

//! > function_name
foo

//! > module_code
fn clone_loop<T, impl TClone: Clone::<T>>(x: T) {
   clone_loop::<T>(x)
}

//! > expected_diagnostics

//! > ==========================================================================

//! > infer drop impl.

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() {
}

//! > function_name
foo

//! > module_code
struct A {}
struct B{
   a: A,
}
impl I<impl TI: Drop::<A>> of Drop::<B>;

//! > expected_diagnostics

//! > ==========================================================================

//! > equality from signature

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() {
   assert_eq(1, 2 + 3, '4');
}

//! > function_name
foo

//! > module_code
#[inline]
fn assert_eq<T, impl TPartialEq: PartialEq<T>>(a: T, b: T, err_code: felt252) {
    assert(a == b, err_code);
}

//! > expected_diagnostics

//! > ==========================================================================

//! > inference from struct pattern

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() {
   let u256 { low, high } = 123;
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics

//! > ==========================================================================

//! > inference in impl generic params

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() {
}

//! > function_name
foo

//! > module_code
trait BashStateTrait<S> {
   fn update(self: S, value: felt252) -> S;
   fn finalize(self: S) -> felt252;
}
trait Bash<T, S, impl X: BashStateTrait<S>> {
   fn update_state(state: S, value: T) -> S;
}
trait BashStateExTrait<S, T> {
   fn update_with(self: S, value: T) -> S;
}
impl BashStateEx<S, impl X0: BashStateTrait<S>, T, impl Y0: Bash<T, S, _>> of BashStateExTrait<S, T> {
   fn update_with(self: S, value: T) -> S {
       Bash::update_state(self, value)
   }
}

//! > expected_diagnostics

//! > ==========================================================================

//! > Test no default type for string literals.

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() {
   let x = "hello";
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Type annotations needed. Failed to infer ?0
 --> lib.cairo:2:12
   let x = "hello";
           ^*****^
