//! > Const

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: false)

//! > function
fn foo() {
    let _x = MY_CONST + my_module::CONST_IN_MODULE;
    let (_y, _z) = FELT_TUPLE;
}

//! > function_name
foo

//! > module_code
const MY_CONST: felt252 = 0x1234;

const FELT_TUPLE: (felt252, felt252) = (1, 2);

const FELT_FIXED_SIZE_ARRAY: [felt252; 3] = [1, 2, 3];

const OTHER_CONST_REF: felt252 = my_module::CONST_IN_MODULE;

mod my_module {
    const CONST_IN_MODULE: felt252 = 1;
}

//! > expected_diagnostics

//! > ==========================================================================

//! > Const diagnostics

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
const MY_CONST: MissingType = {
    return foo();
    Option::<felt252>::Some(0)?
};

const WRONG_TYPE_AND_NOT_LITERAL: bool = 1 + 2;

// Non-corelib impl, preventing the missing operator warning.
impl Felt252Div of Div<felt252> {
    fn div(lhs: felt252, rhs: felt252) -> felt252 {
        core::felt252_div(lhs, rhs.try_into().unwrap())
    }
}
const CALCULATION_NOT_CORELIB_IMPL: felt252 = 8 / 4;

const FAILING_CALC: felt252 = if true {
    core::panic_with_felt252('this should fail')
} else {
    70
};

/// Copy of `assert` to avoid getting paths from the corelib.
const fn assert(cond: bool) {
    if !cond {
        core::panic_with_felt252('failed assertion')
    }
}

const FUNC_CALC_SUCCESS: () = assert(true);
const FUNC_CALC_FAILURE: () = assert(false);
const VALID_EQ: () = assert(1 == 1);
const VALID_NE: () = assert(1 != 2);
const VALID_LT: () = assert(1_usize < 2);
const VALID_LE: () = assert(1_usize <= 1);
const VALID_GT: () = assert(2_usize > 1);
const VALID_GE: () = assert(1_usize >= 1);
const VALID_DIVREM: () = assert(DivRem::div_rem(5_u8, 2) == (2, 1));
use core::num::traits::Pow;

const VALID_POW_MIN2_0: () = assert((-2_i8).pow(0) == 1);
const VALID_POW_MIN2_3: () = assert((-2_i8).pow(3) == -8);
const VALID_POW_MIN2_6: () = assert((-2_i8).pow(6) == 64);

const VALID_POW_0_0: () = assert(0_felt252.pow(0) == 1);
const VALID_POW_0_1: () = assert(0_felt252.pow(1) == 0);
const VALID_POW_0_2: () = assert(0_felt252.pow(2) == 0);

const VALID_POW_2_0: () = assert(2_felt252.pow(0) == 0b1);
const VALID_POW_2_6: () = assert(2_felt252.pow(6) == 0b1000000);
const VALID_POW_2_10: () = assert(2_felt252.pow(10) == 0b10000000000);

const FUNC_CALC_SUCCESS_OPTION: felt252 = Option::Some(5).unwrap();
const FUNC_CALC_SUCCESS_RESULT1: felt252 = Result::<_, felt252>::Ok(5).unwrap();
const FUNC_CALC_SUCCESS_RESULT2: felt252 = Result::<felt252, _>::Err(5).unwrap_err();

const FUNC_CALC_STACK_EXCEEDED: felt252 = call_myself();

const fn call_myself() -> felt252 {
    call_myself()
}

//! > expected_diagnostics
error: Type not found.
 --> lib.cairo:1:17
const MY_CONST: MissingType = {
                ^^^^^^^^^^^

error: Return statement is not supported outside of functions.
 --> lib.cairo:2:5
    return foo();
    ^^^^^^^^^^^^^

error: The '?' operator is not supported outside of functions.
 --> lib.cairo:3:5
    Option::<felt252>::Some(0)?
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: Trait has no implementation in context: core::traits::Add::<core::bool>.
 --> lib.cairo:6:42
const WRONG_TYPE_AND_NOT_LITERAL: bool = 1 + 2;
                                         ^^^^^

error: This expression is not supported as constant.
 --> lib.cairo:14:47
const CALCULATION_NOT_CORELIB_IMPL: felt252 = 8 / 4;
                                              ^^^^^

error: Failed to calculate constant.
 --> lib.cairo:17:5
    core::panic_with_felt252('this should fail')
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: Failed to calculate constant.
 --> lib.cairo:30:31
const FUNC_CALC_FAILURE: () = assert(false);
                              ^^^^^^^^^^^^^
note: In `test::assert`:
  --> lib.cairo:25:9
        core::panic_with_felt252('failed assertion')
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: Constant calculation depth exceeded.
 --> lib.cairo:56:43
const FUNC_CALC_STACK_EXCEEDED: felt252 = call_myself();
                                          ^^^^^^^^^^^^^

//! > ==========================================================================

//! > Const of wrong type.

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
const DEFAULT_VAR: bool = 1;

//! > expected_diagnostics
error: Mismatched types. The type `core::bool` cannot be created from a numeric literal.
 --> lib.cairo:1:27
const DEFAULT_VAR: bool = 1;
                          ^

//! > ==========================================================================

//! > Const of negative values out of range.

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
const B: u8 = -1;

//! > expected_diagnostics
error: Trait has no implementation in context: core::traits::Neg::<core::integer::u8>.
 --> lib.cairo:1:15
const B: u8 = -1;
              ^^

//! > ==========================================================================

//! > Const reference to itself.

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
const A: i8 = A;
const B: i8 = C;
const C: i8 = B;

//! > expected_diagnostics
error: Cycle detected while resolving 'const' items.
 --> lib.cairo:1:1
const A: i8 = A;
^^^^^^^^^^^^^^^^

error: Cycle detected while resolving 'const' items.
 --> lib.cairo:2:1
const B: i8 = C;
^^^^^^^^^^^^^^^^

error: Cycle detected while resolving 'const' items.
 --> lib.cairo:3:1
const C: i8 = B;
^^^^^^^^^^^^^^^^

//! > ==========================================================================

//! > const literal values

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() -> (felt252, felt252, u256, i8) {
    (FELT_WRAPAROUND_OVER, FELT_WRAPAROUND_UNDER, U256_CALCULATION, BASIC_CALCULATION)
}

//! > function_name
foo

//! > module_code
const UNSIGNED_VAR: u8 = 256;
const SIGNED_VAR: i8 = 128;
const IN_RANGE_NEGATIVE1: i8 = -0x80;
const IN_RANGE_NEGATIVE2: i16 = -5;
const OUT_OF_RANGE_NEGATIVE1: i8 = -0x81;
const OUT_OF_RANGE_NEGATIVE2: i16 = -0x8001;
const ZERO_NON_ZERO: NonZero<u8> = 0;
const BASIC_CALCULATION: i8 = 120 + 7;
const CALCULATION_WITH_OVERFLOW: i8 = 120 + 10;
const CALCULATION_WITH_DIVISION: u8 = 120 / 0;
const FELT_WRAPAROUND_OVER: felt252 =
    0x800000000000011000000000000000000000000000000000000000000000000
    + 2;
const FELT_WRAPAROUND_UNDER: felt252 =
    -0x800000000000011000000000000000000000000000000000000000000000000
    - 2;
const U256_VALUE: u256 = 0x180000000000000000000000000000001;
const U256_CALCULATION: u256 = U256_VALUE * 8;

struct ComplexStruct {
    a: u8,
    b: i8,
    c: i16,
    d: NonZero<u8>,
    e: bool,
}

const COMPLEX_STRUCT: ComplexStruct = ComplexStruct {
    a: 1, b: {
        IN_RANGE_NEGATIVE1
    }, c: OUT_OF_RANGE_NEGATIVE2, d: 0, e: true,
};

const CONST_MEMBER: u8 = COMPLEX_STRUCT.a;

//! > expected_diagnostics
error: The value does not fit within the range of type core::integer::u8.
 --> lib.cairo:1:26
const UNSIGNED_VAR: u8 = 256;
                         ^^^

error: The value does not fit within the range of type core::integer::i8.
 --> lib.cairo:2:24
const SIGNED_VAR: i8 = 128;
                       ^^^

error: The value does not fit within the range of type core::integer::i8.
 --> lib.cairo:5:36
const OUT_OF_RANGE_NEGATIVE1: i8 = -0x81;
                                   ^^^^^

error: The value does not fit within the range of type core::integer::i16.
 --> lib.cairo:6:37
const OUT_OF_RANGE_NEGATIVE2: i16 = -0x8001;
                                    ^^^^^^^

error: The value does not fit within the range of type core::zeroable::NonZero::<core::integer::u8>.
 --> lib.cairo:7:36
const ZERO_NON_ZERO: NonZero<u8> = 0;
                                   ^

error: The value does not fit within the range of type core::integer::i8.
 --> lib.cairo:9:39
const CALCULATION_WITH_OVERFLOW: i8 = 120 + 10;
                                      ^^^^^^^^

error: Division by zero.
 --> lib.cairo:10:39
const CALCULATION_WITH_DIVISION: u8 = 120 / 0;
                                      ^^^^^^^

error: The value does not fit within the range of type core::zeroable::NonZero::<core::integer::u8>.
 --> lib.cairo:31:38
    }, c: OUT_OF_RANGE_NEGATIVE2, d: 0, e: true,
                                     ^

//! > ==========================================================================

//! > const in block

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() -> () {
    {
        const X: u8 = 2;
    }
    let y = X;
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
warning: Unused constant. Consider ignoring by prefixing with `_`.
 --> lib.cairo:3:15
        const X: u8 = 2;
              ^

error: Identifier not found.
 --> lib.cairo:5:13
    let y = X;
            ^

warning[E0001]: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:5:9
    let y = X;
        ^

//! > ==========================================================================

//! > multiple definitions of the same const

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() -> () {
    const A: u8 = 1;
    const A: u8 = 2;
    const B: u8 = 3;
    let B = 4;
    let C = 5;
    const C: u8 = 6;
    {
        const D: u8 = 7;
        const D: u8 = 8;
        const E: u8 = 9;
        let E = 10;
        let F = 11;
        const F: u8 = 12;
    }
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Multiple definitions of constant "A".
 --> lib.cairo:3:11
    const A: u8 = 2;
          ^

error: Multiple definitions of identifier 'B' as constant and variable.
 --> lib.cairo:5:9
    let B = 4;
        ^

error: Multiple definitions of identifier 'C' as constant and variable.
 --> lib.cairo:7:11
    const C: u8 = 6;
          ^

error: Multiple definitions of constant "D".
 --> lib.cairo:10:15
        const D: u8 = 8;
              ^

error: Multiple definitions of identifier 'E' as constant and variable.
 --> lib.cairo:12:13
        let E = 10;
            ^

error: Multiple definitions of identifier 'F' as constant and variable.
 --> lib.cairo:14:15
        const F: u8 = 12;
              ^

warning: Unused constant. Consider ignoring by prefixing with `_`.
 --> lib.cairo:10:15
        const D: u8 = 8;
              ^

warning[E0001]: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:12:13
        let E = 10;
            ^

warning: Unused constant. Consider ignoring by prefixing with `_`.
 --> lib.cairo:14:15
        const F: u8 = 12;
              ^

warning: Unused constant. Consider ignoring by prefixing with `_`.
 --> lib.cairo:3:11
    const A: u8 = 2;
          ^

warning[E0001]: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:5:9
    let B = 4;
        ^

warning: Unused constant. Consider ignoring by prefixing with `_`.
 --> lib.cairo:7:11
    const C: u8 = 6;
          ^
