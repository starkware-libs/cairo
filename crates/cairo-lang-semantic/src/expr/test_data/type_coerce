//! > Test type coerce wrong type

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {
  let _x: i16 = 5 as u32;
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Unexpected argument type. Expected: "core::integer::i16", found: "core::integer::u32".
 --> lib.cairo:2:17
  let _x: i16 = 5 as u32;
                ^******^

//! > ==========================================================================

//! > Test type coerce where annotation would be needed

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: false)

//! > function
fn foo() {
    MyTrait::bar() as MyStruct;
}

//! > function_name
foo

//! > module_code
struct MyStruct {
}

trait MyTrait<T> {
    fn bar() -> T;
}

impl MyStructMyTrait of MyTrait<MyStruct> {
    fn bar() -> MyStruct {
        MyStruct {}
    }
}

//! > expected_diagnostics

//! > ==========================================================================

//! > Test type coerce complex types

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: false)

//! > function
fn foo() {
    takes_i32((MyTrait::bar() as Array)[0]);
}

//! > function_name
foo

//! > module_code
trait MyTrait<T> {
    fn bar() -> T;
}

impl ArrayMyTrait<T> of MyTrait<Array<T>> {
    fn bar() -> Array<T> {
        array![]
    }
}

fn takes_i32(x: @i32) {
}

//! > expected_diagnostics
