//! > Test bad consteval_int! macros

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
const a: felt252 = consteval_int!(func_call(24));

const b: felt252 = consteval_int!('some string');

const c: felt252 = consteval_int!(*24);

const d: felt252 = consteval_int!(~24);

const e: felt252 = consteval_int!(234 < 5);

const e: felt252 = consteval_int![4 + 5];

const f: felt252 = consteval_int!{4 + 5};

const out_of_range: u8 = consteval_int!(120 + 160);

//! > expected_diagnostics
error: The name `e` is defined multiple times.
 --> lib.cairo:11:7
const e: felt252 = consteval_int![4 + 5];
      ^

error: Plugin diagnostic: Unsupported expression in consteval_int macro
 --> lib.cairo:1:35
const a: felt252 = consteval_int!(func_call(24));
                                  ^***********^

error: Only literal constants are currently supported.
 --> lib.cairo:1:20
const a: felt252 = consteval_int!(func_call(24));
                   ^***************************^

error: Plugin diagnostic: Unsupported expression in consteval_int macro
 --> lib.cairo:3:35
const b: felt252 = consteval_int!('some string');
                                  ^***********^

error: Only literal constants are currently supported.
 --> lib.cairo:3:20
const b: felt252 = consteval_int!('some string');
                   ^***************************^

error: Plugin diagnostic: Unsupported unary operator in consteval_int macro
 --> lib.cairo:5:35
const c: felt252 = consteval_int!(*24);
                                  ^*^

error: Only literal constants are currently supported.
 --> lib.cairo:5:20
const c: felt252 = consteval_int!(*24);
                   ^*****************^

error: Plugin diagnostic: Unsupported unary operator in consteval_int macro
 --> lib.cairo:7:35
const d: felt252 = consteval_int!(~24);
                                  ^*^

error: Only literal constants are currently supported.
 --> lib.cairo:7:20
const d: felt252 = consteval_int!(~24);
                   ^*****************^

error: Plugin diagnostic: Unsupported binary operator in consteval_int macro
 --> lib.cairo:9:35
const e: felt252 = consteval_int!(234 < 5);
                                  ^*****^

error: Only literal constants are currently supported.
 --> lib.cairo:9:20
const e: felt252 = consteval_int!(234 < 5);
                   ^*********************^

error: Plugin diagnostic: Macro `consteval_int` does not support this bracket type.
 --> lib.cairo:11:34
const e: felt252 = consteval_int![4 + 5];
                                 ^

error: Only literal constants are currently supported.
 --> lib.cairo:11:20
const e: felt252 = consteval_int![4 + 5];
                   ^*******************^

error: Plugin diagnostic: Macro `consteval_int` does not support this bracket type.
 --> lib.cairo:13:34
const f: felt252 = consteval_int!{4 + 5};
                                 ^

error: Only literal constants are currently supported.
 --> lib.cairo:13:20
const f: felt252 = consteval_int!{4 + 5};
                   ^*******************^

error: The value does not fit within the range of type core::integer::u8.
 --> lib.cairo:15:26
const out_of_range: u8 = consteval_int!(120 + 160);
                         ^***********************^

//! > ==========================================================================

//! > Test bad array! macros

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {
    let _x = array!(0);
    let _x = array![0_felt252, 1_u8];
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Plugin diagnostic: Macro `array` does not support this bracket type.
 --> lib.cairo:2:20
    let _x = array!(0);
                   ^

error: Unexpected argument type. Expected: "core::felt252", found: "core::integer::u8".
 --> lib.cairo:3:32
    let _x = array![0_felt252, 1_u8];
                               ^**^

//! > ==========================================================================

//! > Test bad write! macros

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {
   let mut f: core::fmt::Formatter = Default::default();
   let ba: ByteArray = "hello";

   // Bad brackets.
   write![f, "{}", ba];

   // No params.
   write!();

   // One param.
   write!(f);

   // No formatter.
   write!("{}", ba);

   // No format string.
   write!(f, ba);

   // Non existing inline argument.
   write!(f, "{non_existing}");

   // Non existing provide argument.
   write!(f, "{}", non_existing).unwrap();

   // Too many arguments.
   write!(f, "{}", ba, 1);

   // Too few arguments.
   write!(f, "{}{}", ba);

   // Out of range positional argument.
   write!(f, "{2}{1}{0}", ba, 1);

   // Unused arguments.
   write!(f, "{2}{0}", ba, 2, 1, 4);

   // Badly terminated `{`.
    write!(f, "{?}");
    write!(f, "{x|}");
    write!(f, "{");
    write!(f, "{x");
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Plugin diagnostic: Macro `write` does not support this bracket type.
 --> lib.cairo:6:10
   write![f, "{}", ba];
         ^

error: Plugin diagnostic: Macro expected formatter argument.
 --> lib.cairo:9:10
   write!();
         ^

error: Plugin diagnostic: Macro expected format string argument.
 --> lib.cairo:12:10
   write!(f);
         ^

error: Plugin diagnostic: Argument must be a string literal.
 --> lib.cairo:15:17
   write!("{}", ba);
                ^^

error: Plugin diagnostic: Argument must be a string literal.
 --> lib.cairo:18:14
   write!(f, ba);
             ^^

error: Identifier not found.
 --> lib.cairo:21:16
   write!(f, "{non_existing}");
               ^**********^

warning: Unhandled `#[must_use]` type `core::result::Result::<(), core::fmt::Error>`
 --> lib.cairo:21:4
   write!(f, "{non_existing}");
   ^*************************^

error: Identifier not found.
 --> lib.cairo:24:20
   write!(f, "{}", non_existing).unwrap();
                   ^**********^

error: Plugin diagnostic: Unused argument.
 --> lib.cairo:27:24
   write!(f, "{}", ba, 1);
                       ^

error: Plugin diagnostic: 2 positional arguments in format string, but only 1 arguments.
 --> lib.cairo:30:14
   write!(f, "{}{}", ba);
             ^****^

error: Plugin diagnostic: Invalid reference to positional argument 2 (there are 2 arguments).
 --> lib.cairo:33:14
   write!(f, "{2}{1}{0}", ba, 1);
             ^*********^

error: Plugin diagnostic: Unused argument.
 --> lib.cairo:36:28
   write!(f, "{2}{0}", ba, 2, 1, 4);
                           ^

error: Plugin diagnostic: Unused argument.
 --> lib.cairo:36:34
   write!(f, "{2}{0}", ba, 2, 1, 4);
                                 ^

error: Plugin diagnostic: Invalid format string: expected `}`, variable name, or formatting modifiers.
 --> lib.cairo:39:15
    write!(f, "{?}");
              ^***^

error: Plugin diagnostic: Invalid format string: expected `}`, variable name, or formatting modifiers.
 --> lib.cairo:40:15
    write!(f, "{x|}");
              ^****^

error: Plugin diagnostic: Invalid format string: expected `}`, variable name, or formatting modifiers.
 --> lib.cairo:41:15
    write!(f, "{");
              ^*^

error: Plugin diagnostic: Invalid format string: expected `}`, variable name, or formatting modifiers.
 --> lib.cairo:42:15
    write!(f, "{x");
              ^**^

warning: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:3:8
   let ba: ByteArray = "hello";
       ^^

error: Type annotations needed. Failed to infer ?2
 --> lib.cairo[write_macro]:2:22
    match core::fmt::Display::fmt(@non_existing, ref f) {
                     ^*****^

//! > ==========================================================================

//! > Test bad writeln! macros

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {
   let mut f: core::fmt::Formatter = Default::default();
   let ba: ByteArray = "hello";

   // Bad brackets.
   writeln![f, "{}", ba];

   // No params.
   writeln!();

   // One param.
   writeln!(f);

   // No formatter.
   writeln!("{}", ba);

   // No format string.
   writeln!(f, ba);

   // Non existing inline argument.
   writeln!(f, "{non_existing}").unwrap();

   // Non existing provide argument.
   writeln!(f, "{}", non_existing);

   // Too many arguments.
   writeln!(f, "{}", ba, 1);

   // Too few arguments.
   writeln!(f, "{}{}", ba);

   // Out of range positional argument.
   writeln!(f, "{2}{1}{0}", ba, 1);

   // Unused arguments.
   writeln!(f, "{2}{0}", ba, 2, 1);
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Plugin diagnostic: Macro `writeln` does not support this bracket type.
 --> lib.cairo:6:12
   writeln![f, "{}", ba];
           ^

error: Plugin diagnostic: Macro expected formatter argument.
 --> lib.cairo:9:12
   writeln!();
           ^

error: Plugin diagnostic: Macro expected format string argument.
 --> lib.cairo:12:12
   writeln!(f);
           ^

error: Plugin diagnostic: Argument must be a string literal.
 --> lib.cairo:15:19
   writeln!("{}", ba);
                  ^^

error: Plugin diagnostic: Argument must be a string literal.
 --> lib.cairo:18:16
   writeln!(f, ba);
               ^^

error: Identifier not found.
 --> lib.cairo:21:18
   writeln!(f, "{non_existing}").unwrap();
                 ^**********^

error: Identifier not found.
 --> lib.cairo:24:22
   writeln!(f, "{}", non_existing);
                     ^**********^

warning: Unhandled `#[must_use]` type `core::result::Result::<(), core::fmt::Error>`
 --> lib.cairo:24:4
   writeln!(f, "{}", non_existing);
   ^*****************************^

error: Plugin diagnostic: Unused argument.
 --> lib.cairo:27:26
   writeln!(f, "{}", ba, 1);
                         ^

error: Plugin diagnostic: 2 positional arguments in format string, but only 1 arguments.
 --> lib.cairo:30:16
   writeln!(f, "{}{}", ba);
               ^****^

error: Plugin diagnostic: Invalid reference to positional argument 2 (there are 2 arguments).
 --> lib.cairo:33:16
   writeln!(f, "{2}{1}{0}", ba, 1);
               ^*********^

error: Plugin diagnostic: Unused argument.
 --> lib.cairo:36:30
   writeln!(f, "{2}{0}", ba, 2, 1);
                             ^

warning: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:3:8
   let ba: ByteArray = "hello";
       ^^

error: Type annotations needed. Failed to infer ?2
 --> lib.cairo[writeln_macro]:2:22
    match core::fmt::Display::fmt(@non_existing, ref f) {
                     ^*****^

//! > ==========================================================================

//! > Test bad format! macros

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {
   let ba: ByteArray = "hello";

   // Bad brackets. TODO(orizi): Improve diagnostic to not include "write".
   format!["{}", ba];

   // No params.
   format!();

   // No format string.
   format!(ba);

   // Non existing inline argument.
   format!("{non_existing}");

   // Non existing provide argument.
   format!("{}", non_existing);

   // Too many arguments.
   format!("{}", ba, 1);

   // Too few arguments.
   format!("{}{}", ba);

   // Out of range positional argument.
   format!("{2}{1}{0}", ba, 1);

   // Unused arguments.
   format!("{2}{0}", ba, 2, 1);
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Plugin diagnostic: Macro `write` does not support this bracket type.
 --> lib.cairo:5:11
   format!["{}", ba];
          ^

error: Plugin diagnostic: Macro expected format string argument.
 --> lib.cairo:8:11
   format!();
          ^

error: Plugin diagnostic: Argument must be a string literal.
 --> lib.cairo:11:12
   format!(ba);
           ^^

error: Identifier not found.
 --> lib.cairo:14:14
   format!("{non_existing}");
             ^**********^

error: Identifier not found.
 --> lib.cairo:17:18
   format!("{}", non_existing);
                 ^**********^

error: Plugin diagnostic: Unused argument.
 --> lib.cairo:20:22
   format!("{}", ba, 1);
                     ^

error: Plugin diagnostic: 2 positional arguments in format string, but only 1 arguments.
 --> lib.cairo:23:12
   format!("{}{}", ba);
           ^****^

error: Plugin diagnostic: Invalid reference to positional argument 2 (there are 2 arguments).
 --> lib.cairo:26:12
   format!("{2}{1}{0}", ba, 1);
           ^*********^

error: Plugin diagnostic: Unused argument.
 --> lib.cairo:29:26
   format!("{2}{0}", ba, 2, 1);
                         ^

warning: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:2:8
   let ba: ByteArray = "hello";
       ^^

error: Type annotations needed. Failed to infer ?5
 --> lib.cairo[format_macro][write_macro]:2:22
    match core::fmt::Display::fmt(@non_existing, ref __formatter_for_format_macro__) {
                     ^*****^

//! > ==========================================================================

//! > Test bad print! macros

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {
   let ba: ByteArray = "hello";

   // Bad brackets. TODO(orizi): Improve diagnostic to not include "write".
   print!["{}", ba];

   // No params.
   print!();

   // No format string.
   print!(ba);

   // Non existing inline argument.
   print!("{non_existing}");

   // Non existing provide argument.
   print!("{}", non_existing);

   // Too many arguments.
   print!("{}", ba, 1);

   // Too few arguments.
   print!("{}{}", ba);

   // Out of range positional argument.
   print!("{2}{1}{0}", ba, 1);

   // Unused arguments.
   print!("{2}{0}", ba, 2, 1);
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Plugin diagnostic: Macro `write` does not support this bracket type.
 --> lib.cairo:5:10
   print!["{}", ba];
         ^

error: Plugin diagnostic: Macro expected format string argument.
 --> lib.cairo:8:10
   print!();
         ^

error: Plugin diagnostic: Argument must be a string literal.
 --> lib.cairo:11:11
   print!(ba);
          ^^

error: Identifier not found.
 --> lib.cairo:14:13
   print!("{non_existing}");
            ^**********^

error: Identifier not found.
 --> lib.cairo:17:17
   print!("{}", non_existing);
                ^**********^

error: Plugin diagnostic: Unused argument.
 --> lib.cairo:20:21
   print!("{}", ba, 1);
                    ^

error: Plugin diagnostic: 2 positional arguments in format string, but only 1 arguments.
 --> lib.cairo:23:11
   print!("{}{}", ba);
          ^****^

error: Plugin diagnostic: Invalid reference to positional argument 2 (there are 2 arguments).
 --> lib.cairo:26:11
   print!("{2}{1}{0}", ba, 1);
          ^*********^

error: Plugin diagnostic: Unused argument.
 --> lib.cairo:29:25
   print!("{2}{0}", ba, 2, 1);
                        ^

warning: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:2:8
   let ba: ByteArray = "hello";
       ^^

error: Type annotations needed. Failed to infer ?5
 --> lib.cairo[print_macro][write_macro]:2:22
    match core::fmt::Display::fmt(@non_existing, ref __formatter_for_print_macros__) {
                     ^*****^

//! > ==========================================================================

//! > Test bad println! macros

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {
   let ba: ByteArray = "hello";

   // Bad brackets. TODO(orizi): Improve diagnostic to not include "write".
   println!["{}", ba];

   // No params.
   println!();

   // No format string.
   println!(ba);

   // Non existing inline argument.
   println!("{non_existing}");

   // Non existing provide argument.
   println!("{}", non_existing);

   // Too many arguments.
   println!("{}", ba, 1);

   // Too few arguments.
   println!("{}{}", ba);

   // Out of range positional argument.
   println!("{2}{1}{0}", ba, 1);

   // Unused arguments.
   println!("{2}{0}", ba, 2, 1);
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Plugin diagnostic: Macro `writeln` does not support this bracket type.
 --> lib.cairo:5:12
   println!["{}", ba];
           ^

error: Plugin diagnostic: Macro expected format string argument.
 --> lib.cairo:8:12
   println!();
           ^

error: Plugin diagnostic: Argument must be a string literal.
 --> lib.cairo:11:13
   println!(ba);
            ^^

error: Identifier not found.
 --> lib.cairo:14:15
   println!("{non_existing}");
              ^**********^

error: Identifier not found.
 --> lib.cairo:17:19
   println!("{}", non_existing);
                  ^**********^

error: Plugin diagnostic: Unused argument.
 --> lib.cairo:20:23
   println!("{}", ba, 1);
                      ^

error: Plugin diagnostic: 2 positional arguments in format string, but only 1 arguments.
 --> lib.cairo:23:13
   println!("{}{}", ba);
            ^****^

error: Plugin diagnostic: Invalid reference to positional argument 2 (there are 2 arguments).
 --> lib.cairo:26:13
   println!("{2}{1}{0}", ba, 1);
            ^*********^

error: Plugin diagnostic: Unused argument.
 --> lib.cairo:29:27
   println!("{2}{0}", ba, 2, 1);
                          ^

warning: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:2:8
   let ba: ByteArray = "hello";
       ^^

error: Type annotations needed. Failed to infer ?5
 --> lib.cairo[println_macro][writeln_macro]:2:22
    match core::fmt::Display::fmt(@non_existing, ref __formatter_for_print_macros__) {
                     ^*****^

//! > ==========================================================================

//! > Test bad panic! macros

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {
   let ba: ByteArray = "hello";

   // Bad brackets. TODO(orizi): Improve diagnostic to not include "write".
   panic!["{}", ba];

   // No params.
   panic!();

   // No format string.
   panic!(ba);

   // Non existing inline argument.
   panic!("{non_existing}");

   // Non existing provide argument.
   panic!("{}", non_existing);

   // Too many arguments.
   panic!("{}", ba, 1);

   // Too few arguments.
   panic!("{}{}", ba);

   // Out of range positional argument.
   panic!("{2}{1}{0}", ba, 1);

   // Unused arguments.
   panic!("{2}{0}", ba, 2, 1);
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Plugin diagnostic: Macro `panic` does not support this bracket type.
 --> lib.cairo:5:10
   panic!["{}", ba];
         ^

error: Plugin diagnostic: Argument must be a string literal.
 --> lib.cairo:11:11
   panic!(ba);
          ^^

error: Identifier not found.
 --> lib.cairo:14:13
   panic!("{non_existing}");
            ^**********^

error: Identifier not found.
 --> lib.cairo:17:17
   panic!("{}", non_existing);
                ^**********^

error: Plugin diagnostic: Unused argument.
 --> lib.cairo:20:21
   panic!("{}", ba, 1);
                    ^

error: Plugin diagnostic: 2 positional arguments in format string, but only 1 arguments.
 --> lib.cairo:23:11
   panic!("{}{}", ba);
          ^****^

error: Plugin diagnostic: Invalid reference to positional argument 2 (there are 2 arguments).
 --> lib.cairo:26:11
   panic!("{2}{1}{0}", ba, 1);
          ^*********^

error: Plugin diagnostic: Unused argument.
 --> lib.cairo:29:25
   panic!("{2}{0}", ba, 2, 1);
                        ^

warning: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:2:8
   let ba: ByteArray = "hello";
       ^^

error: Type annotations needed. Failed to infer ?4
 --> lib.cairo[panic_macro][write_macro]:2:22
    match core::fmt::Display::fmt(@non_existing, ref __formatter_for_panic_macro__) {
                     ^*****^

//! > ==========================================================================

//! > Test unknown macro

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {
   let _x = foo!(0);
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Inline macro `foo` not found.
 --> lib.cairo:2:13
   let _x = foo!(0);
            ^*****^

//! > ==========================================================================

//! > Test comment affects macro name

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: false)

//! > function
fn foo() {
   // This comment should not appear in the macro name
   array![0_felt252];
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
