//! > Test generics substitution.

//! > test_function_name
test_function_diagnostics

//! > function
extern type A<S>;
extern fn bar<T>(x:T) -> A::<T> nopanic;

fn foo(a: A::<felt>) -> A::<A::<felt>> {
    let res = bar::<A::<felt>>(a);
    let bad : A::<A::<bool>> = res;
    res
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Unexpected argument type. Expected: "test::A::<test::A::<core::bool>>", found: "test::A::<test::A::<core::felt>>".
 --> lib.cairo:6:32
    let bad : A::<A::<bool>> = res;
                               ^*^

//! > ==========================================================================

//! > Test generics in trait functions.

//! > test_function_name
test_function_diagnostics

//! > function
fn foo() {
    5.foo(true);
}

//! > module_code
trait MyTrait<T> {
    fn foo<S>(self: T, y: S) -> (T, S);
}
impl MyImpl of MyTrait::<felt> {
    fn foo<S>(self: felt, y: S) -> (felt, S) {
        (self, y)
    }
}

//! > function_name
foo

//! > expected_diagnostics
