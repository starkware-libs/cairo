//! > Test generics substitution.

//! > test_runner_name
test_function_diagnostics

//! > function
extern type A<S>;
extern fn bar<T>(x:T) -> A::<T> nopanic;

fn foo(a: A::<felt252>) -> A::<A::<felt252>> {
    let res = bar::<A::<felt252>>(a);
    let bad : A::<A::<bool>> = res;
    res
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Unexpected argument type. Expected: "test::A::<test::A::<core::bool>>", found: "test::A::<test::A::<core::felt252>>".
 --> lib.cairo:6:32
    let bad : A::<A::<bool>> = res;
                               ^*^

//! > ==========================================================================

//! > Test generics in trait functions.

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() {
    5.foo(true);
    MyTrait::foo(6, false);
}

//! > module_code
trait MyTrait<T> {
    fn foo<S>(self: T, y: S) -> (T, S);
}
impl MyImpl of MyTrait::<felt252> {
    fn foo<S>(self: felt252, y: S) -> (felt252, S) {
        (self, y)
    }
}

//! > function_name
foo

//! > expected_diagnostics

//! > ==========================================================================

//! > Test ref self in trait functions.

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() {
    let mut x = 5;
    x.foo();
}

//! > module_code
trait MyTrait<T> {
    fn foo(ref self: T);
}
impl MyImpl of MyTrait::<felt252> {
    fn foo(ref self: felt252) {}
}

//! > function_name
foo

//! > expected_diagnostics

//! > ==========================================================================

//! > Test generic kind failures

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() {
    bar::<1,1,1,1>();
    bar::<felt252,felt252>();
    bar::<felt252>();
}

//! > module_code
fn bar<A, const B, impl C: MyTrait::<felt252>>(){}

//! > function_name
foo

//! > expected_diagnostics
error: Trait not found.
 --> lib.cairo:1:28
fn bar<A, const B, impl C: MyTrait::<felt252>>(){}
                           ^*****^

error: Wrong number of generic arguments. Expected 3, found: 4
 --> lib.cairo:3:5
    bar::<1,1,1,1>();
    ^*^

error: Unknown type.
 --> lib.cairo:3:11
    bar::<1,1,1,1>();
          ^

error: Unknown impl.
 --> lib.cairo:3:15
    bar::<1,1,1,1>();
              ^

error: Unknown literal.
 --> lib.cairo:4:19
    bar::<felt252,felt252>();
                  ^*****^

error: Const generic inference not yet supported.
 --> lib.cairo:5:5
    bar::<felt252>();
    ^*^

//! > ==========================================================================

//! > Test generic impl

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() {
    bar::<MyImpl>();
    bar::<AnotherImpl>();
}

//! > module_code
trait MyTrait<T> {}
impl MyImpl of MyTrait::<felt252> {}
fn bar<impl C: MyTrait::<felt252>>(){}
extern fn hoo<impl C: MyTrait::<felt252>>() nopanic;

trait AnotherTrait<T> {}
impl AnotherImpl of AnotherTrait::<felt252> {}

//! > function_name
foo

//! > expected_diagnostics
error: Extern items with impl generics are not supported
 --> lib.cairo:4:15
extern fn hoo<impl C: MyTrait::<felt252>>() nopanic;
              ^************************^

error: Supplied impl does not match the required trait
 --> lib.cairo:10:11
    bar::<AnotherImpl>();
          ^*********^

//! > ==========================================================================

//! > Test generic impl params usage

//! > test_runner_name
test_function_diagnostics

//! > function
fn f(){}

//! > module_code
fn foo<T, impl GenericImpl: MyTrait::<T>>(x: T) {
    GenericImpl::foo(x);
    MyImpl::foo(4);
    MyTrait::foo(x);
    x.foo();
    foo::<T, GenericImpl>(x);
    bar::<T, GenericImpl>();
}
fn bar<T, impl GenericImpl: MyTrait::<felt252>>() {}

trait MyTrait<T> {
    fn foo(self: T);
}
impl MyImpl of MyTrait::<felt252> {
    fn foo(self: felt252) {
    }
}

trait AnotherTrait<T> {
    fn foo(self: T);
}
impl AnotherImpl of AnotherTrait::<felt252> {
    fn foo(self: felt252) {
    }
}

//! > function_name
f

//! > expected_diagnostics
error: Supplied impl does not match the required trait
 --> lib.cairo:7:14
    bar::<T, GenericImpl>();
             ^*********^

//! > ==========================================================================

//! > Test generic impl params on generic impl

//! > test_runner_name
test_function_diagnostics

//! > function
fn f(){
    MyImpl::<MyImpl2>::foo();
}

//! > module_code
trait MyTrait {
    fn foo();
}
trait MyTrait2 {
    fn foo2();
}
impl MyImpl<impl Imp: MyTrait2> of MyTrait {
    fn foo() {
        Imp::foo2()
    }
}
impl MyImpl2 of MyTrait2 {
    fn foo2() {
    }
}

//! > function_name
f

//! > expected_diagnostics

//! > ==========================================================================

//! > Test generic deduction

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo() {
    let mut x = bar();
    x = bar::<felt252, _>();
    x = bar::<_, u8>();
    x = bar::<u16, u32>();
}

//! > module_code
struct MyStruct<S, T> {}

extern fn bar<S, T>() -> MyStruct<S, T> nopanic;

//! > function_name
foo

//! > expected_diagnostics
error: Unexpected argument type. Expected: "test::MyStruct::<core::felt252, core::integer::u8>", found: "test::MyStruct::<core::integer::u16, core::integer::u32>".
 --> lib.cairo:8:9
    x = bar::<u16, u32>();
        ^***************^
