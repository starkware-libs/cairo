//! > Test generics substitution.

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
extern type A<S>;
extern fn bar<T>(x:T) -> A::<T> nopanic;

fn foo(a: A::<felt252>) -> A::<A::<felt252>> {
    let res = bar::<A::<felt252>>(a);
    let _bad : A::<A::<bool>> = res;
    res
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Unexpected argument type. Expected: "test::A::<test::A::<core::bool>>", found: "test::A::<test::A::<core::felt252>>".
 --> lib.cairo:6:33
    let _bad : A::<A::<bool>> = res;
                                ^*^

//! > ==========================================================================

//! > Test generics in trait functions.

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: false)

//! > function
fn foo() {
    5.foo(true);
    MyTrait::foo(6, false);
}

//! > module_code
trait MyTrait<T> {
    fn foo<S>(self: T, y: S) -> (T, S);
}
impl MyImpl of MyTrait::<felt252> {
    fn foo<S>(self: felt252, y: S) -> (felt252, S) {
        (self, y)
    }
}

//! > function_name
foo

//! > expected_diagnostics

//! > ==========================================================================

//! > Test ref self in trait functions.

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: false)

//! > function
fn foo() {
    let mut x = 5;
    x.foo();
}

//! > module_code
trait MyTrait<T> {
    fn foo(ref self: T);
}
impl MyImpl of MyTrait::<felt252> {
    fn foo(ref self: felt252) {}
}

//! > function_name
foo

//! > expected_diagnostics

//! > ==========================================================================

//! > Test generic kind failures

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {
    bar::<1,1,1,1>();
    bar::<felt252,felt252>();
    bar::<felt252>();
    // TODO(spapini): -1 should give a bounds check error.
    bar::<usize,-1, A>();
}

//! > module_code
fn bar<A, const B: usize, impl C: MyTrait::<felt252>>(){}

//! > function_name
foo

//! > expected_diagnostics
error: Const generic args are not allowed in this context.
 --> lib.cairo:1:11
fn bar<A, const B: usize, impl C: MyTrait::<felt252>>(){}
          ^************^

error: Trait not found.
 --> lib.cairo:1:35
fn bar<A, const B: usize, impl C: MyTrait::<felt252>>(){}
                                  ^*****^

error: Expected 3 generic arguments, found 4.
 --> lib.cairo:3:17
    bar::<1,1,1,1>();
                ^

error: Unknown literal.
 --> lib.cairo:4:19
    bar::<felt252,felt252>();
                  ^*****^

error: Const generic inference not yet supported.
 --> lib.cairo:5:5
    bar::<felt252>();
    ^*^

error: Impl not found.
 --> lib.cairo:7:21
    bar::<usize,-1, A>();
                    ^

//! > ==========================================================================

//! > Test generic impl

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {
    bar::<MyImpl>();
    bar::<AnotherImpl>();
}

//! > module_code
trait MyTrait<T> {}
impl MyImpl of MyTrait::<felt252> {}
fn bar<impl C: MyTrait::<felt252>>(){}
extern fn hoo<impl C: MyTrait::<felt252>>() nopanic;

trait AnotherTrait<T> {}
impl AnotherImpl of AnotherTrait::<felt252> {}

//! > function_name
foo

//! > expected_diagnostics
error: Extern items with impl generics are not supported
 --> lib.cairo:4:15
extern fn hoo<impl C: MyTrait::<felt252>>() nopanic;
              ^************************^

error: Expected an impl of `test::MyTrait::<core::felt252>`. Got an impl of `test::AnotherTrait::<core::felt252>`.
 --> lib.cairo:10:11
    bar::<AnotherImpl>();
          ^*********^

//! > ==========================================================================

//! > Test generic impl params usage

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn f(){}

//! > module_code
fn foo<T, impl GenericImpl: MyTrait::<T>>(x: T) {
    GenericImpl::foo(x);
    MyImpl::foo(4);
    MyTrait::foo(x);
    x.foo();
    foo::<T, GenericImpl>(x);
    bar::<T, GenericImpl>();
}
fn bar<T, impl GenericImpl: MyTrait::<felt252>>() {}

trait MyTrait<T> {
    fn foo(self: T);
}
impl MyImpl of MyTrait::<felt252> {
    fn foo(self: felt252) {
    }
}

trait AnotherTrait<T> {
    fn foo(self: T);
}
impl AnotherImpl of AnotherTrait::<felt252> {
    fn foo(self: felt252) {
    }
}

//! > function_name
f

//! > expected_diagnostics
error: Expected an impl of `test::MyTrait::<core::felt252>`. Got an impl of `test::MyTrait::<T>`.
 --> lib.cairo:7:14
    bar::<T, GenericImpl>();
             ^*********^

//! > ==========================================================================

//! > Test generic impl params on generic impl

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: false)

//! > function
fn f(){
    MyImpl::<MyImpl2>::foo();
}

//! > module_code
trait MyTrait {
    fn foo();
}
trait MyTrait2 {
    fn foo2();
}
impl MyImpl<impl Imp: MyTrait2> of MyTrait {
    fn foo() {
        Imp::foo2()
    }
}
impl MyImpl2 of MyTrait2 {
    fn foo2() {
    }
}

//! > function_name
f

//! > expected_diagnostics

//! > ==========================================================================

//! > Test generic deduction

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {
    let mut x = bar();
    x = bar::<felt252, _>();
    x = bar::<_, u8>();
    x = bar::<u16, u32>();
}

//! > module_code
struct MyStruct<S, T> {}

extern fn bar<S, T>() -> MyStruct<S, T> nopanic;

//! > function_name
foo

//! > expected_diagnostics
error: Unexpected argument type. Expected: "test::MyStruct::<core::felt252, core::integer::u8>", found: "test::MyStruct::<core::integer::u16, core::integer::u32>".
 --> lib.cairo:8:9
    x = bar::<u16, u32>();
        ^***************^

//! > ==========================================================================

//! > Test out of order generics.

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: false)

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
trait ATrait<T> {}
trait ATrait2<T, impl Timpl: ATrait<T>> {}

struct B<impl Timpl1: ATrait<T>, T, impl Timpl2: ATrait2<T>> {
    t: T
}

//! > expected_diagnostics

//! > ==========================================================================

//! > Test out of order generic impls.

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: false)

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
trait ATrait<T> {}
trait ATrait2<T, impl Timpl: ATrait<T>> {}

struct B<T, impl Timpl2: ATrait2<T>, impl Timpl1: ATrait<T>> {
    t: T
}

//! > expected_diagnostics

//! > ==========================================================================

//! > Test named generics

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {
    // Failures.
    bar::<felt252, G: felt252>();
    bar::<T: felt252, u32>();
    bar::<T: felt252, T: u32>();
    bar::<felt252, T: u32>();
    bar::<felt252, u32, AFelt, BUint, u64>();
    bar::<S: felt252, T: u32>();

    // Successes.
    bar::<felt252, S: u32>();
    bar::<felt252, S: u32, X: _>();
    bar::<S: _, X: AFelt, Y: BUint>();
    bar::<felt252, u32, X: AFelt, Y: BUint>();
}

//! > function_name
foo

//! > module_code
trait ATrait<T> {}
impl AFelt of ATrait<felt252> {}
trait BTrait<T> {}
impl BUint of BTrait<u32> {}

fn bar<T, S, impl X: ATrait<T>, impl Y: BTrait<S>>(){}

//! > expected_diagnostics
error: Unknown generic parameter `G`.
 --> lib.cairo:9:20
    bar::<felt252, G: felt252>();
                   ^********^

error: Positional generic parameters must come before named generic parameters.
 --> lib.cairo:10:23
    bar::<T: felt252, u32>();
                      ^*^

error: Generic argument `T` is specified more than once.
 --> lib.cairo:11:23
    bar::<T: felt252, T: u32>();
                      ^****^

error: Generic argument `T` is specified more than once.
 --> lib.cairo:12:20
    bar::<felt252, T: u32>();
                   ^****^

error: Expected 4 generic arguments, found 5.
 --> lib.cairo:13:39
    bar::<felt252, u32, AFelt, BUint, u64>();
                                      ^*^

error: Generic argument `T` is out of order.
 --> lib.cairo:14:23
    bar::<S: felt252, T: u32>();
                      ^****^

//! > ==========================================================================

//! > Unknown unnamed impl generic parameter.

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {
}

//! > function_name
foo

//! > module_code
fn bar<+unknown>() {}

//! > expected_diagnostics
error: Trait not found.
 --> lib.cairo:1:9
fn bar<+unknown>() {}
        ^*****^

//! > ==========================================================================

//! > Unknown named impl generic parameter.

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {
}

//! > function_name
foo

//! > module_code
fn bar<impl X: unknown>() {}

//! > expected_diagnostics
error: Trait not found.
 --> lib.cairo:1:16
fn bar<impl X: unknown>() {}
               ^*****^

//! > ==========================================================================

//! > Test impl infernce cycle

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
trait Introspect<T> {
}

#[derive(Drop)]
struct Generic<T, +Introspect<T>> {
    value: T,
}

fn foo() {
    let _generic = Generic { value: 123 };
}

impl GenericStructIntrospect<T, impl IntrospectTImp: Introspect<T>> of Introspect<Generic<T>> {}
impl Felt252Introspect of Introspect<felt252> {}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Cycle detected while resolving generic param. Try specifying the generic impl parameter explicitly to break the cycle.
 --> lib.cairo:13:72
impl GenericStructIntrospect<T, impl IntrospectTImp: Introspect<T>> of Introspect<Generic<T>> {}
                                                                       ^********************^

//! > ==========================================================================

//! > Generic param depends on the next generic param

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: false)

//! > function
fn foo() {
}

//! > function_name
foo

//! > module_code
trait MyTrait<+Drop<T>, T> {
}

//! > function_body

//! > expected_diagnostics

//! > ==========================================================================

//! > Missing generic param

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {
}

//! > function_name
foo

//! > module_code
trait MyTrait<+Drop<T>, +Copy<T>> {
}

//! > function_body

//! > expected_diagnostics
error: Type not found.
 --> lib.cairo:1:21
trait MyTrait<+Drop<T>, +Copy<T>> {
                    ^

error: Type not found.
 --> lib.cairo:1:31
trait MyTrait<+Drop<T>, +Copy<T>> {
                              ^

//! > ==========================================================================

//! > Pass type instad of impl to trait.

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {
}

//! > function_name
foo

//! > module_code
trait MyTrait<T, +Drop<T>> {
}

impl MyImpl<T> of MyTrait<T, T> {
}

//! > function_body

//! > expected_diagnostics
error: Unknown impl.
 --> lib.cairo:4:30
impl MyImpl<T> of MyTrait<T, T> {
                             ^
