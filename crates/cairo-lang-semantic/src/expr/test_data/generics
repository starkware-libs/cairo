//! > Test generics substitution.

//! > test_function_name
test_function_diagnostics

//! > function
extern type A<S>;
extern fn bar<T>(x:T) -> A::<T> nopanic;

fn foo(a: A::<felt>) -> A::<A::<felt>> {
    let res = bar::<A::<felt>>(a);
    let bad : A::<A::<bool>> = res;
    res
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Unexpected argument type. Expected: "test::A::<test::A::<core::bool>>", found: "test::A::<test::A::<core::felt>>".
 --> lib.cairo:6:32
    let bad : A::<A::<bool>> = res;
                               ^*^

//! > ==========================================================================

//! > Test generics in trait functions.

//! > test_function_name
test_function_diagnostics

//! > function
fn foo() {
    5.foo(true);
    MyTrait::foo(6, false);
}

//! > module_code
trait MyTrait<T> {
    fn foo<S>(self: T, y: S) -> (T, S);
}
impl MyImpl of MyTrait::<felt> {
    fn foo<S>(self: felt, y: S) -> (felt, S) {
        (self, y)
    }
}

//! > function_name
foo

//! > expected_diagnostics

//! > ==========================================================================

//! > Test generic kind failures

//! > test_function_name
test_function_diagnostics

//! > function
fn foo() {
    bar::<1,1,1,1>();
    bar::<felt,felt>();
    bar::<felt>();
}

//! > module_code
fn bar<A, const B, impl C: MyTrait::<felt>>(){}

//! > function_name
foo

//! > expected_diagnostics
error: Wrong number of generic arguments. Expected 3, found: 4
 --> lib.cairo:3:5
    bar::<1,1,1,1>();
    ^*^

error: Unknown type.
 --> lib.cairo:3:11
    bar::<1,1,1,1>();
          ^

error: Unknown impl.
 --> lib.cairo:3:15
    bar::<1,1,1,1>();
              ^

error: Unknown literal.
 --> lib.cairo:4:16
    bar::<felt,felt>();
               ^**^

error: Const generic inference not yet supported.
 --> lib.cairo:5:5
    bar::<felt>();
    ^*^

//! > ==========================================================================

//! > Test generic impl

//! > test_function_name
test_function_diagnostics

//! > function
fn foo() {
    bar::<MyImpl>();
}

//! > module_code
trait MyTrait<T> {}
impl MyImpl of MyTrait::<felt> {}
fn bar<impl C: MyTrait::<felt>>(){}
extern fn hoo<impl C: MyTrait::<felt>>() nopanic;

//! > function_name
foo

//! > expected_diagnostics
error: Extern functions with impl generics are not supported
 --> lib.cairo:4:15
extern fn hoo<impl C: MyTrait::<felt>>() nopanic;
              ^*********************^
