//! > Test reference type desugaring to Box<@T>

//! > test_runner_name
test_expr_semantics

//! > expr_code
&5_u32

//! > crate_settings
edition = "2023_01"

[experimental_features]
negative_impls = false
associated_item_constraints = false
coupons = false
user_defined_inline_macros = false
references = true

//! > expected_semantics
FunctionCall(
    ExprFunctionCall {
        function: core::box::BoxImpl::<@core::integer::u32>::new,
        args: [
            Value(
                Snapshot(
                    ExprSnapshot {
                        inner: Literal(
                            ExprLiteral {
                                value: 5,
                                ty: core::integer::u32,
                            },
                        ),
                        ty: @core::integer::u32,
                    },
                ),
            ),
        ],
        coupon_arg: None,
        ty: core::box::Box::<@core::integer::u32>,
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test double reference & &x

//! > test_runner_name
test_expr_semantics

//! > expr_code
& &5_u32

//! > crate_settings
edition = "2023_01"

[experimental_features]
negative_impls = false
associated_item_constraints = false
coupons = false
user_defined_inline_macros = false
references = true

//! > expected_semantics
FunctionCall(
    ExprFunctionCall {
        function: core::box::BoxImpl::<@core::box::Box::<@core::integer::u32>>::new,
        args: [
            Value(
                Snapshot(
                    ExprSnapshot {
                        inner: FunctionCall(
                            ExprFunctionCall {
                                function: core::box::BoxImpl::<@core::integer::u32>::new,
                                args: [
                                    Value(
                                        Snapshot(
                                            ExprSnapshot {
                                                inner: Literal(
                                                    ExprLiteral {
                                                        value: 5,
                                                        ty: core::integer::u32,
                                                    },
                                                ),
                                                ty: @core::integer::u32,
                                            },
                                        ),
                                    ),
                                ],
                                coupon_arg: None,
                                ty: core::box::Box::<@core::integer::u32>,
                            },
                        ),
                        ty: @core::box::Box::<@core::integer::u32>,
                    },
                ),
            ),
        ],
        coupon_arg: None,
        ty: core::box::Box::<@core::box::Box::<@core::integer::u32>>,
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test reference of snapshot &@x

//! > test_runner_name
test_expr_semantics

//! > expr_code
&@5_u32

//! > crate_settings
edition = "2023_01"

[experimental_features]
negative_impls = false
associated_item_constraints = false
coupons = false
user_defined_inline_macros = false
references = true

//! > expected_semantics
FunctionCall(
    ExprFunctionCall {
        function: core::box::BoxImpl::<@@core::integer::u32>::new,
        args: [
            Value(
                Snapshot(
                    ExprSnapshot {
                        inner: Snapshot(
                            ExprSnapshot {
                                inner: Literal(
                                    ExprLiteral {
                                        value: 5,
                                        ty: core::integer::u32,
                                    },
                                ),
                                ty: @core::integer::u32,
                            },
                        ),
                        ty: @@core::integer::u32,
                    },
                ),
            ),
        ],
        coupon_arg: None,
        ty: core::box::Box::<@@core::integer::u32>,
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test snapshot of reference @&x

//! > test_runner_name
test_expr_semantics

//! > expr_code
@&5_u32

//! > crate_settings
edition = "2023_01"

[experimental_features]
negative_impls = false
associated_item_constraints = false
coupons = false
user_defined_inline_macros = false
references = true

//! > expected_semantics
Snapshot(
    ExprSnapshot {
        inner: FunctionCall(
            ExprFunctionCall {
                function: core::box::BoxImpl::<@core::integer::u32>::new,
                args: [
                    Value(
                        Snapshot(
                            ExprSnapshot {
                                inner: Literal(
                                    ExprLiteral {
                                        value: 5,
                                        ty: core::integer::u32,
                                    },
                                ),
                                ty: @core::integer::u32,
                            },
                        ),
                    ),
                ],
                coupon_arg: None,
                ty: core::box::Box::<@core::integer::u32>,
            },
        ),
        ty: @core::box::Box::<@core::integer::u32>,
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test bitwise AND with reference operator

//! > test_runner_name
test_expr_semantics

//! > function_body
let a = &3_u32;
let b = 5_u32;

//! > expr_code
a & &b

//! > crate_settings
edition = "2023_01"

[experimental_features]
negative_impls = false
associated_item_constraints = false
coupons = false
user_defined_inline_macros = false
references = true

//! > expected_semantics
FunctionCall(
    ExprFunctionCall {
        function: ?1::bitand,
        args: [
            Value(
                Var(
                    LocalVarId(test::a),
                ),
            ),
            Value(
                FunctionCall(
                    ExprFunctionCall {
                        function: core::box::BoxImpl::<@core::integer::u32>::new,
                        args: [
                            Value(
                                Snapshot(
                                    ExprSnapshot {
                                        inner: Var(
                                            LocalVarId(test::b),
                                        ),
                                        ty: @core::integer::u32,
                                    },
                                ),
                            ),
                        ],
                        coupon_arg: None,
                        ty: core::box::Box::<@core::integer::u32>,
                    },
                ),
            ),
        ],
        coupon_arg: None,
        ty: core::box::Box::<@core::integer::u32>,
    },
)

//! > expected_diagnostics
error: Trait has no implementation in context: core::traits::BitAnd::<core::box::Box::<@core::integer::u32>>.
 --> lib.cairo:3:1
a & &b
^^^^^^

//! > ==========================================================================

//! > Test reference to struct

//! > test_runner_name
test_expr_semantics

//! > module_code
struct Point {
    x: u32,
    y: u32,
}

struct PPoint {
    point: Point,
}

//! > function_body
let p = PPoint { point: Point { x: 1, y: 2 } };

//! > expr_code
&p.point.x

//! > crate_settings
edition = "2023_01"

[experimental_features]
negative_impls = false
associated_item_constraints = false
coupons = false
user_defined_inline_macros = false
references = true

//! > expected_semantics
FunctionCall(
    ExprFunctionCall {
        function: core::box::BoxImpl::<@core::integer::u32>::new,
        args: [
            Value(
                Snapshot(
                    ExprSnapshot {
                        inner: MemberAccess(
                            ExprMemberAccess {
                                expr: MemberAccess(
                                    ExprMemberAccess {
                                        expr: Var(
                                            LocalVarId(test::p),
                                        ),
                                        concrete_struct_id: test::PPoint,
                                        member: MemberId(test::point),
                                        ty: test::Point,
                                    },
                                ),
                                concrete_struct_id: test::Point,
                                member: MemberId(test::x),
                                ty: core::integer::u32,
                            },
                        ),
                        ty: @core::integer::u32,
                    },
                ),
            ),
        ],
        coupon_arg: None,
        ty: core::box::Box::<@core::integer::u32>,
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test reference to array

//! > test_runner_name
test_expr_semantics

//! > function_body
let arr = array![1_u32, 2_u32, 3_u32];

//! > expr_code
&arr[1]

//! > crate_settings
edition = "2023_01"

[experimental_features]
negative_impls = false
associated_item_constraints = false
coupons = false
user_defined_inline_macros = false
references = true

//! > expected_semantics
FunctionCall(
    ExprFunctionCall {
        function: core::box::BoxImpl::<@@core::integer::u32>::new,
        args: [
            Value(
                Snapshot(
                    ExprSnapshot {
                        inner: FunctionCall(
                            ExprFunctionCall {
                                function: core::ops::index::DeprecatedIndexViewImpl::<core::array::Array::<core::integer::u32>, core::integer::u32, @core::integer::u32, core::array::ArrayIndex::<core::integer::u32>>::index,
                                args: [
                                    Value(
                                        Snapshot(
                                            ExprSnapshot {
                                                inner: Var(
                                                    LocalVarId(test::arr),
                                                ),
                                                ty: @core::array::Array::<core::integer::u32>,
                                            },
                                        ),
                                    ),
                                    Value(
                                        Literal(
                                            ExprLiteral {
                                                value: 1,
                                                ty: core::integer::u32,
                                            },
                                        ),
                                    ),
                                ],
                                coupon_arg: None,
                                ty: @core::integer::u32,
                            },
                        ),
                        ty: @@core::integer::u32,
                    },
                ),
            ),
        ],
        coupon_arg: None,
        ty: core::box::Box::<@@core::integer::u32>,
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test reference in function call

//! > test_runner_name
test_expr_semantics

//! > module_code
fn takes_box(b: Box<@u32>) {}

//! > function_body
let x = 42_u32;

//! > expr_code
takes_box(&x)

//! > crate_settings
edition = "2023_01"

[experimental_features]
negative_impls = false
associated_item_constraints = false
coupons = false
user_defined_inline_macros = false
references = true

//! > expected_semantics
FunctionCall(
    ExprFunctionCall {
        function: test::takes_box,
        args: [
            Value(
                FunctionCall(
                    ExprFunctionCall {
                        function: core::box::BoxImpl::<@core::integer::u32>::new,
                        args: [
                            Value(
                                Snapshot(
                                    ExprSnapshot {
                                        inner: Var(
                                            LocalVarId(test::x),
                                        ),
                                        ty: @core::integer::u32,
                                    },
                                ),
                            ),
                        ],
                        coupon_arg: None,
                        ty: core::box::Box::<@core::integer::u32>,
                    },
                ),
            ),
        ],
        coupon_arg: None,
        ty: (),
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test reference in assignment

//! > test_runner_name
test_expr_semantics

//! > function_body
let x = 42_u32;
let y = &x;

//! > expr_code
y

//! > crate_settings
edition = "2023_01"

[experimental_features]
negative_impls = false
associated_item_constraints = false
coupons = false
user_defined_inline_macros = false
references = true

//! > expected_semantics
Var(
    LocalVarId(test::y),
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test ref parameter after reference taken

//! > test_runner_name
test_expr_semantics

//! > module_code
fn modify_value(ref x: u32) {
    x = x + 1;
}

//! > function_body
let mut value = 5_u32;
// Take a reference - this should prevent mutation through ref parameter.
let r = &value;

//! > expr_code
modify_value(ref value)

//! > crate_settings
edition = "2023_01"

[experimental_features]
negative_impls = false
associated_item_constraints = false
coupons = false
user_defined_inline_macros = false
references = true

//! > expected_semantics
FunctionCall(
    ExprFunctionCall {
        function: test::modify_value,
        args: [
            Reference(
                LocalVarId(test::value),
            ),
        ],
        coupon_arg: None,
        ty: (),
    },
)

//! > expected_diagnostics
error: Cannot assign to a variable that has been referenced
 --> lib.cairo:7:18
modify_value(ref value)
                 ^^^^^
note: variable was referenced here:
  --> lib.cairo:6:9
let r = &value; {
        ^^^^^^

warning[E0001]: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:6:5
let r = &value; {
    ^
