//! > Test use initialization

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > module_code
mod X {
    pub const Y: u8 = 2;
}

//! > function_body
use X::Y;

//! > expr_code
Y

//! > expected_semantics
Constant(
    ExprConstant {
        const_value_id: 2,
        ty: core::integer::u8,
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test several uses

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > module_code
mod X {
    const X: u8 = 2;
    const Y: u8 = X;
}

//! > function_body
use X::X;
use X::Y;

//! > expr_code
X + Y

//! > expected_semantics
FunctionCall(
    ExprFunctionCall {
        function: core::integer::U8Add::add,
        args: [
            Value(
                Constant(
                    ExprConstant {
                        const_value_id: 2,
                        ty: core::integer::u8,
                    },
                ),
            ),
            Value(
                Constant(
                    ExprConstant {
                        const_value_id: 2,
                        ty: core::integer::u8,
                    },
                ),
            ),
        ],
        coupon_arg: None,
        ty: core::integer::u8,
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test non used const

//! > test_runner_name
test_expr_semantics(expect_diagnostics: true)

//! > module_code
mod X {
    const Y: u8 = 2;
}

//! > function_body

//! > expr_code
Y

//! > expected_semantics
Missing(
    ExprMissing {
        ty: <missing>,
    },
)

//! > expected_diagnostics
error: Identifier not found.
 --> lib.cairo:5:1
Y
^

//! > ==========================================================================

//! > Test use the wrong const

//! > test_runner_name
test_expr_semantics(expect_diagnostics: true)

//! > module_code
mod X {
    const Y: u8 = 4;
    const Z: u8 = 2;
}

//! > function_body
use X::Z;

//! > expr_code
Y

//! > expected_semantics
Missing(
    ExprMissing {
        ty: <missing>,
    },
)

//! > expected_diagnostics
error: Identifier not found.
 --> lib.cairo:6:1
Y
^

warning: Unused use.
 --> lib.cairo:5:25
fn test_func() { use X::Z; {
                        ^

//! > ==========================================================================

//! > Test use double naming

//! > test_runner_name
test_expr_semantics(expect_diagnostics: true)

//! > module_code
mod X {
    const X: u8 = 2;
}

//! > function_body

//! > expr_code
X

//! > expected_semantics
Missing(
    ExprMissing {
        ty: <missing>,
    },
)

//! > expected_diagnostics
error: Expected variable or constant, found module.
 --> lib.cairo:5:1
X
^
