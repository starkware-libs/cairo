//! > Test use usage

//! > test_runner_name
test_expr_semantics(expect_diagnostics: warnings_only)

//! > module_code
mod X {
    pub const Y: u8 = 2;
}

//! > function_body

//! > expr_code
{ use X::Y; }

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Item(
                StatementItem,
            ),
        ],
        tail: None,
        ty: (),
    },
)

//! > expected_diagnostics
warning: Unused use.
 --> lib.cairo:5:10
{ use X::Y; }
         ^

//! > ==========================================================================

//! > Test several uses

//! > test_runner_name
test_expr_semantics(expect_diagnostics: warnings_only)

//! > module_code
mod X {
    const X: u8 = 2;
    const Y: u8 = X;
    const Z: u8 = Y;
}

//! > function_body
use X::{X, Y, Z};
let _ = X + Y;

//! > expr_code
{}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [],
        tail: None,
        ty: (),
    },
)

//! > expected_diagnostics
warning: Unused use.
 --> lib.cairo:6:32
fn test_func() { use X::{X, Y, Z};
                               ^

//! > ==========================================================================

//! > Test use not allowed shadowing

//! > test_runner_name
test_expr_semantics(expect_diagnostics: true)

//! > module_code
mod X {
    const A: u8 = 1;
}

//! > function_body
use X::A;
const A: u8 = 4;
let _ = A;

//! > expr_code
{}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [],
        tail: None,
        ty: (),
    },
)

//! > expected_diagnostics
error: Multiple definitions of constant "A".
 --> lib.cairo:5:7
const A: u8 = 4;
      ^

//! > ==========================================================================

//! > Test use type struct usage

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > module_code
mod X {
    struct R {
        a: u8,
    }
}
use X::R as RR;

//! > function_body

//! > expr_code
{ 
    let _y = RR { a: 3 };
    use X::R;
    let _x = R { a: 4 }; 
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Let(
                StatementLet {
                    pattern: Variable(
                        _y,
                    ),
                    expr: StructCtor(
                        ExprStructCtor {
                            concrete_struct_id: test::X::R,
                            members: [
                                (
                                    MemberId(test::X::a),
                                    Literal(
                                        ExprLiteral {
                                            value: 3,
                                            ty: core::integer::u8,
                                        },
                                    ),
                                ),
                            ],
                            base_struct: None,
                            ty: test::X::R,
                        },
                    ),
                },
            ),
            Item(
                StatementItem,
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        _x,
                    ),
                    expr: StructCtor(
                        ExprStructCtor {
                            concrete_struct_id: test::X::R,
                            members: [
                                (
                                    MemberId(test::X::a),
                                    Literal(
                                        ExprLiteral {
                                            value: 4,
                                            ty: core::integer::u8,
                                        },
                                    ),
                                ),
                            ],
                            base_struct: None,
                            ty: test::X::R,
                        },
                    ),
                },
            ),
        ],
        tail: None,
        ty: (),
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test use type struct generic usage

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > module_code
mod X {
    struct R<T> {
        a: u8,
    }
}
use X::R as RR;

//! > function_body

//! > expr_code
{ 
    let _y = RR::<u8> { a: 3 };
    use X::R;
    let _x = R::<u8> { a: 4 }; 
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Let(
                StatementLet {
                    pattern: Variable(
                        _y,
                    ),
                    expr: StructCtor(
                        ExprStructCtor {
                            concrete_struct_id: test::X::R::<core::integer::u8>,
                            members: [
                                (
                                    MemberId(test::X::a),
                                    Literal(
                                        ExprLiteral {
                                            value: 3,
                                            ty: core::integer::u8,
                                        },
                                    ),
                                ),
                            ],
                            base_struct: None,
                            ty: test::X::R::<core::integer::u8>,
                        },
                    ),
                },
            ),
            Item(
                StatementItem,
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        _x,
                    ),
                    expr: StructCtor(
                        ExprStructCtor {
                            concrete_struct_id: test::X::R::<core::integer::u8>,
                            members: [
                                (
                                    MemberId(test::X::a),
                                    Literal(
                                        ExprLiteral {
                                            value: 4,
                                            ty: core::integer::u8,
                                        },
                                    ),
                                ),
                            ],
                            base_struct: None,
                            ty: test::X::R::<core::integer::u8>,
                        },
                    ),
                },
            ),
        ],
        tail: None,
        ty: (),
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test use type enum usage

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > module_code
mod X {
    enum R {
        A: u8,
        B: u16,
    }
}
use X::R as RR;

//! > function_body

//! > expr_code
{ 
    let _y = RR::A(2);
    use X::R;
    let _x = R::B(3); 
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Let(
                StatementLet {
                    pattern: Variable(
                        _y,
                    ),
                    expr: EnumVariantCtor(
                        ExprEnumVariantCtor {
                            variant: R::A,
                            value_expr: Literal(
                                ExprLiteral {
                                    value: 2,
                                    ty: core::integer::u8,
                                },
                            ),
                            ty: test::X::R,
                        },
                    ),
                },
            ),
            Item(
                StatementItem,
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        _x,
                    ),
                    expr: EnumVariantCtor(
                        ExprEnumVariantCtor {
                            variant: R::B,
                            value_expr: Literal(
                                ExprLiteral {
                                    value: 3,
                                    ty: core::integer::u16,
                                },
                            ),
                            ty: test::X::R,
                        },
                    ),
                },
            ),
        ],
        tail: None,
        ty: (),
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test use type enum generic usage

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > module_code
mod X {
    enum R<T> {
        A: u8,
        B: u16,
    }
}
use X::R as RR;

//! > function_body

//! > expr_code
{ 
    let _y = RR::<u8>::A(2);
    use X::R;
    let _x = R::<u16>::B(3); 
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Let(
                StatementLet {
                    pattern: Variable(
                        _y,
                    ),
                    expr: EnumVariantCtor(
                        ExprEnumVariantCtor {
                            variant: R::A,
                            value_expr: Literal(
                                ExprLiteral {
                                    value: 2,
                                    ty: core::integer::u8,
                                },
                            ),
                            ty: test::X::R::<core::integer::u8>,
                        },
                    ),
                },
            ),
            Item(
                StatementItem,
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        _x,
                    ),
                    expr: EnumVariantCtor(
                        ExprEnumVariantCtor {
                            variant: R::B,
                            value_expr: Literal(
                                ExprLiteral {
                                    value: 3,
                                    ty: core::integer::u16,
                                },
                            ),
                            ty: test::X::R::<core::integer::u16>,
                        },
                    ),
                },
            ),
        ],
        tail: None,
        ty: (),
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test use type extern usage

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > module_code
mod X {
    extern type R;
    extern fn new_r() -> R nopanic;
}
use X::R as RR;
use X::new_r;

//! > function_body

//! > expr_code
{ 
    let _y: RR = new_r();
    use X::R;
    let _x: R = new_r();
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Let(
                StatementLet {
                    pattern: Variable(
                        _y,
                    ),
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: test::X::new_r,
                            args: [],
                            coupon_arg: None,
                            ty: test::X::R,
                        },
                    ),
                },
            ),
            Item(
                StatementItem,
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        _x,
                    ),
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: test::X::new_r,
                            args: [],
                            coupon_arg: None,
                            ty: test::X::R,
                        },
                    ),
                },
            ),
        ],
        tail: None,
        ty: (),
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test use type extern generic usage

//! > test_runner_name
test_expr_semantics(expect_diagnostics: warnings_only)

//! > module_code
mod X {
    extern type R<T>;
    extern fn new_r<T>() -> R<T> nopanic;
}
use X::R as RR;
use X::new_r;

//! > function_body

//! > expr_code
{ 
    let y: RR::<u8> = new_r();
    use X::R;
    let x: R::<u16> = new_r();
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Let(
                StatementLet {
                    pattern: Variable(
                        y,
                    ),
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: test::X::new_r::<core::integer::u8>,
                            args: [],
                            coupon_arg: None,
                            ty: test::X::R::<core::integer::u8>,
                        },
                    ),
                },
            ),
            Item(
                StatementItem,
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        x,
                    ),
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: test::X::new_r::<core::integer::u16>,
                            args: [],
                            coupon_arg: None,
                            ty: test::X::R::<core::integer::u16>,
                        },
                    ),
                },
            ),
        ],
        tail: None,
        ty: (),
    },
)

//! > expected_diagnostics
warning[E0001]: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:9:9
    let y: RR::<u8> = new_r();
        ^

warning[E0001]: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:11:9
    let x: R::<u16> = new_r();
        ^

//! > ==========================================================================

//! > Test use type enum and const shadowing

//! > test_runner_name
test_expr_semantics(expect_diagnostics: true)

//! > module_code
mod X {
    enum R {
        A: u8,
        B: u16,
    }
}

mod R {
    pub const C: u8 = 2;
}

//! > function_body

//! > expr_code
{ 
    use X::R;
    let _y = R::C;
    let _x = R::B(3); 
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Item(
                StatementItem,
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        _y,
                    ),
                    expr: Missing(
                        ExprMissing {
                            ty: <missing>,
                        },
                    ),
                },
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        _x,
                    ),
                    expr: EnumVariantCtor(
                        ExprEnumVariantCtor {
                            variant: R::B,
                            value_expr: Literal(
                                ExprLiteral {
                                    value: 3,
                                    ty: core::integer::u16,
                                },
                            ),
                            ty: test::X::R,
                        },
                    ),
                },
            ),
        ],
        tail: None,
        ty: (),
    },
)

//! > expected_diagnostics
error: Enum "test::X::R" has no variant "C"
 --> lib.cairo:14:17
    let _y = R::C;
                ^

//! > ==========================================================================

//! > Test const and type enum shadowing

//! > test_runner_name
test_expr_semantics(expect_diagnostics: true)

//! > module_code
mod X {
    enum R {
        A: u8,
        B: u16,
    }
}

const R: u8 = 3;

//! > function_body

//! > expr_code
{ 
    use X::R;
    let _y = R;
    let _x = R::B(3);
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Item(
                StatementItem,
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        _y,
                    ),
                    expr: Missing(
                        ExprMissing {
                            ty: <missing>,
                        },
                    ),
                },
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        _x,
                    ),
                    expr: EnumVariantCtor(
                        ExprEnumVariantCtor {
                            variant: R::B,
                            value_expr: Literal(
                                ExprLiteral {
                                    value: 3,
                                    ty: core::integer::u16,
                                },
                            ),
                            ty: test::X::R,
                        },
                    ),
                },
            ),
        ],
        tail: None,
        ty: (),
    },
)

//! > expected_diagnostics
error: Expected variable or constant, found type.
 --> lib.cairo:12:14
    let _y = R;
             ^

//! > ==========================================================================

//! > Test use type enum and const inside statement

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > module_code
mod X {
    enum R {
        A: u8,
        B: u16,
    }
}

use X::R;

//! > function_body

//! > expr_code
{ 
    const R: u8 = 3;

    let _y = R;
    let _x = R::B(3);
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Item(
                StatementItem,
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        _y,
                    ),
                    expr: Constant(
                        ExprConstant {
                            const_value_id: 3,
                            ty: core::integer::u8,
                        },
                    ),
                },
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        _x,
                    ),
                    expr: EnumVariantCtor(
                        ExprEnumVariantCtor {
                            variant: R::B,
                            value_expr: Literal(
                                ExprLiteral {
                                    value: 3,
                                    ty: core::integer::u16,
                                },
                            ),
                            ty: test::X::R,
                        },
                    ),
                },
            ),
        ],
        tail: None,
        ty: (),
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Testing use type generic enum

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > module_code
pub mod generic_type {
    pub struct S {
        pub x: u8,
    }
    pub enum E {
        A: u8,
        B: u16,
    }
}

use generic_type::E as EE;

//! > function_body

//! > expr_code
{ 
    use generic_type::E;
    let b = EE::B(3);
    match b {
        EE::A(_) => {},
        EE::B(_) => {},
    }
    let e = E::A(1);
    match e {
        E::A(_) => {},
        E::B(_) => {},
    }
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Item(
                StatementItem,
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        b,
                    ),
                    expr: EnumVariantCtor(
                        ExprEnumVariantCtor {
                            variant: E::B,
                            value_expr: Literal(
                                ExprLiteral {
                                    value: 3,
                                    ty: core::integer::u16,
                                },
                            ),
                            ty: test::generic_type::E,
                        },
                    ),
                },
            ),
            Expr(
                StatementExpr {
                    expr: Match(
                        ExprMatch {
                            matched_expr: Var(
                                LocalVarId(test::b),
                            ),
                            arms: [
                                MatchArm {
                                    patterns: [
                                        EnumVariant(
                                            PatternEnumVariant {
                                                variant: E::A,
                                                inner_pattern: Some(
                                                    Otherwise(
                                                        PatternOtherwise {
                                                            ty: core::integer::u8,
                                                        },
                                                    ),
                                                ),
                                                ty: test::generic_type::E,
                                            },
                                        ),
                                    ],
                                    expression: Block(
                                        ExprBlock {
                                            statements: [],
                                            tail: None,
                                            ty: (),
                                        },
                                    ),
                                },
                                MatchArm {
                                    patterns: [
                                        EnumVariant(
                                            PatternEnumVariant {
                                                variant: E::B,
                                                inner_pattern: Some(
                                                    Otherwise(
                                                        PatternOtherwise {
                                                            ty: core::integer::u16,
                                                        },
                                                    ),
                                                ),
                                                ty: test::generic_type::E,
                                            },
                                        ),
                                    ],
                                    expression: Block(
                                        ExprBlock {
                                            statements: [],
                                            tail: None,
                                            ty: (),
                                        },
                                    ),
                                },
                            ],
                            ty: (),
                        },
                    ),
                },
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        e,
                    ),
                    expr: EnumVariantCtor(
                        ExprEnumVariantCtor {
                            variant: E::A,
                            value_expr: Literal(
                                ExprLiteral {
                                    value: 1,
                                    ty: core::integer::u8,
                                },
                            ),
                            ty: test::generic_type::E,
                        },
                    ),
                },
            ),
        ],
        tail: Some(
            Match(
                ExprMatch {
                    matched_expr: Var(
                        LocalVarId(test::e),
                    ),
                    arms: [
                        MatchArm {
                            patterns: [
                                EnumVariant(
                                    PatternEnumVariant {
                                        variant: E::A,
                                        inner_pattern: Some(
                                            Otherwise(
                                                PatternOtherwise {
                                                    ty: core::integer::u8,
                                                },
                                            ),
                                        ),
                                        ty: test::generic_type::E,
                                    },
                                ),
                            ],
                            expression: Block(
                                ExprBlock {
                                    statements: [],
                                    tail: None,
                                    ty: (),
                                },
                            ),
                        },
                        MatchArm {
                            patterns: [
                                EnumVariant(
                                    PatternEnumVariant {
                                        variant: E::B,
                                        inner_pattern: Some(
                                            Otherwise(
                                                PatternOtherwise {
                                                    ty: core::integer::u16,
                                                },
                                            ),
                                        ),
                                        ty: test::generic_type::E,
                                    },
                                ),
                            ],
                            expression: Block(
                                ExprBlock {
                                    statements: [],
                                    tail: None,
                                    ty: (),
                                },
                            ),
                        },
                    ],
                    ty: (),
                },
            ),
        ),
        ty: (),
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Testing use star without implementation in Semantic

//! > test_runner_name
test_expr_semantics(expect_diagnostics: true)

//! > module_code
/// TODO(Tomer-StarkWare): Implement use star in Semantic
pub mod a {
    const C: u8 = 2;
}
pub mod b {
    use super::a::*;
}

//! > function_body

//! > expr_code
{ 
    let _s = b::C;
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Let(
                StatementLet {
                    pattern: Variable(
                        _s,
                    ),
                    expr: Missing(
                        ExprMissing {
                            ty: <missing>,
                        },
                    ),
                },
            ),
        ],
        tail: None,
        ty: (),
    },
)

//! > expected_diagnostics
error: Identifier not found.
 --> lib.cairo:10:17
    let _s = b::C;
                ^
