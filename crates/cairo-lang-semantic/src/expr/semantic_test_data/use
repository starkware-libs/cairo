//! > Test use usage

//! > test_runner_name
test_expr_semantics(expect_diagnostics: warnings_only)

//! > module_code
mod X {
    pub const Y: u8 = 2;
}

//! > function_body

//! > expr_code
{ use X::Y; }

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Item(
                StatementItem,
            ),
        ],
        tail: None,
        ty: (),
    },
)

//! > expected_diagnostics
warning: Unused use.
 --> lib.cairo:5:10
{ use X::Y; }
         ^

//! > ==========================================================================

//! > Test several uses

//! > test_runner_name
test_expr_semantics(expect_diagnostics: warnings_only)

//! > module_code
mod X {
    const X: u8 = 2;
    const Y: u8 = X;
    const Z: u8 = Y;
}

//! > function_body
use X::{X, Y, Z};
let _ = X + Y;

//! > expr_code
{}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [],
        tail: None,
        ty: (),
    },
)

//! > expected_diagnostics
warning: Unused use.
 --> lib.cairo:6:32
fn test_func() { use X::{X, Y, Z};
                               ^

//! > ==========================================================================

//! > Test use not allowed shadowing

//! > test_runner_name
test_expr_semantics(expect_diagnostics: true)

//! > module_code
mod X {
    const A: u8 = 1;
}

//! > function_body
use X::A;
const A: u8 = 4;
let _ = A;

//! > expr_code
{}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [],
        tail: None,
        ty: (),
    },
)

//! > expected_diagnostics
error: Multiple definitions of constant "A".
 --> lib.cairo:5:7
const A: u8 = 4;
      ^

//! > ==========================================================================

//! > Test use type struct usage

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > module_code
mod X {
    struct R {
        a: u8,
    }
}
use X::R as RR;

//! > function_body

//! > expr_code
{ 
    RR { a: 3 };
    use X::R;
    R { a: 4 }
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Expr(
                StatementExpr {
                    expr: StructCtor(
                        ExprStructCtor {
                            concrete_struct_id: test::X::R,
                            members: [
                                (
                                    MemberId(test::X::a),
                                    Literal(
                                        ExprLiteral {
                                            value: 3,
                                            ty: core::integer::u8,
                                        },
                                    ),
                                ),
                            ],
                            base_struct: None,
                            ty: test::X::R,
                        },
                    ),
                },
            ),
            Item(
                StatementItem,
            ),
        ],
        tail: Some(
            StructCtor(
                ExprStructCtor {
                    concrete_struct_id: test::X::R,
                    members: [
                        (
                            MemberId(test::X::a),
                            Literal(
                                ExprLiteral {
                                    value: 4,
                                    ty: core::integer::u8,
                                },
                            ),
                        ),
                    ],
                    base_struct: None,
                    ty: test::X::R,
                },
            ),
        ),
        ty: test::X::R,
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test use type struct generic usage

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > module_code
mod X {
    struct R<T> {
        a: u8,
    }
}
use X::R as RR;

//! > function_body

//! > expr_code
{ 
    RR::<u8> { a: 3 };
    use X::R;
    R::<u8> { a: 4 }
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Expr(
                StatementExpr {
                    expr: StructCtor(
                        ExprStructCtor {
                            concrete_struct_id: test::X::R::<core::integer::u8>,
                            members: [
                                (
                                    MemberId(test::X::a),
                                    Literal(
                                        ExprLiteral {
                                            value: 3,
                                            ty: core::integer::u8,
                                        },
                                    ),
                                ),
                            ],
                            base_struct: None,
                            ty: test::X::R::<core::integer::u8>,
                        },
                    ),
                },
            ),
            Item(
                StatementItem,
            ),
        ],
        tail: Some(
            StructCtor(
                ExprStructCtor {
                    concrete_struct_id: test::X::R::<core::integer::u8>,
                    members: [
                        (
                            MemberId(test::X::a),
                            Literal(
                                ExprLiteral {
                                    value: 4,
                                    ty: core::integer::u8,
                                },
                            ),
                        ),
                    ],
                    base_struct: None,
                    ty: test::X::R::<core::integer::u8>,
                },
            ),
        ),
        ty: test::X::R::<core::integer::u8>,
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test use type enum usage

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > module_code
mod X {
    enum R {
        A: u8,
        B: u16,
    }
}
use X::R as RR;

//! > function_body

//! > expr_code
{ 
    RR::A(2);
    use X::R;
    R::B(3)
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Expr(
                StatementExpr {
                    expr: EnumVariantCtor(
                        ExprEnumVariantCtor {
                            variant: R::A,
                            value_expr: Literal(
                                ExprLiteral {
                                    value: 2,
                                    ty: core::integer::u8,
                                },
                            ),
                            ty: test::X::R,
                        },
                    ),
                },
            ),
            Item(
                StatementItem,
            ),
        ],
        tail: Some(
            EnumVariantCtor(
                ExprEnumVariantCtor {
                    variant: R::B,
                    value_expr: Literal(
                        ExprLiteral {
                            value: 3,
                            ty: core::integer::u16,
                        },
                    ),
                    ty: test::X::R,
                },
            ),
        ),
        ty: test::X::R,
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test use type enum generic usage

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > module_code
mod X {
    enum R<T> {
        A: u8,
        B: u16,
    }
}
use X::R as RR;

//! > function_body

//! > expr_code
{ 
    RR::<u8>::A(2);
    use X::R;
    R::<u16>::B(3)
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Expr(
                StatementExpr {
                    expr: EnumVariantCtor(
                        ExprEnumVariantCtor {
                            variant: R::A,
                            value_expr: Literal(
                                ExprLiteral {
                                    value: 2,
                                    ty: core::integer::u8,
                                },
                            ),
                            ty: test::X::R::<core::integer::u8>,
                        },
                    ),
                },
            ),
            Item(
                StatementItem,
            ),
        ],
        tail: Some(
            EnumVariantCtor(
                ExprEnumVariantCtor {
                    variant: R::B,
                    value_expr: Literal(
                        ExprLiteral {
                            value: 3,
                            ty: core::integer::u16,
                        },
                    ),
                    ty: test::X::R::<core::integer::u16>,
                },
            ),
        ),
        ty: test::X::R::<core::integer::u16>,
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test use type extern usage

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > module_code
mod X {
    extern type R;
    extern fn new_r() -> R nopanic;
}
use X::{R as RR, new_r};

//! > function_body

//! > expr_code
{ 
    let _y: RR = new_r();
    use X::R;
    let _x: R = new_r();
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Let(
                StatementLet {
                    pattern: Variable(
                        _y,
                    ),
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: test::X::new_r,
                            args: [],
                            coupon_arg: None,
                            ty: test::X::R,
                        },
                    ),
                },
            ),
            Item(
                StatementItem,
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        _x,
                    ),
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: test::X::new_r,
                            args: [],
                            coupon_arg: None,
                            ty: test::X::R,
                        },
                    ),
                },
            ),
        ],
        tail: None,
        ty: (),
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test use type extern generic usage

//! > test_runner_name
test_expr_semantics(expect_diagnostics: warnings_only)

//! > module_code
mod X {
    extern type R<T>;
    extern fn new_r<T>() -> R<T> nopanic;
}
use X::{R as RR, new_r};

//! > function_body

//! > expr_code
{ 
    let y: RR::<u8> = new_r();
    use X::R;
    let x: R::<u16> = new_r();
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Let(
                StatementLet {
                    pattern: Variable(
                        y,
                    ),
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: test::X::new_r::<core::integer::u8>,
                            args: [],
                            coupon_arg: None,
                            ty: test::X::R::<core::integer::u8>,
                        },
                    ),
                },
            ),
            Item(
                StatementItem,
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        x,
                    ),
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: test::X::new_r::<core::integer::u16>,
                            args: [],
                            coupon_arg: None,
                            ty: test::X::R::<core::integer::u16>,
                        },
                    ),
                },
            ),
        ],
        tail: None,
        ty: (),
    },
)

//! > expected_diagnostics
warning[E0001]: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:8:9
    let y: RR::<u8> = new_r();
        ^

warning[E0001]: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:10:9
    let x: R::<u16> = new_r();
        ^

//! > ==========================================================================

//! > Test use type enum and const shadowing

//! > test_runner_name
test_expr_semantics(expect_diagnostics: true)

//! > module_code
mod X {
    enum R {
        A: u8,
        B: u16,
    }
}

mod R {
    pub const C: u8 = 2;
}

//! > function_body

//! > expr_code
{ 
    use X::R;
    R::C;
    R::B(3)
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Item(
                StatementItem,
            ),
            Expr(
                StatementExpr {
                    expr: Missing(
                        ExprMissing {
                            ty: <missing>,
                        },
                    ),
                },
            ),
        ],
        tail: Some(
            EnumVariantCtor(
                ExprEnumVariantCtor {
                    variant: R::B,
                    value_expr: Literal(
                        ExprLiteral {
                            value: 3,
                            ty: core::integer::u16,
                        },
                    ),
                    ty: test::X::R,
                },
            ),
        ),
        ty: test::X::R,
    },
)

//! > expected_diagnostics
error: Enum "test::X::R" has no variant "C"
 --> lib.cairo:14:8
    R::C;
       ^

//! > ==========================================================================

//! > Test const and type enum shadowing

//! > test_runner_name
test_expr_semantics(expect_diagnostics: true)

//! > module_code
mod X {
    enum R {
        A: u8,
        B: u16,
    }
}

const R: u8 = 3;

//! > function_body

//! > expr_code
{ 
    use X::R;
    let _y = R;
    R::B(3)
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Item(
                StatementItem,
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        _y,
                    ),
                    expr: Missing(
                        ExprMissing {
                            ty: <missing>,
                        },
                    ),
                },
            ),
        ],
        tail: Some(
            EnumVariantCtor(
                ExprEnumVariantCtor {
                    variant: R::B,
                    value_expr: Literal(
                        ExprLiteral {
                            value: 3,
                            ty: core::integer::u16,
                        },
                    ),
                    ty: test::X::R,
                },
            ),
        ),
        ty: test::X::R,
    },
)

//! > expected_diagnostics
error: Expected variable or constant, found type.
 --> lib.cairo:12:14
    let _y = R;
             ^

//! > ==========================================================================

//! > Test use type enum and const inside statement

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > module_code
mod X {
    enum R {
        A: u8,
        B: u16,
    }
}
use X::R;

//! > function_body

//! > expr_code
{ 
    const R: u8 = 3;
    let _y = R;
    R::B(3)
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Item(
                StatementItem,
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        _y,
                    ),
                    expr: Constant(
                        ExprConstant {
                            const_value_id: 3,
                            ty: core::integer::u8,
                        },
                    ),
                },
            ),
        ],
        tail: Some(
            EnumVariantCtor(
                ExprEnumVariantCtor {
                    variant: R::B,
                    value_expr: Literal(
                        ExprLiteral {
                            value: 3,
                            ty: core::integer::u16,
                        },
                    ),
                    ty: test::X::R,
                },
            ),
        ),
        ty: test::X::R,
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Testing use type generic enum

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > module_code
pub mod generic_type {
    pub struct S {
        pub x: u8,
    }
    pub enum E {
        A: u8,
        B: u16,
    }
}
use generic_type::E as EE;

//! > function_body

//! > expr_code
{ 
    use generic_type::E;
    match EE::B(3) {
        EE::A(_) => {},
        EE::B(_) => {},
    }
    match E::A(1) {
        E::A(_) => {},
        E::B(_) => {},
    }
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Item(
                StatementItem,
            ),
            Expr(
                StatementExpr {
                    expr: Match(
                        ExprMatch {
                            matched_expr: EnumVariantCtor(
                                ExprEnumVariantCtor {
                                    variant: E::B,
                                    value_expr: Literal(
                                        ExprLiteral {
                                            value: 3,
                                            ty: core::integer::u16,
                                        },
                                    ),
                                    ty: test::generic_type::E,
                                },
                            ),
                            arms: [
                                MatchArm {
                                    patterns: [
                                        EnumVariant(
                                            PatternEnumVariant {
                                                variant: E::A,
                                                inner_pattern: Some(
                                                    Otherwise(
                                                        PatternOtherwise {
                                                            ty: core::integer::u8,
                                                        },
                                                    ),
                                                ),
                                                ty: test::generic_type::E,
                                            },
                                        ),
                                    ],
                                    expression: Block(
                                        ExprBlock {
                                            statements: [],
                                            tail: None,
                                            ty: (),
                                        },
                                    ),
                                },
                                MatchArm {
                                    patterns: [
                                        EnumVariant(
                                            PatternEnumVariant {
                                                variant: E::B,
                                                inner_pattern: Some(
                                                    Otherwise(
                                                        PatternOtherwise {
                                                            ty: core::integer::u16,
                                                        },
                                                    ),
                                                ),
                                                ty: test::generic_type::E,
                                            },
                                        ),
                                    ],
                                    expression: Block(
                                        ExprBlock {
                                            statements: [],
                                            tail: None,
                                            ty: (),
                                        },
                                    ),
                                },
                            ],
                            ty: (),
                        },
                    ),
                },
            ),
        ],
        tail: Some(
            Match(
                ExprMatch {
                    matched_expr: EnumVariantCtor(
                        ExprEnumVariantCtor {
                            variant: E::A,
                            value_expr: Literal(
                                ExprLiteral {
                                    value: 1,
                                    ty: core::integer::u8,
                                },
                            ),
                            ty: test::generic_type::E,
                        },
                    ),
                    arms: [
                        MatchArm {
                            patterns: [
                                EnumVariant(
                                    PatternEnumVariant {
                                        variant: E::A,
                                        inner_pattern: Some(
                                            Otherwise(
                                                PatternOtherwise {
                                                    ty: core::integer::u8,
                                                },
                                            ),
                                        ),
                                        ty: test::generic_type::E,
                                    },
                                ),
                            ],
                            expression: Block(
                                ExprBlock {
                                    statements: [],
                                    tail: None,
                                    ty: (),
                                },
                            ),
                        },
                        MatchArm {
                            patterns: [
                                EnumVariant(
                                    PatternEnumVariant {
                                        variant: E::B,
                                        inner_pattern: Some(
                                            Otherwise(
                                                PatternOtherwise {
                                                    ty: core::integer::u16,
                                                },
                                            ),
                                        ),
                                        ty: test::generic_type::E,
                                    },
                                ),
                            ],
                            expression: Block(
                                ExprBlock {
                                    statements: [],
                                    tail: None,
                                    ty: (),
                                },
                            ),
                        },
                    ],
                    ty: (),
                },
            ),
        ),
        ty: (),
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Testing simple use star usage

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > crate_settings
edition = "2024_07"

//! > module_code
pub mod a {
    pub const IN_A: u8 = 2;
}
pub mod use_a_star {
    use super::a::*;
}

//! > function_body

//! > expr_code
use_a_star::IN_A

//! > expected_semantics
Constant(
    ExprConstant {
        const_value_id: 2,
        ty: core::integer::u8,
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Testing use star mutual usage

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > crate_settings
edition = "2024_07"

//! > module_code
mod a {
    use super::b::*;
}

mod b {
    use super::a::*;
}

//! > function_body

//! > expr_code
{}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [],
        tail: None,
        ty: (),
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Testing use star recursive import

//! > test_runner_name
test_expr_semantics(expect_diagnostics: warnings_only)

//! > crate_settings
edition = "2024_07"

//! > module_code
mod a {
    use a::a::a::a as b;
    use super::*;
}

//! > function_body

//! > expr_code
{}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [],
        tail: None,
        ty: (),
    },
)

//! > expected_diagnostics
warning: Unused import: `test::a::b`
 --> lib.cairo:2:18
    use a::a::a::a as b;
                 ^^^^^^

//! > ==========================================================================

//! > Testing use star imported non public module

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > crate_settings
edition = "2024_07"

//! > module_code
mod a {
    pub mod b {
        pub const ACCESSIBLE: u8 = 1;
    }
}
use a::b::*;

//! > function_body

//! > expr_code
ACCESSIBLE

//! > expected_semantics
Constant(
    ExprConstant {
        const_value_id: 1,
        ty: core::integer::u8,
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Testing use star public path

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > crate_settings
edition = "2024_07"

//! > module_code
mod a {
    pub mod b {
        pub const C: u8 = 1;
    }
}

mod c {
    pub mod d {
        pub use super::super::a::b::*;
    }
}
use c::d::*;

//! > function_body

//! > expr_code
C

//! > expected_semantics
Constant(
    ExprConstant {
        const_value_id: 1,
        ty: core::integer::u8,
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Testing use star accessible module crate

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > crate_settings
edition = "2024_07"

//! > module_code
mod a {
    pub mod b {
        pub const C: u8 = 1;
    }
}
use a::*;

//! > function_body

//! > expr_code
b::C

//! > expected_semantics
Constant(
    ExprConstant {
        const_value_id: 1,
        ty: core::integer::u8,
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Testing use star taking best path

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > crate_settings
edition = "2024_07"

//! > module_code
mod a {
    pub mod b {
        pub const C: u8 = 1;
    }
}

mod c {
    pub mod d {
        pub use super::super::a::b::*;
    }
}

mod e {
    pub mod f {
        use super::super::a::b::*;
    }
}
use c::d::*;
use e::f::*;

//! > function_body

//! > expr_code
C

//! > expected_semantics
Constant(
    ExprConstant {
        const_value_id: 1,
        ty: core::integer::u8,
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Trait import impl through use star.

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > crate_settings
edition = "2024_07"

//! > module_code
mod a {
    pub trait MyTrait<T> {
        fn foo(self: T) -> T;
    }
}
mod b {
    pub struct V {}
    impl VMyTrait of super::a::MyTrait<V> {
        fn foo(self: V) -> V {
            self
        }
    }
}
use a::*;

//! > function_body

//! > expr_code
b::V {}.foo()

//! > expected_semantics
FunctionCall(
    ExprFunctionCall {
        function: test::b::VMyTrait::foo,
        args: [
            Value(
                StructCtor(
                    ExprStructCtor {
                        concrete_struct_id: test::b::V,
                        members: [],
                        base_struct: None,
                        ty: test::b::V,
                    },
                ),
            ),
        ],
        coupon_arg: None,
        ty: test::b::V,
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Impl import trait through use star.

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > crate_settings
edition = "2024_07"

//! > module_code
mod a {
    pub trait MyTrait<T> {
        fn foo(self: T) -> T;
    }
}
mod b {
    pub impl VMyTrait of super::a::MyTrait<super::c::V> {
        fn foo(self: super::c::V) -> super::c::V {
            self
        }
    }
}

mod c {
    pub struct V {}
}
use b::*;

//! > function_body

//! > expr_code
c::V {}.foo()

//! > expected_semantics
FunctionCall(
    ExprFunctionCall {
        function: test::b::VMyTrait::foo,
        args: [
            Value(
                StructCtor(
                    ExprStructCtor {
                        concrete_struct_id: test::c::V,
                        members: [],
                        base_struct: None,
                        ty: test::c::V,
                    },
                ),
            ),
        ],
        coupon_arg: None,
        ty: test::c::V,
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Struct import impl through use star.

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > crate_settings
edition = "2024_07"

//! > module_code
pub trait MyTrait<T> {
    fn foo(t: T) -> T;
}
mod b {
    pub impl VMyTrait of super::MyTrait<super::c::V> {
        fn foo(t: super::c::V) -> super::c::V {
            t
        }
    }
}

mod c {
    use super::b::*;
    pub struct V {}
}

//! > function_body

//! > expr_code
MyTrait::foo(c::V {})

//! > expected_semantics
FunctionCall(
    ExprFunctionCall {
        function: test::b::VMyTrait::foo,
        args: [
            Value(
                StructCtor(
                    ExprStructCtor {
                        concrete_struct_id: test::c::V,
                        members: [],
                        base_struct: None,
                        ty: test::c::V,
                    },
                ),
            ),
        ],
        coupon_arg: None,
        ty: test::c::V,
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test using a variant with a generic type.

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > module_code
enum myEnum<T> {
    Variant: T,
}
use myEnum::Variant;

//! > function_body

//! > expr_code
Variant::<u32>(3)

//! > expected_semantics
EnumVariantCtor(
    ExprEnumVariantCtor {
        variant: myEnum::Variant,
        value_expr: Literal(
            ExprLiteral {
                value: 3,
                ty: core::integer::u32,
            },
        ),
        ty: test::myEnum::<core::integer::u32>,
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test using a variant with a wrong generic type.

//! > test_runner_name
test_expr_semantics(expect_diagnostics: true)

//! > module_code
use Option::Some;

//! > function_body

//! > expr_code
Some::<i64>(3_u32)

//! > expected_semantics
Missing(
    ExprMissing {
        ty: <missing>,
    },
)

//! > expected_diagnostics
error: Unexpected argument type. Expected: "core::integer::i64", found: "core::integer::u32".
 --> lib.cairo:3:13
Some::<i64>(3_u32)
            ^^^^^

//! > ==========================================================================

//! > Test using a variant within a module.

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > module_code
enum myEnum<T> {
    Variant: T,
}
mod test {
    use super::myEnum::Variant;
}

//! > function_body

//! > expr_code
test::Variant::<u32>(3)

//! > expected_semantics
EnumVariantCtor(
    ExprEnumVariantCtor {
        variant: myEnum::Variant,
        value_expr: Literal(
            ExprLiteral {
                value: 3,
                ty: core::integer::u32,
            },
        ),
        ty: test::myEnum::<core::integer::u32>,
    },
)

//! > expected_diagnostics
