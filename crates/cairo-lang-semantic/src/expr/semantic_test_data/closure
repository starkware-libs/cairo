//! > Test closure

//! > test_runner_name
test_expr_semantics(expect_diagnostics: *)

//! > module_code
fn bar<T, +core::ops::FnOnce<T, (u8,)>>(c: T) -> core::ops::FnOnce::<T, (u8,)>::Output {
    core::ops::FnOnce::call(c, (2,))
}

//! > expr_code
{
    let c = |a| ->u128 {
        let d = a;
        d.into()
    };
    let _k: u128 = bar(c);
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Let(
                StatementLet {
                    pattern: Variable(
                        c,
                    ),
                    expr: ExprClosure(
                        ExprClosure {
                            body: Block(
                                ExprBlock {
                                    statements: [
                                        Let(
                                            StatementLet {
                                                pattern: Variable(
                                                    d,
                                                ),
                                                expr: Var(
                                                    ParamId(test::a),
                                                ),
                                            },
                                        ),
                                    ],
                                    tail: Some(
                                        FunctionCall(
                                            ExprFunctionCall {
                                                function: core::integer::UpcastableInto::<core::integer::u8, core::integer::u128, core::integer::UpcastableU8U128>::into,
                                                args: [
                                                    Value(
                                                        Var(
                                                            LocalVarId(test::d),
                                                        ),
                                                    ),
                                                ],
                                                coupon_arg: None,
                                                ty: core::integer::u128,
                                            },
                                        ),
                                    ),
                                    ty: core::integer::u128,
                                },
                            ),
                            param_ids: [
                                ParamId(test::a),
                            ],
                            ty: {closure@lib.cairo:6:13: 6:16},
                        },
                    ),
                },
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        _k,
                    ),
                    expr: FunctionCall(
                        ExprFunctionCall {
                            function: test::bar::<{closure@lib.cairo:6:13: 6:16}, Fn(Map { iter: Iter([TypeId(3)]) }) -> ?>,
                            args: [
                                Value(
                                    Var(
                                        LocalVarId(test::c),
                                    ),
                                ),
                            ],
                            coupon_arg: None,
                            ty: core::integer::u128,
                        },
                    ),
                },
            ),
        ],
        tail: None,
        ty: (),
    },
)

//! > expected_diagnostics
