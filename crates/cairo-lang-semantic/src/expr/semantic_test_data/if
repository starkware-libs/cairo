//! > Test if let

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > function_body
let a = MyEnum::A(9);

//! > expr_code
if let MyEnum::A(x) | MyEnum::B(x) = a {
    x
} else {
    1
}

//! > module_code
enum MyEnum {
    A: felt252,
    B: felt252,
}

//! > expected_semantics
If(
    ExprIf {
        condition: Let(
            Var(
                LocalVarId(test::a),
            ),
            [
                EnumVariant(
                    PatternEnumVariant {
                        variant: MyEnum::A,
                        inner_pattern: Some(
                            Variable(
                                x,
                            ),
                        ),
                        ty: test::MyEnum,
                    },
                ),
                EnumVariant(
                    PatternEnumVariant {
                        variant: MyEnum::B,
                        inner_pattern: Some(
                            Variable(
                                x,
                            ),
                        ),
                        ty: test::MyEnum,
                    },
                ),
            ],
        ),
        if_block: Block(
            ExprBlock {
                statements: [],
                tail: Some(
                    Var(
                        LocalVarId(test::x),
                    ),
                ),
                ty: core::felt252,
            },
        ),
        else_block: Some(
            Block(
                ExprBlock {
                    statements: [],
                    tail: Some(
                        Literal(
                            ExprLiteral {
                                value: 1,
                                ty: core::felt252,
                            },
                        ),
                    ),
                    ty: core::felt252,
                },
            ),
        ),
        ty: core::felt252,
    },
)

//! > expected_diagnostics
