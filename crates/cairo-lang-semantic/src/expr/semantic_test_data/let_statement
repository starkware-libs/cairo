//! > Test let

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > expr_code
{
    let a: felt252 = 3;
    let _b = a;
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Let(
                StatementLet {
                    pattern: Variable(
                        a,
                    ),
                    expr: Literal(
                        ExprLiteral {
                            value: 3,
                            ty: core::felt252,
                        },
                    ),
                },
            ),
            Let(
                StatementLet {
                    pattern: Variable(
                        _b,
                    ),
                    expr: Var(
                        LocalVarId(test::a),
                    ),
                },
            ),
        ],
        tail: None,
        ty: (),
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test fixed size array

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > expr_code
{
    let _x: [u8; 3] = [1, 2, 3];
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Let(
                StatementLet {
                    pattern: Variable(
                        _x,
                    ),
                    expr: FixedSizeArray(
                        ExprFixedSizeArray {
                            items: Items(
                                [
                                    Literal(
                                        ExprLiteral {
                                            value: 1,
                                            ty: core::integer::u8,
                                        },
                                    ),
                                    Literal(
                                        ExprLiteral {
                                            value: 2,
                                            ty: core::integer::u8,
                                        },
                                    ),
                                    Literal(
                                        ExprLiteral {
                                            value: 3,
                                            ty: core::integer::u8,
                                        },
                                    ),
                                ],
                            ),
                            ty: [core::integer::u8; 3],
                        },
                    ),
                },
            ),
        ],
        tail: None,
        ty: (),
    },
)

//! > expected_diagnostics

//! > ==========================================================================

//! > Test let statement with imported variants.

//! > test_runner_name
test_expr_semantics(expect_diagnostics: false)

//! > module_code
enum TestEnum<T> {
    Var1,
    Var2: T,
}
use TestEnum::{Var1, Var2};

//! > function_body
let value = Var2(3_u32);

//! > expr_code
{
    let another_value = match value {
        Var2(3_u32) => Var1,
        _ => Var2(0_u32),
    };
another_value
}

//! > expected_semantics
Block(
    ExprBlock {
        statements: [
            Let(
                StatementLet {
                    pattern: Variable(
                        another_value,
                    ),
                    expr: Match(
                        ExprMatch {
                            matched_expr: Var(
                                LocalVarId(test::value),
                            ),
                            arms: [
                                MatchArm {
                                    patterns: [
                                        EnumVariant(
                                            PatternEnumVariant {
                                                variant: TestEnum::Var2,
                                                inner_pattern: Some(
                                                    Literal(
                                                        PatternLiteral {
                                                            literal: ExprLiteral {
                                                                value: 3,
                                                                ty: core::integer::u32,
                                                            },
                                                        },
                                                    ),
                                                ),
                                                ty: test::TestEnum::<core::integer::u32>,
                                            },
                                        ),
                                    ],
                                    expression: EnumVariantCtor(
                                        ExprEnumVariantCtor {
                                            variant: TestEnum::Var1,
                                            value_expr: Tuple(
                                                ExprTuple {
                                                    items: [],
                                                    ty: (),
                                                },
                                            ),
                                            ty: test::TestEnum::<core::integer::u32>,
                                        },
                                    ),
                                },
                                MatchArm {
                                    patterns: [
                                        Otherwise(
                                            PatternOtherwise {
                                                ty: test::TestEnum::<core::integer::u32>,
                                            },
                                        ),
                                    ],
                                    expression: EnumVariantCtor(
                                        ExprEnumVariantCtor {
                                            variant: TestEnum::Var2,
                                            value_expr: Literal(
                                                ExprLiteral {
                                                    value: 0,
                                                    ty: core::integer::u32,
                                                },
                                            ),
                                            ty: test::TestEnum::<core::integer::u32>,
                                        },
                                    ),
                                },
                            ],
                            ty: test::TestEnum::<core::integer::u32>,
                        },
                    ),
                },
            ),
        ],
        tail: Some(
            Var(
                LocalVarId(test::another_value),
            ),
        ),
        ty: test::TestEnum::<core::integer::u32>,
    },
)

//! > expected_diagnostics
