//! > Test negative impl diagnostics.

//! > test_runner_name
test_expr_diagnostics

//! > expr_code
{
    Bad::<u128, core::NegImpl>::bad();
    Bad::<u128, _>::bad();
}

//! > module_code
pub trait NegImpl {
}

pub trait Bad<T, -NegImpl> {
    fn bad() -> T;
}

pub impl ImplBad<T, -NegImpl> of Bad<T, _>{
    fn bad() -> T {
        panic!("Bad::bad() called")
    }
}

pub impl ImplBad2<T> of Bad<T, T>{
    fn bad() -> T {
        panic!("Bad::bad() called")
    }
}

//! > function_body

//! > expected_diagnostics
error: Negative impls are not enabled in this context.
 --> lib.cairo:4:18
pub trait Bad<T, -NegImpl> {
                 ^******^

error: Negative impls are not enabled in this context.
 --> lib.cairo:8:21
pub impl ImplBad<T, -NegImpl> of Bad<T, _>{
                    ^******^

error: Only `_` is a valid for negative impls.
 --> lib.cairo:14:32
pub impl ImplBad2<T> of Bad<T, T>{
                               ^

error: Only `_` is a valid for negative impls.
 --> lib.cairo:21:17
    Bad::<u128, core::NegImpl>::bad();
                ^***********^
