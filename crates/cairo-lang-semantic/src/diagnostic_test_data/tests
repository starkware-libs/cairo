//! > Test function with return type.

//! > test_comments
// TODO(spapini): Remove duplicated diagnostics.

//! > test_runner_name
test_expr_diagnostics

//! > expr_code
1 + foo()

//! > module_code
3 + 4 +;

//! > function_body

//! > expected_diagnostics
error: Skipped tokens. Expected: Const/Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum/TypeAlias/InlineMacro or an attribute.
 --> lib.cairo:1:1
3 + 4 +;
^******^

error: Function not found.
 --> lib.cairo:3:5
1 + foo()
    ^*^

//! > ==========================================================================

//! > Test function lookup

//! > test_runner_name
test_expr_diagnostics

//! > expr_code
{
  foo();
  core::felt252_add(1,1);
  submod::foo();
  bad_module::foo();
  super::foo();
  test::super::foo();
}

//! > module_code
fn foo() {
}
mod submod {
  fn foo() {
  }
}

//! > function_body

//! > expected_diagnostics
error: Identifier not found.
 --> lib.cairo:12:3
  bad_module::foo();
  ^********^

error: 'super' cannot be used for the crate's root module.
 --> lib.cairo:13:3
  super::foo();
  ^***^

error: Identifier not found.
 --> lib.cairo:14:3
  test::super::foo();
  ^**^

//! > ==========================================================================

//! > Test duplicate 'ref'.

//! > test_runner_name
test_expr_diagnostics

//! > expr_code
{
}

//! > module_code
fn foo(ref ref v: felt252) {
  let mut a = 1;
  foo(ref a);
}

//! > function_body

//! > expected_diagnostics
error: `ref` modifier was specified after another modifier (`ref`). Only a single modifier is allowed.
 --> lib.cairo:1:12
fn foo(ref ref v: felt252) {
           ^*^

//! > ==========================================================================

//! > Test bad argument for ref param (not a variable).

//! > test_runner_name
test_expr_diagnostics

//! > expr_code
{
}

//! > module_code
fn foo(ref v: felt252) {
  foo(1);
}

//! > function_body

//! > expected_diagnostics
error: ref argument must be a variable.
 --> lib.cairo:2:7
  foo(1);
      ^

//! > ==========================================================================

//! > Test bad argument for ref param (variable not mutable).

//! > test_runner_name
test_expr_diagnostics

//! > expr_code
{
}

//! > module_code
fn foo(ref v: felt252) {
  let a = 3;
  foo(ref a);
}

//! > function_body

//! > expected_diagnostics
error: ref argument must be a mutable variable.
 --> lib.cairo:3:11
  foo(ref a);
          ^

//! > ==========================================================================

//! > Test numerical literal of unsupported type.

//! > test_runner_name
test_expr_diagnostics

//! > expr_code
{
    let _a = 123_felt252;
    let _a = 123_u128;
    let _b = 123_NonZero;
    let _b = 123_u129;
}

//! > module_code
fn foo() {
}

//! > function_body

//! > expected_diagnostics
error: Unknown type.
 --> lib.cairo:8:14
    let _b = 123_u129;
             ^******^

error: Mismatched types. The type `core::zeroable::NonZero` cannot be created from a numeric literal.
 --> lib.cairo:7:14
    let _b = 123_NonZero;
             ^*********^

//! > ==========================================================================

//! > Test use cycle

//! > test_runner_name
test_expr_diagnostics

//! > expr_code
{
}

//! > module_code
mod a {
  use super::B;
}

use a::B;

//! > function_body

//! > expected_diagnostics
error: Cycle detected while resolving 'use' items.
 --> lib.cairo:5:8
use a::B;
       ^

error: Cycle detected while resolving 'use' items.
 --> lib.cairo:2:14
  use super::B;
             ^

//! > ==========================================================================

//! > Test bad use

//! > test_runner_name
test_expr_diagnostics

//! > expr_code
{
}

//! > module_code
use bad_module_name;

//! > function_body

//! > expected_diagnostics
error: Identifier not found.
 --> lib.cairo:1:5
use bad_module_name;
    ^*************^

//! > ==========================================================================

//! > Test diagnostic after skipped attribute

//! > test_runner_name
test_expr_diagnostics

//! > expr_code
{
  let _x = y;
}

//! > module_code
mod mod1 {
  #[aaa]
}

//! > function_body

//! > expected_diagnostics
error: Missing tokens. Expected an item after attributes.
 --> lib.cairo:2:9
  #[aaa]
        ^

error: Identifier not found.
 --> lib.cairo:6:12
  let _x = y;
           ^

//! > ==========================================================================

//! > Test unused variable.

//! > test_runner_name
test_expr_diagnostics

//! > expr_code
{
  let x = 7;
  let x = 3;
  let y = 5;
  x
}

//! > module_code

//! > function_body

//! > expected_diagnostics
warning: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:3:7
  let x = 7;
      ^

warning: Unused variable. Consider ignoring by prefixing with `_`.
 --> lib.cairo:5:7
  let y = 5;
      ^

//! > ==========================================================================

//! > Test unhandled Option.

//! > test_runner_name
test_expr_diagnostics

//! > expr_code
{
  Option::<felt252>::None;
}

//! > module_code

//! > function_body

//! > expected_diagnostics
warning: Unhandled `#[must_use]` type `core::option::Option::<core::felt252>`
 --> lib.cairo:3:3
  Option::<felt252>::None;
  ^*********************^

//! > ==========================================================================

//! > Test unhandled Result.

//! > test_runner_name
test_expr_diagnostics

//! > expr_code
{
  Result::<felt252, felt252>::Err(4);
}

//! > module_code

//! > function_body

//! > expected_diagnostics
warning: Unhandled `#[must_use]` type `core::result::Result::<core::felt252, core::felt252>`
 --> lib.cairo:3:3
  Result::<felt252, felt252>::Err(4);
  ^********************************^
