//! > Test trait.

//! > test_function_name
test_function_diagnostics

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
struct A {}
trait MyTrait<T> {
    fn param_test(ref a: u128) -> bad_type nopanic;

    fn no_ret_ty(a: u128) -> felt;
}
impl MyImpl of MyTrait::<A>;
impl MyImpl2<T> of MyTrait::<T> {
    mod a;
    use b;
    extern fn extern_func() nopanic;
    extern type DummyType;

    trait DummyTrait;
    impl DummyImpl of MyTrait::<T>;

    struct DummyStruct {}

    enum DummyEnum {}

    fn my_bar() {

    }

    fn param_test(a: felt, b: felt, c: felt) -> u128 {

    }

    fn no_ret_ty(ref a: u128) {

    }
}

impl abc of abc;

//! > expected_diagnostics
error: Type not found.
 --> lib.cairo:3:35
    fn param_test(ref a: u128) -> bad_type nopanic;
                                  ^******^

error: Not all trait items are implemented. Missing: 'param_test', 'no_ret_ty'.
 --> lib.cairo:7:6
impl MyImpl of MyTrait::<A>;
     ^****^

error: `mod` is not allowed inside impl.
 --> lib.cairo:9:5
    mod a;
    ^*^

error: `use` is not allowed inside impl.
 --> lib.cairo:10:5
    use b;
    ^*^

error: `extern` is not allowed inside impl.
 --> lib.cairo:11:5
    extern fn extern_func() nopanic;
    ^****^

error: `extern` is not allowed inside impl.
 --> lib.cairo:12:5
    extern type DummyType;
    ^****^

error: `trait` is not allowed inside impl.
 --> lib.cairo:14:5
    trait DummyTrait;
    ^***^

error: `impl` is not allowed inside impl.
 --> lib.cairo:15:5
    impl DummyImpl of MyTrait::<T>;
    ^**^

error: `struct` is not allowed inside impl.
 --> lib.cairo:17:5
    struct DummyStruct {}
    ^****^

error: `enum` is not allowed inside impl.
 --> lib.cairo:19:5
    enum DummyEnum {}
    ^**^

error: Impl function `MyImpl2::my_bar` is not a member of trait `MyTrait`.
 --> lib.cairo:21:5
    fn my_bar() {
    ^***********^

error: The number of parameters in the impl function `MyImpl2::param_test` is incompatible with `MyTrait::param_test`. Expected: 1, actual: 3.
 --> lib.cairo:25:19
    fn param_test(a: felt, b: felt, c: felt) -> u128 {
                  ^***********************^

error: Parameter type of impl function `MyImpl2::param_test` is incompatible with `MyTrait::param_test`. Expected: `core::integer::u128`, actual: `core::felt`.
 --> lib.cairo:25:22
    fn param_test(a: felt, b: felt, c: felt) -> u128 {
                     ^**^

error: Parameter of impl function MyImpl2::param_test is incompatible with MyTrait::param_test. It should be a reference.
 --> lib.cairo:25:19
    fn param_test(a: felt, b: felt, c: felt) -> u128 {
                  ^

error: The signature of function `param_test` is incompatible with trait `MyTrait`. The trait function is declared as nopanic.
 --> lib.cairo:25:18
    fn param_test(a: felt, b: felt, c: felt) -> u128 {
                 ^*********************************^

error: Return type of impl function `MyImpl2::param_test` is incompatible with `MyTrait::param_test`. Expected: `<missing>`, actual: `core::integer::u128`.
 --> lib.cairo:25:49
    fn param_test(a: felt, b: felt, c: felt) -> u128 {
                                                ^**^

error: Unexpected return type. Expected: "core::integer::u128", found: "()".
 --> lib.cairo:25:54
    fn param_test(a: felt, b: felt, c: felt) -> u128 {
                                                     ^

error: Parameter of impl function MyImpl2::no_ret_ty is incompatible with MyTrait::no_ret_ty. It should not be a reference.
 --> lib.cairo:29:18
    fn no_ret_ty(ref a: u128) {
                 ^*^

error: Return type of impl function `MyImpl2::no_ret_ty` is incompatible with `MyTrait::no_ret_ty`. Expected: `core::felt`, actual: `()`.
 --> lib.cairo:29:31
    fn no_ret_ty(ref a: u128) {
                              ^

error: Not a trait.
 --> lib.cairo:34:13
impl abc of abc;
            ^*^

//! > ==========================================================================

//! > Test enum generics failures.

//! > test_function_name
test_function_diagnostics

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
struct A {}
trait MyTrait<T>;
impl MyImpl3 of NonExistingTrait;
impl MyImpl4 of foo;

//! > expected_diagnostics
error: Trait not found.
 --> lib.cairo:3:17
impl MyImpl3 of NonExistingTrait;
                ^**************^

error: Not a trait.
 --> lib.cairo:3:17
impl MyImpl3 of NonExistingTrait;
                ^**************^

error: Not a trait.
 --> lib.cairo:4:17
impl MyImpl4 of foo;
                ^*^

//! > ==========================================================================

//! > Test copy and dup impls.

//! > test_function_name
test_function_diagnostics

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
struct Linear {}

struct A {}
enum B {}
struct C { x: felt, y: Linear }
enum D { X: felt, Y: Linear }
extern type E;

impl ACopy of Copy::<A>;
impl ADrop of Drop::<A>;
impl BCopy of Copy::<B>;
impl BDrop of Drop::<B>;
impl CCopy of Copy::<C>;
impl CDrop of Drop::<C>;
impl DCopy of Copy::<D>;
impl DDrop of Drop::<D>;
impl ECopy of Copy::<E>;
impl EDrop of Drop::<E>;
impl TCopy of Copy::<()>;
impl TDrop of Drop::<()>;
impl T2Copy of Copy::<(felt, Linear)>;
impl T2Drop of Drop::<(felt, Linear)>;

//! > expected_diagnostics
error: Invalid copy trait implementation.
 --> lib.cairo:13:1
impl CCopy of Copy::<C>;
^**********************^

error: Invalid drop trait implementation.
 --> lib.cairo:14:1
impl CDrop of Drop::<C>;
^**********************^

error: Invalid copy trait implementation.
 --> lib.cairo:15:1
impl DCopy of Copy::<D>;
^**********************^

error: Invalid drop trait implementation.
 --> lib.cairo:16:1
impl DDrop of Drop::<D>;
^**********************^

error: Invalid copy trait implementation.
 --> lib.cairo:21:1
impl T2Copy of Copy::<(felt, Linear)>;
^************************************^

error: Invalid drop trait implementation.
 --> lib.cairo:22:1
impl T2Drop of Drop::<(felt, Linear)>;
^************************************^

//! > ==========================================================================

//! > Mutable param is no allowed in trait functions.

//! > test_function_name
test_function_diagnostics

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
trait MyTrait<T> {
    fn f(mut a: felt);
}

//! > expected_diagnostics
error: Parameter of trait function `MyTrait::f` can't be defined as mutable.
 --> lib.cairo:2:10
    fn f(mut a: felt);
         ^*^

//! > ==========================================================================

//! > Impl function param can be mutable or immutable.

//! > test_function_name
test_function_diagnostics

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
trait MyTrait<T> {
   fn f(a: felt);
}
impl MyImpl<T> of MyTrait::<T> {
   fn f(a: felt) {}
}
impl MyImpl2<T> of MyTrait::<T> {
   fn f(mut a: felt) {}
}

//! > expected_diagnostics

//! > ==========================================================================

//! > Test trait function with body.

//! > test_function_name
test_function_diagnostics

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
trait MyTrait {
   fn foo() {}
}

//! > expected_diagnostics
error: Trait function `MyTrait::foo` has a body. Trait functions with body are not supported.
 --> lib.cairo:2:13
   fn foo() {}
            ^^

//! > ==========================================================================

//! > Test no impls of trait.

//! > test_function_name
test_function_diagnostics

//! > function
fn foo() {
   MyTrait::foo()
}

//! > function_name
foo

//! > module_code
trait MyTrait {
   fn foo();
}

//! > expected_diagnostics
error: Function `foo` of trait `test::MyTrait::<>` has no implementation in the context.
 --> lib.cairo:5:4
   MyTrait::foo()
   ^************^

//! > ==========================================================================

//! > Test multiple impls of trait.

//! > test_function_name
test_function_diagnostics

//! > function
fn foo() {
   MyTrait::foo()
}

//! > function_name
foo

//! > module_code
trait MyTrait {
   fn foo();
}
impl MyImpl1 of MyTrait {
   fn foo() {}
}
impl MyImpl2 of MyTrait {
   fn foo() {}
}

//! > expected_diagnostics
error: Function `foo` of trait `test::MyTrait` has multiple implementations, in: test::MyImpl1, test::MyImpl2
 --> lib.cairo:11:4
   MyTrait::foo()
   ^************^

//! > ==========================================================================

//! > Test missing functions in empty impl.

//! > test_function_name
test_function_diagnostics

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
trait MyTrait {
   fn foo1();
   fn foo2();
}
impl MyImpl of MyTrait;

//! > expected_diagnostics
error: Not all trait items are implemented. Missing: 'foo1', 'foo2'.
 --> lib.cairo:5:6
impl MyImpl of MyTrait;
     ^****^

//! > ==========================================================================

//! > Test missing functions in nonempty impl.

//! > test_function_name
test_function_diagnostics

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
trait MyTrait {
   fn foo1();
   fn foo2();
   fn foo3();
}
impl MyImpl of MyTrait {
   fn foo2() {}
}

//! > expected_diagnostics
error: Not all trait items are implemented. Missing: 'foo1', 'foo3'.
 --> lib.cairo:6:6
impl MyImpl of MyTrait {
     ^****^

//! > ==========================================================================

//! > Verify that the relevant diagnostic is issued when a concrete parameter type is inconsistent

//! > with the assignment of the generic args of the trait.

//! > test_function_name
test_function_diagnostics

//! > function
fn bla() {
}

//! > function_name
bla

//! > module_code
trait Identity<T> {
   fn foo(a: T);
}

impl FeltIdentity of Identity::<felt> {
   fn foo(a: u128) {}
}

//! > expected_diagnostics
error: Parameter type of impl function `FeltIdentity::foo` is incompatible with `Identity::foo`. Expected: `core::felt`, actual: `core::integer::u128`.
 --> lib.cairo:6:14
   fn foo(a: u128) {}
             ^**^

//! > ==========================================================================

//! > Verify that the relevant diagnostic is issued when a concrete return type is inconsistent with

//! > the assignment of the generic args of the trait.

//! > test_function_name
test_function_diagnostics

//! > function
fn bla() {
}

//! > function_name
bla

//! > module_code
trait Identity<T> {
   fn foo() -> T;
}

impl FeltIdentity of Identity::<felt> {
   fn foo() -> u128 {
       3_u128
   }
}

//! > expected_diagnostics
error: Return type of impl function `FeltIdentity::foo` is incompatible with `Identity::foo`. Expected: `core::felt`, actual: `core::integer::u128`.
 --> lib.cairo:6:16
   fn foo() -> u128 {
               ^**^

//! > ==========================================================================

//! > Repeating generic params in trait.

//! > comments
TODO(yuval): there should be a diagnostic about repeating generic params.

//! > test_function_name
test_function_diagnostics

//! > function
fn bla() {
}

//! > function_name
bla

//! > module_code
trait Identity<T, T> {
   fn foo(a: T);
}

impl FeltIdentity of Identity::<felt, felt> {
   fn foo(a: felt) {}
}

//! > expected_diagnostics

//! > ==========================================================================

//! > Repeating generic params in trait and function.

//! > comments
TODO(yuval): fix - the diagnostics here should be different - about already used generic param.

//! > test_function_name
test_function_diagnostics

//! > function
fn bla() {
}

//! > function_name
bla

//! > module_code
trait Identity<T> {
   fn foo<T>(a: T);
}

impl FeltIdentity of Identity::<felt> {
   fn foo<T>(a: felt) {}
}

//! > expected_diagnostics
error: Parameter type of impl function `FeltIdentity::foo` is incompatible with `Identity::foo`. Expected: `T`, actual: `core::felt`.
 --> lib.cairo:6:17
   fn foo<T>(a: felt) {}
                ^**^

//! > ==========================================================================

//! > Matching generic arguments of functions in trait/impl.

//! > test_function_name
test_function_diagnostics

//! > function
fn bla() {
}

//! > function_name
bla

//! > module_code
trait Identity<T> {
   fn foo<S>(a: T, b: S);
}

impl FeltIdentity of Identity::<felt> {
   fn foo<S>(a: felt, b: S) {}
}

//! > expected_diagnostics
