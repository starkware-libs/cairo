//! > Test enum generics.

//! > test_runner_name
test_function_diagnostics

//! > function
fn foo(a: A::<felt252>) -> felt252 {
    match a {
        A::Variant0(t) => { t },
    }
}

//! > function_name
foo

//! > module_code
enum A<T> {
    Variant0: T,
}

//! > expected_diagnostics

//! > ==========================================================================

//! > Test invalid recursive enum.

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
enum A {
    Variant: A,
}

//! > expected_diagnostics
error: Recursive type "test::A" has infinite size.
 --> lib.cairo:2:5
    Variant: A,
    ^********^

//! > ==========================================================================

//! > Test phantom recursive enum.

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: false)

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
#[phantom]
enum A {
    Variant: A,
}

//! > expected_diagnostics

//! > ==========================================================================

//! > Test enum containing phantom.

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
#[phantom]
struct A {}

enum B {
    Variant: A,
}

//! > expected_diagnostics
error: Non-phantom type containing phantom type.
 --> lib.cairo:5:5
    Variant: A,
    ^********^

//! > ==========================================================================

//! > Test enum with empty array.

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
enum A {
    Variant: Array<()>,
}

//! > expected_diagnostics
error: Cannot have array of type "()" that is zero sized.
 --> lib.cairo:2:5
    Variant: Array<()>,
    ^****************^
