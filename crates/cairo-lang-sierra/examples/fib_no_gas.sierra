type felt252 = felt252;
type NonZeroFelt252 = NonZero<felt252>;

libfunc branch_align = branch_align;
libfunc store_temp_felt252 = store_temp<felt252>;
libfunc store_temp_nz_felt252 = store_temp<NonZeroFelt252>;
libfunc felt252_const_minus_1 = felt252_const<-1>;
libfunc felt252_add = felt252_add;
libfunc felt252_dup = dup<felt252>;
libfunc felt252_drop = drop<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc felt252_unwrap_non_zero = unwrap_non_zero<felt252>;
libfunc call_lib = function_call<user@Fibonacci>;
libfunc disable_ap_tracking = disable_ap_tracking;

// Statement #  0 - tests if n == 0.
felt252_is_zero(n) { fallthrough() 6(n) };
// Statement #1
branch_align() -> ();
// Statement #  1 - n == 0, so we return a.
felt252_drop(b) -> ();
store_temp_felt252(a)  -> (a);
disable_ap_tracking() -> ();
return(a);
// Statement #  6 - calculates arguments for recursion call.
branch_align() -> ();
felt252_unwrap_non_zero(n) -> (n);
felt252_const_minus_1() -> (minus1);
felt252_add(n, minus1) -> (n);
felt252_dup(b) -> (b, b_);
felt252_add(a, b_) -> (a_plus_b);
store_temp_felt252(b) -> (b);
store_temp_felt252(a_plus_b) -> (a_plus_b);
store_temp_felt252(n) -> (n);
call_lib(b, a_plus_b, n) -> (r);
return(r);

Fibonacci@0(a: felt252, b: felt252, n: felt252) -> (felt252);
