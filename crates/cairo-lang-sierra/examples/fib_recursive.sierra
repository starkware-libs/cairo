type felt = felt;
type GasBuiltin = GasBuiltin;
type RangeCheck = RangeCheck;
type NonZeroInt = NonZero<felt>;
type UninitializedFelt = Uninitialized<felt>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc store_temp_felt = store_temp<felt>;
libfunc alloc_local_felt = alloc_local<felt>;
libfunc store_local_felt = store_local<felt>;
libfunc store_temp_gb = store_temp<GasBuiltin>;
libfunc store_temp_rc = store_temp<RangeCheck>;
libfunc felt_const_1 = felt_const<1>;
libfunc felt_const_minus_1 = felt_const<-1>;
libfunc felt_add = felt_add;
libfunc felt_sub_1 = felt_sub<1>;
libfunc felt_dup = dup<felt>;
libfunc felt_drop = drop<felt>;
libfunc unuinitialized_felt_drop = drop<UninitializedFelt>;
libfunc felt_jump_nz = felt_jump_nz;
libfunc felt_unwrap_nz = unwrap_nz<felt>;
libfunc get_gas = get_gas;
libfunc refund_gas = refund_gas;
libfunc finalize_locals = finalize_locals;
libfunc call_fib = function_call<user@Fibonacci>;

alloc_local_felt() -> (l_n_2);
alloc_local_felt() -> (l_r1);
finalize_locals() -> ();
revoke_ap_tracking() -> ();
// Statement #  4 - tests if n == 0 and initiates 1 for the early return values.
felt_const_1() -> (one);
store_temp_felt(one) -> (one);
felt_jump_nz(n) { fallthrough() 14(n) };
// Statement #  7 - n == 0, so we return updated gb and 1.
unuinitialized_felt_drop(l_n_2) -> ();
unuinitialized_felt_drop(l_r1) -> ();
refund_gas(gb) -> (gb); // Statement 9.
store_temp_rc(rc) -> (rc);
store_temp_gb(gb) -> (gb);
store_temp_felt(one) -> (one);
return(rc, gb, one);
// Statement # 14 - calculating n - 1, and testing if n - 1 == 0.
felt_unwrap_nz(n) -> (n);
felt_sub_1(n) -> (n_1);
store_temp_felt(n_1) -> (n_1);
felt_jump_nz(n_1) { fallthrough() 25(n_1) };
// Statement # 18 - n == 1, so we return updated gb and 1.
unuinitialized_felt_drop(l_n_2) -> ();
unuinitialized_felt_drop(l_r1) -> ();
refund_gas(gb) -> (gb); // Statement 20.
store_temp_rc(rc) -> (rc);
store_temp_gb(gb) -> (gb);
store_temp_felt(one) -> (one);
return(rc, gb, one);
// Statement # 25 - Get gas for the recursive calls.
felt_unwrap_nz(n_1) -> (n_1);
felt_drop(one) -> ();
get_gas(rc, gb) { fallthrough(rc, gb) 46(rc, gb) }; // Statement 27.
// Statement # 28 - Performing both recursive calculations and returning their sum.
store_temp_rc(rc) -> (rc);
store_temp_gb(gb) -> (gb);
felt_dup(n_1) -> (n_1, n_2);
felt_sub_1(n_2) -> (n_2);
store_local_felt(l_n_2, n_2) -> (n_2);
store_temp_felt(n_1) -> (n_1);
call_fib(rc, gb, n_1) -> (rc, gb, r1);
store_local_felt(l_r1, r1) -> (r1);
store_temp_rc(rc) -> (rc);
store_temp_gb(gb) -> (gb);
store_temp_felt(n_2) -> (n_2);
call_fib(rc, gb, n_2) -> (rc, gb, r2);
refund_gas(gb) -> (gb); // Statement 40.
store_temp_rc(rc) -> (rc);
store_temp_gb(gb) -> (gb);
felt_add(r1, r2) -> (r);
store_temp_felt(r) -> (r);
return(rc, gb, r);

// Statement # 46 - Ran out of gas - returning update gb and error value.
unuinitialized_felt_drop(l_n_2) -> ();
unuinitialized_felt_drop(l_r1) -> ();
store_temp_rc(rc) -> (rc);
refund_gas(gb) -> (gb); // Statement 49.
store_temp_gb(gb) -> (gb);
felt_drop(n_1) -> ();
felt_const_minus_1() -> (minus);
store_temp_felt(minus) -> (minus);
return(rc, gb, minus);

Fibonacci@0(rc: RangeCheck, gb: GasBuiltin, n: felt) -> (RangeCheck, GasBuiltin, felt);
