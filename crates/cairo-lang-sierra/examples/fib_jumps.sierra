type felt252 = felt252;
type GasBuiltin = GasBuiltin;
type RangeCheck = RangeCheck;
type NonZeroInt = NonZero<felt252>;

libfunc branch_align = branch_align;
libfunc felt252_add = felt252_add;
libfunc felt252_const_0 = felt252_const<0>;
libfunc felt252_const_1 = felt252_const<1>;
libfunc felt252_const_minus_1 = felt252_const<-1>;
libfunc felt252_drop = drop<felt252>;
libfunc felt252_dup = dup<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc felt252_sub_1 = felt252_sub_const<1>;
libfunc felt252_unwrap_non_zero = unwrap_non_zero<felt252>;
libfunc withdraw_gas = withdraw_gas;
libfunc jump = jump;
libfunc redeposit_gas = redeposit_gas;
libfunc rename_felt252 = rename<felt252>;
libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc store_temp_felt252 = store_temp<felt252>;
libfunc store_temp_gb = store_temp<GasBuiltin>;
libfunc store_temp_rc = store_temp<RangeCheck>;

revoke_ap_tracking() -> ();
// Statement #  1 - tests if n == 0.
felt252_is_zero(n) { fallthrough() 9(n) };
branch_align() -> ();
// Statement #  2 - n == 0, so we return updated gb and 1.
store_temp_rc(rc) -> (rc);
redeposit_gas(gb) -> (gb);
store_temp_gb(gb) -> (gb);
felt252_const_1() -> (one);
store_temp_felt252(one) -> (one);
return(rc, gb, one);

// Statement # 9
// Setting up the latest memory to be of the form [n, rc, gb, a=1, b=0].
branch_align() -> ();
felt252_unwrap_non_zero(n) -> (n);
store_temp_felt252(n) -> (n);
store_temp_rc(rc) -> (rc);
store_temp_gb(gb) -> (gb);
felt252_const_1() -> (a);
store_temp_felt252(a) -> (a);
felt252_const_0() -> (b);
store_temp_felt252(b) -> (b);

// Statement #18, check n.
felt252_is_zero(n) { fallthrough() 26(n) };

// Statement # 19 - n == 0, so we can return the latest a.
branch_align() -> ();
felt252_drop(b) -> ();
store_temp_rc(rc) -> (rc);
redeposit_gas(gb) -> (gb); // Statement #24.
store_temp_gb(gb) -> (gb);
store_temp_felt252(a) -> (a);
return(rc, gb, a);

// Statement # 26
branch_align() -> ();
felt252_unwrap_non_zero(n) -> (n);
// Statement # 28 - Getting gas for the main loop.
withdraw_gas(rc, gb) { fallthrough(rc, gb) 40(rc, gb)  };
branch_align() -> ();
// Statement # 30
// The main loop - given [n, rc, gb, a, b, _, _] - adds [n-1, updated_rc, updated_gb, a+b, a]
// Memory cells form is now [n'=n-1, rc'=updated_rc, gb'=updated_gb, a'=a+b, b'=a]
felt252_dup(a) -> (a, prev_a);
felt252_add(a, b) -> (a);
rename_felt252(prev_a) -> (b);
felt252_sub_1(n) -> (n);
store_temp_felt252(n) -> (n);
store_temp_rc(rc) -> (rc);
store_temp_gb(gb) -> (gb);
store_temp_felt252(a) -> (a);
store_temp_felt252(b) -> (b);
jump() { 18() };

// Statement # 40  - Ran out of gas - returning updated gb and -1.
branch_align() -> ();
felt252_drop(a) -> ();
felt252_drop(b) -> ();
felt252_drop(n) -> ();
store_temp_rc(rc) -> (rc);
redeposit_gas(gb) -> (gb); // Statement 45.
store_temp_gb(gb) -> (gb);
felt252_const_minus_1() -> (err);
store_temp_felt252(err) -> (err);
return(rc, gb, err);

Fibonacci@0(rc: RangeCheck, gb: GasBuiltin, n: felt252) -> (RangeCheck, GasBuiltin, felt252);
