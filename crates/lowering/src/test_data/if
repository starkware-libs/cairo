//! > Test boolean if.

//! > test_function_name
test_function_lowering

//! > function
func foo(a: bool, x: felt) -> felt {
    if a {
        1
    } else {
        x
    }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_format
blk0:
Inputs: v2: ()
Statements:
  (v3: core::felt) <- 1u
  (v4: core::PanicResult::<core::felt>) <- PanicResult::Ok(v3)
Drops: v2, v3
End:
  Callsite(v4)

blk1:
Inputs: v5: ()
Statements:
  (v6: core::PanicResult::<core::felt>) <- PanicResult::Ok(v1)
Drops: v5
End:
  Callsite(v6)

blk2:
Inputs: v0: core::bool, v1: core::felt
Statements:
  (v7: core::PanicResult::<core::felt>) <- match_enum(v0) {
    bool::True => blk0,
    bool::False => blk1,
  }
  (v8: core::PanicResult::<core::felt>) <- PanicResult::Ok(v7)
Drops: v0, v1
End:
  Callsite(v8)

//! > ==========================================================================

//! > Test if analyzer.

//! > test_function_name
test_function_lowering

//! > function
func foo(x: felt) -> felt {
    if x == 0 {
        1
    } else {
        x
    }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_format
blk0:
Inputs:
Statements:
  (v1: core::felt) <- 1u
  (v2: core::PanicResult::<core::felt>) <- PanicResult::Ok(v1)
Drops: v1
End:
  Callsite(v2)

blk1:
Inputs: v3: core::NonZero::<core::felt>
Statements:
  (v4: core::PanicResult::<core::felt>) <- PanicResult::Ok(v0)
Drops: v3
End:
  Callsite(v4)

blk2:
Inputs: v0: core::felt
Statements:
  (v5: core::PanicResult::<core::felt>) <- match core::felt_jump_nz(v0) {
    () => blk0,
    (v3) => blk1,
  }
  (v6: core::PanicResult::<core::felt>) <- PanicResult::Ok(v5)
Drops: v0
End:
  Callsite(v6)

//! > ==========================================================================

//! > Test if without else.

//! > test_function_name
test_function_lowering

//! > function
func foo(x: felt) -> felt {
    if 0 == x {
        return 10;
    }
    20
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_format
blk0:
Inputs:
Statements:
  (v1: core::felt) <- 10u
  (v2: core::PanicResult::<core::felt>) <- PanicResult::Ok(v1)
Drops: v1, v0
End:
  Return(v2)

blk1:
Inputs: v3: core::NonZero::<core::felt>
Statements:
Drops: v3
End:
  Callsite()

blk2:
Inputs: v0: core::felt
Statements:
  () <- match core::felt_jump_nz(v0) {
    () => blk0,
    (v3) => blk1,
  }
  (v4: core::felt) <- 20u
  (v5: core::PanicResult::<core::felt>) <- PanicResult::Ok(v4)
Drops: v0, v4
End:
  Callsite(v5)

//! > ==========================================================================

//! > Test if x == y

//! > test_function_name
test_function_lowering

//! > function
func foo(x: felt, y: felt, z: felt, w: felt) -> felt {
    if x + y == z - w {
        0
    } else {
        1
    }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_format
blk0:
Inputs:
Statements:
  (v7: core::felt) <- 0u
  (v8: core::PanicResult::<core::felt>) <- PanicResult::Ok(v7)
Drops: v7
End:
  Callsite(v8)

blk1:
Inputs: v9: core::NonZero::<core::felt>
Statements:
  (v10: core::felt) <- 1u
  (v11: core::PanicResult::<core::felt>) <- PanicResult::Ok(v10)
Drops: v9, v10
End:
  Callsite(v11)

blk2:
Inputs: v0: core::felt, v1: core::felt, v2: core::felt, v3: core::felt
Statements:
  (v4: core::felt) <- core::felt_add(v0, v1)
  (v5: core::felt) <- core::felt_sub(v2, v3)
  (v6: core::felt) <- core::felt_sub(v4, v5)
  (v12: core::PanicResult::<core::felt>) <- match core::felt_jump_nz(v6) {
    () => blk0,
    (v9) => blk1,
  }
  (v13: core::PanicResult::<core::felt>) <- PanicResult::Ok(v12)
Drops: v0, v1, v2, v3, v4, v5, v6
End:
  Callsite(v13)
