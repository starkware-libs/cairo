//! > Test boolean if.

//! > test_function_name
test_function_lowering

//! > function
func foo(a: bool, x: felt) -> felt {
    if a {
        1
    } else {
        x
    }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_format
blk0:
Inputs: v2: ()
Statements:
  (v3: core::felt) <- 1u
Drops: v2, v1
End:
  Callsite(v3)

blk1:
Inputs: v4: ()
Statements:
Drops: v4
End:
  Callsite(v1)

blk2:
Inputs: v0: core::bool, v1: core::felt
Statements:
  (v5: core::felt) <- match_enum(v0) {
    bool::True => blk0,
    bool::False => blk1,
  }
Drops: v0, v1
End:
  Callsite(v5)

//! > ==========================================================================

//! > Test if analyzer.

//! > test_function_name
test_function_lowering

//! > function
func foo(x: felt) -> felt {
    if x == 0 {
        1
    } else {
        x
    }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_format
blk0:
Inputs:
Statements:
  (v2: ()) <- tuple_construct()
  (v3: core::bool) <- bool::False(v2)
Drops: v2
End:
  Callsite(v3)

blk1:
Inputs:
Statements:
  (v4: ()) <- tuple_construct()
  (v5: core::bool) <- bool::True(v4)
Drops: v4
End:
  Callsite(v5)

blk2:
Inputs: v7: ()
Statements:
  (v8: core::felt) <- 1u
Drops: v7, v0
End:
  Callsite(v8)

blk3:
Inputs: v9: ()
Statements:
Drops: v9
End:
  Callsite(v0)

blk4:
Inputs: v0: core::felt
Statements:
  (v1: core::felt) <- 0u
  (v6: core::bool) <- match core::felt_eq(v0, v1) {
    () => blk0,
    () => blk1,
  }
  (v10: core::felt) <- match_enum(v6) {
    bool::True => blk2,
    bool::False => blk3,
  }
Drops: v0, v1, v6
End:
  Callsite(v10)
