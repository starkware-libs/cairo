//! > Test unreachable code.

//! > test_function_name
test_function_lowering

//! > function
func foo(a: felt) -> felt {
    return a + a * a;
    5;6;7;
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics
error: Unexpected return type. Expected: "core::felt", found: "()".
 --> lib.cairo:1:27
func foo(a: felt) -> felt {
                          ^
  

//! > lowering_diagnostics
error: Unreachable code
 --> lib.cairo:3:5
    5;6;7;
    ^****^

//! > lowering_format
blk0:
Inputs:
  v0: core::felt, 
Statements:
  (v1: core::felt, ) <- core::felt_mul(v0, v0, )
  (v2: core::felt, ) <- core::felt_add(v0, v1, )
End:
  Return(v2, )

//! > ==========================================================================

//! > Test single patterns.

//! > test_function_name
test_function_lowering

//! > function
func foo(a: felt) -> felt {
    let (_, b) = (1, a);
    5
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_format
blk0:
Inputs:
  v0: core::felt, 
Statements:
  (v1: core::felt, ) <- 1u
  (v2: (core::felt, core::felt), ) <- tuple_construct(v1, v0, )
  (v3: core::felt, v4: core::felt, ) <- tuple_destruct(v2)
  (v5: core::felt, ) <- 5u
End:
  Callsite(v5, )

//! > ==========================================================================

//! > Test compund expressions.

//! > test_function_name
test_function_lowering

//! > function
func foo(a: felt) -> felt {
    foo(3) + 5 * a
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_format
blk0:
Inputs:
  v0: core::felt, 
Statements:
  (v1: core::felt, ) <- 3u
  (v2: core::felt, ) <- test_crate::foo(v1, )
  (v3: core::felt, ) <- 5u
  (v4: core::felt, ) <- core::felt_mul(v3, v0, )
  (v5: core::felt, ) <- core::felt_add(v2, v4, )
End:
  Callsite(v5, )
