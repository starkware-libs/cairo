//! > Test extern function calling.

//! > test_function_name
test_function_lowering

//! > function
func foo(ref a: felt, b: felt) {
    f(a,b);
    g(a,b);
    h(a,b);
    i(a,b);
}

//! > function_name
foo

//! > module_code
extern func f(ref a: felt, b: felt) -> felt nopanic;
extern func g(ref a: felt, b: felt) -> (felt,) nopanic;
extern func h(ref a: felt, b: felt) -> (felt,felt) nopanic;
extern func i(ref a: felt, b: felt) -> ((felt,),) nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_format
blk0:
Inputs: v0: core::felt, v1: core::felt
Statements:
  (v3: core::felt, v2: core::felt) <- test_crate::f(v0, v1)
  (v5: core::felt, v4: core::felt) <- test_crate::g(v3, v1)
  (v8: core::felt, v6: core::felt, v7: core::felt) <- test_crate::h(v5, v1)
  (v10: core::felt, v9: (core::felt)) <- test_crate::i(v8, v1)
Drops: v0, v1, v2, v3, v4, v5, v6, v7, v8, v9
End:
  Callsite(v10)

//! > ==========================================================================

//! > Test extern function enum calling.

//! > test_function_name
test_function_lowering

//! > function
func foo(ref a: felt, b: felt) {
  let x = f(a, b);
  match x {
    MyEnum::A(y) => (),
    MyEnum::B(y) => (),
    MyEnum::C(y) => (),
  }
}

//! > function_name
foo

//! > module_code
enum MyEnum {
  A: felt,
  B: (felt,),
  C: (felt, felt),
}
extern func f(ref a: felt, b: felt) -> MyEnum nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_format
blk0:
Inputs: v2: core::felt, v3: core::felt
Statements:
  (v4: test_crate::MyEnum) <- MyEnum::A(v3)
Drops: v3
End:
  Callsite(v2, v4)

blk1:
Inputs: v5: core::felt, v6: core::felt
Statements:
  (v7: (core::felt)) <- struct_construct(v6)
  (v8: test_crate::MyEnum) <- MyEnum::B(v7)
Drops: v7, v6
End:
  Callsite(v5, v8)

blk2:
Inputs: v9: core::felt, v10: core::felt, v11: core::felt
Statements:
  (v12: (core::felt, core::felt)) <- struct_construct(v10, v11)
  (v13: test_crate::MyEnum) <- MyEnum::C(v12)
Drops: v12, v10, v11
End:
  Callsite(v9, v13)

blk3:
Inputs: v16: core::felt
Statements:
  (v17: ()) <- struct_construct()
  (v18: core::PanicResult::<()>) <- PanicResult::Ok(v17)
Drops: v16, v17
End:
  Callsite(v18)

blk4:
Inputs: v19: (core::felt)
Statements:
  (v20: ()) <- struct_construct()
  (v21: core::PanicResult::<()>) <- PanicResult::Ok(v20)
Drops: v19, v20
End:
  Callsite(v21)

blk5:
Inputs: v22: (core::felt, core::felt)
Statements:
  (v23: ()) <- struct_construct()
  (v24: core::PanicResult::<()>) <- PanicResult::Ok(v23)
Drops: v22, v23
End:
  Callsite(v24)

blk6:
Inputs: v0: core::felt, v1: core::felt
Statements:
  (v15: core::felt, v14: test_crate::MyEnum) <- match test_crate::f(v0, v1) {
    (v2, v3) => blk0,
    (v5, v6) => blk1,
    (v9, v10, v11) => blk2,
  }
  (v25: core::PanicResult::<()>) <- match_enum(v14) {
    MyEnum::A => blk3,
    MyEnum::B => blk4,
    MyEnum::C => blk5,
  }
  (v26: core::PanicResult::<()>) <- PanicResult::Ok(v25)
Drops: v0, v1
End:
  Callsite(v15, v26)

//! > ==========================================================================

//! > Test extern function enum calling with optimization.

//! > test_function_name
test_function_lowering

//! > function
func foo(ref a: felt, b: felt) -> felt {
  match f(a, b) {
    MyEnum::A(y) => y,
    MyEnum::B((y,)) => y,
    MyEnum::C((y,_)) => y,
  }
}

//! > function_name
foo

//! > module_code
enum MyEnum {
  A: felt,
  B: (felt,),
  C: (felt, felt),
}
extern func f(ref a: felt, b: felt) -> MyEnum nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_format
blk0:
Inputs: v2: core::felt, v3: core::felt
Statements:
  (v4: core::PanicResult::<core::felt>) <- PanicResult::Ok(v3)
Drops: v3
End:
  Callsite(v2, v4)

blk1:
Inputs: v5: core::felt, v6: core::felt
Statements:
  (v7: core::PanicResult::<core::felt>) <- PanicResult::Ok(v6)
Drops: v6
End:
  Callsite(v5, v7)

blk2:
Inputs: v8: core::felt, v9: core::felt, v10: core::felt
Statements:
  (v11: core::PanicResult::<core::felt>) <- PanicResult::Ok(v9)
Drops: v10, v9
End:
  Callsite(v8, v11)

blk3:
Inputs: v0: core::felt, v1: core::felt
Statements:
  (v13: core::felt, v12: core::PanicResult::<core::felt>) <- match test_crate::f(v0, v1) {
    (v2, v3) => blk0,
    (v5, v6) => blk1,
    (v8, v9, v10) => blk2,
  }
  (v14: core::PanicResult::<core::felt>) <- PanicResult::Ok(v12)
Drops: v0, v1
End:
  Callsite(v13, v14)
