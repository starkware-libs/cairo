//! > Test extern function calling.

//! > test_function_name
test_function_lowering

//! > function
func foo(ref a: felt, b: felt) {
    f(a,b);
    g(a,b);
    h(a,b);
    i(a,b);
}

//! > function_name
foo

//! > module_code
extern func f(ref a: felt, b: felt) -> felt nopanic;
extern func g(ref a: felt, b: felt) -> (felt,) nopanic;
extern func h(ref a: felt, b: felt) -> (felt,felt) nopanic;
extern func i(ref a: felt, b: felt) -> ((felt,),) nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_format
blk0 (root):
Inputs: v0: core::felt, v1: core::felt
Statements:
  (v3: core::felt, v2: core::felt) <- test::f(v0, v1)
  (v5: core::felt, v4: core::felt) <- test::g(v3, v1)
  (v8: core::felt, v6: core::felt, v7: core::felt) <- test::h(v5, v1)
  (v10: core::felt, v9: (core::felt,)) <- test::i(v8, v1)
  (v11: ()) <- struct_construct()
Drops: v0, v1, v2, v3, v4, v5, v6, v7, v8, v9
End:
  Callsite(v10, v11)

//! > ==========================================================================

//! > Test extern function enum calling.

//! > test_function_name
test_function_lowering

//! > function
func foo(ref a: felt, b: felt) {
  let x = f(a, b);
  match x {
    MyEnum::A(y) => (),
    MyEnum::B(y) => (),
    MyEnum::C(y) => (),
  }
}

//! > function_name
foo

//! > module_code
enum MyEnum {
  A: felt,
  B: (felt,),
  C: (felt, felt),
}
extern func f(ref a: felt, b: felt) -> MyEnum nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_format
blk0:
Inputs: v4: core::felt
Statements:
Drops: v4
End:
  Callsite()

blk1:
Inputs: v5: (core::felt,)
Statements:
Drops: v5
End:
  Callsite()

blk2:
Inputs: v6: (core::felt, core::felt)
Statements:
Drops: v6
End:
  Callsite()

blk3 (root):
Inputs: v0: core::felt, v1: core::felt
Statements:
  (v3: core::felt, v2: test::MyEnum) <- test::f(v0, v1)
  () <- match_enum(v2) {
    MyEnum::A => blk0,
    MyEnum::B => blk1,
    MyEnum::C => blk2,
  }
  (v7: ()) <- struct_construct()
Drops: v0, v1
End:
  Callsite(v3, v7)

//! > ==========================================================================

//! > Test extern function enum calling with optimization.

//! > test_function_name
test_function_lowering

//! > function
func foo(a: felt, b: felt) -> felt {
  match f(a, b) {
    MyEnum::A(y) => y,
    MyEnum::B((y,)) => y,
    MyEnum::C((y,_)) => y,
  }
}

//! > function_name
foo

//! > module_code
enum MyEnum {
  A: felt,
  B: (felt,),
  C: (felt, felt),
}
extern func f(a: felt, b: felt) -> MyEnum nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_format
blk0:
Inputs: v2: core::felt
Statements:
Drops:
End:
  Callsite(v2)

blk1:
Inputs: v3: core::felt
Statements:
Drops:
End:
  Callsite(v3)

blk2:
Inputs: v4: core::felt, v5: core::felt
Statements:
Drops: v5
End:
  Callsite(v4)

blk3 (root):
Inputs: v0: core::felt, v1: core::felt
Statements:
  (v6: core::felt) <- match test::f(v0, v1) {
    (v2) => blk0,
    (v3) => blk1,
    (v4, v5) => blk2,
  }
Drops: v0, v1
End:
  Callsite(v6)

//! > ==========================================================================

//! > Test extern function enum calling without optimization (no optimization with ref params).

//! > test_function_name
test_function_lowering

//! > function
func foo(ref a: felt, b: felt) -> felt {
  match f(a, b) {
    MyEnum::A(y) => y,
    MyEnum::B((y,)) => y,
    MyEnum::C((y,_)) => y,
  }
}

//! > function_name
foo

//! > module_code
enum MyEnum {
  A: felt,
  B: (felt,),
  C: (felt, felt),
}
extern func f(ref a: felt, b: felt) -> MyEnum nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_format
blk0:
Inputs: v4: core::felt
Statements:
Drops:
End:
  Callsite(v4)

blk1:
Inputs: v5: (core::felt,)
Statements:
  (v6: core::felt) <- struct_destructure(v5)
Drops: v5
End:
  Callsite(v6)

blk2:
Inputs: v7: (core::felt, core::felt)
Statements:
  (v8: core::felt, v9: core::felt) <- struct_destructure(v7)
Drops: v7, v9
End:
  Callsite(v8)

blk3 (root):
Inputs: v0: core::felt, v1: core::felt
Statements:
  (v3: core::felt, v2: test::MyEnum) <- test::f(v0, v1)
  (v10: core::felt) <- match_enum(v2) {
    MyEnum::A => blk0,
    MyEnum::B => blk1,
    MyEnum::C => blk2,
  }
Drops: v0, v1
End:
  Callsite(v3, v10)

//! > ==========================================================================

//! > Test extern function enum calling with implicits.

//! > test_function_name
test_function_lowering

//! > function
func foo(ref a: felt, b: felt) {
  let x = f(a, b);
  match x {
    MyEnum::A(y) => (),
    MyEnum::B(y) => (),
    MyEnum::C(y) => (),
  }
}

//! > function_name
foo

//! > module_code
enum MyEnum {
  A: felt,
  B: (felt,),
  C: (felt, felt),
}
extern func f(ref a: felt, b: felt) -> MyEnum implicits(RangeCheck) nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_format
blk0:
Inputs: v6: core::felt
Statements:
Drops: v6
End:
  Callsite()

blk1:
Inputs: v7: (core::felt,)
Statements:
Drops: v7
End:
  Callsite()

blk2:
Inputs: v8: (core::felt, core::felt)
Statements:
Drops: v8
End:
  Callsite()

blk3 (root):
Inputs: v0: core::RangeCheck, v1: core::felt, v2: core::felt
Statements:
  (v4: core::RangeCheck, v5: core::felt, v3: test::MyEnum) <- test::f(v0, v1, v2)
  () <- match_enum(v3) {
    MyEnum::A => blk0,
    MyEnum::B => blk1,
    MyEnum::C => blk2,
  }
  (v9: ()) <- struct_construct()
Drops: v2, v1
End:
  Callsite(v4, v5, v9)

//! > ==========================================================================

//! > Test extern function enum calling with optimization with implicits.

//! > test_function_name
test_function_lowering

//! > function
func foo(ref a: felt, b: felt) -> felt {
  match f(a, b) {
    MyEnum::A(y) => y,
    MyEnum::B((y,)) => y,
    MyEnum::C((y,_)) => y,
  }
}

//! > function_name
foo

//! > module_code
enum MyEnum {
  A: felt,
  B: (felt,),
  C: (felt, felt),
}
extern func f(ref a: felt, b: felt) -> MyEnum implicits(RangeCheck) nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_format
blk0:
Inputs: v6: core::felt
Statements:
Drops:
End:
  Callsite(v6)

blk1:
Inputs: v7: (core::felt,)
Statements:
  (v8: core::felt) <- struct_destructure(v7)
Drops: v7
End:
  Callsite(v8)

blk2:
Inputs: v9: (core::felt, core::felt)
Statements:
  (v10: core::felt, v11: core::felt) <- struct_destructure(v9)
Drops: v11, v9
End:
  Callsite(v10)

blk3 (root):
Inputs: v0: core::RangeCheck, v1: core::felt, v2: core::felt
Statements:
  (v4: core::RangeCheck, v5: core::felt, v3: test::MyEnum) <- test::f(v0, v1, v2)
  (v12: core::felt) <- match_enum(v3) {
    MyEnum::A => blk0,
    MyEnum::B => blk1,
    MyEnum::C => blk2,
  }
Drops: v2, v1
End:
  Callsite(v4, v5, v12)
