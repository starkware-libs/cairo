//! > Test enum constructor.

//! > test_function_name
test_function_lowering

//! > function
func foo(ref a: felt) -> felt {
    let b = true;
    if true {
      bar(a, b);
    } else {
    }
    if false {
      return 6;
    } else {
    }
    5
}

//! > function_name
foo

//! > module_code
func bar(ref a: felt, b: bool) {
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_format
blk0:
Inputs: v8: ()
Statements:
Drops:
End:
  Callsite(v8)

blk1:
Inputs: v9: ()
Statements:
  (v10: core::PanicResult::<()>) <- PanicResult::Ok(v9)
Drops: v9, v5, v2, v0, v6, v7, v0, v1, v2, v3, v4
End:
  Return(v7, v10)

blk2:
Inputs: v5: ()
Statements:
  (v7: core::felt, v6: core::PanicResult::<()>) <- test_crate::bar(v0, v2)
  (v11: ()) <- match_enum(v6) {
    PanicResult::Ok => blk0,
    PanicResult::Ok => blk1,
  }
Drops: v5, v11, v0
End:
  Callsite(v7)

blk3:
Inputs: v12: ()
Statements:
Drops: v12
End:
  Callsite(v0)

blk4:
Inputs: v16: ()
Statements:
  (v17: core::felt) <- 6u
  (v18: core::PanicResult::<core::felt>) <- PanicResult::Ok(v17)
Drops: v16, v17, v0, v1, v2, v3, v4, v13, v14, v15
End:
  Return(v13, v18)

blk5:
Inputs: v19: ()
Statements:
Drops: v19
End:
  Callsite()

blk6:
Inputs: v0: core::felt
Statements:
  (v1: ()) <- struct_construct()
  (v2: core::bool) <- bool::True(v1)
  (v3: ()) <- struct_construct()
  (v4: core::bool) <- bool::True(v3)
  (v13: core::felt) <- match_enum(v4) {
    bool::True => blk2,
    bool::False => blk3,
  }
  (v14: ()) <- struct_construct()
  (v15: core::bool) <- bool::False(v14)
  () <- match_enum(v15) {
    bool::True => blk4,
    bool::False => blk5,
  }
  (v20: core::felt) <- 5u
  (v21: core::PanicResult::<core::felt>) <- PanicResult::Ok(v20)
Drops: v0, v1, v2, v3, v4, v20, v14, v15
End:
  Callsite(v13, v21)
