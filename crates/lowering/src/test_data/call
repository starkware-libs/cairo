//! > Test enum constructor.

//! > test_function_name
test_function_lowering

//! > function
func foo(ref a: felt) -> felt {
    let b = true;
    if true {
      bar(a, b);
    } else {
    }
    if false {
      return 6;
    } else {
    }
    5
}

//! > function_name
foo

//! > module_code
func bar(ref a: felt, b: bool) {
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_format
blk0:
Inputs: v3: ()
Statements:
  (v4: (), v5: core::felt) <- test_crate::bar(v0, v2)
Drops: v3, v0, v4
End:
  Callsite(v5)

blk1:
Inputs: v6: ()
Statements:
Drops: v6
End:
  Callsite(v0)

blk2:
Inputs: v10: ()
Statements:
  (v11: core::felt) <- 6u
Drops: v10, v0, v1, v2, v7, v8, v9
End:
  Return(v11, v9)

blk3:
Inputs: v12: ()
Statements:
Drops: v12
End:
  Callsite()

blk4:
Inputs: v0: core::felt
Statements:
  (v1: ()) <- tuple_construct()
  (v2: core::bool) <- bool::True(v1)
  (v7: ()) <- tuple_construct()
  (v8: core::bool) <- bool::True(v7)
  (v9: core::felt) <- match_enum(v8) {
    bool::True => blk0,
    bool::False => blk1,
  }
  (v13: ()) <- tuple_construct()
  (v14: core::bool) <- bool::False(v13)
  () <- match_enum(v14) {
    bool::True => blk2,
    bool::False => blk3,
  }
  (v15: core::felt) <- 5u
Drops: v0, v1, v2, v7, v8, v14, v13
End:
  Callsite(v15, v9)
