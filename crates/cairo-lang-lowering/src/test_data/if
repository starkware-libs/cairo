//! > Test boolean if.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a: bool, x: felt) -> felt {
    if a {
        1
    } else {
        x
    }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::bool, v1: core::felt
blk0 (root):
Statements:
End:
  Match(match_enum(v0) {
    bool::False(v4) => blk1,
    bool::True(v2) => blk2,
  })

blk1:
Statements:
End:
  Goto(blk3, {v1 -> v5})

blk2:
Statements:
  (v3: core::felt) <- 1u
End:
  Goto(blk3, {v3 -> v5})

blk3:
Statements:
End:
  Return(v5)

//! > ==========================================================================

//! > Test if analyzer.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(x: felt) -> felt {
    if x == 0 {
        1
    } else {
        x
    }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::felt
blk0 (root):
Statements:
End:
  Match(match core::felt_is_zero(v0) {
    IsZeroResult::Zero => blk1,
    IsZeroResult::NonZero(v2) => blk2,
  })

blk1:
Statements:
  (v1: core::felt) <- 1u
End:
  Goto(blk3, {v1 -> v3})

blk2:
Statements:
End:
  Goto(blk3, {v0 -> v3})

blk3:
Statements:
End:
  Return(v3)

//! > ==========================================================================

//! > Test if without else.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(x: felt) -> felt {
    if 0 == x {
        return 10;
    }
    20
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::felt
blk0 (root):
Statements:
End:
  Match(match core::felt_is_zero(v0) {
    IsZeroResult::Zero => blk1,
    IsZeroResult::NonZero(v2) => blk2,
  })

blk1:
Statements:
  (v1: core::felt) <- 10u
End:
  Return(v1)

blk2:
Statements:
End:
  Goto(blk3, {})

blk3:
Statements:
  (v3: core::felt) <- 20u
End:
  Return(v3)

//! > ==========================================================================

//! > Test if x == y

//! > test_runner_name
test_function_lowering

//! > function
fn foo(x: felt, y: felt, z: felt, w: felt) -> felt {
    if x + y == z - w {
        0
    } else {
        1
    }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::felt, v1: core::felt, v2: core::felt, v3: core::felt
blk0 (root):
Statements:
End:
  Goto(blk1, {})

blk1:
Statements:
  (v11: core::felt) <- core::felt_add(v0, v1)
End:
  Goto(blk2, {})

blk2:
Statements:
End:
  Goto(blk3, {})

blk3:
Statements:
  (v12: core::felt) <- core::felt_sub(v2, v3)
End:
  Goto(blk4, {})

blk4:
Statements:
End:
  Goto(blk5, {})

blk5:
Statements:
  (v13: core::felt) <- core::felt_sub(v11, v12)
End:
  Goto(blk6, {})

blk6:
Statements:
End:
  Match(match core::felt_is_zero(v13) {
    IsZeroResult::Zero => blk7,
    IsZeroResult::NonZero(v8) => blk8,
  })

blk7:
Statements:
  (v7: core::felt) <- 0u
End:
  Goto(blk9, {v7 -> v10})

blk8:
Statements:
  (v9: core::felt) <- 1u
End:
  Goto(blk9, {v9 -> v10})

blk9:
Statements:
End:
  Return(v10)
