//! > Test loop.

//! > test_runner_name
test_function_lowering(expect_diagnostics: false)

//! > function
fn foo(y: felt252) {
    let mut x = 5;
    while x != y {
        x = x - 1;
    }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::RangeCheck, v1: core::gas::GasBuiltin, v2: core::felt252
blk0 (root):
Statements:
  (v3: core::felt252, v4: @core::felt252) <- snapshot(v2)
  (v5: core::RangeCheck, v6: core::gas::GasBuiltin, v7: core::panics::PanicResult::<(core::felt252, ())>) <- test::foo[40-84][5, None, (v0, v1, v4)
End:
  Match(match_enum(v7) {
    PanicResult::Ok(v8) => blk1,
    PanicResult::Err(v9) => blk2,
  })

blk1:
Statements:
  (v10: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v6)
  (v11: core::felt252, v12: ()) <- struct_destructure(v8)
  (v13: ((),)) <- struct_construct(v12)
  (v14: core::panics::PanicResult::<((),)>) <- PanicResult::Ok(v13)
End:
  Return(v5, v10, v14)

blk2:
Statements:
  (v15: core::panics::PanicResult::<((),)>) <- PanicResult::Err(v9)
End:
  Return(v5, v6, v15)

//! > ==========================================================================

//! > Test while let

//! > test_runner_name
test_function_lowering(expect_diagnostics: false)

//! > function
fn foo(a: MyEnum) -> felt252 {
    let mut y = 0;
    while let MyEnum::A(x) = a {
        y = y + x;
    }
    y
}

//! > function_name
foo

//! > module_code
#[derive(Copy, Drop)]
enum MyEnum {
    A: felt252,
    B,
    C,
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::RangeCheck, v1: core::gas::GasBuiltin, v2: test::MyEnum
blk0 (root):
Statements:
  (v3: core::RangeCheck, v4: core::gas::GasBuiltin, v5: core::panics::PanicResult::<(core::felt252, ())>) <- test::foo[50-108][None, 0, (v0, v1, v2)
End:
  Match(match_enum(v5) {
    PanicResult::Ok(v6) => blk1,
    PanicResult::Err(v7) => blk2,
  })

blk1:
Statements:
  (v8: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v4)
  (v9: core::felt252, v10: ()) <- struct_destructure(v6)
  (v11: (core::felt252,)) <- struct_construct(v9)
  (v12: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v11)
End:
  Return(v3, v8, v12)

blk2:
Statements:
  (v13: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v7)
End:
  Return(v3, v4, v13)

//! > ==========================================================================

//! > Test while let extern enum

//! > test_runner_name
test_function_lowering(expect_diagnostics: false)

//! > function
fn foo() -> felt252 {
    let mut y = 0;
    while let MyEnum::A(x) = a() {
        y = y + x
    }
    y = y + 1;
    return y;
}

//! > function_name
foo

//! > module_code
enum MyEnum {
    A: felt252,
    B,
    C,
}
extern fn a() -> MyEnum nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::RangeCheck, v1: core::gas::GasBuiltin
blk0 (root):
Statements:
  (v2: core::RangeCheck, v3: core::gas::GasBuiltin, v4: core::panics::PanicResult::<(core::felt252, ())>) <- test::foo[41-100][0, (v0, v1)
End:
  Match(match_enum(v4) {
    PanicResult::Ok(v5) => blk1,
    PanicResult::Err(v6) => blk2,
  })

blk1:
Statements:
  (v7: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v3)
  (v8: core::felt252, v9: ()) <- struct_destructure(v5)
  (v10: core::felt252) <- 1
  (v11: core::felt252) <- core::felt252_add(v8, v10)
  (v12: (core::felt252,)) <- struct_construct(v11)
  (v13: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v12)
End:
  Return(v2, v7, v13)

blk2:
Statements:
  (v14: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v6)
End:
  Return(v2, v3, v14)

//! > ==========================================================================

//! > Test while let tuple

//! > test_runner_name
test_function_lowering(expect_diagnostics: false)

//! > function
fn foo() -> felt252 {
    let mut y = 0;
    while let (MyEnum::A(x), true) = (a(), 5 == 6) {
        y = y + x
    }
    y = y + 1;
    return y;
}

//! > function_name
foo

//! > module_code
enum MyEnum {
    A: felt252,
    B,
    C,
}
extern fn a() -> MyEnum nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::RangeCheck, v1: core::gas::GasBuiltin
blk0 (root):
Statements:
  (v2: core::RangeCheck, v3: core::gas::GasBuiltin, v4: core::panics::PanicResult::<(core::felt252, ())>) <- test::foo[41-118][0, (v0, v1)
End:
  Match(match_enum(v4) {
    PanicResult::Ok(v5) => blk1,
    PanicResult::Err(v6) => blk2,
  })

blk1:
Statements:
  (v7: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v3)
  (v8: core::felt252, v9: ()) <- struct_destructure(v5)
  (v10: core::felt252) <- 1
  (v11: core::felt252) <- core::felt252_add(v8, v10)
  (v12: (core::felt252,)) <- struct_construct(v11)
  (v13: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v12)
End:
  Return(v2, v7, v13)

blk2:
Statements:
  (v14: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v6)
End:
  Return(v2, v3, v14)

//! > ==========================================================================

//! > Test while let unsupported tuple

//! > test_runner_name
test_function_lowering(expect_diagnostics: true)

//! > function
fn foo() -> felt252 {
    let mut y = 0;
    while let (MyEnum::A(x), 3) = (a(), 3) {
        y = y + x
    }
    y = y + 1;
    return y;
}

//! > function_name
foo

//! > module_code
enum MyEnum {
    A: felt252,
    B,
    C,
}
extern fn a() -> MyEnum nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Unsupported value in while-let. Currently, while-let on tuples only supports enums as tuple members.
 --> lib.cairo:9:35
    while let (MyEnum::A(x), 3) = (a(), 3) {
                                  ^^^^^^^^

//! > lowering_flat
<Failed lowering function - run with RUST_LOG=warn (or less) to see diagnostics>

//! > ==========================================================================

//! > Test while let numeric

//! > test_runner_name
test_function_lowering(expect_diagnostics: true)

//! > function
fn foo() -> felt252 {
    let mut y = 0;
    while let x = y {
        y = y + x
    }
    y = y + 1;
    return y;
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Numeric values are not supported in while-let conditions.
 --> lib.cairo:3:5-5:5
      while let x = y {
 _____^
|         y = y + x
|     }
|_____^

//! > lowering_flat
<Failed lowering function - run with RUST_LOG=warn (or less) to see diagnostics>

//! > ==========================================================================

//! > Test while let underscore

//! > test_runner_name
test_function_lowering(expect_diagnostics: false)

//! > function
fn foo(a: MyEnum) -> felt252 {
    let mut y = 0;
    while let _ = a {
        y = y + 5;
    }
    y = y + 1;
    return y;
}

//! > function_name
foo

//! > module_code
#[derive(Copy, Drop)]
enum MyEnum {
    A: felt252,
    B,
    C,
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::RangeCheck, v1: core::gas::GasBuiltin, v2: test::MyEnum
blk0 (root):
Statements:
  (v3: core::RangeCheck, v4: core::gas::GasBuiltin, v5: core::panics::PanicResult::<(core::felt252, ())>) <- test::foo[50-97][None, 0, (v0, v1, v2)
End:
  Match(match_enum(v5) {
    PanicResult::Ok(v6) => blk1,
    PanicResult::Err(v7) => blk2,
  })

blk1:
Statements:
  (v8: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v4)
  (v9: core::felt252, v10: ()) <- struct_destructure(v6)
  (v11: core::felt252) <- 1
  (v12: core::felt252) <- core::felt252_add(v9, v11)
  (v13: (core::felt252,)) <- struct_construct(v12)
  (v14: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v13)
End:
  Return(v3, v8, v14)

blk2:
Statements:
  (v15: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v7)
End:
  Return(v3, v4, v15)

//! > ==========================================================================

//! > Test while let unsupported type

//! > test_runner_name
test_function_lowering(expect_diagnostics: true)

//! > function
fn foo(a: MyStruct) -> felt252 {
    let mut y = 0;
    while let _ = a {
        y = y + 5;
    }
    y = y + 1;
    return y;
}

//! > function_name
foo

//! > module_code
struct MyStruct {
    A: felt252,
    B: felt252,
}

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Unsupported type in while-let. Type: `test::MyStruct`.
 --> lib.cairo:7:19
    while let _ = a {
                  ^

//! > lowering_flat
<Failed lowering function - run with RUST_LOG=warn (or less) to see diagnostics>
