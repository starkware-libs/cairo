//! > Test loop.

//! > test_runner_name
test_function_lowering(expect_diagnostics: false)

//! > function
fn foo(y: felt252) {
    let mut x = 5;
    while x != y {
        x = x - 1;
    }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::RangeCheck, v1: core::gas::GasBuiltin, v2: core::felt252
blk0 (root):
Statements:
End:
  Match(match core::gas::withdraw_gas(v0, v1) {
    Option::Some(v3, v4) => blk1,
    Option::None(v5, v6) => blk7,
  })

blk1:
Statements:
  (v7: core::felt252) <- 5
  (v8: core::felt252) <- core::felt252_sub(v7, v2)
End:
  Match(match core::felt252_is_zero(v8) {
    IsZeroResult::Zero => blk2,
    IsZeroResult::NonZero(v9) => blk3,
  })

blk2:
Statements:
  (v10: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v4)
End:
  Goto(blk5, {v3 -> v11, v10 -> v12})

blk3:
Statements:
  (v13: core::felt252, v14: @core::felt252) <- snapshot(v2)
  (v15: core::felt252) <- 1
  (v16: core::felt252) <- core::felt252_sub(v7, v15)
  (v17: core::RangeCheck, v18: core::gas::GasBuiltin, v19: core::panics::PanicResult::<(core::felt252, ())>) <- test::foo[40-84](v3, v4, v16, v14)
End:
  Match(match_enum(v19) {
    PanicResult::Ok(v20) => blk4,
    PanicResult::Err(v21) => blk6,
  })

blk4:
Statements:
  (v22: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v18)
End:
  Goto(blk5, {v17 -> v11, v22 -> v12})

blk5:
Statements:
  (v23: ()) <- struct_construct()
  (v24: ((),)) <- struct_construct(v23)
  (v25: core::panics::PanicResult::<((),)>) <- PanicResult::Ok(v24)
End:
  Return(v11, v12, v25)

blk6:
Statements:
  (v26: core::panics::PanicResult::<((),)>) <- PanicResult::Err(v21)
End:
  Return(v17, v18, v26)

blk7:
Statements:
  (v27: (core::panics::Panic, core::array::Array::<core::felt252>)) <- core::panic_with_const_felt252::<375233589013918064796019>()
  (v28: core::panics::PanicResult::<((),)>) <- PanicResult::Err(v27)
End:
  Return(v5, v6, v28)

//! > ==========================================================================

//! > Test while let

//! > test_runner_name
test_function_lowering(expect_diagnostics: false)

//! > function
fn foo(a: MyEnum) -> felt252 {
    let mut y = 0;
    while let MyEnum::A(x) = a {
        y = y + x;
    }
    y
}

//! > function_name
foo

//! > module_code
#[derive(Copy, Drop)]
enum MyEnum {
    A: felt252,
    B,
    C,
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::RangeCheck, v1: core::gas::GasBuiltin, v2: test::MyEnum
blk0 (root):
Statements:
End:
  Match(match core::gas::withdraw_gas(v0, v1) {
    Option::Some(v3, v4) => blk1,
    Option::None(v5, v6) => blk7,
  })

blk1:
Statements:
  (v7: core::felt252) <- 0
End:
  Match(match_enum(v2) {
    MyEnum::A(v8) => blk2,
    MyEnum::B(v9) => blk5,
    MyEnum::C(v10) => blk6,
  })

blk2:
Statements:
  (v11: core::felt252) <- core::felt252_add(v7, v8)
  (v12: core::RangeCheck, v13: core::gas::GasBuiltin, v14: core::panics::PanicResult::<(core::felt252, ())>) <- test::foo[50-108](v3, v4, v2, v11)
End:
  Match(match_enum(v14) {
    PanicResult::Ok(v15) => blk3,
    PanicResult::Err(v16) => blk4,
  })

blk3:
Statements:
  (v17: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v13)
  (v18: core::felt252, v19: ()) <- struct_destructure(v15)
  (v20: (core::felt252,)) <- struct_construct(v18)
  (v21: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v20)
End:
  Return(v12, v17, v21)

blk4:
Statements:
  (v22: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v16)
End:
  Return(v12, v13, v22)

blk5:
Statements:
  (v23: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v4)
  (v24: (core::felt252,)) <- struct_construct(v7)
  (v25: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v24)
End:
  Return(v3, v23, v25)

blk6:
Statements:
  (v26: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v4)
  (v27: (core::felt252,)) <- struct_construct(v7)
  (v28: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v27)
End:
  Return(v3, v26, v28)

blk7:
Statements:
  (v29: (core::panics::Panic, core::array::Array::<core::felt252>)) <- core::panic_with_const_felt252::<375233589013918064796019>()
  (v30: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v29)
End:
  Return(v5, v6, v30)

//! > ==========================================================================

//! > Test while let extern enum

//! > test_runner_name
test_function_lowering(expect_diagnostics: false)

//! > function
fn foo() -> felt252 {
    let mut y = 0;
    while let MyEnum::A(x) = a() {
        y = y + x
    }
    y = y + 1;
    return y;
}

//! > function_name
foo

//! > module_code
enum MyEnum {
    A: felt252,
    B,
    C,
}
extern fn a() -> MyEnum nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::RangeCheck, v1: core::gas::GasBuiltin
blk0 (root):
Statements:
End:
  Match(match core::gas::withdraw_gas(v0, v1) {
    Option::Some(v2, v3) => blk1,
    Option::None(v4, v5) => blk9,
  })

blk1:
Statements:
  (v6: core::felt252) <- 0
End:
  Match(match test::a() {
    MyEnum::A(v7) => blk2,
    MyEnum::B => blk5,
    MyEnum::C => blk6,
  })

blk2:
Statements:
  (v8: core::felt252) <- core::felt252_add(v6, v7)
  (v9: core::RangeCheck, v10: core::gas::GasBuiltin, v11: core::panics::PanicResult::<(core::felt252, ())>) <- test::foo[41-100](v2, v3, v8)
End:
  Match(match_enum(v11) {
    PanicResult::Ok(v12) => blk3,
    PanicResult::Err(v13) => blk4,
  })

blk3:
Statements:
  (v14: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v10)
  (v15: core::felt252, v16: ()) <- struct_destructure(v12)
End:
  Goto(blk8, {v9 -> v17, v14 -> v18, v15 -> v19})

blk4:
Statements:
  (v20: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v13)
End:
  Return(v9, v10, v20)

blk5:
Statements:
  (v21: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v3)
End:
  Goto(blk7, {v21 -> v22})

blk6:
Statements:
  (v23: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v3)
End:
  Goto(blk7, {v23 -> v22})

blk7:
Statements:
End:
  Goto(blk8, {v2 -> v17, v22 -> v18, v6 -> v19})

blk8:
Statements:
  (v24: core::felt252) <- 1
  (v25: core::felt252) <- core::felt252_add(v19, v24)
  (v26: (core::felt252,)) <- struct_construct(v25)
  (v27: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v26)
End:
  Return(v17, v18, v27)

blk9:
Statements:
  (v28: (core::panics::Panic, core::array::Array::<core::felt252>)) <- core::panic_with_const_felt252::<375233589013918064796019>()
  (v29: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v28)
End:
  Return(v4, v5, v29)

//! > ==========================================================================

//! > Test while let tuple

//! > test_runner_name
test_function_lowering(expect_diagnostics: false)

//! > function
fn foo() -> felt252 {
    let mut y = 0;
    while let (MyEnum::A(x), true) = (a(), 5 == 6) {
        y = y + x
    }
    y = y + 1;
    return y;
}

//! > function_name
foo

//! > module_code
enum MyEnum {
    A: felt252,
    B,
    C,
}
extern fn a() -> MyEnum nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::RangeCheck, v1: core::gas::GasBuiltin
blk0 (root):
Statements:
End:
  Match(match core::gas::withdraw_gas(v0, v1) {
    Option::Some(v2, v3) => blk1,
    Option::None(v4, v5) => blk18,
  })

blk1:
Statements:
  (v6: core::felt252) <- 0
  (v7: core::felt252) <- 5
  (v8: core::felt252) <- 6
  (v9: core::felt252) <- core::felt252_sub(v7, v8)
End:
  Match(match core::felt252_is_zero(v9) {
    IsZeroResult::Zero => blk2,
    IsZeroResult::NonZero(v10) => blk3,
  })

blk2:
Statements:
  (v11: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v3)
  (v12: ()) <- struct_construct()
  (v13: core::bool) <- bool::True(v12)
End:
  Goto(blk4, {v11 -> v14, v13 -> v15})

blk3:
Statements:
  (v16: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v3)
  (v17: ()) <- struct_construct()
  (v18: core::bool) <- bool::False(v17)
End:
  Goto(blk4, {v16 -> v14, v18 -> v15})

blk4:
Statements:
End:
  Match(match test::a() {
    MyEnum::A(v19) => blk5,
    MyEnum::B => blk10,
    MyEnum::C => blk13,
  })

blk5:
Statements:
End:
  Match(match_enum(v15) {
    bool::False(v20) => blk6,
    bool::True(v21) => blk7,
  })

blk6:
Statements:
  (v22: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v14)
End:
  Goto(blk16, {v22 -> v23})

blk7:
Statements:
  (v24: core::felt252) <- core::felt252_add(v6, v19)
  (v25: core::RangeCheck, v26: core::gas::GasBuiltin, v27: core::panics::PanicResult::<(core::felt252, ())>) <- test::foo[41-118](v2, v14, v24)
End:
  Match(match_enum(v27) {
    PanicResult::Ok(v28) => blk8,
    PanicResult::Err(v29) => blk9,
  })

blk8:
Statements:
  (v30: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v26)
  (v31: core::felt252, v32: ()) <- struct_destructure(v28)
End:
  Goto(blk17, {v25 -> v33, v30 -> v34, v31 -> v35})

blk9:
Statements:
  (v36: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v29)
End:
  Return(v25, v26, v36)

blk10:
Statements:
End:
  Match(match_enum(v15) {
    bool::False(v37) => blk11,
    bool::True(v38) => blk12,
  })

blk11:
Statements:
  (v39: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v14)
End:
  Goto(blk16, {v39 -> v23})

blk12:
Statements:
  (v40: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v14)
End:
  Goto(blk16, {v40 -> v23})

blk13:
Statements:
End:
  Match(match_enum(v15) {
    bool::False(v41) => blk14,
    bool::True(v42) => blk15,
  })

blk14:
Statements:
  (v43: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v14)
End:
  Goto(blk16, {v43 -> v23})

blk15:
Statements:
  (v44: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v14)
End:
  Goto(blk16, {v44 -> v23})

blk16:
Statements:
End:
  Goto(blk17, {v2 -> v33, v23 -> v34, v6 -> v35})

blk17:
Statements:
  (v45: core::felt252) <- 1
  (v46: core::felt252) <- core::felt252_add(v35, v45)
  (v47: (core::felt252,)) <- struct_construct(v46)
  (v48: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v47)
End:
  Return(v33, v34, v48)

blk18:
Statements:
  (v49: (core::panics::Panic, core::array::Array::<core::felt252>)) <- core::panic_with_const_felt252::<375233589013918064796019>()
  (v50: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v49)
End:
  Return(v4, v5, v50)

//! > ==========================================================================

//! > Test while let unsupported tuple

//! > test_runner_name
test_function_lowering(expect_diagnostics: true)

//! > function
fn foo() -> felt252 {
    let mut y = 0;
    while let (MyEnum::A(x), 3) = (a(), 3) {
        y = y + x
    }
    y = y + 1;
    return y;
}

//! > function_name
foo

//! > module_code
enum MyEnum {
    A: felt252,
    B,
    C,
}
extern fn a() -> MyEnum nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Unsupported value in while-let. Currently, while-let on tuples only supports enums as tuple members.
 --> lib.cairo:9:35
    while let (MyEnum::A(x), 3) = (a(), 3) {
                                  ^^^^^^^^

//! > lowering_flat
<Failed lowering function - run with RUST_LOG=warn (or less) to see diagnostics>

//! > ==========================================================================

//! > Test while let numeric

//! > test_runner_name
test_function_lowering(expect_diagnostics: true)

//! > function
fn foo() -> felt252 {
    let mut y = 0;
    while let x = y {
        y = y + x
    }
    y = y + 1;
    return y;
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Numeric values are not supported in while-let conditions.
 --> lib.cairo:3:5-5:5
      while let x = y {
 _____^
|         y = y + x
|     }
|_____^

//! > lowering_flat
<Failed lowering function - run with RUST_LOG=warn (or less) to see diagnostics>

//! > ==========================================================================

//! > Test while let underscore

//! > test_runner_name
test_function_lowering(expect_diagnostics: false)

//! > function
fn foo(a: MyEnum) -> felt252 {
    let mut y = 0;
    while let _ = a {
        y = y + 5;
    }
    y = y + 1;
    return y;
}

//! > function_name
foo

//! > module_code
#[derive(Copy, Drop)]
enum MyEnum {
    A: felt252,
    B,
    C,
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::RangeCheck, v1: core::gas::GasBuiltin, v2: test::MyEnum
blk0 (root):
Statements:
End:
  Match(match core::gas::withdraw_gas(v0, v1) {
    Option::Some(v3, v4) => blk1,
    Option::None(v5, v6) => blk8,
  })

blk1:
Statements:
  (v7: core::felt252) <- 0
End:
  Match(match_enum(v2) {
    MyEnum::A(v8) => blk2,
    MyEnum::B(v9) => blk3,
    MyEnum::C(v10) => blk4,
  })

blk2:
Statements:
  (v11: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v4)
End:
  Goto(blk5, {v11 -> v12})

blk3:
Statements:
  (v13: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v4)
End:
  Goto(blk5, {v13 -> v12})

blk4:
Statements:
  (v14: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v4)
End:
  Goto(blk5, {v14 -> v12})

blk5:
Statements:
  (v15: core::felt252) <- 5
  (v16: core::felt252) <- core::felt252_add(v7, v15)
  (v17: core::RangeCheck, v18: core::gas::GasBuiltin, v19: core::panics::PanicResult::<(core::felt252, ())>) <- test::foo[50-97](v3, v12, v2, v16)
End:
  Match(match_enum(v19) {
    PanicResult::Ok(v20) => blk6,
    PanicResult::Err(v21) => blk7,
  })

blk6:
Statements:
  (v22: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v18)
  (v23: core::felt252, v24: ()) <- struct_destructure(v20)
  (v25: core::felt252) <- 1
  (v26: core::felt252) <- core::felt252_add(v23, v25)
  (v27: (core::felt252,)) <- struct_construct(v26)
  (v28: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v27)
End:
  Return(v17, v22, v28)

blk7:
Statements:
  (v29: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v21)
End:
  Return(v17, v18, v29)

blk8:
Statements:
  (v30: (core::panics::Panic, core::array::Array::<core::felt252>)) <- core::panic_with_const_felt252::<375233589013918064796019>()
  (v31: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v30)
End:
  Return(v5, v6, v31)

//! > ==========================================================================

//! > Test while let unsupported type

//! > test_runner_name
test_function_lowering(expect_diagnostics: true)

//! > function
fn foo(a: MyStruct) -> felt252 {
    let mut y = 0;
    while let _ = a {
        y = y + 5;
    }
    y = y + 1;
    return y;
}

//! > function_name
foo

//! > module_code
struct MyStruct {
    A: felt252,
    B: felt252,
}

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Unsupported type in while-let. Type: `test::MyStruct`.
 --> lib.cairo:7:19
    while let _ = a {
                  ^

//! > lowering_flat
<Failed lowering function - run with RUST_LOG=warn (or less) to see diagnostics>
