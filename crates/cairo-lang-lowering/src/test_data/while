//! > Test loop.

//! > test_runner_name
test_function_lowering(expect_diagnostics: false)

//! > function
fn foo(y: felt252) {
    let mut x = 5;
    while x != y {
        x = x - 1;
    }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::RangeCheck, v1: core::gas::GasBuiltin, v2: core::felt252
blk0 (root):
Statements:
  (v3: core::felt252) <- 5
  (v4: core::felt252, v5: @core::felt252) <- snapshot(v2)
  (v6: core::RangeCheck, v7: core::gas::GasBuiltin, v8: core::panics::PanicResult::<(core::felt252, core::LoopResult::<(), ()>)>) <- test::foo[40-84](v0, v1, v3, v5)
End:
  Match(match_enum(v8) {
    PanicResult::Ok(v9) => blk1,
    PanicResult::Err(v10) => blk4,
  })

blk1:
Statements:
  (v11: core::felt252, v12: core::LoopResult::<(), ()>) <- struct_destructure(v9)
End:
  Match(match_enum(v12) {
    LoopResult::Normal(v13) => blk2,
    LoopResult::EarlyReturn(v14) => blk3,
  })

blk2:
Statements:
  (v15: ((),)) <- struct_construct(v13)
  (v16: core::panics::PanicResult::<((),)>) <- PanicResult::Ok(v15)
End:
  Return(v6, v7, v16)

blk3:
Statements:
  (v17: ((),)) <- struct_construct(v14)
  (v18: core::panics::PanicResult::<((),)>) <- PanicResult::Ok(v17)
End:
  Return(v6, v7, v18)

blk4:
Statements:
  (v19: core::panics::PanicResult::<((),)>) <- PanicResult::Err(v10)
End:
  Return(v6, v7, v19)

//! > ==========================================================================

//! > Test while let

//! > test_runner_name
test_function_lowering(expect_diagnostics: false)

//! > function
fn foo(a: MyEnum) -> felt252 {
    let mut y = 0;
    while let MyEnum::A(x) = a {
        y = y + x;
    }
    y
}

//! > function_name
foo

//! > module_code
#[derive(Copy, Drop)]
enum MyEnum {
    A: felt252,
    B,
    C,
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::RangeCheck, v1: core::gas::GasBuiltin, v2: test::MyEnum
blk0 (root):
Statements:
  (v3: core::felt252) <- 0
  (v4: core::RangeCheck, v5: core::gas::GasBuiltin, v6: core::panics::PanicResult::<(core::felt252, core::LoopResult::<(), core::felt252>)>) <- test::foo[50-108](v0, v1, v2, v3)
End:
  Match(match_enum(v6) {
    PanicResult::Ok(v7) => blk1,
    PanicResult::Err(v8) => blk4,
  })

blk1:
Statements:
  (v9: core::felt252, v10: core::LoopResult::<(), core::felt252>) <- struct_destructure(v7)
End:
  Match(match_enum(v10) {
    LoopResult::Normal(v11) => blk2,
    LoopResult::EarlyReturn(v12) => blk3,
  })

blk2:
Statements:
  (v13: (core::felt252,)) <- struct_construct(v9)
  (v14: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v13)
End:
  Return(v4, v5, v14)

blk3:
Statements:
  (v15: (core::felt252,)) <- struct_construct(v12)
  (v16: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v15)
End:
  Return(v4, v5, v16)

blk4:
Statements:
  (v17: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v8)
End:
  Return(v4, v5, v17)

//! > ==========================================================================

//! > Test while let extern enum

//! > test_runner_name
test_function_lowering(expect_diagnostics: false)

//! > function
fn foo() -> felt252 {
    let mut y = 0;
    while let MyEnum::A(x) = a() {
        y = y + x
    }
    y = y + 1;
    return y;
}

//! > function_name
foo

//! > module_code
enum MyEnum {
    A: felt252,
    B,
    C,
}
extern fn a() -> MyEnum nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::RangeCheck, v1: core::gas::GasBuiltin
blk0 (root):
Statements:
  (v2: core::felt252) <- 0
  (v3: core::RangeCheck, v4: core::gas::GasBuiltin, v5: core::panics::PanicResult::<(core::felt252, core::LoopResult::<(), core::felt252>)>) <- test::foo[41-100](v0, v1, v2)
End:
  Match(match_enum(v5) {
    PanicResult::Ok(v6) => blk1,
    PanicResult::Err(v7) => blk4,
  })

blk1:
Statements:
  (v8: core::felt252, v9: core::LoopResult::<(), core::felt252>) <- struct_destructure(v6)
End:
  Match(match_enum(v9) {
    LoopResult::Normal(v10) => blk2,
    LoopResult::EarlyReturn(v11) => blk3,
  })

blk2:
Statements:
  (v12: core::felt252) <- 1
  (v13: core::felt252) <- core::felt252_add(v8, v12)
  (v14: (core::felt252,)) <- struct_construct(v13)
  (v15: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v14)
End:
  Return(v3, v4, v15)

blk3:
Statements:
  (v16: (core::felt252,)) <- struct_construct(v11)
  (v17: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v16)
End:
  Return(v3, v4, v17)

blk4:
Statements:
  (v18: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v7)
End:
  Return(v3, v4, v18)

//! > ==========================================================================

//! > Test while let tuple

//! > test_runner_name
test_function_lowering(expect_diagnostics: false)

//! > function
fn foo() -> felt252 {
    let mut y = 0;
    while let (MyEnum::A(x), true) = (a(), 5 == 6) {
        y = y + x
    }
    y = y + 1;
    return y;
}

//! > function_name
foo

//! > module_code
enum MyEnum {
    A: felt252,
    B,
    C,
}
extern fn a() -> MyEnum nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::RangeCheck, v1: core::gas::GasBuiltin
blk0 (root):
Statements:
  (v2: core::felt252) <- 0
  (v3: core::RangeCheck, v4: core::gas::GasBuiltin, v5: core::panics::PanicResult::<(core::felt252, core::LoopResult::<(), core::felt252>)>) <- test::foo[41-118](v0, v1, v2)
End:
  Match(match_enum(v5) {
    PanicResult::Ok(v6) => blk1,
    PanicResult::Err(v7) => blk4,
  })

blk1:
Statements:
  (v8: core::felt252, v9: core::LoopResult::<(), core::felt252>) <- struct_destructure(v6)
End:
  Match(match_enum(v9) {
    LoopResult::Normal(v10) => blk2,
    LoopResult::EarlyReturn(v11) => blk3,
  })

blk2:
Statements:
  (v12: core::felt252) <- 1
  (v13: core::felt252) <- core::felt252_add(v8, v12)
  (v14: (core::felt252,)) <- struct_construct(v13)
  (v15: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v14)
End:
  Return(v3, v4, v15)

blk3:
Statements:
  (v16: (core::felt252,)) <- struct_construct(v11)
  (v17: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v16)
End:
  Return(v3, v4, v17)

blk4:
Statements:
  (v18: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v7)
End:
  Return(v3, v4, v18)

//! > ==========================================================================

//! > Test while let unsupported tuple

//! > test_runner_name
test_function_lowering(expect_diagnostics: true)

//! > function
fn foo() -> felt252 {
    let mut y = 0;
    while let (MyEnum::A(x), 3) = (a(), 3) {
        y = y + x
    }
    y = y + 1;
    return y;
}

//! > function_name
foo

//! > module_code
enum MyEnum {
    A: felt252,
    B,
    C,
}
extern fn a() -> MyEnum nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Unsupported value in while-let. Currently, while-let on tuples only supports enums as tuple members.
 --> lib.cairo:9:35
    while let (MyEnum::A(x), 3) = (a(), 3) {
                                  ^^^^^^^^

//! > lowering_flat
Parameters:
blk0 (root):
Statements:
  (v0: core::felt252) <- 0
  (v1: core::felt252, v2: core::LoopResult::<(), core::felt252>) <- test::foo[41-110](v0)
End:
  Match(match_enum(v2) {
    LoopResult::Normal(v3) => blk1,
    LoopResult::EarlyReturn(v4) => blk2,
  })

blk1:
Statements:
  (v5: core::felt252) <- 1
  (v6: core::felt252) <- core::Felt252Add::add(v1, v5)
End:
  Return(v6)

blk2:
Statements:
End:
  Return(v4)

//! > ==========================================================================

//! > Test while let numeric

//! > test_runner_name
test_function_lowering(expect_diagnostics: true)

//! > function
fn foo() -> felt252 {
    let mut y = 0;
    while let x = y {
        y = y + x
    }
    y = y + 1;
    return y;
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Numeric values are not supported in while-let conditions.
 --> lib.cairo:3:5-5:5
      while let x = y {
 _____^
|         y = y + x
|     }
|_____^

//! > lowering_flat
Parameters:
blk0 (root):
Statements:
  (v0: core::felt252) <- 0
  (v1: core::felt252, v2: core::LoopResult::<(), core::felt252>) <- test::foo[41-87](v0)
End:
  Match(match_enum(v2) {
    LoopResult::Normal(v3) => blk1,
    LoopResult::EarlyReturn(v4) => blk2,
  })

blk1:
Statements:
  (v5: core::felt252) <- 1
  (v6: core::felt252) <- core::Felt252Add::add(v1, v5)
End:
  Return(v6)

blk2:
Statements:
End:
  Return(v4)

//! > ==========================================================================

//! > Test while let underscore

//! > test_runner_name
test_function_lowering(expect_diagnostics: false)

//! > function
fn foo(a: MyEnum) -> felt252 {
    let mut y = 0;
    while let _ = a {
        y = y + 5;
    }
    y = y + 1;
    return y;
}

//! > function_name
foo

//! > module_code
#[derive(Copy, Drop)]
enum MyEnum {
    A: felt252,
    B,
    C,
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::RangeCheck, v1: core::gas::GasBuiltin, v2: test::MyEnum
blk0 (root):
Statements:
  (v3: core::felt252) <- 0
  (v4: core::RangeCheck, v5: core::gas::GasBuiltin, v6: core::panics::PanicResult::<(core::felt252, core::LoopResult::<(), core::felt252>)>) <- test::foo[50-97](v0, v1, v2, v3)
End:
  Match(match_enum(v6) {
    PanicResult::Ok(v7) => blk1,
    PanicResult::Err(v8) => blk4,
  })

blk1:
Statements:
  (v9: core::felt252, v10: core::LoopResult::<(), core::felt252>) <- struct_destructure(v7)
End:
  Match(match_enum(v10) {
    LoopResult::Normal(v11) => blk2,
    LoopResult::EarlyReturn(v12) => blk3,
  })

blk2:
Statements:
  (v13: core::felt252) <- 1
  (v14: core::felt252) <- core::felt252_add(v9, v13)
  (v15: (core::felt252,)) <- struct_construct(v14)
  (v16: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v15)
End:
  Return(v4, v5, v16)

blk3:
Statements:
  (v17: (core::felt252,)) <- struct_construct(v12)
  (v18: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v17)
End:
  Return(v4, v5, v18)

blk4:
Statements:
  (v19: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v8)
End:
  Return(v4, v5, v19)

//! > ==========================================================================

//! > Test while let unsupported type

//! > test_runner_name
test_function_lowering(expect_diagnostics: true)

//! > function
fn foo(a: MyStruct) -> felt252 {
    let mut y = 0;
    while let _ = a {
        y = y + 5;
    }
    y = y + 1;
    return y;
}

//! > function_name
foo

//! > module_code
struct MyStruct {
    A: felt252,
    B: felt252,
}

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Unsupported type in while-let. Type: `test::MyStruct`.
 --> lib.cairo:7:19
    while let _ = a {
                  ^

//! > lowering_flat
Parameters: v0: test::MyStruct
blk0 (root):
Statements:
  (v1: core::felt252) <- 0
  (v2: core::felt252, v3: core::LoopResult::<(), core::felt252>) <- test::foo[52-99](v0, v1)
End:
  Match(match_enum(v3) {
    LoopResult::Normal(v4) => blk1,
    LoopResult::EarlyReturn(v5) => blk2,
  })

blk1:
Statements:
  (v6: core::felt252) <- 1
  (v7: core::felt252) <- core::Felt252Add::add(v2, v6)
End:
  Return(v7)

blk2:
Statements:
End:
  Return(v5)
