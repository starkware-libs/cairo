//! > Test arm pattern destructure for match-enum param.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(e: MyEnum) {
    match e {
        MyEnum::a((_x, (_y, _z))) => {},
        MyEnum::b((_x, _y)) => {},
        MyEnum::c(_x) => {},
        MyEnum::d((_x, _y)) => {},
        MyEnum::e(_x) => {},
        MyEnum::f((_x,)) => {},
        MyEnum::g(_x) => {},
        MyEnum::h(_x) => {},
    }
}

//! > function_name
foo

//! > module_code
enum MyEnum {
    a: (felt252, (felt252, felt252)),
    b: (felt252, (felt252, felt252)),
    c: (felt252, (felt252, felt252)),
    d: (felt252, felt252),
    e: (felt252, felt252),
    f: (felt252,),
    g: (felt252,),
    h: felt252
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: test::MyEnum
blk0 (root):
Statements:
End:
  Match(match_enum(v0) {
    MyEnum::a(v1) => blk1,
    MyEnum::b(v6) => blk2,
    MyEnum::c(v9) => blk3,
    MyEnum::d(v10) => blk4,
    MyEnum::e(v13) => blk5,
    MyEnum::f(v14) => blk6,
    MyEnum::g(v16) => blk7,
    MyEnum::h(v17) => blk8,
  })

blk1:
Statements:
End:
  Goto(blk9, {})

blk2:
Statements:
End:
  Goto(blk9, {})

blk3:
Statements:
End:
  Goto(blk9, {})

blk4:
Statements:
End:
  Goto(blk9, {})

blk5:
Statements:
End:
  Goto(blk9, {})

blk6:
Statements:
End:
  Goto(blk9, {})

blk7:
Statements:
End:
  Goto(blk9, {})

blk8:
Statements:
End:
  Goto(blk9, {})

blk9:
Statements:
  (v30: ()) <- struct_construct()
End:
  Return(v30)

//! > ==========================================================================

//! > Test arm pattern destructure for match-extern.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(ref a: felt252) {
    match bar(ref a) {
        MyEnum::a((_x, (_y, _z))) => {},
        MyEnum::b((_x, _y)) => {},
        MyEnum::c(_x) => {},
        MyEnum::d((_x, _y)) => {},
        MyEnum::e(_x) => {},
        MyEnum::f((_x,)) => {},
        MyEnum::g(_x) => {},
        MyEnum::h(_x) => {},
    }
}

//! > function_name
foo

//! > module_code
enum MyEnum {
  a: (felt252, (felt252, felt252)),
  b: (felt252, (felt252, felt252)),
  c: (felt252, (felt252, felt252)),
  d: (felt252, felt252),
  e: (felt252, felt252),
  f: (felt252,),
  g: (felt252,),
  h: felt252
}
extern fn bar(ref a: felt252) -> MyEnum nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::felt252
blk0 (root):
Statements:
End:
  Match(match test::bar(v0) {
    MyEnum::a(v1, v2, v3) => blk1,
    MyEnum::b(v6, v7, v8) => blk2,
    MyEnum::c(v9, v10, v11) => blk3,
    MyEnum::d(v13, v14, v15) => blk4,
    MyEnum::e(v16, v17, v18) => blk5,
    MyEnum::f(v20, v21) => blk6,
    MyEnum::g(v22, v23) => blk7,
    MyEnum::h(v25, v26) => blk8,
  })

blk1:
Statements:
End:
  Goto(blk9, {v1 -> v47})

blk2:
Statements:
End:
  Goto(blk9, {v6 -> v47})

blk3:
Statements:
End:
  Goto(blk9, {v9 -> v47})

blk4:
Statements:
End:
  Goto(blk9, {v13 -> v47})

blk5:
Statements:
End:
  Goto(blk9, {v16 -> v47})

blk6:
Statements:
End:
  Goto(blk9, {v20 -> v47})

blk7:
Statements:
End:
  Goto(blk9, {v22 -> v47})

blk8:
Statements:
End:
  Goto(blk9, {v25 -> v47})

blk9:
Statements:
  (v48: ()) <- struct_construct()
End:
  Return(v47, v48)

//! > ==========================================================================

//! > Test arm pattern destructure for match-enum variable.

//! > test_runner_name
test_function_lowering

//! > function
fn foo() {
    let y = bar();
    match y {
        MyEnum::a((_x, (_y, _z))) => {},
        MyEnum::b((_x, _y)) => {},
        MyEnum::c(_x) => {},
        MyEnum::d((_x, _y)) => {},
        MyEnum::e(_x) => {},
        MyEnum::f((_x,)) => {},
        MyEnum::g(_x) => {},
        MyEnum::h(_x) => {},
    }
}

//! > function_name
foo

//! > module_code
enum MyEnum {
  a: (felt252, (felt252, felt252)),
  b: (felt252, (felt252, felt252)),
  c: (felt252, (felt252, felt252)),
  d: (felt252, felt252),
  e: (felt252, felt252),
  f: (felt252,),
  g: (felt252,),
  h: felt252
}
extern fn bar() -> MyEnum nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters:
blk0 (root):
Statements:
End:
  Match(match test::bar() {
    MyEnum::a(v0, v1) => blk1,
    MyEnum::b(v4, v5) => blk2,
    MyEnum::c(v8, v9) => blk3,
    MyEnum::d(v12, v13) => blk4,
    MyEnum::e(v16, v17) => blk5,
    MyEnum::f(v20) => blk6,
    MyEnum::g(v23) => blk7,
    MyEnum::h(v26) => blk8,
  })

blk1:
Statements:
End:
  Goto(blk9, {})

blk2:
Statements:
End:
  Goto(blk9, {})

blk3:
Statements:
End:
  Goto(blk9, {})

blk4:
Statements:
End:
  Goto(blk9, {})

blk5:
Statements:
End:
  Goto(blk9, {})

blk6:
Statements:
End:
  Goto(blk9, {})

blk7:
Statements:
End:
  Goto(blk9, {})

blk8:
Statements:
End:
  Goto(blk9, {})

blk9:
Statements:
  (v58: ()) <- struct_construct()
End:
  Return(v58)

//! > ==========================================================================

//! > Test arm pattern destructure for match-extern (with refs and implicits).

//! > test_runner_name
test_function_lowering

//! > function
fn foo(mut z: felt252) {
    match bar(ref z) {
      MyEnum::a((_x, (_y, _z))) => {},
      MyEnum::b((_x, _y)) => {},
      MyEnum::c(_x) => {},
      MyEnum::d((_x, _y)) => {},
      MyEnum::e(_x) => {},
      MyEnum::f((_x,)) => {},
      MyEnum::g(_x) => {},
      MyEnum::h(_x) => {},
    }
}

//! > function_name
foo

//! > module_code
enum MyEnum {
  a: (felt252, (felt252, felt252)),
  b: (felt252, (felt252, felt252)),
  c: (felt252, (felt252, felt252)),
  d: (felt252, felt252),
  e: (felt252, felt252),
  f: (felt252,),
  g: (felt252,),
  h: felt252
}
extern fn bar(ref r: felt252) -> MyEnum implicits(RangeCheck) nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v49: core::RangeCheck, v0: core::felt252
blk0 (root):
Statements:
End:
  Match(match test::bar(v49, v0) {
    MyEnum::a(v50, v1, v2, v3) => blk1,
    MyEnum::b(v51, v6, v7, v8) => blk2,
    MyEnum::c(v52, v9, v10, v11) => blk3,
    MyEnum::d(v53, v13, v14, v15) => blk4,
    MyEnum::e(v54, v16, v17, v18) => blk5,
    MyEnum::f(v55, v20, v21) => blk6,
    MyEnum::g(v56, v22, v23) => blk7,
    MyEnum::h(v57, v25, v26) => blk8,
  })

blk1:
Statements:
End:
  Goto(blk9, {v50 -> v59})

blk2:
Statements:
End:
  Goto(blk9, {v51 -> v59})

blk3:
Statements:
End:
  Goto(blk9, {v52 -> v59})

blk4:
Statements:
End:
  Goto(blk9, {v53 -> v59})

blk5:
Statements:
End:
  Goto(blk9, {v54 -> v59})

blk6:
Statements:
End:
  Goto(blk9, {v55 -> v59})

blk7:
Statements:
End:
  Goto(blk9, {v56 -> v59})

blk8:
Statements:
End:
  Goto(blk9, {v57 -> v59})

blk9:
Statements:
  (v48: ()) <- struct_construct()
End:
  Return(v59, v48)

//! > ==========================================================================

//! > Test arm pattern destructure for match-enum variable (with refs and implicits).

//! > test_runner_name
test_function_lowering

//! > function
fn foo(mut z: felt252) {
    let y = bar(ref z);
    match y {
        MyEnum::a((_x, (_y, _z))) => {},
        MyEnum::b((_x, _y)) => {},
        MyEnum::c(_x) => {},
        MyEnum::d((_x, _y)) => {},
        MyEnum::e(_x) => {},
        MyEnum::f((_x,)) => {},
        MyEnum::g(_x) => {},
        MyEnum::h(_x) => {},
    }
}

//! > function_name
foo

//! > module_code
enum MyEnum {
  a: (felt252, (felt252, felt252)),
  b: (felt252, (felt252, felt252)),
  c: (felt252, (felt252, felt252)),
  d: (felt252, felt252),
  e: (felt252, felt252),
  f: (felt252,),
  g: (felt252,),
  h: felt252
}
extern fn bar(ref r: felt252) -> MyEnum implicits(RangeCheck) nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v69: core::RangeCheck, v0: core::felt252
blk0 (root):
Statements:
End:
  Match(match test::bar(v69, v0) {
    MyEnum::a(v70, v1, v2, v3) => blk1,
    MyEnum::b(v71, v6, v7, v8) => blk2,
    MyEnum::c(v72, v11, v12, v13) => blk3,
    MyEnum::d(v73, v16, v17, v18) => blk4,
    MyEnum::e(v74, v21, v22, v23) => blk5,
    MyEnum::f(v75, v26, v27) => blk6,
    MyEnum::g(v76, v30, v31) => blk7,
    MyEnum::h(v77, v34, v35) => blk8,
  })

blk1:
Statements:
End:
  Goto(blk9, {v70 -> v80})

blk2:
Statements:
End:
  Goto(blk9, {v71 -> v80})

blk3:
Statements:
End:
  Goto(blk9, {v72 -> v80})

blk4:
Statements:
End:
  Goto(blk9, {v73 -> v80})

blk5:
Statements:
End:
  Goto(blk9, {v74 -> v80})

blk6:
Statements:
End:
  Goto(blk9, {v75 -> v80})

blk7:
Statements:
End:
  Goto(blk9, {v76 -> v80})

blk8:
Statements:
End:
  Goto(blk9, {v77 -> v80})

blk9:
Statements:
  (v68: ()) <- struct_construct()
End:
  Return(v80, v68)
