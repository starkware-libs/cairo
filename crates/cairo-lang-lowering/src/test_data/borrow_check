//! > Basic borrow checking valid.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(x: ACopy, y: ADrop) {
  if true {
    use_a_copy(x);
    use_a_drop(y);
  } else {
    use_a_drop(y);
  }
  use_a_copy(x);
}

//! > function_name
foo

//! > module_code
extern type ACopy;
impl ACopyCopy of Copy::<ACopy>;
extern type ADrop;
impl ADropDrop of Drop::<ADrop>;

extern fn use_a_copy(x: ACopy) nopanic;
extern fn use_a_drop(x: ADrop) nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: test::ACopy, v1: test::ADrop
blk0 (root):
Statements:
  (v2: ()) <- struct_construct()
  (v3: core::bool) <- bool::True(v2)
End:
  Match(match_enum(v3) {
    bool::False(v5) => blk1,
    bool::True(v4) => blk2,
  })

blk1:
Statements:
  () <- test::use_a_drop(v1)
End:
  Goto(blk3, {})

blk2:
Statements:
  () <- test::use_a_copy(v0)
  () <- test::use_a_drop(v1)
End:
  Goto(blk3, {})

blk3:
Statements:
  () <- test::use_a_copy(v0)
  (v6: ()) <- struct_construct()
End:
  Return(v6)

//! > ==========================================================================

//! > Basic borrow checking failures.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(x: ACopy, y: ADrop) {
  if true {
    use_a_copy(x);
    use_a_drop(y);
  } else {
  }
  use_a_drop(y);
}

//! > function_name
foo

//! > module_code
extern type ACopy;
impl ACopyCopy of Copy::<ACopy>;
extern type ADrop;
impl ADropDrop of Drop::<ADrop>;

extern fn use_a_copy(x: ACopy) nopanic;
extern fn use_a_drop(x: ADrop) nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Variable was previously moved. Trait has no implementation in context: core::traits::Copy::<test::ADrop>
 --> lib.cairo:8:18
fn foo(x: ACopy, y: ADrop) {
                 ^

error: Variable not dropped. Trait has no implementation in context: core::traits::Drop::<test::ACopy>
 --> lib.cairo:8:8
fn foo(x: ACopy, y: ADrop) {
       ^

//! > lowering_flat
Parameters: v0: test::ACopy, v1: test::ADrop

//! > ==========================================================================

//! > Borrow checking with panic

//! > test_runner_name
test_function_lowering

//! > function
fn foo(ref x: ADrop, y: ADrop) {
  use_a_drop(x);
  bar();
  x = y;
}

fn bar(){
  let mut data = array_new::<felt252>();
  array_append::<felt252>(ref data, 1);
  panic(data);
}

//! > function_name
foo

//! > module_code
extern type ACopy;
impl ACopyCopy of Copy::<ACopy>;
extern type ADrop;
impl ADropDrop of Drop::<ADrop>;

extern fn use_a_copy(x: ACopy) nopanic;
extern fn use_a_drop(x: ADrop) nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: test::ADrop, v1: test::ADrop
blk0 (root):
Statements:
  () <- test::use_a_drop(v0)
  (v4: core::PanicResult::<((),)>) <- test::bar()
End:
  Match(match_enum(v4) {
    PanicResult::Ok(v5) => blk1,
    PanicResult::Err(v7) => blk3,
  })

blk1:
Statements:
  (v6: ()) <- struct_destructure(v5)
End:
  Goto(blk2, {})

blk2:
Statements:
  (v3: ()) <- struct_construct()
  (v8: (test::ADrop, ())) <- struct_construct(v1, v3)
  (v9: core::PanicResult::<(test::ADrop, ())>) <- PanicResult::Ok(v8)
End:
  Return(v9)

blk3:
Statements:
  (v10: core::PanicResult::<(test::ADrop, ())>) <- PanicResult::Err(v7)
End:
  Return(v10)

//! > ==========================================================================

//! > Borrow checking array

//! > test_runner_name
test_function_lowering

//! > function
fn foo(ref self: Query::<felt252>, value: felt252) {
  let mut data = self.data;
  array_append(ref data, value)
}

//! > function_name
foo

//! > module_code
struct Query<T> {
  data: Array::<T>,
}

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Variable was previously moved. Trait has no implementation in context: core::traits::Copy::<test::Query::<core::felt252>>
 --> lib.cairo:4:12
fn foo(ref self: Query::<felt252>, value: felt252) {
           ^**^

//! > lowering_flat
Parameters: v0: test::Query::<core::felt252>, v1: core::felt252

//! > ==========================================================================

//! > Find drops.

//! > test_runner_name
test_function_lowering

//! > function
fn foo() {
   let mut arr = ArrayTrait::<u256>::new();
   arr.append(1.into());
}

//! > function_name
foo

//! > module_code
// Core library imports.
use array::ArrayTrait;
use traits::Into;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v10: core::RangeCheck
blk0 (root):
Statements:
End:
  Goto(blk1, {})

blk1:
Statements:
  (v6: core::array::Array::<core::integer::u256>) <- core::array::array_new::<core::integer::u256>()
End:
  Goto(blk2, {})

blk2:
Statements:
  (v1: core::felt252) <- 1u
End:
  Goto(blk3, {})

blk3:
Statements:
  (v14: core::RangeCheck, v7: core::integer::u256) <- core::integer::u256_from_felt252(v10, v1)
End:
  Goto(blk4, {})

blk4:
Statements:
End:
  Goto(blk5, {})

blk5:
Statements:
  (v8: core::array::Array::<core::integer::u256>) <- core::array::array_append::<core::integer::u256>(v6, v7)
  (v9: ()) <- struct_construct()
End:
  Goto(blk6, {})

blk6:
Statements:
  (v5: ()) <- struct_construct()
End:
  Return(v14, v5)
