//! > Test panic.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(ref x: felt252, a: bool) -> felt252 {
  x = 7;
  let mut data = ArrayTrait::new();
  data.append(1);
  let y = panic(data);
  5
}

//! > function_name
foo

//! > module_code
use array::ArrayTrait;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::felt252, v1: core::bool
blk0 (root):
Statements:
  (v7: core::array::Array::<core::felt252>) <- core::array::array_new::<core::felt252>()
  (v4: core::felt252) <- 1u
  (v8: core::array::Array::<core::felt252>) <- core::array::array_append::<core::felt252>(v7, v4)
  (v10: core::PanicResult::<(core::felt252, core::felt252)>) <- PanicResult::Err(v8)
End:
  Return(v10)

//! > ==========================================================================

//! > Test call panicable.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(ref x: felt252, ref a: bool) -> felt252 {
  if true { x = 7; } else { x = 6; };
  bar(ref a)
}

//! > function_name
foo

//! > module_code
use array::ArrayTrait;

fn bar(ref a: bool) -> felt252 {
  let mut data = ArrayTrait::new();
  data.append(1);
  let y = panic(data);
  5
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::felt252, v1: core::bool
blk0 (root):
Statements:
  (v11: core::PanicResult::<(core::bool, core::felt252)>) <- test::bar(v1)
End:
  Match(match_enum(v11) {
    PanicResult::Ok(v12) => blk1,
    PanicResult::Err(v15) => blk2,
  })

blk1:
Statements:
  (v13: core::bool, v14: core::felt252) <- struct_destructure(v12)
  (v5: core::felt252) <- 7u
  (v16: (core::felt252, core::bool, core::felt252)) <- struct_construct(v5, v13, v14)
  (v17: core::PanicResult::<(core::felt252, core::bool, core::felt252)>) <- PanicResult::Ok(v16)
End:
  Return(v17)

blk2:
Statements:
  (v18: core::PanicResult::<(core::felt252, core::bool, core::felt252)>) <- PanicResult::Err(v15)
End:
  Return(v18)

//! > ==========================================================================

//! > Test noninlinalbe function that panics.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(opt: Option<felt252>) -> felt252 {
  expect(opt)
}

//! > function_name
foo

//! > module_code
use array::ArrayTrait;

#[inline(always)]
fn expect(opt: Option<felt252>) -> felt252 {
   match opt {
      Option::Some(x) => x,
      Option::None(_) => no_inline_panic(),
  }
}


#[inline(never)]
fn no_inline_panic() -> never {
  let mut data = ArrayTrait::new();
  data.append(1);
  panic(data)
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::option::Option::<core::felt252>
blk0 (root):
Statements:
End:
  Match(match_enum(v0) {
    Option::Some(v2) => blk1,
    Option::None(v3) => blk2,
  })

blk1:
Statements:
  (v6: (core::felt252,)) <- struct_construct(v2)
  (v7: core::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v6)
End:
  Return(v7)

blk2:
Statements:
  (v8: core::PanicResult::<(core::never,)>) <- test::no_inline_panic()
End:
  Match(match_enum(v8) {
    PanicResult::Ok(v9) => blk3,
    PanicResult::Err(v11) => blk4,
  })

blk3:
Statements:
  (v10: core::never) <- struct_destructure(v9)
End:
  Match(match_enum(v10) {
  })

blk4:
Statements:
  (v12: core::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v11)
End:
  Return(v12)
