//! > Test recursive call.

//! > test_runner_name
test_function_lowering_phases

//! > function
fn foo() {
  goo()
}

fn goo() -> core::never {
  goo()
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > before_all
Parameters:
blk0 (root):
Statements:
  (v0: core::never) <- test::goo()
End:
  Match(match_enum(v0) {
  })

//! > after_inlining
Parameters:
blk0 (root):
Statements:
  (v0: core::never) <- test::goo()
End:
  Match(match_enum(v0) {
  })

//! > after_add_withdraw_gas
Parameters:
blk0 (root):
Statements:
  (v0: core::never) <- test::goo()
End:
  Match(match_enum(v0) {
  })

//! > after_lower_panics
Parameters:
blk0 (root):
Statements:
  (v1: core::panics::PanicResult::<(core::never,)>) <- test::goo()
End:
  Match(match_enum(v1) {
    PanicResult::Ok(v2) => blk2,
    PanicResult::Err(v4) => blk3,
  })

blk1:
Statements:
End:
  Match(match_enum(v0) {
  })

blk2:
Statements:
  (v3: core::never) <- struct_destructure(v2)
End:
  Goto(blk1, {v3 -> v0})

blk3:
Statements:
  (v5: core::panics::PanicResult::<((),)>) <- PanicResult::Err(v4)
End:
  Return(v5)

//! > after_return_optimization
Parameters:
blk0 (root):
Statements:
  (v1: core::panics::PanicResult::<(core::never,)>) <- test::goo()
End:
  Match(match_enum(v1) {
    PanicResult::Ok(v2) => blk2,
    PanicResult::Err(v4) => blk3,
  })

blk1:
Statements:
End:
  Match(match_enum(v0) {
  })

blk2:
Statements:
  (v3: core::never) <- struct_destructure(v2)
End:
  Goto(blk1, {v3 -> v0})

blk3:
Statements:
  (v5: core::panics::PanicResult::<((),)>) <- PanicResult::Err(v4)
End:
  Return(v5)

//! > after_add_destructs
Parameters:
blk0 (root):
Statements:
  (v1: core::panics::PanicResult::<(core::never,)>) <- test::goo()
End:
  Match(match_enum(v1) {
    PanicResult::Ok(v2) => blk2,
    PanicResult::Err(v4) => blk3,
  })

blk1:
Statements:
End:
  Match(match_enum(v0) {
  })

blk2:
Statements:
  (v3: core::never) <- struct_destructure(v2)
End:
  Goto(blk1, {v3 -> v0})

blk3:
Statements:
  (v5: core::panics::PanicResult::<((),)>) <- PanicResult::Err(v4)
End:
  Return(v5)

//! > after_optimize_remappings1
Parameters:
blk0 (root):
Statements:
  (v1: core::panics::PanicResult::<(core::never,)>) <- test::goo()
End:
  Match(match_enum(v1) {
    PanicResult::Ok(v2) => blk2,
    PanicResult::Err(v4) => blk3,
  })

blk1:
Statements:
End:
  Match(match_enum(v3) {
  })

blk2:
Statements:
  (v3: core::never) <- struct_destructure(v2)
End:
  Goto(blk1, {})

blk3:
Statements:
  (v5: core::panics::PanicResult::<((),)>) <- PanicResult::Err(v4)
End:
  Return(v5)

//! > after_reorder_statements1
Parameters:
blk0 (root):
Statements:
  (v1: core::panics::PanicResult::<(core::never,)>) <- test::goo()
End:
  Match(match_enum(v1) {
    PanicResult::Ok(v2) => blk2,
    PanicResult::Err(v4) => blk3,
  })

blk1:
Statements:
  (v3: core::never) <- struct_destructure(v2)
End:
  Match(match_enum(v3) {
  })

blk2:
Statements:
End:
  Goto(blk1, {})

blk3:
Statements:
  (v5: core::panics::PanicResult::<((),)>) <- PanicResult::Err(v4)
End:
  Return(v5)

//! > after_branch_inversion
Parameters:
blk0 (root):
Statements:
  (v1: core::panics::PanicResult::<(core::never,)>) <- test::goo()
End:
  Match(match_enum(v1) {
    PanicResult::Ok(v2) => blk2,
    PanicResult::Err(v4) => blk3,
  })

blk1:
Statements:
  (v3: core::never) <- struct_destructure(v2)
End:
  Match(match_enum(v3) {
  })

blk2:
Statements:
End:
  Goto(blk1, {})

blk3:
Statements:
  (v5: core::panics::PanicResult::<((),)>) <- PanicResult::Err(v4)
End:
  Return(v5)

//! > after_reorder_statements2
Parameters:
blk0 (root):
Statements:
  (v1: core::panics::PanicResult::<(core::never,)>) <- test::goo()
End:
  Match(match_enum(v1) {
    PanicResult::Ok(v2) => blk2,
    PanicResult::Err(v4) => blk3,
  })

blk1:
Statements:
  (v3: core::never) <- struct_destructure(v2)
End:
  Match(match_enum(v3) {
  })

blk2:
Statements:
End:
  Goto(blk1, {})

blk3:
Statements:
  (v5: core::panics::PanicResult::<((),)>) <- PanicResult::Err(v4)
End:
  Return(v5)

//! > const_folding
Parameters:
blk0 (root):
Statements:
  (v1: core::panics::PanicResult::<(core::never,)>) <- test::goo()
End:
  Match(match_enum(v1) {
    PanicResult::Ok(v2) => blk2,
    PanicResult::Err(v4) => blk3,
  })

blk1:
Statements:
  (v3: core::never) <- struct_destructure(v2)
End:
  Match(match_enum(v3) {
  })

blk2:
Statements:
End:
  Goto(blk1, {})

blk3:
Statements:
  (v5: core::panics::PanicResult::<((),)>) <- PanicResult::Err(v4)
End:
  Return(v5)

//! > after_optimize_matches
Parameters:
blk0 (root):
Statements:
  (v1: core::panics::PanicResult::<(core::never,)>) <- test::goo()
End:
  Match(match_enum(v1) {
    PanicResult::Ok(v2) => blk2,
    PanicResult::Err(v4) => blk3,
  })

blk1:
Statements:
  (v3: core::never) <- struct_destructure(v2)
End:
  Match(match_enum(v3) {
  })

blk2:
Statements:
End:
  Goto(blk1, {})

blk3:
Statements:
  (v5: core::panics::PanicResult::<((),)>) <- PanicResult::Err(v4)
End:
  Return(v5)

//! > after_lower_implicits
Parameters: v6: core::RangeCheck, v7: core::gas::GasBuiltin
blk0 (root):
Statements:
  (v8: core::RangeCheck, v9: core::gas::GasBuiltin, v1: core::panics::PanicResult::<(core::never,)>) <- test::goo(v6, v7)
End:
  Match(match_enum(v1) {
    PanicResult::Ok(v2) => blk2,
    PanicResult::Err(v4) => blk3,
  })

blk1:
Statements:
  (v3: core::never) <- struct_destructure(v2)
End:
  Match(match_enum(v3) {
  })

blk2:
Statements:
End:
  Goto(blk1, {v8 -> v10, v9 -> v11})

blk3:
Statements:
  (v5: core::panics::PanicResult::<((),)>) <- PanicResult::Err(v4)
End:
  Return(v8, v9, v5)

//! > after_optimize_remappings2
Parameters: v6: core::RangeCheck, v7: core::gas::GasBuiltin
blk0 (root):
Statements:
  (v8: core::RangeCheck, v9: core::gas::GasBuiltin, v1: core::panics::PanicResult::<(core::never,)>) <- test::goo(v6, v7)
End:
  Match(match_enum(v1) {
    PanicResult::Ok(v2) => blk2,
    PanicResult::Err(v4) => blk3,
  })

blk1:
Statements:
  (v3: core::never) <- struct_destructure(v2)
End:
  Match(match_enum(v3) {
  })

blk2:
Statements:
End:
  Goto(blk1, {})

blk3:
Statements:
  (v5: core::panics::PanicResult::<((),)>) <- PanicResult::Err(v4)
End:
  Return(v8, v9, v5)

//! > after_reorder_statements3
Parameters: v6: core::RangeCheck, v7: core::gas::GasBuiltin
blk0 (root):
Statements:
  (v8: core::RangeCheck, v9: core::gas::GasBuiltin, v1: core::panics::PanicResult::<(core::never,)>) <- test::goo(v6, v7)
End:
  Match(match_enum(v1) {
    PanicResult::Ok(v2) => blk2,
    PanicResult::Err(v4) => blk3,
  })

blk1:
Statements:
  (v3: core::never) <- struct_destructure(v2)
End:
  Match(match_enum(v3) {
  })

blk2:
Statements:
End:
  Goto(blk1, {})

blk3:
Statements:
  (v5: core::panics::PanicResult::<((),)>) <- PanicResult::Err(v4)
End:
  Return(v8, v9, v5)

//! > after_optimize_remappings3
Parameters: v6: core::RangeCheck, v7: core::gas::GasBuiltin
blk0 (root):
Statements:
  (v8: core::RangeCheck, v9: core::gas::GasBuiltin, v1: core::panics::PanicResult::<(core::never,)>) <- test::goo(v6, v7)
End:
  Match(match_enum(v1) {
    PanicResult::Ok(v2) => blk2,
    PanicResult::Err(v4) => blk3,
  })

blk1:
Statements:
  (v3: core::never) <- struct_destructure(v2)
End:
  Match(match_enum(v3) {
  })

blk2:
Statements:
End:
  Goto(blk1, {})

blk3:
Statements:
  (v5: core::panics::PanicResult::<((),)>) <- PanicResult::Err(v4)
End:
  Return(v8, v9, v5)

//! > after_reorganize_blocks (final)
Parameters: v6: core::RangeCheck, v7: core::gas::GasBuiltin
blk0 (root):
Statements:
  (v8: core::RangeCheck, v9: core::gas::GasBuiltin, v1: core::panics::PanicResult::<(core::never,)>) <- test::goo(v6, v7)
End:
  Match(match_enum(v1) {
    PanicResult::Ok(v2) => blk1,
    PanicResult::Err(v4) => blk2,
  })

blk1:
Statements:
  (v3: core::never) <- struct_destructure(v2)
End:
  Match(match_enum(v3) {
  })

blk2:
Statements:
  (v5: core::panics::PanicResult::<((),)>) <- PanicResult::Err(v4)
End:
  Return(v8, v9, v5)
