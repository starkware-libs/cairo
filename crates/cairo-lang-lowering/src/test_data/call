//! > Test function call.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(arr: @Array::<u256>, idx: usize) -> Option::<@u256> {
    array_get(arr, idx)
}

//! > function_name
foo

//! > module_code
fn bar(ref a: felt, b: bool) {
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_structured
blk0 (root):
Inputs: v0: core::RangeCheck, v1: @core::array::Array::<core::integer::u256>, v2: core::integer::u32
Initial refs: v0: core::RangeCheck
Statements:
  () <- match core::array::array_get::<core::integer::u256>(v0, v1, v2) {
    Option::Some => blk1,
    Option::None => blk2,
  }
    Ref changes: r0 <- v10
End:
  Fallthrough(3, {})

blk1:
Inputs: v3: core::RangeCheck, v4: @core::integer::u256
Initial refs: v3: core::RangeCheck
Statements:
  (v5: core::option::Option::<@core::integer::u256>) <- Option::Some(v4)
    Ref changes: r0 <- v3
End:
  Goto(3, {v3 -> v10, v5 -> v9})

blk2:
Inputs: v6: core::RangeCheck
Initial refs: v6: core::RangeCheck
Statements:
  (v7: ()) <- struct_construct()
    Ref changes: r0 <- v6
  (v8: core::option::Option::<@core::integer::u256>) <- Option::None(v7)
End:
  Goto(3, {v6 -> v10, v8 -> v9})

blk3:
Inputs:
Initial refs: v10: core::RangeCheck
Statements:
End:
  Return(v10, v9)

//! > lowering_flat
blk0 (root):
Inputs: v0: core::RangeCheck, v1: @core::array::Array::<core::integer::u256>, v2: core::integer::u32
Statements:
  () <- match core::array::array_get::<core::integer::u256>(v0, v1, v2) {
    Option::Some => blk1,
    Option::None => blk2,
  }
End:
  Fallthrough(blk3, {})

blk1:
Inputs: v3: core::RangeCheck, v4: @core::integer::u256
Statements:
  (v5: core::option::Option::<@core::integer::u256>) <- Option::Some(v4)
End:
  Goto(blk3, {v3 -> v10, v5 -> v9})

blk2:
Inputs: v6: core::RangeCheck
Statements:
  (v7: ()) <- struct_construct()
  (v8: core::option::Option::<@core::integer::u256>) <- Option::None(v7)
End:
  Goto(blk3, {v6 -> v10, v8 -> v9})

blk3:
Inputs:
Statements:
End:
  Return(v10, v9)

//! > ==========================================================================

//! > Test method call.

//! > test_runner_name
test_function_lowering

//! > function
fn foo() -> Option::<felt> {
  let x = Option::None(());
  x.is_some();
  x
}

//! > function_name
foo

//! > module_code
// TODO(spapini): Make this generic too.
impl OptionCopy of Copy::<Option::<felt>>;
trait OptionTrait<T>{
  fn is_some(self: Option::<T>) -> bool;
}
impl OptionTraitImpl<T> of OptionTrait::<T> {
  fn is_some(self: Option::<T>) -> bool {
      match self {
          Option::Some(_) => true,
          Option::None(_) => false,
      }
  }
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_structured
blk0 (root):
Inputs:
Initial refs:
Statements:
  (v0: ()) <- struct_construct()
  (v1: core::option::Option::<core::felt>) <- Option::None(v0)
  (v2: core::bool) <- test::OptionTraitImpl::<core::felt>::is_some(v1)
End:
  Return(v1)

//! > lowering_flat
blk0 (root):
Inputs:
Statements:
  (v0: ()) <- struct_construct()
  (v1: core::option::Option::<core::felt>) <- Option::None(v0)
  (v2: core::bool) <- test::OptionTraitImpl::<core::felt>::is_some(v1)
End:
  Return(v1)
