//! > Test empty function.

//! > test_runner_name
test_function_lowering

//! > function
fn foo() {
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters:
blk0 (root):
Statements:
  (v0: ()) <- struct_construct()
End:
  Return(v0)

//! > ==========================================================================

//! > Test unreachable code.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a: felt252) -> felt252 {
    return a + a * a;
    5;6;7
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Unreachable code
 --> lib.cairo:3:5
    5;6;7
    ^**^

//! > lowering_flat
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v3: core::felt252) <- core::felt252_mul(v0, v0)
  (v4: core::felt252) <- core::felt252_add(v0, v3)
End:
  Return(v4)

//! > ==========================================================================

//! > Test unreachable code by match.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a: never) -> felt252 {
    match a {};
    1+2
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::never
blk0 (root):
Statements:
End:
  Match(match_enum(v0) {
  })

//! > ==========================================================================

//! > Test single patterns.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a: felt252) -> felt252 {
    let (_, _b) = (1, a);
    5
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v2: core::felt252) <- 5u
End:
  Return(v2)

//! > ==========================================================================

//! > Test compound expressions.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a: felt252) -> felt252 {
  let x = {7;};
  {x;}
  let _y = if 1 == 1 { 6 } else { 7 };
  foo(3) + 5 * {3; a + 0}
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v35: core::RangeCheck, v36: core::gas::GasBuiltin, v0: core::felt252
blk0 (root):
Statements:
<<<<<<< HEAD
||||||| a1f2f2396
  (v27: core::gas::BuiltinCosts) <- core::gas::get_builtin_costs()
=======
  (v23: core::gas::BuiltinCosts) <- core::gas::get_builtin_costs()
>>>>>>> origin/main
End:
<<<<<<< HEAD
  Match(match core::gas::withdraw_gas(v35, v36) {
    Option::Some(v37, v38) => blk1,
    Option::None(v39, v40) => blk7,
||||||| a1f2f2396
  Match(match core::gas::withdraw_gas_all(v36, v37, v27) {
    Option::Some(v38, v39) => blk1,
    Option::None(v40, v41) => blk7,
=======
  Match(match core::gas::withdraw_gas_all(v36, v37, v23) {
    Option::Some(v38, v39) => blk1,
    Option::None(v40, v41) => blk7,
>>>>>>> origin/main
  })

blk1:
Statements:
  (v3: core::felt252) <- 1u
  (v4: core::felt252) <- 1u
  (v32: core::felt252) <- core::felt252_sub(v3, v4)
End:
  Match(match core::felt252_is_zero(v32) {
    IsZeroResult::Zero => blk2,
    IsZeroResult::NonZero(v7) => blk3,
  })

blk2:
Statements:
End:
  Goto(blk4, {})

blk3:
Statements:
End:
  Goto(blk4, {})

blk4:
Statements:
  (v10: core::felt252) <- 3u
<<<<<<< HEAD
  (v47: core::RangeCheck, v48: core::gas::GasBuiltin, v27: core::panics::PanicResult::<(core::felt252,)>) <- test::foo(v37, v38, v10)
||||||| a1f2f2396
  (v48: core::RangeCheck, v49: core::gas::GasBuiltin, v28: core::panics::PanicResult::<(core::felt252,)>) <- test::foo(v38, v39, v10)
=======
  (v48: core::RangeCheck, v49: core::gas::GasBuiltin, v24: core::panics::PanicResult::<(core::felt252,)>) <- test::foo(v38, v39, v10)
>>>>>>> origin/main
End:
<<<<<<< HEAD
  Match(match_enum(v27) {
    PanicResult::Ok(v28) => blk5,
    PanicResult::Err(v30) => blk6,
||||||| a1f2f2396
  Match(match_enum(v28) {
    PanicResult::Ok(v29) => blk5,
    PanicResult::Err(v31) => blk6,
=======
  Match(match_enum(v24) {
    PanicResult::Ok(v25) => blk5,
    PanicResult::Err(v27) => blk6,
>>>>>>> origin/main
  })

blk5:
Statements:
<<<<<<< HEAD
  (v29: core::felt252) <- struct_destructure(v28)
||||||| a1f2f2396
  (v30: core::felt252) <- struct_destructure(v29)
=======
  (v26: core::felt252) <- struct_destructure(v25)
>>>>>>> origin/main
  (v12: core::felt252) <- 5u
  (v14: core::felt252) <- 0u
<<<<<<< HEAD
  (v19: core::felt252) <- core::felt252_add(v0, v14)
  (v20: core::felt252) <- core::felt252_mul(v12, v19)
  (v21: core::felt252) <- core::felt252_add(v29, v20)
  (v31: (core::felt252,)) <- struct_construct(v21)
  (v32: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v31)
||||||| a1f2f2396
  (v19: core::felt252) <- core::felt252_add(v0, v14)
  (v20: core::felt252) <- core::felt252_mul(v12, v19)
  (v21: core::felt252) <- core::felt252_add(v30, v20)
  (v32: (core::felt252,)) <- struct_construct(v21)
  (v33: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v32)
=======
  (v33: core::felt252) <- core::felt252_add(v0, v14)
  (v34: core::felt252) <- core::felt252_mul(v12, v33)
  (v35: core::felt252) <- core::felt252_add(v26, v34)
  (v29: (core::felt252,)) <- struct_construct(v35)
  (v30: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v29)
>>>>>>> origin/main
End:
<<<<<<< HEAD
  Return(v47, v48, v32)
||||||| a1f2f2396
  Return(v48, v49, v33)
=======
  Return(v48, v49, v30)
>>>>>>> origin/main

blk6:
Statements:
<<<<<<< HEAD
  (v34: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v30)
||||||| a1f2f2396
  (v35: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v31)
=======
  (v31: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v27)
>>>>>>> origin/main
End:
<<<<<<< HEAD
  Return(v47, v48, v34)
||||||| a1f2f2396
  Return(v48, v49, v35)
=======
  Return(v48, v49, v31)
>>>>>>> origin/main

blk7:
Statements:
<<<<<<< HEAD
  (v22: core::array::Array::<core::felt252>) <- core::array::array_new::<core::felt252>()
  (v23: core::felt252) <- 375233589013918064796019u
  (v25: core::array::Array::<core::felt252>) <- core::array::array_append::<core::felt252>(v22, v23)
  (v24: core::panics::Panic) <- struct_construct()
  (v26: (core::panics::Panic, core::array::Array::<core::felt252>)) <- struct_construct(v24, v25)
  (v33: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v26)
||||||| a1f2f2396
  (v22: core::array::Array::<core::felt252>) <- core::array::array_new::<core::felt252>()
  (v23: core::felt252) <- 375233589013918064796019u
  (v25: core::array::Array::<core::felt252>) <- core::array::array_append::<core::felt252>(v22, v23)
  (v24: core::panics::Panic) <- struct_construct()
  (v26: (core::panics::Panic, core::array::Array::<core::felt252>)) <- struct_construct(v24, v25)
  (v34: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v26)
=======
  (v18: core::array::Array::<core::felt252>) <- core::array::array_new::<core::felt252>()
  (v19: core::felt252) <- 375233589013918064796019u
  (v21: core::array::Array::<core::felt252>) <- core::array::array_append::<core::felt252>(v18, v19)
  (v20: core::panics::Panic) <- struct_construct()
  (v22: (core::panics::Panic, core::array::Array::<core::felt252>)) <- struct_construct(v20, v21)
  (v28: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v22)
>>>>>>> origin/main
End:
<<<<<<< HEAD
  Return(v39, v40, v33)
||||||| a1f2f2396
  Return(v40, v41, v34)
=======
  Return(v40, v41, v28)
>>>>>>> origin/main

//! > ==========================================================================

//! > Test match enum.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(x: MyEnum) -> felt252 {
  match x {
    MyEnum::A(_inner) => {return 5;},
    MyEnum::B(inner) => {inner},
    MyEnum::C(inner) => {
      // A workaround to drop inner.
      let (_a, _b) = inner.unbox();
      7
    }
  }
}

//! > function_name
foo

//! > module_code
enum MyEnum {
  A: (),
  B: felt252,
  C: Box::<((), felt252)>,
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: test::MyEnum
blk0 (root):
Statements:
End:
  Match(match_enum(v0) {
    MyEnum::A(v1) => blk1,
    MyEnum::B(v2) => blk2,
    MyEnum::C(v3) => blk3,
  })

blk1:
Statements:
  (v4: core::felt252) <- 5u
End:
  Return(v4)

blk2:
Statements:
End:
  Return(v2)

blk3:
Statements:
  (v10: ((), core::felt252)) <- core::box::unbox::<((), core::felt252)>(v3)
  (v8: core::felt252) <- 7u
End:
  Return(v8)

//! > ==========================================================================

//! > Test literal generic argument.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a : Array::<felt252, 5>) -> felt252 {
  felt252_const::<17>()
}

//! > function_name
foo

//! > module_code
type Array<T,const N: usize> = (T,felt252);

//! > semantic_diagnostics
error: Const generic args are not allowed in this context.
 --> lib.cairo:1:14
type Array<T,const N: usize> = (T,felt252);
             ^************^

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: (core::felt252, core::felt252)
blk0 (root):
Statements:
  (v1: core::felt252) <- core::felt252_const::<LiteralLongId { value: 17 }>()
End:
  Return(v1)

//! > ==========================================================================

//! > Test passing same argument as two ref params.

//! > Comments
TODO(spapini): Make this a semantic diagnostic.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(mut a : felt252) -> felt252 {
  bar(ref a, ref a)
}

//! > function_name
foo

//! > module_code
#[inline(never)]
fn bar(ref a: felt252, ref b: felt252) -> felt252  {
  a = 0;
  b = 1;
  a + b
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v2: core::felt252, v3: core::felt252, v1: core::felt252) <- test::bar(v0, v0)
End:
  Return(v1)

//! > ==========================================================================

//! > Test concretization with bad types.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(mut data: Span::<felt252>) -> u128 {
   serde::Serde::<u128>::deserialize(ref data)
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics
error: Unexpected return type. Expected: "core::integer::u128", found: "core::option::Option::<core::integer::u128>".
 --> lib.cairo:1:43
fn foo(mut data: Span::<felt252>) -> u128 {
                                          ^

//! > lowering_diagnostics

//! > lowering_flat
