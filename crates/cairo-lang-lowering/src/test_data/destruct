//! > Test boolean if.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(flag: bool) -> Option<A>{
    let a = A{};
    if flag {
        Option::Some(a)
    } else {
        Option::None
    }
}

//! > function_name
foo

//! > module_code
use integer::u128_overflowing_add;
struct A {}
impl ADestruct of Destruct::<A> {
  fn destruct(self: A) nopanic {
    // Use RangeCheck, a previously unused implicit.
    match u128_overflowing_add(1_u128, 2_u128) {
      Result::Ok(v) => v,
      Result::Err(v) => v,
    };
  }
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v10: core::RangeCheck, v0: core::bool
blk0 (root):
Statements:
  (v1: test::A) <- struct_construct()
End:
  Match(match_enum(v0) {
    bool::False(v4) => blk1,
    bool::True(v2) => blk2,
  })

blk1:
Statements:
  (v11: core::RangeCheck, v9: ()) <- test::ADestruct::destruct(v10, v1)
  (v5: ()) <- struct_construct()
  (v6: core::option::Option::<test::A>) <- Option::None(v5)
End:
  Return(v11, v6)

blk2:
Statements:
  (v3: core::option::Option::<test::A>) <- Option::Some(v1)
End:
  Return(v10, v3)

//! > ==========================================================================

//! > Test dict destruct through panic.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(d: Felt252Dict<felt252>){
  get_total_signed_weight(d);
}

//! > function_name
foo

//! > module_code
fn get_total_signed_weight(used_keys: Felt252Dict<felt252>) -> u128 { 1_u128 }

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v6: core::RangeCheck, v7: core::SegmentArena, v8: core::gas::GasBuiltin, v0: core::dict::Felt252Dict::<core::felt252>
blk0 (root):
Statements:
  (v9: core::RangeCheck, v10: core::SegmentArena, v11: core::gas::GasBuiltin, v5: ()) <- core::dict::Felt252DictDestruct::<core::felt252, core::felt252Drop, core::Felt252Felt252DictValue>::destruct(v6, v7, v8, v0)
  (v2: ()) <- struct_construct()
End:
  Return(v9, v10, v11, v2)

//! > ==========================================================================

//! > Test panic destruct.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a: A, b: B){
  may_panic();
  may_panic();
  panic_with_felt252('123');
}

//! > function_name
foo

//! > module_code
fn may_panic() {
  panic_with_felt252('123');
}

struct A {}
impl APanicDestruct of PanicDestruct<A> {
  fn panic_destruct(self: A, ref panic: Panic) nopanic {
    let A {} = self;
  }
}

struct B {}
impl BPanicDestruct of PanicDestruct<B> {
  fn panic_destruct(self: B, ref panic: Panic) nopanic {
    let B {} = self;
  }
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: test::A, v1: test::B
blk0 (root):
Statements:
  (v14: core::panics::PanicResult::<((),)>) <- test::may_panic()
End:
  Match(match_enum(v14) {
    PanicResult::Ok(v15) => blk1,
    PanicResult::Err(v35) => blk4,
  })

blk1:
Statements:
  (v19: core::panics::PanicResult::<((),)>) <- test::may_panic()
End:
  Match(match_enum(v19) {
    PanicResult::Ok(v20) => blk2,
    PanicResult::Err(v43) => blk3,
  })

blk2:
Statements:
  (v11: core::array::Array::<core::felt252>) <- core::array::array_new::<core::felt252>()
  (v4: core::felt252) <- 3224115u
  (v12: core::array::Array::<core::felt252>) <- core::array::array_append::<core::felt252>(v11, v4)
  (v25: core::panics::Panic) <- struct_construct()
  (v27: core::panics::Panic, v26: ()) <- test::APanicDestruct::panic_destruct(v25, v0)
  (v9: core::panics::Panic, v28: ()) <- test::BPanicDestruct::panic_destruct(v27, v1)
  (v10: (core::panics::Panic, core::array::Array::<core::felt252>)) <- struct_construct(v9, v12)
  (v18: core::panics::PanicResult::<((),)>) <- PanicResult::Err(v10)
End:
  Return(v18)

blk3:
Statements:
  (v38: core::panics::Panic, v45: core::array::Array::<core::felt252>) <- struct_destructure(v43)
  (v40: core::panics::Panic, v39: ()) <- test::APanicDestruct::panic_destruct(v38, v0)
  (v44: core::panics::Panic, v41: ()) <- test::BPanicDestruct::panic_destruct(v40, v1)
  (v22: (core::panics::Panic, core::array::Array::<core::felt252>)) <- struct_construct(v44, v45)
  (v24: core::panics::PanicResult::<((),)>) <- PanicResult::Err(v22)
End:
  Return(v24)

blk4:
Statements:
  (v30: core::panics::Panic, v37: core::array::Array::<core::felt252>) <- struct_destructure(v35)
  (v32: core::panics::Panic, v31: ()) <- test::APanicDestruct::panic_destruct(v30, v0)
  (v36: core::panics::Panic, v33: ()) <- test::BPanicDestruct::panic_destruct(v32, v1)
  (v17: (core::panics::Panic, core::array::Array::<core::felt252>)) <- struct_construct(v36, v37)
  (v23: core::panics::PanicResult::<((),)>) <- PanicResult::Err(v17)
End:
  Return(v23)

//! > ==========================================================================

//! > Test panic destruct with merge.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a: bool, d: A) -> A {
  if a { 
    may_panic();
  } else {
  }
  return d;
}

//! > function_name
foo

//! > module_code
fn may_panic() {
  panic_with_felt252('123');
}

struct A {}
impl APanicDestruct of PanicDestruct<A> {
  fn panic_destruct(self: A, ref panic: Panic) nopanic {
    let A {} = self;
  }
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::bool, v1: test::A
blk0 (root):
Statements:
End:
  Match(match_enum(v0) {
    bool::False(v4) => blk1,
    bool::True(v2) => blk2,
  })

blk1:
Statements:
End:
  Goto(blk4, {})

blk2:
Statements:
  (v5: core::panics::PanicResult::<((),)>) <- test::may_panic()
End:
  Match(match_enum(v5) {
    PanicResult::Ok(v6) => blk3,
    PanicResult::Err(v15) => blk5,
  })

blk3:
Statements:
End:
  Goto(blk4, {})

blk4:
Statements:
  (v9: (test::A,)) <- struct_construct(v1)
  (v10: core::panics::PanicResult::<(test::A,)>) <- PanicResult::Ok(v9)
End:
  Return(v10)

blk5:
Statements:
  (v12: core::panics::Panic, v17: core::array::Array::<core::felt252>) <- struct_destructure(v15)
  (v16: core::panics::Panic, v13: ()) <- test::APanicDestruct::panic_destruct(v12, v1)
  (v8: (core::panics::Panic, core::array::Array::<core::felt252>)) <- struct_construct(v16, v17)
  (v11: core::panics::PanicResult::<(test::A,)>) <- PanicResult::Err(v8)
End:
  Return(v11)

//! > ==========================================================================

//! > Test custom unit destruct (Currently broken).

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a: Option<()>) {
  bar::<(), MyDestruct>(a.expect('Should be Some.'))
}

//! > function_name
foo

//! > module_code
#[inline]
fn bar<T, +Destruct<T>>(a: T) {
}

pub impl MyDestruct of Destruct<()> {
    #[inline(always)]
    fn destruct(self: ()) nopanic {
        my_fn()
    }
}

extern fn my_fn() nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::option::Option::<()>
blk0 (root):
Statements:
End:
  Match(match_enum(v0) {
    Option::Some(v4) => blk1,
    Option::None(v5) => blk2,
  })

blk1:
Statements:
  (v8: ()) <- struct_construct()
  (v17: ((),)) <- struct_construct(v8)
  (v18: core::panics::PanicResult::<((),)>) <- PanicResult::Ok(v17)
End:
  Return(v18)

blk2:
Statements:
  (v14: core::array::Array::<core::felt252>) <- core::array::array_new::<core::felt252>()
  (v1: core::felt252) <- 433078840523992521883553638820701486u
  (v15: core::array::Array::<core::felt252>) <- core::array::array_append::<core::felt252>(v14, v1)
  (v12: core::panics::Panic) <- struct_construct()
  (v13: (core::panics::Panic, core::array::Array::<core::felt252>)) <- struct_construct(v12, v15)
  (v19: core::panics::PanicResult::<((),)>) <- PanicResult::Err(v13)
End:
  Return(v19)
