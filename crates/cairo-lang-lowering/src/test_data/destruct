//! > Test boolean if.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(flag: bool) -> Option<A>{
    let a = A{};
    if flag {
        Option::Some(a)
    } else {
        Option::None
    }
}

//! > function_name
foo

//! > module_code
use integer::u128_overflowing_add;
struct A {}
impl ADestruct of Destruct::<A> {
  fn destruct(self: A) nopanic {
    // Use RangeCheck, a previously unused implicit.
    match u128_overflowing_add(1_u128, 2_u128) {
      Result::Ok(v) => v,
      Result::Err(v) => v,
    };
  }
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v8: core::RangeCheck, v0: core::bool
blk0 (root):
Statements:
  (v1: test::A) <- struct_construct()
End:
  Match(match_enum(v0) {
    bool::False(v4) => blk1,
    bool::True(v2) => blk2,
  })

blk1:
Statements:
  (v9: core::RangeCheck) <- test::ADestruct::destruct(v8, v1)
  (v5: ()) <- struct_construct()
  (v6: core::option::Option::<test::A>) <- Option::None(v5)
End:
  Return(v9, v6)

blk2:
Statements:
  (v3: core::option::Option::<test::A>) <- Option::Some(v1)
End:
  Return(v8, v3)

//! > ==========================================================================

//! > Test dict destruct through panic.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(d: Felt252Dict<felt252>){
  get_total_signed_weight(d);
}

//! > function_name
foo

//! > module_code
fn get_total_signed_weight(used_keys: Felt252Dict<felt252>) -> u128 { 1_u128 }

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v4: core::RangeCheck, v5: core::SegmentArena, v6: core::gas::GasBuiltin, v0: core::dict::Felt252Dict::<core::felt252>
blk0 (root):
Statements:
  (v7: core::RangeCheck, v8: core::SegmentArena, v9: core::gas::GasBuiltin) <- core::dict::Felt252DictDestruct::<core::felt252, core::felt252Drop, core::Felt252Felt252DictValue>::destruct(v4, v5, v6, v0)
End:
  Return(v7, v8, v9)

//! > ==========================================================================

//! > Test panic destruct.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(d: A){
  may_panic();
  may_panic();
  panic_with_felt252('123');
}

//! > function_name
foo

//! > module_code
fn may_panic() {
  panic_with_felt252('123');
}

struct A {}
impl APanicDestruct of PanicDestruct<A> {
  fn panic_destruct(self: A, ref panic: Panic) nopanic {
    let A {} = self;
  }
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: test::A
blk0 (root):
Statements:
  (v12: core::panics::PanicResult::<()>) <- test::may_panic()
End:
  Match(match_enum(v12) {
    PanicResult::Ok(v13) => blk1,
    PanicResult::Err(v14) => blk4,
  })

blk1:
Statements:
  (v16: core::panics::PanicResult::<()>) <- test::may_panic()
End:
  Match(match_enum(v16) {
    PanicResult::Ok(v17) => blk2,
    PanicResult::Err(v18) => blk3,
  })

blk2:
Statements:
  (v9: core::array::Array::<core::felt252>) <- core::array::array_new::<core::felt252>()
  (v3: core::felt252) <- 3224115u
  (v10: core::array::Array::<core::felt252>) <- core::array::array_append::<core::felt252>(v9, v3)
  (v7: core::panics::Panic) <- struct_construct()
  (v7: core::panics::Panic) <- test::APanicDestruct::panic_destruct(v7, v0)
  (v8: (core::panics::Panic, core::array::Array::<core::felt252>)) <- struct_construct(v7, v10)
  (v15: core::panics::PanicResult::<()>) <- PanicResult::Err(v8)
End:
  Return(v15)

blk3:
Statements:
  (v21: core::panics::Panic, v22: core::array::Array::<core::felt252>) <- struct_destructure(v18)
  (v21: core::panics::Panic, v23: ()) <- test::APanicDestruct::panic_destruct(v21, v0)
  (v18: (core::panics::Panic, core::array::Array::<core::felt252>)) <- struct_construct(v21, v22)
  (v20: core::panics::PanicResult::<()>) <- PanicResult::Err(v18)
End:
  Return(v20)

blk4:
Statements:
  (v24: core::panics::Panic, v25: core::array::Array::<core::felt252>) <- struct_destructure(v14)
  (v24: core::panics::Panic, v26: ()) <- test::APanicDestruct::panic_destruct(v24, v0)
  (v14: (core::panics::Panic, core::array::Array::<core::felt252>)) <- struct_construct(v24, v25)
  (v19: core::panics::PanicResult::<()>) <- PanicResult::Err(v14)
End:
  Return(v19)
