//! > match multi numbers.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a: felt252) -> felt252 {
  let b=match a {
    5=> {550},
    6 => {70},
    _=>{90}
  };
  return b;
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Unsupported match arm - numbers must be sequential starting from 0.
 --> lib.cairo:3:5
    5=> {550},
    ^

//! > lowering_flat
Parameters: v0: core::felt252

//! > ==========================================================================

//! > match felt.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a: felt252) -> felt252 {
  match a {
    0 =>1,
    1 =>2,
    2 =>3,
    _ =>4,
  }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::felt252
blk0 (root):
Statements:
End:
  Match(match core::felt252_is_zero(v0) {
    IsZeroResult::Zero => blk1,
    IsZeroResult::NonZero(v1) => blk2,
  })

blk1:
Statements:
  (v2: core::felt252) <- 1u
End:
  Goto(blk9, {v2 -> v14})

blk2:
Statements:
  (v3: core::felt252) <- 1u
  (v15: core::felt252) <- core::felt252_sub(v3, v0)
End:
  Match(match core::felt252_is_zero(v15) {
    IsZeroResult::Zero => blk3,
    IsZeroResult::NonZero(v5) => blk4,
  })

blk3:
Statements:
  (v6: core::felt252) <- 2u
End:
  Goto(blk8, {v6 -> v13})

blk4:
Statements:
  (v7: core::felt252) <- 2u
  (v16: core::felt252) <- core::felt252_sub(v7, v0)
End:
  Match(match core::felt252_is_zero(v16) {
    IsZeroResult::Zero => blk5,
    IsZeroResult::NonZero(v9) => blk6,
  })

blk5:
Statements:
  (v10: core::felt252) <- 3u
End:
  Goto(blk7, {v10 -> v12})

blk6:
Statements:
  (v11: core::felt252) <- 4u
End:
  Goto(blk7, {v11 -> v12})

blk7:
Statements:
End:
  Goto(blk8, {v12 -> v13})

blk8:
Statements:
End:
  Goto(blk9, {v13 -> v14})

blk9:
Statements:
End:
  Return(v14)

//! > ==========================================================================

//! > Test match 0.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a: felt252) -> felt252 {
    let x = 7;
    match x {
        0 => a + 1,
        _ => x,
    }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- 7u
End:
  Match(match core::felt252_is_zero(v1) {
    IsZeroResult::Zero => blk1,
    IsZeroResult::NonZero(v2) => blk2,
  })

blk1:
Statements:
  (v3: core::felt252) <- 1u
  (v6: core::felt252) <- core::felt252_add(v0, v3)
End:
  Goto(blk3, {v6 -> v5})

blk2:
Statements:
End:
  Goto(blk3, {v1 -> v5})

blk3:
Statements:
End:
  Return(v5)

//! > ==========================================================================

//! > Test array at.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a: @Array::<felt252>) -> Option<Box<@felt252>> {
  core::array::array_get(a, 0_u32)
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v7: core::RangeCheck, v0: @core::array::Array::<core::felt252>
blk0 (root):
Statements:
  (v1: core::integer::u32) <- 0u
End:
  Match(match core::array::array_get::<core::felt252>(v7, v0, v1) {
    Option::Some(v8, v2) => blk1,
    Option::None(v9) => blk2,
  })

blk1:
Statements:
  (v3: core::option::Option::<core::box::Box::<@core::felt252>>) <- Option::Some(v2)
End:
  Goto(blk3, {v8 -> v10, v3 -> v6})

blk2:
Statements:
  (v4: ()) <- struct_construct()
  (v5: core::option::Option::<core::box::Box::<@core::felt252>>) <- Option::None(v4)
End:
  Goto(blk3, {v9 -> v10, v5 -> v6})

blk3:
Statements:
End:
  Return(v10, v6)

//! > ==========================================================================

//! > Test match zero with non-zero value.

//! > test_runner_name
test_function_lowering

//! > function
fn foo() -> felt252 {
  let x = 7;
  match x {
      12 => x,
      _ => 7,
  }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Unsupported match arm - numbers must be sequential starting from 0.
 --> lib.cairo:4:7
      12 => x,
      ^^

//! > lowering_flat
Parameters:

//! > ==========================================================================

//! > Test unsupported match zero.

//! > test_runner_name
test_function_lowering

//! > function
fn foo() -> felt252 {
  let x = 7;
  match x {
      0 => x,
      1 => 7,
  }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Match is non exhaustive - match over a numerical value must have a wildcard card pattern (`_`).
 --> lib.cairo:5:7
      1 => 7,
      ^

//! > lowering_flat
Parameters:

//! > ==========================================================================

//! > Test unsupported match non felt252 value.

//! > test_runner_name
test_function_lowering

//! > function
fn foo() {
  match 5_u32 {
      0 => 7,
      _ => 8,
  };
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Unsupported matched value. Currently, only matches on enums and felt252s are supported.
 --> lib.cairo:2:9
  match 5_u32 {
        ^***^

//! > lowering_flat
Parameters:

//! > ==========================================================================

//! > Test empty enum match.

//! > test_runner_name
test_function_lowering

//! > function
fn foo() {
  match Option::Some(5) {};
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Missing match arm: `Some` not covered.
 --> lib.cairo:2:3
  match Option::Some(5) {};
  ^**********************^

error: Missing match arm: `None` not covered.
 --> lib.cairo:2:3
  match Option::Some(5) {};
  ^**********************^

//! > lowering_flat
Parameters:

//! > ==========================================================================

//! > Test empty enum match on empty enum.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(e: EmptyEnum) {
  match e {};
}

//! > function_name
foo

//! > module_code
enum EmptyEnum {}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: test::EmptyEnum
blk0 (root):
Statements:
End:
  Match(match_enum(v0) {
  })

//! > ==========================================================================

//! > Test empty extern match.

//! > test_runner_name
test_function_lowering

//! > function
fn foo() {
  match felt252_is_zero(5) {};
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Missing match arm: `Zero` not covered.
 --> lib.cairo:2:9
  match felt252_is_zero(5) {};
        ^****************^

//! > lowering_flat
Parameters:

//! > ==========================================================================

//! > Test otherwise extern match arm.

//! > test_runner_name
test_function_lowering

//! > function
fn foo() {
  match get_a() {
    A::One(_) => {},
    _ => {},
  };
}

//! > function_name
foo

//! > module_code
enum A {
  One: (),
  Two: (),
  Three: (),
}

extern fn get_a() -> A nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters:
blk0 (root):
Statements:
End:
  Match(match test::get_a() {
    A::One => blk1,
    A::Two => blk2,
    A::Three => blk3,
  })

blk1:
Statements:
End:
  Goto(blk4, {})

blk2:
Statements:
End:
  Goto(blk4, {})

blk3:
Statements:
End:
  Goto(blk4, {})

blk4:
Statements:
  (v0: ()) <- struct_construct()
End:
  Return(v0)

//! > ==========================================================================

//! > Test otherwise match arm.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a: A) -> felt252 {
  match a {
    A::Two(_) => 2,
    A::One(_) => 1,
    _ => 3,
    A::Two(_) => 4,
    A::Three(_) => 5,
  }
}

//! > function_name
foo

//! > module_code
enum A {
  One: (),
  Two: (),
  Three: (),
  Four: (),
}

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Unreachable pattern arm.
 --> lib.cairo:12:5
    A::Two(_) => 4,
    ^*******^

error: Unreachable pattern arm.
 --> lib.cairo:13:5
    A::Three(_) => 5,
    ^*********^

//! > lowering_flat
Parameters: v0: test::A
blk0 (root):
Statements:
End:
  Match(match_enum(v0) {
    A::One(v1) => blk1,
    A::Two(v3) => blk2,
    A::Three(v5) => blk3,
    A::Four(v7) => blk4,
  })

blk1:
Statements:
  (v2: core::felt252) <- 1u
End:
  Goto(blk5, {v2 -> v9})

blk2:
Statements:
  (v4: core::felt252) <- 2u
End:
  Goto(blk5, {v4 -> v9})

blk3:
Statements:
  (v6: core::felt252) <- 3u
End:
  Goto(blk5, {v6 -> v9})

blk4:
Statements:
  (v8: core::felt252) <- 3u
End:
  Goto(blk5, {v8 -> v9})

blk5:
Statements:
End:
  Return(v9)

//! > ==========================================================================

//! > Test out of order extern match arm.

//! > test_runner_name
test_function_lowering

//! > function
fn foo() -> felt252 {
  match get_a() {
      A::Two(_) => { 2 },
      A::One(_) => { 1 },
  }
}

//! > function_name
foo

//! > module_code
enum A {
  One: (),
  Two: (),
}

extern fn get_a() -> A nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters:
blk0 (root):
Statements:
End:
  Match(match test::get_a() {
    A::One => blk1,
    A::Two => blk2,
  })

blk1:
Statements:
  (v0: core::felt252) <- 1u
End:
  Goto(blk3, {v0 -> v2})

blk2:
Statements:
  (v1: core::felt252) <- 2u
End:
  Goto(blk3, {v1 -> v2})

blk3:
Statements:
End:
  Return(v2)

//! > ==========================================================================

//! > Test out of order match arm.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a: A) -> felt252 {
  match a {
      A::Two(_) => { 2 },
      A::One(_) => { 1 },
  }
}

//! > function_name
foo

//! > module_code
enum A {
  One: (),
  Two: (),
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: test::A
blk0 (root):
Statements:
End:
  Match(match_enum(v0) {
    A::One(v1) => blk1,
    A::Two(v3) => blk2,
  })

blk1:
Statements:
  (v2: core::felt252) <- 1u
End:
  Goto(blk3, {v2 -> v5})

blk2:
Statements:
  (v4: core::felt252) <- 2u
End:
  Goto(blk3, {v4 -> v5})

blk3:
Statements:
End:
  Return(v5)

//! > ==========================================================================

//! > Match on tuples.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a: (felt252, felt252)) -> felt252 {
    match a {
        (0, 1) => 0,
        _ => 1,
    }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Unsupported matched value. Currently, match on tuples only supports enums.
 --> lib.cairo:2:11
    match a {
          ^

//! > lowering_flat
Parameters: v0: (core::felt252, core::felt252)

//! > ==========================================================================

//! > Match with complex patterns.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a: Option<Option<felt252>>) -> felt252 {
    match a {
        Option::Some(Option::Some(x)) => x,
        Option::None(_) => 1,
        
    }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Inner patterns are not in this context.
 --> lib.cairo:3:22
        Option::Some(Option::Some(x)) => x,
                     ^*************^

//! > lowering_flat
Parameters: v0: core::option::Option::<core::option::Option::<core::felt252>>

//! > ==========================================================================

//! > Test missing arms.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a: A) -> felt252 {
  match a {
    A::Two(_) => 2,
    A::One(_) => 1,
  }
}

//! > function_name
foo

//! > module_code
enum A {
  One: (),
  Two: (),
  Three: (),
  Four: (),
}

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Missing match arm: `Three` not covered.
 --> lib.cairo:8:3
  match a {
  ^*******^

error: Missing match arm: `Four` not covered.
 --> lib.cairo:8:3
  match a {
  ^*******^

//! > lowering_flat
Parameters: v0: test::A

//! > ==========================================================================

//! > Test match on bool literals.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a: bool) -> felt252 {
  match a {
    true => 2,
    false => 1,
  }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::bool
blk0 (root):
Statements:
End:
  Match(match_enum(v0) {
    bool::False(v1) => blk1,
    bool::True(v3) => blk2,
  })

blk1:
Statements:
  (v2: core::felt252) <- 1u
End:
  Goto(blk3, {v2 -> v5})

blk2:
Statements:
  (v4: core::felt252) <- 2u
End:
  Goto(blk3, {v4 -> v5})

blk3:
Statements:
End:
  Return(v5)

//! > ==========================================================================

//! > Test match on enum tuples.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a: A,b: A) -> felt252 {
  let x= (@a,b);
  let y = @x;
  match y {
    (A::Two((t,_)),A::One)=>**t+3,
    (A::Two,_) => 2,

    (A::One(_),A::One(_)) => 1,
    (_,A::Three(_)) => 3,
    (_,_)=>6,
  }
}

//! > function_name
foo

//! > module_code
#[derive(Copy, Drop)]
enum A {
  One: felt252,
  Two: (felt252,felt252),
  Three: (),
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: test::A, v1: test::A
blk0 (root):
Statements:
  (v2: test::A, v3: @test::A) <- snapshot(v0)
  (v4: (@test::A, test::A)) <- struct_construct(v3, v1)
  (v5: (@test::A, test::A), v6: @(@test::A, test::A)) <- snapshot(v4)
  (v7: @@test::A, v8: @test::A) <- struct_destructure(v6)
End:
  Match(match_enum(v7) {
    A::One(v9) => blk1,
    A::Two(v17) => blk6,
    A::Three(v30) => blk11,
  })

blk1:
Statements:
End:
  Match(match_enum(v8) {
    A::One(v10) => blk2,
    A::Two(v12) => blk3,
    A::Three(v14) => blk4,
  })

blk2:
Statements:
  (v11: core::felt252) <- 1u
End:
  Goto(blk5, {v11 -> v16})

blk3:
Statements:
  (v13: core::felt252) <- 6u
End:
  Goto(blk5, {v13 -> v16})

blk4:
Statements:
  (v15: core::felt252) <- 3u
End:
  Goto(blk5, {v15 -> v16})

blk5:
Statements:
End:
  Goto(blk16, {v16 -> v38})

blk6:
Statements:
End:
  Match(match_enum(v8) {
    A::One(v18) => blk7,
    A::Two(v25) => blk8,
    A::Three(v27) => blk9,
  })

blk7:
Statements:
  (v19: @@core::felt252, v20: @@core::felt252) <- struct_destructure(v17)
  (v21: @core::felt252) <- desnap(v19)
  (v22: core::felt252) <- desnap(v21)
  (v23: core::felt252) <- 3u
  (v39: core::felt252) <- core::felt252_add(v22, v23)
End:
  Goto(blk10, {v39 -> v29})

blk8:
Statements:
  (v26: core::felt252) <- 2u
End:
  Goto(blk10, {v26 -> v29})

blk9:
Statements:
  (v28: core::felt252) <- 2u
End:
  Goto(blk10, {v28 -> v29})

blk10:
Statements:
End:
  Goto(blk16, {v29 -> v38})

blk11:
Statements:
End:
  Match(match_enum(v8) {
    A::One(v31) => blk12,
    A::Two(v33) => blk13,
    A::Three(v35) => blk14,
  })

blk12:
Statements:
  (v32: core::felt252) <- 6u
End:
  Goto(blk15, {v32 -> v37})

blk13:
Statements:
  (v34: core::felt252) <- 6u
End:
  Goto(blk15, {v34 -> v37})

blk14:
Statements:
  (v36: core::felt252) <- 3u
End:
  Goto(blk15, {v36 -> v37})

blk15:
Statements:
End:
  Goto(blk16, {v37 -> v38})

blk16:
Statements:
End:
  Return(v38)

//! > ==========================================================================

//! > Test match on enum tuples missing arms.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a: A,b: A) -> felt252 {
  match (a,b) {
    (A::Two,A::One)=>5,
    (A::Two,_) => 2,

    (A::One(_),A::One(_)) => 1,
    (_,A::Three(_)) => 3,
    (_,A::Four) => 4,
  }
}

//! > function_name
foo

//! > module_code
#[derive(Copy, Drop)]
enum A {
  One: felt252,
  Two: (felt252,felt252),
  Three: (),
  Four: (),
}

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Missing match arm: `(One, Two)` not covered.
 --> lib.cairo:9:9
  match (a,b) {
        ^***^

error: Missing match arm: `(Three, One)` not covered.
 --> lib.cairo:9:9
  match (a,b) {
        ^***^

error: Missing match arm: `(Three, Two)` not covered.
 --> lib.cairo:9:9
  match (a,b) {
        ^***^

error: Missing match arm: `(Four, One)` not covered.
 --> lib.cairo:9:9
  match (a,b) {
        ^***^

error: Missing match arm: `(Four, Two)` not covered.
 --> lib.cairo:9:9
  match (a,b) {
        ^***^

//! > lowering_flat
Parameters: v0: test::A, v1: test::A

//! > ==========================================================================

//! > Test match on enum tuples with inner tuples.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a: A,b: A) -> felt252 {
  match (a,(a,b)) {
    (A::Two,(A::One,A::One))=>5,
    _=>4,
  }
}

//! > function_name
foo

//! > module_code
#[derive(Copy, Drop)]
enum A {
  One: felt252,
  Two: (felt252,felt252),
  Three: (),
  Four: (),
}

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Unsupported matched value. Currently, match on tuples only supports enums.
 --> lib.cairo:9:9
  match (a,(a,b)) {
        ^*******^

//! > lowering_flat
Parameters: v0: test::A, v1: test::A

//! > ==========================================================================

//! > Test match on enum tuples extern.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a: A) -> felt252 {
  match (a,get_bool()) {
    (A::Two,true)=>5,
    (A::Two,_) => 2,

    (A::One(_),false) => 1,
    (_,_)=>6,

  }
}

//! > function_name
foo

//! > module_code
enum A {
  One: felt252,
  Two: (felt252,felt252),
  Three: (),
  Four: (),
}
extern fn get_bool() -> bool nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: test::A
blk0 (root):
Statements:
End:
  Match(match test::get_bool() {
    bool::False => blk1,
    bool::True => blk2,
  })

blk1:
Statements:
  (v1: ()) <- struct_construct()
  (v2: core::bool) <- bool::False(v1)
End:
  Goto(blk3, {v2 -> v5})

blk2:
Statements:
  (v3: ()) <- struct_construct()
  (v4: core::bool) <- bool::True(v3)
End:
  Goto(blk3, {v4 -> v5})

blk3:
Statements:
End:
  Match(match_enum(v0) {
    A::One(v6) => blk4,
    A::Two(v12) => blk8,
    A::Three(v18) => blk12,
    A::Four(v24) => blk16,
  })

blk4:
Statements:
End:
  Match(match_enum(v5) {
    bool::False(v7) => blk5,
    bool::True(v9) => blk6,
  })

blk5:
Statements:
  (v8: core::felt252) <- 1u
End:
  Goto(blk7, {v8 -> v11})

blk6:
Statements:
  (v10: core::felt252) <- 6u
End:
  Goto(blk7, {v10 -> v11})

blk7:
Statements:
End:
  Goto(blk20, {v11 -> v30})

blk8:
Statements:
End:
  Match(match_enum(v5) {
    bool::False(v13) => blk9,
    bool::True(v15) => blk10,
  })

blk9:
Statements:
  (v14: core::felt252) <- 2u
End:
  Goto(blk11, {v14 -> v17})

blk10:
Statements:
  (v16: core::felt252) <- 5u
End:
  Goto(blk11, {v16 -> v17})

blk11:
Statements:
End:
  Goto(blk20, {v17 -> v30})

blk12:
Statements:
End:
  Match(match_enum(v5) {
    bool::False(v19) => blk13,
    bool::True(v21) => blk14,
  })

blk13:
Statements:
  (v20: core::felt252) <- 6u
End:
  Goto(blk15, {v20 -> v23})

blk14:
Statements:
  (v22: core::felt252) <- 6u
End:
  Goto(blk15, {v22 -> v23})

blk15:
Statements:
End:
  Goto(blk20, {v23 -> v30})

blk16:
Statements:
End:
  Match(match_enum(v5) {
    bool::False(v25) => blk17,
    bool::True(v27) => blk18,
  })

blk17:
Statements:
  (v26: core::felt252) <- 6u
End:
  Goto(blk19, {v26 -> v29})

blk18:
Statements:
  (v28: core::felt252) <- 6u
End:
  Goto(blk19, {v28 -> v29})

blk19:
Statements:
End:
  Goto(blk20, {v29 -> v30})

blk20:
Statements:
End:
  Return(v30)
