//! > Test simple inlining.

//! > test_runner_name
test_function_inlining

//! > function
fn foo(n: felt252) -> felt252 {
  -n
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > before
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- core::Felt252Neg::neg(v0)
End:
  Return(v1)

//! > after
Parameters: v0: core::felt252
blk0 (root):
Statements:
End:
  Goto(blk2, {})

blk1:
Statements:
End:
  Return(v1)

blk2:
Statements:
  (v2: core::felt252) <- -1u
End:
  Goto(blk4, {})

blk3:
Statements:
End:
  Goto(blk1, {v3 -> v1})

blk4:
Statements:
  (v4: core::felt252) <- core::felt252_mul(v0, v2)
End:
  Goto(blk3, {v4 -> v3})

//! > lowering_diagnostics

//! > ==========================================================================

//! > Test generic function inlining.

//! > test_runner_name
test_function_inlining

//! > function
fn foo(val: Option::<felt252>) -> felt252 {
  bar(val, 2)
}

//! > function_name
foo

//! > module_code
/// If `val` is `Option::Some(x)`, returns `x`. Otherwise, panics.
#[inline]
fn bar<T, impl TDrop: Drop::<T>>(val: Option::<T>, val2: T) -> T {
    match val {
        Option::Some(x) => x,
        Option::None => val2,
    }
}

//! > semantic_diagnostics

//! > before
Parameters: v0: core::option::Option::<core::felt252>
blk0 (root):
Statements:
  (v1: core::felt252) <- 2u
  (v2: core::felt252) <- test::bar::<core::felt252, core::felt252Drop>(v0, v1)
End:
  Return(v2)

//! > after
Parameters: v0: core::option::Option::<core::felt252>
blk0 (root):
Statements:
  (v1: core::felt252) <- 2u
End:
  Goto(blk2, {})

blk1:
Statements:
End:
  Return(v2)

blk2:
Statements:
End:
  Match(match_enum(v0) {
    Option::Some(v3) => blk3,
    Option::None(v4) => blk4,
  })

blk3:
Statements:
End:
  Goto(blk5, {v3 -> v5})

blk4:
Statements:
End:
  Goto(blk5, {v1 -> v5})

blk5:
Statements:
End:
  Goto(blk1, {v5 -> v2})

//! > lowering_diagnostics

//! > ==========================================================================

//! > Test inlining same arg twice.

//! > test_runner_name
test_function_inlining

//! > function
fn foo(n: felt252) -> felt252 {
  bar(n, n)
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn bar(a: felt252, b: felt252) -> felt252  {
  a + b
}

//! > semantic_diagnostics

//! > before
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- test::bar(v0, v0)
End:
  Return(v1)

//! > after
Parameters: v0: core::felt252
blk0 (root):
Statements:
End:
  Goto(blk2, {})

blk1:
Statements:
End:
  Return(v1)

blk2:
Statements:
End:
  Goto(blk4, {})

blk3:
Statements:
End:
  Goto(blk1, {v2 -> v1})

blk4:
Statements:
  (v3: core::felt252) <- core::felt252_add(v0, v0)
End:
  Goto(blk3, {v3 -> v2})

//! > lowering_diagnostics

//! > ==========================================================================

//! > Test inlining.

//! > test_runner_name
test_function_inlining

//! > function
fn foo(a: felt252, b: felt252) -> felt252 {
  bar(a + b, b)
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn bar(a: felt252, b: felt252) -> felt252 implicits()  {
  bar2(a, b) + bar2(b, a)
}

#[inline(always)]
fn bar2(a: felt252, b: felt252) -> felt252 implicits()  {
   a * b
}

//! > semantic_diagnostics

//! > before
Parameters: v0: core::felt252, v1: core::felt252
blk0 (root):
Statements:
  (v2: core::felt252) <- core::Felt252Add::add(v0, v1)
  (v3: core::felt252) <- test::bar(v2, v1)
End:
  Return(v3)

//! > after
Parameters: v0: core::felt252, v1: core::felt252
blk0 (root):
Statements:
End:
  Goto(blk2, {})

blk1:
Statements:
End:
  Goto(blk4, {})

blk2:
Statements:
  (v4: core::felt252) <- core::felt252_add(v0, v1)
End:
  Goto(blk1, {v4 -> v2})

blk3:
Statements:
End:
  Return(v3)

blk4:
Statements:
End:
  Goto(blk6, {})

blk5:
Statements:
End:
  Goto(blk8, {})

blk6:
Statements:
End:
  Goto(blk10, {})

blk7:
Statements:
End:
  Goto(blk12, {})

blk8:
Statements:
End:
  Goto(blk14, {})

blk9:
Statements:
End:
  Goto(blk5, {v8 -> v5})

blk10:
Statements:
  (v10: core::felt252) <- core::felt252_mul(v2, v1)
End:
  Goto(blk9, {v10 -> v8})

blk11:
Statements:
End:
  Goto(blk3, {v7 -> v3})

blk12:
Statements:
  (v11: core::felt252) <- core::felt252_add(v5, v6)
End:
  Goto(blk11, {v11 -> v7})

blk13:
Statements:
End:
  Goto(blk7, {v9 -> v6})

blk14:
Statements:
  (v12: core::felt252) <- core::felt252_mul(v1, v2)
End:
  Goto(blk13, {v12 -> v9})

//! > lowering_diagnostics

//! > ==========================================================================

//! > Test recursive inlining.

//! > test_runner_name
test_function_inlining

//! > function
fn foo(a: felt252) -> felt252 {
  first(a)
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn first(a: felt252) -> felt252 {
  second(a)
}

#[inline(always)]
fn second(a: felt252) -> felt252 {
  third(a)
}

#[inline(always)]
fn third(a: felt252) -> felt252 {
   a * a
}

//! > semantic_diagnostics

//! > before
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- test::first(v0)
End:
  Return(v1)

//! > after
Parameters: v0: core::felt252
blk0 (root):
Statements:
End:
  Goto(blk2, {})

blk1:
Statements:
End:
  Return(v1)

blk2:
Statements:
End:
  Goto(blk4, {})

blk3:
Statements:
End:
  Goto(blk1, {v2 -> v1})

blk4:
Statements:
End:
  Goto(blk6, {})

blk5:
Statements:
End:
  Goto(blk3, {v3 -> v2})

blk6:
Statements:
End:
  Goto(blk8, {})

blk7:
Statements:
End:
  Goto(blk5, {v4 -> v3})

blk8:
Statements:
  (v5: core::felt252) <- core::felt252_mul(v0, v0)
End:
  Goto(blk7, {v5 -> v4})

//! > lowering_diagnostics

//! > ==========================================================================

//! > Test impl inlining.

//! > test_runner_name
test_function_inlining

//! > function
fn foo() {
  let mut arr = array![];
  arr.append(5)
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > before
Parameters:
blk0 (root):
Statements:
  (v0: core::array::Array::<core::felt252>) <- core::array::ArrayImpl::<core::felt252>::new()
  (v1: core::felt252) <- 5u
  (v3: core::array::Array::<core::felt252>, v2: ()) <- core::array::ArrayImpl::<core::felt252>::append(v0, v1)
End:
  Return(v2)

//! > after
Parameters:
blk0 (root):
Statements:
End:
  Goto(blk2, {})

blk1:
Statements:
  (v1: core::felt252) <- 5u
End:
  Goto(blk4, {})

blk2:
Statements:
  (v4: core::array::Array::<core::felt252>) <- core::array::array_new::<core::felt252>()
End:
  Goto(blk1, {v4 -> v0})

blk3:
Statements:
End:
  Return(v2)

blk4:
Statements:
  (v5: core::array::Array::<core::felt252>) <- core::array::array_append::<core::felt252>(v0, v1)
  (v6: ()) <- struct_construct()
End:
  Goto(blk3, {v5 -> v3, v6 -> v2})

//! > lowering_diagnostics

//! > ==========================================================================

//! > Test inlining of a function with an early return.

//! > test_runner_name
test_function_inlining

//! > function
fn foo(a: felt252) -> felt252 {
  if a == 2 {
    bar(a)
  } else {
    a
  }
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn bar(a: felt252) -> felt252 {
  if a == 0 {
    return 1;
  }
  0
}

//! > before
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- 2u
  (v2: core::felt252) <- core::Felt252Sub::sub(v0, v1)
End:
  Match(match core::felt252_is_zero(v2) {
    IsZeroResult::Zero => blk1,
    IsZeroResult::NonZero(v4) => blk2,
  })

blk1:
Statements:
  (v3: core::felt252) <- test::bar(v0)
End:
  Goto(blk3, {v3 -> v5})

blk2:
Statements:
End:
  Goto(blk3, {v0 -> v5})

blk3:
Statements:
End:
  Return(v5)

//! > after
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- 2u
End:
  Goto(blk5, {})

blk1:
Statements:
End:
  Goto(blk7, {})

blk2:
Statements:
End:
  Goto(blk3, {v0 -> v5})

blk3:
Statements:
End:
  Return(v5)

blk4:
Statements:
End:
  Match(match core::felt252_is_zero(v2) {
    IsZeroResult::Zero => blk1,
    IsZeroResult::NonZero(v4) => blk2,
  })

blk5:
Statements:
  (v6: core::felt252) <- core::felt252_sub(v0, v1)
End:
  Goto(blk4, {v6 -> v2})

blk6:
Statements:
End:
  Goto(blk3, {v3 -> v5})

blk7:
Statements:
End:
  Match(match core::felt252_is_zero(v0) {
    IsZeroResult::Zero => blk8,
    IsZeroResult::NonZero(v7) => blk9,
  })

blk8:
Statements:
  (v8: core::felt252) <- 1u
End:
  Goto(blk6, {v8 -> v3})

blk9:
Statements:
End:
  Goto(blk10, {})

blk10:
Statements:
  (v9: core::felt252) <- 0u
End:
  Goto(blk6, {v9 -> v3})

//! > lowering_diagnostics

//! > semantic_diagnostics

//! > ==========================================================================

//! > Test inlining heuristic

//! > test_runner_name
test_function_inlining

//! > function
fn foo(a: felt252) -> felt252 {
  bar(a) + bar2(a)
}

//! > function_name
foo

//! > module_code
fn bar(a: felt252) -> felt252 {
  bar2(a)
}

fn bar2(a: felt252) -> felt252 {
  1
}

//! > before
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- test::bar(v0)
  (v2: core::felt252) <- test::bar2(v0)
  (v3: core::felt252) <- core::Felt252Add::add(v1, v2)
End:
  Return(v3)

//! > after
Parameters: v0: core::felt252
blk0 (root):
Statements:
End:
  Goto(blk2, {})

blk1:
Statements:
End:
  Goto(blk4, {})

blk2:
Statements:
End:
  Goto(blk6, {})

blk3:
Statements:
End:
  Goto(blk8, {})

blk4:
Statements:
  (v5: core::felt252) <- 1u
End:
  Goto(blk3, {v5 -> v2})

blk5:
Statements:
End:
  Goto(blk1, {v4 -> v1})

blk6:
Statements:
  (v6: core::felt252) <- 1u
End:
  Goto(blk5, {v6 -> v4})

blk7:
Statements:
End:
  Return(v3)

blk8:
Statements:
  (v7: core::felt252) <- core::felt252_add(v1, v2)
End:
  Goto(blk7, {v7 -> v3})

//! > lowering_diagnostics

//! > semantic_diagnostics

//! > ==========================================================================

//! > Test preventing inlining heuristic

//! > test_runner_name
test_function_inlining

//! > function
fn foo(a: felt252) -> felt252 {
  bar(a) + bar2(a)
}

//! > function_name
foo

//! > module_code
#[inline(never)]
fn bar(a: felt252) -> felt252 {
  bar2(a)
}

#[inline(never)]
fn bar2(a: felt252) -> felt252 {
  1
}

//! > before
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- test::bar(v0)
  (v2: core::felt252) <- test::bar2(v0)
  (v3: core::felt252) <- core::Felt252Add::add(v1, v2)
End:
  Return(v3)

//! > after
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- test::bar(v0)
  (v2: core::felt252) <- test::bar2(v0)
End:
  Goto(blk2, {})

blk1:
Statements:
End:
  Return(v3)

blk2:
Statements:
  (v4: core::felt252) <- core::felt252_add(v1, v2)
End:
  Goto(blk1, {v4 -> v3})

//! > lowering_diagnostics

//! > semantic_diagnostics

//! > ==========================================================================

//! > Test returning an input variable as is (not in the last block).

//! > test_runner_name
test_function_inlining

//! > function
fn foo() -> felt252 {
  bar(0)
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn bar(a: felt252) -> felt252 {
  if a == 0 {
    return a;
  }
  1
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > before
Parameters:
blk0 (root):
Statements:
  (v0: core::felt252) <- 0u
  (v1: core::felt252) <- test::bar(v0)
End:
  Return(v1)

//! > after
Parameters:
blk0 (root):
Statements:
  (v0: core::felt252) <- 0u
End:
  Goto(blk2, {})

blk1:
Statements:
End:
  Return(v1)

blk2:
Statements:
End:
  Match(match core::felt252_is_zero(v0) {
    IsZeroResult::Zero => blk3,
    IsZeroResult::NonZero(v2) => blk4,
  })

blk3:
Statements:
End:
  Goto(blk1, {v0 -> v1})

blk4:
Statements:
End:
  Goto(blk5, {})

blk5:
Statements:
  (v3: core::felt252) <- 1u
End:
  Goto(blk1, {v3 -> v1})

//! > ==========================================================================

//! > Test inlining of identity function.

//! > test_runner_name
test_function_inlining

//! > function
fn foo(n: felt252) -> felt252 {
  identity(n)
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn identity(n: felt252) -> felt252 {
  n
}

//! > semantic_diagnostics

//! > before
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- test::identity(v0)
End:
  Return(v1)

//! > after
Parameters: v0: core::felt252
blk0 (root):
Statements:
End:
  Goto(blk2, {})

blk1:
Statements:
End:
  Return(v1)

blk2:
Statements:
End:
  Goto(blk1, {v0 -> v1})

//! > lowering_diagnostics

//! > ==========================================================================

//! > Test match where is there is a return in one branch.

//! > Motivation:
// The goal of this test is to test the block renaming logic.
// A panicable function can have a block with a low `block_id` with a match_arm that goes
// to a higher 'block_id'.
// We want to test this outside of the outer scope as the last block is rebuild last.

//! > test_runner_name
test_function_inlining

//! > function
fn foo(a: u128, b: u128) -> u128 {
    bar1(a, b)
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn bar1(a: u128, b: u128) -> u128 {
   if a == 1_u128 {
      return bar2(b, a);
   }
   a
}

#[inline(always)]
fn bar2(a: u128, b: u128) -> u128 {
    a + b
}

//! > semantic_diagnostics

//! > before
Parameters: v0: core::integer::u128, v1: core::integer::u128
blk0 (root):
Statements:
  (v2: core::integer::u128) <- test::bar1(v0, v1)
End:
  Return(v2)

//! > after
Parameters: v0: core::integer::u128, v1: core::integer::u128
blk0 (root):
Statements:
End:
  Goto(blk2, {})

blk1:
Statements:
End:
  Return(v2)

blk2:
Statements:
  (v3: core::integer::u128, v4: @core::integer::u128) <- snapshot(v0)
  (v5: core::integer::u128) <- 1u
  (v6: core::integer::u128, v7: @core::integer::u128) <- snapshot(v5)
End:
  Goto(blk10, {})

blk3:
Statements:
End:
  Goto(blk15, {})

blk4:
Statements:
End:
  Goto(blk5, {})

blk5:
Statements:
  (v14: (core::integer::u128,)) <- struct_construct(v3)
  (v15: core::panics::PanicResult::<(core::integer::u128,)>) <- PanicResult::Ok(v14)
End:
  Goto(blk1, {v15 -> v2})

blk6:
Statements:
  (v17: (core::integer::u128,)) <- struct_construct(v16)
  (v18: core::panics::PanicResult::<(core::integer::u128,)>) <- PanicResult::Ok(v17)
End:
  Goto(blk1, {v18 -> v2})

blk7:
Statements:
  (v19: core::integer::u128) <- struct_destructure(v12)
End:
  Goto(blk6, {v19 -> v16})

blk8:
Statements:
  (v20: core::panics::PanicResult::<(core::integer::u128,)>) <- PanicResult::Err(v13)
End:
  Goto(blk1, {v20 -> v2})

blk9:
Statements:
End:
  Match(match_enum(v8) {
    bool::False(v9) => blk4,
    bool::True(v10) => blk3,
  })

blk10:
Statements:
  (v21: core::integer::u128) <- desnap(v4)
  (v22: core::integer::u128) <- desnap(v7)
End:
  Match(match core::integer::u128_eq(v21, v22) {
    bool::False => blk11,
    bool::True => blk12,
  })

blk11:
Statements:
  (v23: ()) <- struct_construct()
  (v24: core::bool) <- bool::False(v23)
End:
  Goto(blk13, {v24 -> v25})

blk12:
Statements:
  (v26: ()) <- struct_construct()
  (v27: core::bool) <- bool::True(v26)
End:
  Goto(blk13, {v27 -> v25})

blk13:
Statements:
End:
  Goto(blk9, {v25 -> v8})

blk14:
Statements:
End:
  Match(match_enum(v11) {
    PanicResult::Ok(v12) => blk7,
    PanicResult::Err(v13) => blk8,
  })

blk15:
Statements:
  (v28: core::panics::PanicResult::<(core::integer::u128,)>) <- core::integer::U128Add::add(v1, v3)
End:
  Match(match_enum(v28) {
    PanicResult::Ok(v29) => blk17,
    PanicResult::Err(v30) => blk18,
  })

blk16:
Statements:
  (v32: (core::integer::u128,)) <- struct_construct(v31)
  (v33: core::panics::PanicResult::<(core::integer::u128,)>) <- PanicResult::Ok(v32)
End:
  Goto(blk14, {v33 -> v11})

blk17:
Statements:
  (v34: core::integer::u128) <- struct_destructure(v29)
End:
  Goto(blk16, {v34 -> v31})

blk18:
Statements:
  (v35: core::panics::PanicResult::<(core::integer::u128,)>) <- PanicResult::Err(v30)
End:
  Goto(blk14, {v35 -> v11})

//! > lowering_diagnostics

//! > ==========================================================================

//! > Test inlining a function where the root block does not return.

//! > test_runner_name
test_function_inlining

//! > function_name
foo

//! > function
fn foo(n: felt252) -> felt252 {
  bar(n)
}

//! > module_code
#[inline(always)]
fn bar(n: felt252) -> felt252 {
  if n == 0 {
    return 1;
  } else {
    return 1;
  }
}

//! > semantic_diagnostics

//! > before
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- test::bar(v0)
End:
  Return(v1)

//! > after
Parameters: v0: core::felt252
blk0 (root):
Statements:
End:
  Goto(blk2, {})

blk1:
Statements:
End:
  Return(v1)

blk2:
Statements:
End:
  Match(match core::felt252_is_zero(v0) {
    IsZeroResult::Zero => blk3,
    IsZeroResult::NonZero(v2) => blk4,
  })

blk3:
Statements:
  (v3: core::felt252) <- 1u
End:
  Goto(blk1, {v3 -> v1})

blk4:
Statements:
  (v4: core::felt252) <- 1u
End:
  Goto(blk1, {v4 -> v1})

//! > lowering_diagnostics

//! > ==========================================================================

//! > test #[inline] with indirect self call.

//! > Motivation:
//! #[inline] functions should inline a function unless it is recursively called by itself, even
//! indirectly. In this case, the function bar should be inlined, but not the inner call to foo.

//! > test_runner_name
test_function_inlining

//! > function_name
foo

//! > function
#[inline]
fn foo(n: felt252) -> felt252 {
  bar(n)
}

//! > module_code
#[inline]
fn bar(n: felt252) -> felt252 {
  if n == 0 {
    foo(n-1)
  } else {
    return 1;
  }
}

//! > semantic_diagnostics

//! > before
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- test::bar(v0)
End:
  Return(v1)

//! > after
Parameters: v0: core::felt252
blk0 (root):
Statements:
End:
  Goto(blk2, {})

blk1:
Statements:
End:
  Return(v1)

blk2:
Statements:
End:
  Match(match core::felt252_is_zero(v0) {
    IsZeroResult::Zero => blk3,
    IsZeroResult::NonZero(v2) => blk4,
  })

blk3:
Statements:
  (v3: core::felt252) <- 1u
End:
  Goto(blk10, {})

blk4:
Statements:
  (v8: core::felt252) <- 1u
  (v9: (core::felt252,)) <- struct_construct(v8)
  (v10: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v9)
End:
  Goto(blk1, {v10 -> v1})

blk5:
Statements:
  (v12: (core::felt252,)) <- struct_construct(v11)
  (v13: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v12)
End:
  Goto(blk1, {v13 -> v1})

blk6:
Statements:
End:
  Goto(blk5, {v14 -> v11})

blk7:
Statements:
  (v15: core::felt252) <- struct_destructure(v6)
End:
  Goto(blk6, {v15 -> v14})

blk8:
Statements:
  (v16: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v7)
End:
  Goto(blk1, {v16 -> v1})

blk9:
Statements:
  (v5: core::panics::PanicResult::<(core::felt252,)>) <- test::foo(v4)
End:
  Match(match_enum(v5) {
    PanicResult::Ok(v6) => blk7,
    PanicResult::Err(v7) => blk8,
  })

blk10:
Statements:
  (v17: core::felt252) <- core::felt252_sub(v0, v3)
End:
  Goto(blk9, {v17 -> v4})

//! > lowering_diagnostics

//! > ==========================================================================

//! > test #[inline] with direct self call.

//! > test_runner_name
test_function_inlining

//! > function_name
foo

//! > function
#[inline]
fn foo(n: felt252) -> felt252 {
  foo(n)
}

//! > module_code

//! > semantic_diagnostics

//! > before
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- test::foo(v0)
End:
  Return(v1)

//! > after
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- test::foo(v0)
End:
  Return(v1)

//! > lowering_diagnostics

//! > ==========================================================================

//! > test #[inline] with direct self call in a called function.

//! > test_runner_name
test_function_inlining

//! > function_name
foo

//! > function
#[inline]
fn foo(n: felt252) -> felt252 {
  bar(n)
}

//! > module_code
#[inline]
fn bar(n: felt252) -> felt252 {
  if n == 0 {
    bar(n-1)
  } else {
    return 1;
  }
}

//! > semantic_diagnostics

//! > before
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- test::bar(v0)
End:
  Return(v1)

//! > after
Parameters: v0: core::felt252
blk0 (root):
Statements:
End:
  Goto(blk2, {})

blk1:
Statements:
End:
  Return(v1)

blk2:
Statements:
  (v2: core::gas::BuiltinCosts) <- core::gas::get_builtin_costs()
End:
  Match(match core::gas::withdraw_gas_all(v2) {
    Option::Some => blk6,
    Option::None => blk7,
  })

blk3:
Statements:
  (v3: core::felt252) <- 1u
End:
  Goto(blk12, {})

blk4:
Statements:
  (v8: core::felt252) <- 1u
  (v9: (core::felt252,)) <- struct_construct(v8)
  (v10: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v9)
End:
  Goto(blk1, {v10 -> v1})

blk5:
Statements:
  (v12: (core::felt252,)) <- struct_construct(v11)
  (v13: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v12)
End:
  Goto(blk1, {v13 -> v1})

blk6:
Statements:
End:
  Match(match core::felt252_is_zero(v0) {
    IsZeroResult::Zero => blk3,
    IsZeroResult::NonZero(v14) => blk4,
  })

blk7:
Statements:
  (v15: core::array::Array::<core::felt252>) <- core::array::array_new::<core::felt252>()
  (v16: core::felt252) <- 375233589013918064796019u
  (v17: core::array::Array::<core::felt252>) <- core::array::array_append::<core::felt252>(v15, v16)
  (v18: core::panics::Panic) <- struct_construct()
  (v19: (core::panics::Panic, core::array::Array::<core::felt252>)) <- struct_construct(v18, v17)
  (v20: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v19)
End:
  Goto(blk1, {v20 -> v1})

blk8:
Statements:
End:
  Goto(blk5, {v21 -> v11})

blk9:
Statements:
  (v22: core::felt252) <- struct_destructure(v6)
End:
  Goto(blk8, {v22 -> v21})

blk10:
Statements:
  (v23: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v7)
End:
  Goto(blk1, {v23 -> v1})

blk11:
Statements:
  (v5: core::panics::PanicResult::<(core::felt252,)>) <- test::bar(v4)
End:
  Match(match_enum(v5) {
    PanicResult::Ok(v6) => blk9,
    PanicResult::Err(v7) => blk10,
  })

blk12:
Statements:
  (v24: core::felt252) <- core::felt252_sub(v0, v3)
End:
  Goto(blk11, {v24 -> v4})

//! > lowering_diagnostics

//! > ==========================================================================

//! > test #[inline] with direct self call inside two levels of called functions.

//! > test_runner_name
test_function_inlining

//! > function_name
foo

//! > function
#[inline]
fn foo(n: felt252) -> felt252 {
  bar(n)
}

//! > module_code
#[inline]
fn bar(n: felt252) -> felt252 {
  baz(n)
}

#[inline]
fn baz(n: felt252) -> felt252 {
  if n == 0 {
    baz(n-1)
  } else {
    return 1;
  }
}

//! > semantic_diagnostics

//! > before
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- test::bar(v0)
End:
  Return(v1)

//! > after
Parameters: v0: core::felt252
blk0 (root):
Statements:
End:
  Goto(blk2, {})

blk1:
Statements:
End:
  Return(v1)

blk2:
Statements:
End:
  Goto(blk7, {})

blk3:
Statements:
  (v6: (core::felt252,)) <- struct_construct(v5)
  (v7: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v6)
End:
  Goto(blk1, {v7 -> v1})

blk4:
Statements:
  (v8: core::felt252) <- struct_destructure(v3)
End:
  Goto(blk3, {v8 -> v5})

blk5:
Statements:
  (v9: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v4)
End:
  Goto(blk1, {v9 -> v1})

blk6:
Statements:
End:
  Match(match_enum(v2) {
    PanicResult::Ok(v3) => blk4,
    PanicResult::Err(v4) => blk5,
  })

blk7:
Statements:
  (v10: core::gas::BuiltinCosts) <- core::gas::get_builtin_costs()
End:
  Match(match core::gas::withdraw_gas_all(v10) {
    Option::Some => blk11,
    Option::None => blk12,
  })

blk8:
Statements:
  (v11: core::felt252) <- 1u
End:
  Goto(blk17, {})

blk9:
Statements:
  (v16: core::felt252) <- 1u
  (v17: (core::felt252,)) <- struct_construct(v16)
  (v18: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v17)
End:
  Goto(blk6, {v18 -> v2})

blk10:
Statements:
  (v20: (core::felt252,)) <- struct_construct(v19)
  (v21: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v20)
End:
  Goto(blk6, {v21 -> v2})

blk11:
Statements:
End:
  Match(match core::felt252_is_zero(v0) {
    IsZeroResult::Zero => blk8,
    IsZeroResult::NonZero(v22) => blk9,
  })

blk12:
Statements:
  (v23: core::array::Array::<core::felt252>) <- core::array::array_new::<core::felt252>()
  (v24: core::felt252) <- 375233589013918064796019u
  (v25: core::array::Array::<core::felt252>) <- core::array::array_append::<core::felt252>(v23, v24)
  (v26: core::panics::Panic) <- struct_construct()
  (v27: (core::panics::Panic, core::array::Array::<core::felt252>)) <- struct_construct(v26, v25)
  (v28: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v27)
End:
  Goto(blk6, {v28 -> v2})

blk13:
Statements:
End:
  Goto(blk10, {v29 -> v19})

blk14:
Statements:
  (v30: core::felt252) <- struct_destructure(v14)
End:
  Goto(blk13, {v30 -> v29})

blk15:
Statements:
  (v31: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v15)
End:
  Goto(blk6, {v31 -> v2})

blk16:
Statements:
  (v13: core::panics::PanicResult::<(core::felt252,)>) <- test::baz(v12)
End:
  Match(match_enum(v13) {
    PanicResult::Ok(v14) => blk14,
    PanicResult::Err(v15) => blk15,
  })

blk17:
Statements:
  (v32: core::felt252) <- core::felt252_sub(v0, v11)
End:
  Goto(blk16, {v32 -> v12})

//! > lowering_diagnostics

//! > ==========================================================================

//! > test #[inline] with call a callee from a called function.

//! > test_runner_name
test_function_inlining

//! > function_name
foo

//! > function
#[inline]
fn foo(n: felt252) -> felt252 {
  bar(n)
}

//! > module_code
#[inline]
fn bar(n: felt252) -> felt252 {
  baz(n)
}

#[inline]
fn baz(n: felt252) -> felt252 {
  if n == 0 {
    bar(n-1)
  } else {
    return 1;
  }
}

//! > semantic_diagnostics

//! > before
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- test::bar(v0)
End:
  Return(v1)

//! > after
Parameters: v0: core::felt252
blk0 (root):
Statements:
End:
  Goto(blk2, {})

blk1:
Statements:
End:
  Return(v1)

blk2:
Statements:
  (v2: core::gas::BuiltinCosts) <- core::gas::get_builtin_costs()
End:
  Match(match core::gas::withdraw_gas_all(v2) {
    Option::Some => blk3,
    Option::None => blk4,
  })

blk3:
Statements:
End:
  Goto(blk9, {})

blk4:
Statements:
  (v6: core::array::Array::<core::felt252>) <- core::array::array_new::<core::felt252>()
  (v7: core::felt252) <- 375233589013918064796019u
  (v8: core::array::Array::<core::felt252>) <- core::array::array_append::<core::felt252>(v6, v7)
  (v9: core::panics::Panic) <- struct_construct()
  (v10: (core::panics::Panic, core::array::Array::<core::felt252>)) <- struct_construct(v9, v8)
  (v11: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v10)
End:
  Goto(blk1, {v11 -> v1})

blk5:
Statements:
  (v13: (core::felt252,)) <- struct_construct(v12)
  (v14: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v13)
End:
  Goto(blk1, {v14 -> v1})

blk6:
Statements:
  (v15: core::felt252) <- struct_destructure(v4)
End:
  Goto(blk5, {v15 -> v12})

blk7:
Statements:
  (v16: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v5)
End:
  Goto(blk1, {v16 -> v1})

blk8:
Statements:
End:
  Match(match_enum(v3) {
    PanicResult::Ok(v4) => blk6,
    PanicResult::Err(v5) => blk7,
  })

blk9:
Statements:
End:
  Match(match core::felt252_is_zero(v0) {
    IsZeroResult::Zero => blk10,
    IsZeroResult::NonZero(v17) => blk11,
  })

blk10:
Statements:
  (v18: core::felt252) <- 1u
End:
  Goto(blk17, {})

blk11:
Statements:
  (v23: core::felt252) <- 1u
  (v24: (core::felt252,)) <- struct_construct(v23)
  (v25: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v24)
End:
  Goto(blk8, {v25 -> v3})

blk12:
Statements:
  (v27: (core::felt252,)) <- struct_construct(v26)
  (v28: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v27)
End:
  Goto(blk8, {v28 -> v3})

blk13:
Statements:
End:
  Goto(blk12, {v29 -> v26})

blk14:
Statements:
  (v30: core::felt252) <- struct_destructure(v21)
End:
  Goto(blk13, {v30 -> v29})

blk15:
Statements:
  (v31: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v22)
End:
  Goto(blk8, {v31 -> v3})

blk16:
Statements:
  (v20: core::panics::PanicResult::<(core::felt252,)>) <- test::bar(v19)
End:
  Match(match_enum(v20) {
    PanicResult::Ok(v21) => blk14,
    PanicResult::Err(v22) => blk15,
  })

blk17:
Statements:
  (v32: core::felt252) <- core::felt252_sub(v0, v18)
End:
  Goto(blk16, {v32 -> v19})

//! > lowering_diagnostics

//! > ==========================================================================

//! > test #[inline] with call a two levels above callee from a called function.

//! > test_runner_name
test_function_inlining

//! > function_name
foo

//! > function
#[inline]
fn foo(n: felt252) -> felt252 {
  bar(n)
}

//! > module_code
#[inline]
fn bar(n: felt252) -> felt252 {
  baz(n)
}

#[inline]
fn baz(n: felt252) -> felt252 {
  if n == 0 {
    foo(n-1)
  } else {
    return 1;
  }
}

//! > semantic_diagnostics

//! > before
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- test::bar(v0)
End:
  Return(v1)

//! > after
Parameters: v0: core::felt252
blk0 (root):
Statements:
End:
  Goto(blk2, {})

blk1:
Statements:
End:
  Return(v1)

blk2:
Statements:
End:
  Goto(blk7, {})

blk3:
Statements:
  (v6: (core::felt252,)) <- struct_construct(v5)
  (v7: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v6)
End:
  Goto(blk1, {v7 -> v1})

blk4:
Statements:
  (v8: core::felt252) <- struct_destructure(v3)
End:
  Goto(blk3, {v8 -> v5})

blk5:
Statements:
  (v9: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v4)
End:
  Goto(blk1, {v9 -> v1})

blk6:
Statements:
End:
  Match(match_enum(v2) {
    PanicResult::Ok(v3) => blk4,
    PanicResult::Err(v4) => blk5,
  })

blk7:
Statements:
End:
  Match(match core::felt252_is_zero(v0) {
    IsZeroResult::Zero => blk8,
    IsZeroResult::NonZero(v10) => blk9,
  })

blk8:
Statements:
  (v11: core::felt252) <- 1u
End:
  Goto(blk15, {})

blk9:
Statements:
  (v16: core::felt252) <- 1u
  (v17: (core::felt252,)) <- struct_construct(v16)
  (v18: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v17)
End:
  Goto(blk6, {v18 -> v2})

blk10:
Statements:
  (v20: (core::felt252,)) <- struct_construct(v19)
  (v21: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v20)
End:
  Goto(blk6, {v21 -> v2})

blk11:
Statements:
End:
  Goto(blk10, {v22 -> v19})

blk12:
Statements:
  (v23: core::felt252) <- struct_destructure(v14)
End:
  Goto(blk11, {v23 -> v22})

blk13:
Statements:
  (v24: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v15)
End:
  Goto(blk6, {v24 -> v2})

blk14:
Statements:
  (v13: core::panics::PanicResult::<(core::felt252,)>) <- test::foo(v12)
End:
  Match(match_enum(v13) {
    PanicResult::Ok(v14) => blk12,
    PanicResult::Err(v15) => blk13,
  })

blk15:
Statements:
  (v25: core::felt252) <- core::felt252_sub(v0, v11)
End:
  Goto(blk14, {v25 -> v12})

//! > lowering_diagnostics

//! > ==========================================================================

//! > test #[inline] with call a function twice.

//! > test_runner_name
test_function_inlining

//! > function_name
foo

//! > function
fn foo(n: felt252) -> felt252 {
  bar(n) + bar(n)
}

//! > module_code
#[inline]
fn bar(n: felt252) -> felt252 {
  n
}

//! > semantic_diagnostics

//! > before
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- test::bar(v0)
  (v2: core::felt252) <- test::bar(v0)
  (v3: core::felt252) <- core::Felt252Add::add(v1, v2)
End:
  Return(v3)

//! > after
Parameters: v0: core::felt252
blk0 (root):
Statements:
End:
  Goto(blk2, {})

blk1:
Statements:
End:
  Goto(blk4, {})

blk2:
Statements:
End:
  Goto(blk1, {v0 -> v1})

blk3:
Statements:
End:
  Goto(blk6, {})

blk4:
Statements:
End:
  Goto(blk3, {v0 -> v2})

blk5:
Statements:
End:
  Return(v3)

blk6:
Statements:
  (v4: core::felt252) <- core::felt252_add(v1, v2)
End:
  Goto(blk5, {v4 -> v3})

//! > lowering_diagnostics
