//! > Test simple inlining.

//! > test_runner_name
test_function_inlining

//! > function
fn foo(n: felt) -> felt {
  -n
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > before
blk0 (root):
Inputs: v0: core::felt
Statements:
  (v1: core::felt) <- core::FeltNeg::neg(v0)
End:
  Return(v1)

//! > after
blk0 (root):
Inputs: v0: core::felt
Statements:
End:
  Goto(blk2, {})

blk1:
Inputs:
Statements:
End:
  Return(v1)

blk2:
Inputs:
Statements:
  (v2: core::felt) <- core::felt_const::<LiteralLongId { value: -1 }>()
End:
  Goto(blk4, {})

blk3:
Inputs:
Statements:
End:
  Goto(blk1, {v3 -> v1})

blk4:
Inputs:
Statements:
  (v4: core::felt) <- core::felt_mul(v0, v2)
End:
  Goto(blk3, {v4 -> v3})

//! > lowering_diagnostics

//! > ==========================================================================

//! > Test generic function inlining.

//! > test_runner_name
test_function_inlining

//! > function
fn foo(val: Option::<felt>) -> felt {
  bar(val, 2)
}

//! > function_name
foo

//! > module_code
/// If `val` is `Option::Some(x)`, returns `x`. Otherwise, panics.
#[inline(always)]
fn bar<T>(val: Option::<T>, val2: T) -> T {
    match val {
        Option::Some(x) => x,
        Option::None(()) => val2,
    }
}

//! > semantic_diagnostics

//! > before
blk0 (root):
Inputs: v0: core::option::Option::<core::felt>
Statements:
  (v1: core::felt) <- 2u
  (v2: core::felt) <- test::bar::<core::felt>(v0, v1)
End:
  Return(v2)

//! > after
blk0 (root):
Inputs: v0: core::option::Option::<core::felt>
Statements:
  (v1: core::felt) <- 2u
End:
  Goto(blk2, {})

blk1:
Inputs:
Statements:
End:
  Return(v2)

blk2:
Inputs:
Statements:
End:
  Match(match_enum(v0) {
    Option::Some => blk3,
    Option::None => blk4,
  })

blk3:
Inputs: v3: core::felt
Statements:
End:
  Goto(blk5, {v3 -> v4})

blk4:
Inputs: v5: ()
Statements:
  () <- struct_destructure(v5)
End:
  Goto(blk5, {v1 -> v4})

blk5:
Inputs:
Statements:
End:
  Goto(blk1, {v4 -> v2})

//! > lowering_diagnostics

//! > ==========================================================================

//! > Test inlining same arg twice.

//! > test_runner_name
test_function_inlining

//! > function
fn foo(n: felt) -> felt {
  bar(n, n)
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn bar(a: felt, b: felt) -> felt  {
  a + b
}

//! > semantic_diagnostics

//! > before
blk0 (root):
Inputs: v0: core::felt
Statements:
  (v1: core::felt) <- test::bar(v0, v0)
End:
  Return(v1)

//! > after
blk0 (root):
Inputs: v0: core::felt
Statements:
End:
  Goto(blk2, {})

blk1:
Inputs:
Statements:
End:
  Return(v1)

blk2:
Inputs:
Statements:
End:
  Goto(blk4, {})

blk3:
Inputs:
Statements:
End:
  Goto(blk1, {v2 -> v1})

blk4:
Inputs:
Statements:
  (v3: core::felt) <- core::felt_add(v0, v0)
End:
  Goto(blk3, {v3 -> v2})

//! > lowering_diagnostics

//! > ==========================================================================

//! > Test inlining.

//! > test_runner_name
test_function_inlining

//! > function
fn foo(a: felt, b: felt) -> felt {
  bar(a + b, b)
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn bar(a: felt, b: felt) -> felt implicits()  {
  bar2(a, b) + bar2(b, a)
}

#[inline(always)]
fn bar2(a: felt, b: felt) -> felt implicits()  {
   a * b
}

//! > semantic_diagnostics

//! > before
blk0 (root):
Inputs: v0: core::felt, v1: core::felt
Statements:
  (v2: core::felt) <- core::FeltAdd::add(v0, v1)
  (v3: core::felt) <- test::bar(v2, v1)
End:
  Return(v3)

//! > after
blk0 (root):
Inputs: v0: core::felt, v1: core::felt
Statements:
End:
  Goto(blk2, {})

blk1:
Inputs:
Statements:
End:
  Goto(blk4, {})

blk2:
Inputs:
Statements:
  (v4: core::felt) <- core::felt_add(v0, v1)
End:
  Goto(blk1, {v4 -> v2})

blk3:
Inputs:
Statements:
End:
  Return(v3)

blk4:
Inputs:
Statements:
End:
  Goto(blk6, {})

blk5:
Inputs:
Statements:
End:
  Goto(blk8, {})

blk6:
Inputs:
Statements:
End:
  Goto(blk10, {})

blk7:
Inputs:
Statements:
End:
  Goto(blk12, {})

blk8:
Inputs:
Statements:
End:
  Goto(blk14, {})

blk9:
Inputs:
Statements:
End:
  Goto(blk5, {v8 -> v5})

blk10:
Inputs:
Statements:
  (v10: core::felt) <- core::felt_mul(v2, v1)
End:
  Goto(blk9, {v10 -> v8})

blk11:
Inputs:
Statements:
End:
  Goto(blk3, {v7 -> v3})

blk12:
Inputs:
Statements:
  (v11: core::felt) <- core::felt_add(v5, v6)
End:
  Goto(blk11, {v11 -> v7})

blk13:
Inputs:
Statements:
End:
  Goto(blk7, {v9 -> v6})

blk14:
Inputs:
Statements:
  (v12: core::felt) <- core::felt_mul(v1, v2)
End:
  Goto(blk13, {v12 -> v9})

//! > lowering_diagnostics

//! > ==========================================================================

//! > Test recursive inlining.

//! > test_runner_name
test_function_inlining

//! > function
fn foo(a: felt) -> felt {
  first(a)
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn first(a: felt) -> felt {
  second(a)
}

#[inline(always)]
fn second(a: felt) -> felt {
  third(a)
}

#[inline(always)]
fn third(a: felt) -> felt {
   a * a
}

//! > semantic_diagnostics

//! > before
blk0 (root):
Inputs: v0: core::felt
Statements:
  (v1: core::felt) <- test::first(v0)
End:
  Return(v1)

//! > after
blk0 (root):
Inputs: v0: core::felt
Statements:
End:
  Goto(blk2, {})

blk1:
Inputs:
Statements:
End:
  Return(v1)

blk2:
Inputs:
Statements:
End:
  Goto(blk4, {})

blk3:
Inputs:
Statements:
End:
  Goto(blk1, {v2 -> v1})

blk4:
Inputs:
Statements:
End:
  Goto(blk6, {})

blk5:
Inputs:
Statements:
End:
  Goto(blk3, {v3 -> v2})

blk6:
Inputs:
Statements:
End:
  Goto(blk8, {})

blk7:
Inputs:
Statements:
End:
  Goto(blk5, {v4 -> v3})

blk8:
Inputs:
Statements:
  (v5: core::felt) <- core::felt_mul(v0, v0)
End:
  Goto(blk7, {v5 -> v4})

//! > lowering_diagnostics

//! > ==========================================================================

//! > Test impl inlining.

//! > test_runner_name
test_function_inlining

//! > function
fn foo() {
  let mut arr = ArrayTrait::new();
  arr.append(5)
}

//! > function_name
foo

//! > module_code
use array::ArrayTrait;

//! > semantic_diagnostics

//! > before
blk0 (root):
Inputs:
Statements:
  (v0: core::array::Array::<core::felt>) <- core::array::ArrayImpl::<core::felt>::new()
  (v1: core::felt) <- 5u
  (v3: core::array::Array::<core::felt>, v2: ()) <- core::array::ArrayImpl::<core::felt>::append(v0, v1)
End:
  Return(v2)

//! > after
blk0 (root):
Inputs:
Statements:
End:
  Goto(blk2, {})

blk1:
Inputs:
Statements:
  (v1: core::felt) <- 5u
End:
  Goto(blk4, {})

blk2:
Inputs:
Statements:
  (v4: core::array::Array::<core::felt>) <- core::array::array_new::<core::felt>()
End:
  Goto(blk1, {v4 -> v0})

blk3:
Inputs:
Statements:
End:
  Return(v2)

blk4:
Inputs:
Statements:
  (v5: core::array::Array::<core::felt>) <- core::array::array_append::<core::felt>(v0, v1)
  (v6: ()) <- struct_construct()
End:
  Goto(blk3, {v5 -> v3, v6 -> v2})

//! > lowering_diagnostics

//! > ==========================================================================

//! > Test inlining of a function with an early return.

//! > test_runner_name
test_function_inlining

//! > function
fn foo(a: felt) -> felt {
  if a == 2 {
    bar(a)
  } else {
    a
  }
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn bar(a: felt) -> felt {
  if a == 0 {
    return 1;
  }
  0
}

//! > before
blk0 (root):
Inputs: v0: core::felt
Statements:
  (v1: core::felt) <- 2u
  (v2: core::felt) <- core::FeltSub::sub(v0, v1)
End:
  Match(match core::felt_is_zero(v2) {
    IsZeroResult::Zero => blk1,
    IsZeroResult::NonZero => blk2,
  })

blk1:
Inputs:
Statements:
  (v3: core::felt) <- test::bar(v0)
End:
  Goto(blk3, {v3 -> v5})

blk2:
Inputs: v4: core::NonZero::<core::felt>
Statements:
End:
  Goto(blk3, {v0 -> v5})

blk3:
Inputs:
Statements:
End:
  Return(v5)

//! > after
blk0 (root):
Inputs: v0: core::felt
Statements:
  (v1: core::felt) <- 2u
End:
  Goto(blk5, {})

blk1:
Inputs:
Statements:
End:
  Goto(blk7, {})

blk2:
Inputs: v4: core::NonZero::<core::felt>
Statements:
End:
  Goto(blk3, {v0 -> v5})

blk3:
Inputs:
Statements:
End:
  Return(v5)

blk4:
Inputs:
Statements:
End:
  Match(match core::felt_is_zero(v2) {
    IsZeroResult::Zero => blk1,
    IsZeroResult::NonZero => blk2,
  })

blk5:
Inputs:
Statements:
  (v6: core::felt) <- core::felt_sub(v0, v1)
End:
  Goto(blk4, {v6 -> v2})

blk6:
Inputs:
Statements:
End:
  Goto(blk3, {v3 -> v5})

blk7:
Inputs:
Statements:
End:
  Match(match core::felt_is_zero(v0) {
    IsZeroResult::Zero => blk8,
    IsZeroResult::NonZero => blk9,
  })

blk8:
Inputs:
Statements:
  (v7: core::felt) <- 1u
End:
  Goto(blk6, {v7 -> v3})

blk9:
Inputs: v8: core::NonZero::<core::felt>
Statements:
End:
  Goto(blk10, {})

blk10:
Inputs:
Statements:
  (v9: core::felt) <- 0u
End:
  Goto(blk6, {v9 -> v3})

//! > lowering_diagnostics

//! > semantic_diagnostics

//! > ==========================================================================

//! > Test inlining heuristic

//! > test_runner_name
test_function_inlining

//! > function
fn foo(a: felt) -> felt {
  bar(a) + bar2(a)
}

//! > function_name
foo

//! > module_code
fn bar(a: felt) -> felt {
  bar2(a)
}

fn bar2(a: felt) -> felt {
  1
}

//! > before
blk0 (root):
Inputs: v0: core::felt
Statements:
  (v1: core::felt) <- test::bar(v0)
  (v2: core::felt) <- test::bar2(v0)
  (v3: core::felt) <- core::FeltAdd::add(v1, v2)
End:
  Return(v3)

//! > after
blk0 (root):
Inputs: v0: core::felt
Statements:
End:
  Goto(blk2, {})

blk1:
Inputs:
Statements:
End:
  Goto(blk4, {})

blk2:
Inputs:
Statements:
End:
  Goto(blk6, {})

blk3:
Inputs:
Statements:
End:
  Goto(blk8, {})

blk4:
Inputs:
Statements:
  (v5: core::felt) <- 1u
End:
  Goto(blk3, {v5 -> v2})

blk5:
Inputs:
Statements:
End:
  Goto(blk1, {v4 -> v1})

blk6:
Inputs:
Statements:
  (v6: core::felt) <- 1u
End:
  Goto(blk5, {v6 -> v4})

blk7:
Inputs:
Statements:
End:
  Return(v3)

blk8:
Inputs:
Statements:
  (v7: core::felt) <- core::felt_add(v1, v2)
End:
  Goto(blk7, {v7 -> v3})

//! > lowering_diagnostics

//! > semantic_diagnostics

//! > ==========================================================================

//! > Test preventing inlining heuristic

//! > test_runner_name
test_function_inlining

//! > function
fn foo(a: felt) -> felt {
  bar(a) + bar2(a)
}

//! > function_name
foo

//! > module_code
#[inline(never)]
fn bar(a: felt) -> felt {
  bar2(a)
}

#[inline(never)]
fn bar2(a: felt) -> felt {
  1
}

//! > before
blk0 (root):
Inputs: v0: core::felt
Statements:
  (v1: core::felt) <- test::bar(v0)
  (v2: core::felt) <- test::bar2(v0)
  (v3: core::felt) <- core::FeltAdd::add(v1, v2)
End:
  Return(v3)

//! > after
blk0 (root):
Inputs: v0: core::felt
Statements:
  (v1: core::felt) <- test::bar(v0)
  (v2: core::felt) <- test::bar2(v0)
End:
  Goto(blk2, {})

blk1:
Inputs:
Statements:
End:
  Return(v3)

blk2:
Inputs:
Statements:
  (v4: core::felt) <- core::felt_add(v1, v2)
End:
  Goto(blk1, {v4 -> v3})

//! > lowering_diagnostics

//! > semantic_diagnostics

//! > ==========================================================================

//! > Test returning an input variable as is (not in the last block).

//! > test_runner_name
test_function_inlining

//! > function
fn foo() -> felt {
  bar(0)
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn bar(a: felt) -> felt {
  if a == 0 {
    return a;
  }
  1
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > before
blk0 (root):
Inputs:
Statements:
  (v0: core::felt) <- 0u
  (v1: core::felt) <- test::bar(v0)
End:
  Return(v1)

//! > after
blk0 (root):
Inputs:
Statements:
  (v0: core::felt) <- 0u
End:
  Goto(blk2, {})

blk1:
Inputs:
Statements:
End:
  Return(v1)

blk2:
Inputs:
Statements:
End:
  Match(match core::felt_is_zero(v0) {
    IsZeroResult::Zero => blk3,
    IsZeroResult::NonZero => blk4,
  })

blk3:
Inputs:
Statements:
End:
  Goto(blk1, {v0 -> v1})

blk4:
Inputs: v2: core::NonZero::<core::felt>
Statements:
End:
  Goto(blk5, {})

blk5:
Inputs:
Statements:
  (v3: core::felt) <- 1u
End:
  Goto(blk1, {v3 -> v1})

//! > ==========================================================================

//! > Test inlining of identity function.

//! > test_runner_name
test_function_inlining

//! > function
fn foo(n: felt) -> felt {
  identity(n)
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn identity(n: felt) -> felt {
  n
}

//! > semantic_diagnostics

//! > before
blk0 (root):
Inputs: v0: core::felt
Statements:
  (v1: core::felt) <- test::identity(v0)
End:
  Return(v1)

//! > after
blk0 (root):
Inputs: v0: core::felt
Statements:
End:
  Goto(blk2, {})

blk1:
Inputs:
Statements:
End:
  Return(v1)

blk2:
Inputs:
Statements:
End:
  Goto(blk1, {v0 -> v1})

//! > lowering_diagnostics

//! > ==========================================================================

//! > Test match where is there is a return in one branch.

//! > Motivation:
// The goal of this test is to test the block renaming logic.
// A panicable function can have a block with a low `block_id` with a match_arm that goes
// to a higher 'block_id'.
// We want to test this outside of the outer scope as the last block is rebuild last.

//! > test_runner_name
test_function_inlining

//! > function
fn foo(a: u128, b: u128) -> u128 {
    bar1(a, b)
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn bar1(a: u128, b: u128) -> u128 {
   if a == 1_u128 {
      return bar2(b, a);
   }
   a
}

#[inline(always)]
fn bar2(a: u128, b: u128) -> u128 {
    a + b
}

//! > semantic_diagnostics

//! > before
blk0 (root):
Inputs: v0: core::RangeCheck, v1: core::integer::u128, v2: core::integer::u128
Statements:
  (v4: core::RangeCheck, v5: core::PanicResult::<(core::integer::u128,)>) <- test::bar1(v0, v1, v2)
End:
  Match(match_enum(v5) {
    PanicResult::Ok => blk2,
    PanicResult::Err => blk3,
  })

blk1:
Inputs:
Statements:
  (v9: (core::integer::u128,)) <- struct_construct(v3)
  (v10: core::PanicResult::<(core::integer::u128,)>) <- PanicResult::Ok(v9)
End:
  Return(v4, v10)

blk2:
Inputs: v6: (core::integer::u128,)
Statements:
  (v7: core::integer::u128) <- struct_destructure(v6)
End:
  Goto(blk1, {v7 -> v3})

blk3:
Inputs: v8: core::array::Array::<core::felt>
Statements:
  (v11: core::PanicResult::<(core::integer::u128,)>) <- PanicResult::Err(v8)
End:
  Return(v4, v11)

//! > after
blk0 (root):
Inputs: v0: core::RangeCheck, v1: core::integer::u128, v2: core::integer::u128
Statements:
End:
  Goto(blk5, {})

blk1:
Inputs:
Statements:
  (v9: (core::integer::u128,)) <- struct_construct(v3)
  (v10: core::PanicResult::<(core::integer::u128,)>) <- PanicResult::Ok(v9)
End:
  Return(v4, v10)

blk2:
Inputs: v6: (core::integer::u128,)
Statements:
  (v7: core::integer::u128) <- struct_destructure(v6)
End:
  Goto(blk1, {v7 -> v3})

blk3:
Inputs: v8: core::array::Array::<core::felt>
Statements:
  (v11: core::PanicResult::<(core::integer::u128,)>) <- PanicResult::Err(v8)
End:
  Return(v4, v11)

blk4:
Inputs:
Statements:
End:
  Match(match_enum(v5) {
    PanicResult::Ok => blk2,
    PanicResult::Err => blk3,
  })

blk5:
Inputs:
Statements:
  (v12: core::integer::u128) <- 1u
End:
  Goto(blk13, {})

blk6:
Inputs: v14: ()
Statements:
End:
  Goto(blk18, {})

blk7:
Inputs: v17: ()
Statements:
End:
  Goto(blk8, {})

blk8:
Inputs:
Statements:
  (v18: (core::integer::u128,)) <- struct_construct(v1)
  (v19: core::PanicResult::<(core::integer::u128,)>) <- PanicResult::Ok(v18)
End:
  Goto(blk4, {v0 -> v4, v19 -> v5})

blk9:
Inputs:
Statements:
  (v21: (core::integer::u128,)) <- struct_construct(v20)
  (v22: core::PanicResult::<(core::integer::u128,)>) <- PanicResult::Ok(v21)
End:
  Goto(blk4, {v15 -> v4, v22 -> v5})

blk10:
Inputs: v23: (core::integer::u128,)
Statements:
  (v24: core::integer::u128) <- struct_destructure(v23)
End:
  Goto(blk9, {v24 -> v20})

blk11:
Inputs: v25: core::array::Array::<core::felt>
Statements:
  (v26: core::PanicResult::<(core::integer::u128,)>) <- PanicResult::Err(v25)
End:
  Goto(blk4, {v15 -> v4, v26 -> v5})

blk12:
Inputs:
Statements:
End:
  Match(match_enum(v13) {
    bool::False => blk7,
    bool::True => blk6,
  })

blk13:
Inputs:
Statements:
End:
  Match(match core::integer::u128_eq(v1, v12) {
    bool::False => blk14,
    bool::True => blk15,
  })

blk14:
Inputs:
Statements:
  (v27: ()) <- struct_construct()
  (v28: core::bool) <- bool::False(v27)
End:
  Goto(blk16, {v28 -> v29})

blk15:
Inputs:
Statements:
  (v30: ()) <- struct_construct()
  (v31: core::bool) <- bool::True(v30)
End:
  Goto(blk16, {v31 -> v29})

blk16:
Inputs:
Statements:
End:
  Goto(blk12, {v29 -> v13})

blk17:
Inputs:
Statements:
End:
  Match(match_enum(v16) {
    PanicResult::Ok => blk10,
    PanicResult::Err => blk11,
  })

blk18:
Inputs:
Statements:
  (v32: core::RangeCheck, v33: core::PanicResult::<(core::integer::u128,)>) <- core::integer::U128Add::add(v0, v2, v1)
End:
  Match(match_enum(v33) {
    PanicResult::Ok => blk20,
    PanicResult::Err => blk21,
  })

blk19:
Inputs:
Statements:
  (v35: (core::integer::u128,)) <- struct_construct(v34)
  (v36: core::PanicResult::<(core::integer::u128,)>) <- PanicResult::Ok(v35)
End:
  Goto(blk17, {v32 -> v15, v36 -> v16})

blk20:
Inputs: v37: (core::integer::u128,)
Statements:
  (v38: core::integer::u128) <- struct_destructure(v37)
End:
  Goto(blk19, {v38 -> v34})

blk21:
Inputs: v39: core::array::Array::<core::felt>
Statements:
  (v40: core::PanicResult::<(core::integer::u128,)>) <- PanicResult::Err(v39)
End:
  Goto(blk17, {v32 -> v15, v40 -> v16})

//! > lowering_diagnostics

//! > ==========================================================================

//! > Test inlining a function where the root block does not return.

//! > test_runner_name
test_function_inlining

//! > function_name
foo

//! > function
fn foo(n: felt) -> felt {
  bar(n)
}

//! > module_code
#[inline(always)]
fn bar(n: felt) -> felt {
  if n == 0 {
    return 1;
  } else {
    return 1;
  }
}

//! > semantic_diagnostics

//! > before
blk0 (root):
Inputs: v0: core::felt
Statements:
  (v1: core::felt) <- test::bar(v0)
End:
  Return(v1)

//! > after
blk0 (root):
Inputs: v0: core::felt
Statements:
End:
  Goto(blk2, {})

blk1:
Inputs:
Statements:
End:
  Return(v1)

blk2:
Inputs:
Statements:
End:
  Match(match core::felt_is_zero(v0) {
    IsZeroResult::Zero => blk3,
    IsZeroResult::NonZero => blk4,
  })

blk3:
Inputs:
Statements:
  (v2: core::felt) <- 1u
End:
  Goto(blk1, {v2 -> v1})

blk4:
Inputs: v3: core::NonZero::<core::felt>
Statements:
  (v4: core::felt) <- 1u
End:
  Goto(blk1, {v4 -> v1})

//! > lowering_diagnostics
