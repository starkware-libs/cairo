//! > Test simple inlining.

//! > test_function_name
test_function_inlining

//! > function
fn foo(n: felt) -> felt {
  -n
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > before
blk0 (root):
Inputs: v0: core::felt
Statements:
  (v1: core::felt) <- core::felt_neg(v0)
End:
  Return(v1)

//! > after
blk0 (root):
Inputs: v0: core::felt
Statements:
  () <- blk1()
End:
  Return(v1)

blk1:
Inputs:
Statements:
  (v2: core::felt) <- core::felt_const::<LiteralLongId { value: -1 }>()
  (v3: core::felt) <- core::felt_mul(v0, v2)
End:
  Callsite(v3 -> v1)

//! > lowering_diagnostics

//! > ==========================================================================

//! > Test generic function inlining.

//! > test_function_name
test_function_inlining

//! > function
fn foo(val: Option::<felt>) -> felt {
  bar(val, 2)
}

//! > function_name
foo

//! > module_code
/// If `val` is `Option::Some(x)`, returns `x`. Otherwise, panics.
#[inline(always)]
fn bar<T>(val: Option::<T>, val2: T) -> T {
    match val {
        Option::Some(x) => x,
        Option::None(()) => val2,
    }
}

//! > semantic_diagnostics

//! > before
blk0 (root):
Inputs: v0: core::option::Option::<core::felt>
Statements:
  (v1: core::felt) <- 2u
  (v2: core::felt) <- test::bar::<core::felt>(v0, v1)
End:
  Return(v2)

//! > after
blk0 (root):
Inputs: v0: core::option::Option::<core::felt>
Statements:
  (v1: core::felt) <- 2u
  () <- blk3()
End:
  Return(v2)

blk1:
Inputs: v4: core::felt
Statements:
End:
  Callsite(v4 -> v3)

blk2:
Inputs: v5: ()
Statements:
  () <- struct_destructure(v5)
End:
  Callsite(v1 -> v3)

blk3:
Inputs:
Statements:
  () <- match_enum(v0) {
    Option::Some => blk1,
    Option::None => blk2,
  }
End:
  Callsite(v3 -> v2)

//! > lowering_diagnostics

//! > ==========================================================================

//! > Test inlining same arg twice.

//! > test_function_name
test_function_inlining

//! > function
fn foo(n: felt) -> felt {
  bar(n, n)
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn bar(a: felt, b: felt) -> felt  {
  a + b
}

//! > semantic_diagnostics

//! > before
blk0 (root):
Inputs: v0: core::felt
Statements:
  (v1: core::felt) <- test::bar(v0, v0)
End:
  Return(v1)

//! > after
blk0 (root):
Inputs: v0: core::felt
Statements:
  () <- blk1()
End:
  Return(v1)

blk1:
Inputs:
Statements:
  () <- blk2()
End:
  Callsite(v2 -> v1)

blk2:
Inputs:
Statements:
  (v3: core::felt) <- core::felt_add(v0, v0)
End:
  Callsite(v3 -> v2)

//! > lowering_diagnostics

//! > ==========================================================================

//! > Test inlining.

//! > test_function_name
test_function_inlining

//! > function
fn foo(a: felt, b: felt) -> felt {
  bar(a + b, b)
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn bar(a: felt, b: felt) -> felt implicits()  {
  bar2(a, b) + bar2(b, a)
}

#[inline(always)]
fn bar2(a: felt, b: felt) -> felt implicits()  {
   a * b
}

//! > semantic_diagnostics

//! > before
blk0 (root):
Inputs: v0: core::felt, v1: core::felt
Statements:
  (v2: core::felt) <- core::FeltAdd::add(v0, v1)
  (v3: core::felt) <- test::bar(v2, v1)
End:
  Return(v3)

//! > after
blk0 (root):
Inputs: v0: core::felt, v1: core::felt
Statements:
  () <- blk1()
  () <- blk2()
End:
  Return(v3)

blk1:
Inputs:
Statements:
  (v4: core::felt) <- core::felt_add(v0, v1)
End:
  Callsite(v4 -> v2)

blk2:
Inputs:
Statements:
  () <- blk3()
  () <- blk4()
  () <- blk5()
End:
  Callsite(v7 -> v3)

blk3:
Inputs:
Statements:
  (v8: core::felt) <- core::felt_mul(v2, v1)
End:
  Callsite(v8 -> v5)

blk4:
Inputs:
Statements:
  (v9: core::felt) <- core::felt_mul(v1, v2)
End:
  Callsite(v9 -> v6)

blk5:
Inputs:
Statements:
  (v10: core::felt) <- core::felt_add(v5, v6)
End:
  Callsite(v10 -> v7)

//! > lowering_diagnostics
