//! > Basic cache valid.

//! > test_runner_name
test_cache_check

//! > function
fn foo(x: ACopy, y: ADrop) {
    if true {
        use_a_copy(x);
        use_a_drop(y);
    } else {
        use_a_drop(y);
    }
    use_a_copy(x);
}

//! > function_name
foo

//! > module_code
extern type ACopy;
impl ACopyCopy of Copy<ACopy>;
extern type ADrop;
impl ADropDrop of Drop<ADrop>;

extern fn use_a_copy(x: ACopy) nopanic;
extern fn use_a_drop(x: ADrop) nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: test::ACopy, v1: test::ADrop
blk0 (root):
Statements:
  () <- test::use_a_copy(v0)
  () <- test::use_a_drop(v1)
  () <- test::use_a_copy(v0)
End:
  Return()

//! > ==========================================================================

//! > Cache Generated Impl 

//! > test_runner_name
test_cache_check

//! > function
fn foo() -> u32 {
    let x = |a| {
        a + 5
    };
    x(5)
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters:
blk0 (root):
Statements:
  (v0: core::integer::u32) <- 10
  (v1: (core::integer::u32,)) <- struct_construct(v0)
  (v2: core::panics::PanicResult::<(core::integer::u32,)>) <- PanicResult::Ok(v1)
End:
  Return(v2)

//! > ==========================================================================

//! > Cache Impl Impl

//! > test_runner_name
test_cache_check

//! > function
fn foo() {
    bar::<MyOuter>();
}

fn bar<impl I: Outer>() {
    I::Impl::foo();
}

//! > function_name
foo

//! > module_code
trait Inner {
    fn foo();
}

trait Outer {
    impl Impl: Inner;
}

impl MyInner of Inner {
    fn foo() {}
}

impl MyOuter of Outer {}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters:
blk0 (root):
Statements:
End:
  Return()

//! > ==========================================================================

//! > Cache Trait Function with Self Impl

//! > test_runner_name
test_cache_check

//! > function
fn foo() -> i32 {
    MyTrait::foo()
}

//! > function_name
foo

//! > module_code
trait MyTrait {
    fn foo() -> i32 {
        let y = |x| x;
        y(3)
    }
}

impl MyImpl of MyTrait {}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters:
blk0 (root):
Statements:
  (v0: {closure@lib.cairo:3:17: 3:20}) <- struct_construct()
  (v1: {closure@lib.cairo:3:17: 3:20}, v2: @{closure@lib.cairo:3:17: 3:20}) <- snapshot(v0)
  (v3: core::integer::i32) <- 3
  (v4: (core::integer::i32,)) <- struct_construct(v3)
  (v5: core::integer::i32) <- Generated core::ops::function::Fn::<{closure@lib.cairo:3:17: 3:20}, (core::integer::i32,)>::call(v2, v4)
  (v6: (core::integer::i32,)) <- struct_construct(v5)
  (v7: core::panics::PanicResult::<(core::integer::i32,)>) <- PanicResult::Ok(v6)
End:
  Return(v7)

//! > ==========================================================================

//! > Cache Trait Function with Loop

//! > test_runner_name
test_cache_check

//! > function
fn foo() -> i32 {
    MyTrait::foo()
}

//! > function_name
foo

//! > module_code
trait MyTrait {
    fn foo() -> i32 {
        loop {
            if 6_i32 > 7 {
                break 5;
            }
        }
    }
}

impl MyImpl of MyTrait {}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters: v0: core::RangeCheck, v1: core::gas::GasBuiltin
blk0 (root):
Statements:
End:
  Match(match core::gas::withdraw_gas(v0, v1) {
    Option::Some(v2, v3) => blk1,
    Option::None(v4, v5) => blk2,
  })

blk1:
Statements:
  (v6: core::gas::GasBuiltin) <- core::gas::redeposit_gas(v3)
  (v7: core::RangeCheck, v8: core::gas::GasBuiltin, v9: core::panics::PanicResult::<(core::integer::i32,)>) <- test::MyImpl::foo[22-113](v2, v6)
End:
  Return(v7, v8, v9)

blk2:
Statements:
  (v10: (core::panics::Panic, core::array::Array::<core::felt252>)) <- core::panic_with_const_felt252::<375233589013918064796019>()
  (v11: core::panics::PanicResult::<(core::integer::i32,)>) <- PanicResult::Err(v10)
End:
  Return(v4, v5, v11)
