//! > Test boolean if with else

//! > test_runner_name
test_create_graph(expect_diagnostics: false)

//! > function_code
fn foo(x: bool) -> felt252 {
    if x {
        3
    } else {
        4
    }
}

//! > graph
Root: 3
0 ArmExpr { expr: Id { idx: 2 } }
1 ArmExpr { expr: Id { idx: 4 } }
2 BooleanIf { condition_var: FlowControlVar { idx: 0 }, true_branch: NodeId(0), false_branch: NodeId(1) }
3 EvaluateExpr { expr: Id { idx: 0 }, var_id: FlowControlVar { idx: 0 }, next: NodeId(2) }

//! > semantic_diagnostics

//! > lowered
Parameters: v0: core::bool
blk0 (root):
Statements:
End:
  Match(match_enum(v0) {
    bool::False(v2) => blk2,
    bool::True(v1) => blk1,
  })

blk1:
Statements:
  (v4: core::felt252) <- 3
End:
  Goto(blk3, {v4 -> v5})

blk2:
Statements:
  (v3: core::felt252) <- 4
End:
  Goto(blk3, {v3 -> v5})

blk3:
Statements:
End:
  Return(v5)

//! > ==========================================================================

//! > Test boolean if without else

//! > test_runner_name
test_create_graph(expect_diagnostics: false)

//! > function_code
fn foo(x: bool) {
    if x {
        bar();
    }
}

//! > module_code
fn bar() {}

//! > graph
Root: 3
0 ArmExpr { expr: Id { idx: 2 } }
1 UnitResult
2 BooleanIf { condition_var: FlowControlVar { idx: 0 }, true_branch: NodeId(0), false_branch: NodeId(1) }
3 EvaluateExpr { expr: Id { idx: 0 }, var_id: FlowControlVar { idx: 0 }, next: NodeId(2) }

//! > semantic_diagnostics

//! > lowered
Parameters: v0: core::bool
blk0 (root):
Statements:
End:
  Match(match_enum(v0) {
    bool::False(v2) => blk2,
    bool::True(v1) => blk1,
  })

blk1:
Statements:
  (v3: ()) <- test::bar()
End:
  Goto(blk3, {})

blk2:
Statements:
End:
  Goto(blk3, {})

blk3:
Statements:
  (v4: ()) <- struct_construct()
End:
  Return(v4)

//! > ==========================================================================

//! > Test if with panic in condition

//! > test_runner_name
test_create_graph(expect_diagnostics: false, skip_lowering: false)

//! > function_code
fn foo() -> felt252 {
    if panic!() {
        0
    } else {
        1
    }
}

//! > module_code

//! > graph
Root: 3
0 ArmExpr { expr: Id { idx: 5 } }
1 ArmExpr { expr: Id { idx: 7 } }
2 BooleanIf { condition_var: FlowControlVar { idx: 0 }, true_branch: NodeId(0), false_branch: NodeId(1) }
3 EvaluateExpr { expr: Id { idx: 3 }, var_id: FlowControlVar { idx: 0 }, next: NodeId(2) }

//! > semantic_diagnostics

//! > lowered
Parameters:
blk0 (root):
Statements:
  (v0: core::array::Array::<core::bytes_31::bytes31>) <- core::array::array_new::<core::bytes_31::bytes31>()
  (v1: core::felt252) <- 0
  (v2: core::integer::u32) <- 0
  (v3: core::byte_array::ByteArray) <- struct_construct(v0, v1, v2)
  (v4: core::byte_array::ByteArray, v5: @core::byte_array::ByteArray) <- snapshot(v3)
  (v6: core::never) <- core::panics::panic_with_byte_array(v5)
End:
  Match(match_enum(v6) {
  })

//! > ==========================================================================

//! > Test if with panic in body

//! > test_runner_name
test_create_graph(expect_diagnostics: false, skip_lowering: false)

//! > function_code
fn foo() -> felt252 {
    if true {
        panic!()
    } else {
        1
    }
}

//! > module_code

//! > graph
Root: 3
0 ArmExpr { expr: Id { idx: 5 } }
1 ArmExpr { expr: Id { idx: 7 } }
2 BooleanIf { condition_var: FlowControlVar { idx: 0 }, true_branch: NodeId(0), false_branch: NodeId(1) }
3 EvaluateExpr { expr: Id { idx: 1 }, var_id: FlowControlVar { idx: 0 }, next: NodeId(2) }

//! > semantic_diagnostics

//! > lowered
Parameters:
blk0 (root):
Statements:
  (v0: ()) <- struct_construct()
  (v1: core::bool) <- bool::True(v0)
End:
  Match(match_enum(v1) {
    bool::False(v3) => blk2,
    bool::True(v2) => blk1,
  })

blk1:
Statements:
  (v5: core::array::Array::<core::bytes_31::bytes31>) <- core::array::array_new::<core::bytes_31::bytes31>()
  (v6: core::felt252) <- 0
  (v7: core::integer::u32) <- 0
  (v8: core::byte_array::ByteArray) <- struct_construct(v5, v6, v7)
  (v9: core::byte_array::ByteArray, v10: @core::byte_array::ByteArray) <- snapshot(v8)
  (v11: core::never) <- core::panics::panic_with_byte_array(v10)
End:
  Match(match_enum(v11) {
  })

blk2:
Statements:
  (v4: core::felt252) <- 1
End:
  Goto(blk3, {v4 -> v12})

blk3:
Statements:
End:
  Return(v12)

//! > ==========================================================================

//! > Test if with panic or return in both body and else

//! > test_runner_name
test_create_graph(expect_diagnostics: false, skip_lowering: false)

//! > function_code
fn foo() -> felt252 {
    if true {
        return 0;
    } else {
        panic!()
    }
}

//! > module_code

//! > graph
Root: 3
0 ArmExpr { expr: Id { idx: 3 } }
1 ArmExpr { expr: Id { idx: 7 } }
2 BooleanIf { condition_var: FlowControlVar { idx: 0 }, true_branch: NodeId(0), false_branch: NodeId(1) }
3 EvaluateExpr { expr: Id { idx: 1 }, var_id: FlowControlVar { idx: 0 }, next: NodeId(2) }

//! > semantic_diagnostics

//! > lowered
Parameters:
blk0 (root):
Statements:
  (v0: ()) <- struct_construct()
  (v1: core::bool) <- bool::True(v0)
End:
  Match(match_enum(v1) {
    bool::False(v3) => blk2,
    bool::True(v2) => blk1,
  })

blk1:
Statements:
  (v11: core::felt252) <- 0
End:
  Return(v11)

blk2:
Statements:
  (v4: core::array::Array::<core::bytes_31::bytes31>) <- core::array::array_new::<core::bytes_31::bytes31>()
  (v5: core::felt252) <- 0
  (v6: core::integer::u32) <- 0
  (v7: core::byte_array::ByteArray) <- struct_construct(v4, v5, v6)
  (v8: core::byte_array::ByteArray, v9: @core::byte_array::ByteArray) <- snapshot(v7)
  (v10: core::never) <- core::panics::panic_with_byte_array(v9)
End:
  Match(match_enum(v10) {
  })
