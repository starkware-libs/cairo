//! > Simple match

//! > test_runner_name
test_create_graph(expect_diagnostics: false)

//! > function_code
fn foo(color: Color) -> felt252 {
    match color {
        Color::Red | Color::Green(_) => 1,
        Color::Red(_) | Color::Blue => 2,
        _ => 3,
    }
}

//! > module_code
enum Color {
    Red,
    Green,
    Blue,
    Black,
    White,
}

//! > graph
Root: 4
0 ArmExpr { expr: ExprId(1) }
1 ArmExpr { expr: ExprId(2) }
2 ArmExpr { expr: ExprId(3) }
3 EnumMatch { matched_var: FlowControlVar { idx: 0 }, variants: (NodeId(0), FlowControlVar { idx: 1 }), (NodeId(0), FlowControlVar { idx: 2 }), (NodeId(1), FlowControlVar { idx: 3 }), (NodeId(2), FlowControlVar { idx: 4 }), (NodeId(2), FlowControlVar { idx: 5 })}
4 EvaluateExpr { expr: ExprId(0), var_id: FlowControlVar { idx: 0 }, next: NodeId(3) }

//! > semantic_diagnostics

//! > lowered
Parameters: v0: test::Color
blk0 (root):
Statements:
End:
  Match(match_enum(v0) {
    Color::Red(v1) => blk1,
    Color::Green(v2) => blk2,
    Color::Blue(v3) => blk3,
    Color::Black(v4) => blk4,
    Color::White(v5) => blk5,
  })

blk1:
Statements:
End:
  Goto(blk7, {})

blk2:
Statements:
End:
  Goto(blk7, {})

blk3:
Statements:
  (v7: core::felt252) <- 2
End:
  Goto(blk8, {v7 -> v9})

blk4:
Statements:
End:
  Goto(blk6, {})

blk5:
Statements:
End:
  Goto(blk6, {})

blk6:
Statements:
  (v6: core::felt252) <- 3
End:
  Goto(blk8, {v6 -> v9})

blk7:
Statements:
  (v8: core::felt252) <- 1
End:
  Goto(blk8, {v8 -> v9})

blk8:
Statements:
End:
  Return(v9)

//! > ==========================================================================

//! > Match with pattern binding

//! > test_runner_name
test_create_graph(expect_diagnostics: false)

//! > function_code
fn foo(color: Color) -> felt252 {
    match color {
        Color::Red(x) | Color::Green(x) => 2 * x,
        Color::Blue(x) => x,
        _ => 0,
    }
}

//! > module_code
enum Color {
    Red: felt252,
    Green: felt252,
    Blue: felt252,
    Black,
}

//! > graph
Root: 7
0 ArmExpr { expr: ExprId(3) }
1 ArmExpr { expr: ExprId(4) }
2 ArmExpr { expr: ExprId(5) }
3 BindVar { input: FlowControlVar { idx: 1 }, output: PatternVarId(0), next: NodeId(0) }
4 BindVar { input: FlowControlVar { idx: 2 }, output: PatternVarId(1), next: NodeId(0) }
5 BindVar { input: FlowControlVar { idx: 3 }, output: PatternVarId(2), next: NodeId(1) }
6 EnumMatch { matched_var: FlowControlVar { idx: 0 }, variants: (NodeId(3), FlowControlVar { idx: 1 }), (NodeId(4), FlowControlVar { idx: 2 }), (NodeId(5), FlowControlVar { idx: 3 }), (NodeId(2), FlowControlVar { idx: 4 })}
7 EvaluateExpr { expr: ExprId(0), var_id: FlowControlVar { idx: 0 }, next: NodeId(6) }

//! > semantic_diagnostics

//! > lowered
Parameters: v0: test::Color
blk0 (root):
Statements:
End:
  Match(match_enum(v0) {
    Color::Red(v1) => blk1,
    Color::Green(v2) => blk2,
    Color::Blue(v3) => blk3,
    Color::Black(v4) => blk4,
  })

blk1:
Statements:
End:
  Goto(blk5, {v1 -> v6})

blk2:
Statements:
End:
  Goto(blk5, {v2 -> v6})

blk3:
Statements:
End:
  Goto(blk6, {v3 -> v9})

blk4:
Statements:
  (v5: core::felt252) <- 0
End:
  Goto(blk6, {v5 -> v9})

blk5:
Statements:
  (v7: core::felt252) <- 2
  (v8: core::felt252) <- core::Felt252Mul::mul(v7, v6)
End:
  Goto(blk6, {v8 -> v9})

blk6:
Statements:
End:
  Return(v9)
