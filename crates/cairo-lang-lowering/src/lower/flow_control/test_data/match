//! > Simple match

//! > test_runner_name
test_create_graph(expect_diagnostics: false)

//! > function_code
fn foo(color: Color) -> felt252 {
    match color {
        Color::Red | Color::Green(_) => 1,
        Color::Red(_) | Color::Blue => 2,
        _ => 3,
    }
}

//! > module_code
enum Color {
    Red,
    Green,
    Blue,
    Black,
    White,
}

//! > graph
Root: 4
0 ArmExpr { expr: ExprId(1) }
1 ArmExpr { expr: ExprId(2) }
2 ArmExpr { expr: ExprId(3) }
3 EnumMatch { matched_var: v0, variants: (NodeId(0), v1), (NodeId(0), v2), (NodeId(1), v3), (NodeId(2), v4), (NodeId(2), v5)}
4 EvaluateExpr { expr: ExprId(0), var_id: v0, next: NodeId(3) }

//! > semantic_diagnostics

//! > lowered
Parameters: v0: test::Color
blk0 (root):
Statements:
End:
  Match(match_enum(v0) {
    Color::Red(v1) => blk1,
    Color::Green(v2) => blk2,
    Color::Blue(v3) => blk3,
    Color::Black(v4) => blk4,
    Color::White(v5) => blk5,
  })

blk1:
Statements:
End:
  Goto(blk7, {})

blk2:
Statements:
End:
  Goto(blk7, {})

blk3:
Statements:
  (v7: core::felt252) <- 2
End:
  Goto(blk8, {v7 -> v9})

blk4:
Statements:
End:
  Goto(blk6, {})

blk5:
Statements:
End:
  Goto(blk6, {})

blk6:
Statements:
  (v6: core::felt252) <- 3
End:
  Goto(blk8, {v6 -> v9})

blk7:
Statements:
  (v8: core::felt252) <- 1
End:
  Goto(blk8, {v8 -> v9})

blk8:
Statements:
End:
  Return(v9)

//! > ==========================================================================

//! > Match with pattern binding

//! > test_runner_name
test_create_graph(expect_diagnostics: false)

//! > function_code
fn foo(color: Color) -> felt252 {
    match color {
        Color::Red(x) | Color::Green(x) => 2 * x,
        Color::Blue(x) => x,
        _ => 0,
    }
}

//! > module_code
enum Color {
    Red: felt252,
    Green: felt252,
    Blue: felt252,
    Black,
}

//! > graph
Root: 7
0 ArmExpr { expr: ExprId(3) }
1 ArmExpr { expr: ExprId(4) }
2 ArmExpr { expr: ExprId(5) }
3 BindVar { input: v1, output: PatternVarId(0), next: NodeId(0) }
4 BindVar { input: v2, output: PatternVarId(1), next: NodeId(0) }
5 BindVar { input: v3, output: PatternVarId(2), next: NodeId(1) }
6 EnumMatch { matched_var: v0, variants: (NodeId(3), v1), (NodeId(4), v2), (NodeId(5), v3), (NodeId(2), v4)}
7 EvaluateExpr { expr: ExprId(0), var_id: v0, next: NodeId(6) }

//! > semantic_diagnostics

//! > lowered
Parameters: v0: test::Color
blk0 (root):
Statements:
End:
  Match(match_enum(v0) {
    Color::Red(v1) => blk1,
    Color::Green(v2) => blk2,
    Color::Blue(v3) => blk3,
    Color::Black(v4) => blk4,
  })

blk1:
Statements:
End:
  Goto(blk5, {v1 -> v6})

blk2:
Statements:
End:
  Goto(blk5, {v2 -> v6})

blk3:
Statements:
End:
  Goto(blk6, {v3 -> v9})

blk4:
Statements:
  (v5: core::felt252) <- 0
End:
  Goto(blk6, {v5 -> v9})

blk5:
Statements:
  (v7: core::felt252) <- 2
  (v8: core::felt252) <- core::Felt252Mul::mul(v7, v6)
End:
  Goto(blk6, {v8 -> v9})

blk6:
Statements:
End:
  Return(v9)

//! > ==========================================================================

//! > Tuple of enums

//! > test_runner_name
test_create_graph(expect_diagnostics: false)

//! > function_code
fn foo(color: (Color, Color)) -> felt252 {
    match color {
        (Color::Red, _) => 1,
        (_, Color::Red) => 2,
        _ => 3,
    }
}

//! > module_code
enum Color {
    Red,
    Green,
    Blue,
}

//! > graph
Root: 6
0 ArmExpr { expr: ExprId(1) }
1 ArmExpr { expr: ExprId(2) }
2 ArmExpr { expr: ExprId(3) }
3 EnumMatch { matched_var: v2, variants: (NodeId(1), v8), (NodeId(2), v9), (NodeId(2), v10)}
4 EnumMatch { matched_var: v1, variants: (NodeId(0), v3), (NodeId(3), v7), (NodeId(3), v11)}
5 Deconstruct { input: v0, outputs: [v1, v2], next: NodeId(4) }
6 EvaluateExpr { expr: ExprId(0), var_id: v0, next: NodeId(5) }

//! > semantic_diagnostics

//! > lowered
Parameters: v0: (test::Color, test::Color)
blk0 (root):
Statements:
  (v1: test::Color, v2: test::Color) <- struct_destructure(v0)
End:
  Match(match_enum(v1) {
    Color::Red(v3) => blk1,
    Color::Green(v4) => blk2,
    Color::Blue(v5) => blk3,
  })

blk1:
Statements:
  (v11: core::felt252) <- 1
End:
  Goto(blk9, {v11 -> v12})

blk2:
Statements:
End:
  Goto(blk4, {})

blk3:
Statements:
End:
  Goto(blk4, {})

blk4:
Statements:
End:
  Match(match_enum(v2) {
    Color::Red(v6) => blk5,
    Color::Green(v7) => blk6,
    Color::Blue(v8) => blk7,
  })

blk5:
Statements:
  (v10: core::felt252) <- 2
End:
  Goto(blk9, {v10 -> v12})

blk6:
Statements:
End:
  Goto(blk8, {})

blk7:
Statements:
End:
  Goto(blk8, {})

blk8:
Statements:
  (v9: core::felt252) <- 3
End:
  Goto(blk9, {v9 -> v12})

blk9:
Statements:
End:
  Return(v12)

//! > ==========================================================================

//! > Tuple inside enum

//! > test_runner_name
test_create_graph(expect_diagnostics: false, skip_lowering: true)

//! > function_code
fn foo(color: Option<(Color, Color)>) -> felt252 {
    match color {
        Some((Color::Red, _)) | None => 1,
        Some((_, Color::Red)) => 2,
        _ => 3,
    }
}

//! > module_code
enum Color {
    Red,
    Green,
}

//! > graph
Root: 7
0 ArmExpr { expr: ExprId(1) }
1 ArmExpr { expr: ExprId(2) }
2 ArmExpr { expr: ExprId(3) }
3 EnumMatch { matched_var: v3, variants: (NodeId(1), v8), (NodeId(2), v9)}
4 EnumMatch { matched_var: v2, variants: (NodeId(0), v4), (NodeId(3), v7)}
5 Deconstruct { input: v1, outputs: [v2, v3], next: NodeId(4) }
6 EnumMatch { matched_var: v0, variants: (NodeId(5), v1), (NodeId(0), v10)}
7 EvaluateExpr { expr: ExprId(0), var_id: v0, next: NodeId(6) }

//! > semantic_diagnostics

//! > lowered

//! > ==========================================================================

//! > Complex enum inside tuple

//! > test_runner_name
test_create_graph(expect_diagnostics: false, skip_lowering: true)

//! > function_code
fn foo(color: (Option<Color>, Color)) -> felt252 {
    match color {
        (Some(Color::Red), Color::Red) | (Some(Color::Green), Color::Red) | (None, Color::Red) => 1,
        (_, Color::Green) => 2,
        _ => 3,
    }
}

//! > module_code
enum Color {
    Red,
    Green,
    Blue,
}

//! > graph
Root: 10
0 ArmExpr { expr: ExprId(1) }
1 ArmExpr { expr: ExprId(2) }
2 ArmExpr { expr: ExprId(3) }
3 EnumMatch { matched_var: v2, variants: (NodeId(0), v5), (NodeId(1), v6), (NodeId(2), v7)}
4 EnumMatch { matched_var: v2, variants: (NodeId(0), v9), (NodeId(1), v10), (NodeId(2), v11)}
5 EnumMatch { matched_var: v2, variants: (NodeId(2), v13), (NodeId(1), v14), (NodeId(2), v15)}
6 EnumMatch { matched_var: v3, variants: (NodeId(3), v4), (NodeId(4), v8), (NodeId(5), v12)}
7 EnumMatch { matched_var: v2, variants: (NodeId(0), v17), (NodeId(1), v18), (NodeId(2), v19)}
8 EnumMatch { matched_var: v1, variants: (NodeId(6), v3), (NodeId(7), v16)}
9 Deconstruct { input: v0, outputs: [v1, v2], next: NodeId(8) }
10 EvaluateExpr { expr: ExprId(0), var_id: v0, next: NodeId(9) }

//! > semantic_diagnostics

//! > lowered

//! > ==========================================================================

//! > Single variant enum

//! > test_runner_name
test_create_graph(expect_diagnostics: false, skip_lowering: true)

//! > function_code
// Tests that the same-node optimization is not applied when the inner value is used (for
// future match or pattern binding).
fn foo(x: Enum1) -> felt252 {
    match x {
        Enum1::A(Enum2::B(x)) => x,
    }
}

//! > module_code
enum Enum1 {
    A: Enum2,
}

enum Enum2 {
    B: felt252,
}

//! > graph
Root: 4
0 ArmExpr { expr: ExprId(1) }
1 BindVar { input: v2, output: PatternVarId(0), next: NodeId(0) }
2 EnumMatch { matched_var: v1, variants: (NodeId(1), v2)}
3 EnumMatch { matched_var: v0, variants: (NodeId(2), v1)}
4 EvaluateExpr { expr: ExprId(0), var_id: v0, next: NodeId(3) }

//! > semantic_diagnostics

//! > lowered
