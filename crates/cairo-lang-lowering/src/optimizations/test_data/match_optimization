//! > ref argument remapping with return.

//! > test_runner_name
test_match_optimizer

//! > function
fn foo(ref a: u32, c: Color) -> Color {
    let c = match c {
        Color::Red(x) => {
            a = 0;
            Color::Red(x)
        },
        Color::Green(x) => Color::Green(x),
        // Map `Blue` to `Green` to check an arm that is reached twice.
        Color::Blue(x) => Color::Green(x),
        Color::White(_) => c,
    };
    match c {
        Color::Red(x) => { return Color::Red(x); },
        Color::Green(x) => { return Color::Green(x); },
        Color::Blue(x) => { return Color::Blue(x); },
        Color::White(x) => { return Color::White(x); },
    }
}

//! > function_name
foo

//! > module_code
#[derive(Copy, Drop)]
enum Color {
    Red: u32,
    Green: u32,
    Blue: u32,
    White: u32,
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > before
Parameters: v0: core::integer::u32, v1: test::Color
blk0 (root):
Statements:
End:
  Match(match_enum(v1) {
    Color::Red(v2) => blk1,
    Color::Green(v3) => blk2,
    Color::Blue(v4) => blk3,
  })

blk1:
Statements:
  (v5: core::integer::u32) <- 0
  (v6: test::Color) <- Color::Red(v2)
End:
  Goto(blk4, {v5 -> v7, v6 -> v8})

blk2:
Statements:
  (v9: core::integer::u32) <- 0
  (v10: test::Color) <- Color::Green(v3)
End:
  Goto(blk4, {v9 -> v7, v10 -> v8})

blk3:
Statements:
End:
  Goto(blk4, {v0 -> v7, v1 -> v8})

blk4:
Statements:
End:
  Match(match_enum(v8) {
    Color::Red(v11) => blk5,
    Color::Green(v12) => blk6,
    Color::Blue(v13) => blk7,
  })

blk5:
Statements:
  (v14: test::Color) <- Color::Red(v11)
End:
  Return(v7, v14)

blk6:
Statements:
  (v15: test::Color) <- Color::Green(v12)
End:
  Return(v7, v15)

blk7:
Statements:
  (v16: test::Color) <- Color::Blue(v13)
End:
  Return(v7, v16)

//! > after
Parameters: v0: core::integer::u32, v1: test::Color
blk0 (root):
Statements:
End:
  Match(match_enum(v1) {
    Color::Red(v2) => blk1,
    Color::Green(v3) => blk2,
    Color::Blue(v4) => blk3,
  })

blk1:
Statements:
  (v5: core::integer::u32) <- 0
End:
  Goto(blk5, {v2 -> v11, v5 -> v17})

blk2:
Statements:
  (v9: core::integer::u32) <- 0
End:
  Goto(blk6, {v3 -> v12, v9 -> v19})

blk3:
Statements:
End:
  Goto(blk4, {v0 -> v7, v1 -> v8})

blk4:
Statements:
End:
  Match(match_enum(v8) {
    Color::Red(v18) => blk8,
    Color::Green(v20) => blk9,
    Color::Blue(v13) => blk7,
  })

blk5:
Statements:
  (v14: test::Color) <- Color::Red(v11)
End:
  Return(v17, v14)

blk6:
Statements:
  (v15: test::Color) <- Color::Green(v12)
End:
  Return(v19, v15)

blk7:
Statements:
  (v16: test::Color) <- Color::Blue(v13)
End:
  Return(v7, v16)

blk8:
Statements:
End:
  Goto(blk5, {v18 -> v11, v7 -> v17})

blk9:
Statements:
End:
  Goto(blk6, {v20 -> v12, v7 -> v19})
