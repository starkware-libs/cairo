//! > Test return optimizer simple scenario.

//! > test_runner_name
test_return_optimizer

//! > function
fn foo(ref a: (), v: Option<u16>) -> Option<u16> {
   match v {
        Option::Some(x) => { return Option::Some(x); },
        Option::None => { return Option::None; },
   }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > before
Parameters: v0: (), v1: core::option::Option::<core::integer::u16>
blk0 (root):
Statements:
End:
  Match(match_enum(v1) {
    Option::Some(v2) => blk1,
    Option::None(v3) => blk2,
  })

blk1:
Statements:
  (v4: core::option::Option::<core::integer::u16>) <- Option::Some(v2)
End:
  Return(v0, v4)

blk2:
Statements:
  (v5: ()) <- struct_construct()
  (v6: core::option::Option::<core::integer::u16>) <- Option::None(v5)
End:
  Return(v0, v6)

//! > after
Parameters: v0: (), v1: core::option::Option::<core::integer::u16>
blk0 (root):
Statements:
End:
  Return(v0, v1)

blk1:
Statements:
  (v4: core::option::Option::<core::integer::u16>) <- Option::Some(v2)
End:
  Return(v0, v4)

blk2:
Statements:
  (v5: ()) <- struct_construct()
  (v6: core::option::Option::<core::integer::u16>) <- Option::None(v5)
End:
  Return(v0, v6)

//! > ==========================================================================

//! > Test that the optimization is skipped if a ref argument is modified.

//! > test_runner_name
test_return_optimizer

//! > function
fn foo(ref a: (), v: Option<u16>) -> Option<u16> {
   match v {
        Option::Some(x) => {
          a = ();
          return Option::Some(x);
        },
        Option::None => {
          return Option::None;
        },
   }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > before
Parameters: v0: (), v1: core::option::Option::<core::integer::u16>
blk0 (root):
Statements:
End:
  Match(match_enum(v1) {
    Option::Some(v2) => blk1,
    Option::None(v3) => blk2,
  })

blk1:
Statements:
  (v4: ()) <- struct_construct()
  (v5: core::option::Option::<core::integer::u16>) <- Option::Some(v2)
End:
  Return(v4, v5)

blk2:
Statements:
  (v6: ()) <- struct_construct()
  (v7: core::option::Option::<core::integer::u16>) <- Option::None(v6)
End:
  Return(v0, v7)

//! > after
Parameters: v0: (), v1: core::option::Option::<core::integer::u16>
blk0 (root):
Statements:
End:
  Match(match_enum(v1) {
    Option::Some(v2) => blk1,
    Option::None(v3) => blk2,
  })

blk1:
Statements:
  (v4: ()) <- struct_construct()
  (v5: core::option::Option::<core::integer::u16>) <- Option::Some(v2)
End:
  Return(v4, v5)

blk2:
Statements:
  (v6: ()) <- struct_construct()
  (v7: core::option::Option::<core::integer::u16>) <- Option::None(v6)
End:
  Return(v0, v7)

//! > ==========================================================================

//! > Test optimization with remappings (not working yet).

//! > test_runner_name
test_return_optimizer

//! > function
fn foo(v: Option<u16>) -> Option<u16> {
   match v {
      Option::Some(x) => Option::Some(x),
      Option::None => Option::None,
   }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > before
Parameters: v0: core::option::Option::<core::integer::u16>
blk0 (root):
Statements:
End:
  Match(match_enum(v0) {
    Option::Some(v1) => blk1,
    Option::None(v2) => blk2,
  })

blk1:
Statements:
  (v3: core::option::Option::<core::integer::u16>) <- Option::Some(v1)
End:
  Goto(blk3, {v3 -> v6})

blk2:
Statements:
  (v4: ()) <- struct_construct()
  (v5: core::option::Option::<core::integer::u16>) <- Option::None(v4)
End:
  Goto(blk3, {v5 -> v6})

blk3:
Statements:
End:
  Return(v6)

//! > after
Parameters: v0: core::option::Option::<core::integer::u16>
blk0 (root):
Statements:
End:
  Match(match_enum(v0) {
    Option::Some(v1) => blk1,
    Option::None(v2) => blk2,
  })

blk1:
Statements:
  (v3: core::option::Option::<core::integer::u16>) <- Option::Some(v1)
End:
  Goto(blk3, {v3 -> v6})

blk2:
Statements:
  (v4: ()) <- struct_construct()
  (v5: core::option::Option::<core::integer::u16>) <- Option::None(v4)
End:
  Goto(blk3, {v5 -> v6})

blk3:
Statements:
End:
  Return(v6)
