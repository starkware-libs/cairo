//! > Test match optimizer simple scenario.

//! > test_runner_name
test_match_optimizer

//! > function
fn foo(a: u64, b: u64) -> bool {
    a < b
}

//! > function_name
foo

//! > module_code
extern fn get_option() -> Option<u16> nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > before
Parameters: v0: core::integer::u64, v1: core::integer::u64
blk0 (root):
Statements:
End:
  Match(match core::integer::u64_overflowing_sub(v0, v1) {
    Result::Ok(v3) => blk1,
    Result::Err(v4) => blk2,
  })

blk1:
Statements:
  (v5: core::result::Result::<core::integer::u64, core::integer::u64>) <- Result::Ok(v3)
End:
  Goto(blk3, {v5 -> v6})

blk2:
Statements:
  (v7: core::result::Result::<core::integer::u64, core::integer::u64>) <- Result::Err(v4)
End:
  Goto(blk3, {v7 -> v6})

blk3:
Statements:
  (v8: core::result::Result::<core::integer::u64, core::integer::u64>, v9: @core::result::Result::<core::integer::u64, core::integer::u64>) <- snapshot(v6)
End:
  Match(match_enum(v9) {
    Result::Ok(v11) => blk4,
    Result::Err(v12) => blk5,
  })

blk4:
Statements:
  (v13: ()) <- struct_construct()
  (v14: core::bool) <- bool::False(v13)
End:
  Goto(blk6, {v14 -> v15})

blk5:
Statements:
  (v16: ()) <- struct_construct()
  (v17: core::bool) <- bool::True(v16)
End:
  Goto(blk6, {v17 -> v15})

blk6:
Statements:
End:
  Goto(blk7, {})

blk7:
Statements:
End:
  Goto(blk8, {})

blk8:
Statements:
End:
  Return(v15)

//! > after
Parameters: v0: core::integer::u64, v1: core::integer::u64
blk0 (root):
Statements:
End:
  Match(match core::integer::u64_overflowing_sub(v0, v1) {
    Result::Ok(v3) => blk1,
    Result::Err(v4) => blk2,
  })

blk1:
Statements:
  (v5: core::result::Result::<core::integer::u64, core::integer::u64>) <- Result::Ok(v3)
End:
  Goto(blk3, {v5 -> v6})

blk2:
Statements:
  (v7: core::result::Result::<core::integer::u64, core::integer::u64>) <- Result::Err(v4)
End:
  Goto(blk3, {v7 -> v6})

blk3:
Statements:
  (v8: core::result::Result::<core::integer::u64, core::integer::u64>, v9: @core::result::Result::<core::integer::u64, core::integer::u64>) <- snapshot(v6)
End:
  Match(match_enum(v9) {
    Result::Ok(v11) => blk4,
    Result::Err(v12) => blk5,
  })

blk4:
Statements:
  (v13: ()) <- struct_construct()
  (v14: core::bool) <- bool::False(v13)
End:
  Goto(blk6, {v14 -> v15})

blk5:
Statements:
  (v16: ()) <- struct_construct()
  (v17: core::bool) <- bool::True(v16)
End:
  Goto(blk6, {v17 -> v15})

blk6:
Statements:
End:
  Goto(blk7, {})

blk7:
Statements:
End:
  Goto(blk8, {})

blk8:
Statements:
End:
  Return(v15)
