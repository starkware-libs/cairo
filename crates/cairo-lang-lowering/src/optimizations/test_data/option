//! > Test match optimizer simple scenario.

//! > test_runner_name
test_match_optimizer

//! > function
fn foo() -> Option<u16> {
   let v = get_option();
   match v {
        Option::Some(_) => Option::Some(1_u16),
        Option::None(_) => Option::None(()),
   }
}

//! > function_name
foo

//! > module_code
extern fn get_option() -> Option<u16> nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > before
Parameters:
blk0 (root):
Statements:
End:
  Match(match test::get_option() {
    Option::Some(v0) => blk1,
    Option::None => blk2,
  })

blk1:
Statements:
  (v1: core::option::Option::<core::integer::u16>) <- Option::Some(v0)
End:
  Goto(blk3, {v1 -> v4})

blk2:
Statements:
  (v2: ()) <- struct_construct()
  (v3: core::option::Option::<core::integer::u16>) <- Option::None(v2)
End:
  Goto(blk3, {v3 -> v4})

blk3:
Statements:
End:
  Match(match_enum(v4) {
    Option::Some(v5) => blk4,
    Option::None(v8) => blk5,
  })

blk4:
Statements:
  (v6: core::integer::u16) <- 1u
  (v7: core::option::Option::<core::integer::u16>) <- Option::Some(v6)
End:
  Goto(blk6, {v7 -> v11})

blk5:
Statements:
  (v9: ()) <- struct_construct()
  (v10: core::option::Option::<core::integer::u16>) <- Option::None(v9)
End:
  Goto(blk6, {v10 -> v11})

blk6:
Statements:
End:
  Return(v11)

//! > after
Parameters:
blk0 (root):
Statements:
End:
  Match(match test::get_option() {
    Option::Some(v0) => blk1,
    Option::None => blk3,
  })

blk1:
Statements:
  (v1: core::option::Option::<core::integer::u16>) <- Option::Some(v0)
End:
  Goto(blk2, {v1 -> v4})

blk2:
Statements:
  (v6: core::integer::u16) <- 1u
  (v7: core::option::Option::<core::integer::u16>) <- Option::Some(v6)
End:
  Goto(blk5, {v7 -> v11})

blk3:
Statements:
  (v2: ()) <- struct_construct()
  (v3: core::option::Option::<core::integer::u16>) <- Option::None(v2)
End:
  Goto(blk4, {v3 -> v4})

blk4:
Statements:
  (v9: ()) <- struct_construct()
  (v10: core::option::Option::<core::integer::u16>) <- Option::None(v9)
End:
  Goto(blk5, {v10 -> v11})

blk5:
Statements:
End:
  Return(v11)

//! > ==========================================================================

//! > Test match optimizer in a more complex scenario.

//! > test_runner_name
test_match_optimizer

//! > function
fn foo(a: felt252) -> Option<u16> {
   let v = get_option();

   // The following instruction should block the optimization.
   let a = a + a;
   let v1 = match v {
        Option::Some(_) => Option::Some(1_u16),
        Option::None(_) => Option::None(()),
   };
   match v1 {
        // v1 is used after the match.
        Option::Some(_) => v1,
        Option::None(_) => Option::Some(2_u16),
   }
}

//! > function_name
foo

//! > module_code
use core::integer::u16Drop;
use core::integer::u16Copy;
extern fn get_option() -> Option<u16> nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > before
Parameters: v0: core::felt252
blk0 (root):
Statements:
End:
  Match(match test::get_option() {
    Option::Some(v1) => blk1,
    Option::None => blk2,
  })

blk1:
Statements:
  (v2: core::option::Option::<core::integer::u16>) <- Option::Some(v1)
End:
  Goto(blk3, {v2 -> v5})

blk2:
Statements:
  (v3: ()) <- struct_construct()
  (v4: core::option::Option::<core::integer::u16>) <- Option::None(v3)
End:
  Goto(blk3, {v4 -> v5})

blk3:
Statements:
End:
  Goto(blk11, {})

blk4:
Statements:
  (v8: core::integer::u16) <- 1u
  (v9: core::option::Option::<core::integer::u16>) <- Option::Some(v8)
End:
  Goto(blk6, {v9 -> v13})

blk5:
Statements:
  (v11: ()) <- struct_construct()
  (v12: core::option::Option::<core::integer::u16>) <- Option::None(v11)
End:
  Goto(blk6, {v12 -> v13})

blk6:
Statements:
End:
  Match(match_enum(v13) {
    Option::Some(v14) => blk7,
    Option::None(v15) => blk8,
  })

blk7:
Statements:
End:
  Goto(blk9, {v13 -> v18})

blk8:
Statements:
  (v16: core::integer::u16) <- 2u
  (v17: core::option::Option::<core::integer::u16>) <- Option::Some(v16)
End:
  Goto(blk9, {v17 -> v18})

blk9:
Statements:
End:
  Return(v18)

blk10:
Statements:
End:
  Match(match_enum(v5) {
    Option::Some(v7) => blk4,
    Option::None(v10) => blk5,
  })

blk11:
Statements:
  (v19: core::felt252) <- core::felt252_add(v0, v0)
End:
  Goto(blk10, {v19 -> v6})

//! > after
Parameters: v0: core::felt252
blk0 (root):
Statements:
End:
  Match(match test::get_option() {
    Option::Some(v1) => blk1,
    Option::None => blk2,
  })

blk1:
Statements:
  (v2: core::option::Option::<core::integer::u16>) <- Option::Some(v1)
End:
  Goto(blk3, {v2 -> v5})

blk2:
Statements:
  (v3: ()) <- struct_construct()
  (v4: core::option::Option::<core::integer::u16>) <- Option::None(v3)
End:
  Goto(blk3, {v4 -> v5})

blk3:
Statements:
End:
  Goto(blk4, {})

blk4:
Statements:
  (v19: core::felt252) <- core::felt252_add(v0, v0)
End:
  Goto(blk5, {v19 -> v6})

blk5:
Statements:
End:
  Match(match_enum(v5) {
    Option::Some(v7) => blk6,
    Option::None(v10) => blk8,
  })

blk6:
Statements:
  (v8: core::integer::u16) <- 1u
  (v9: core::option::Option::<core::integer::u16>) <- Option::Some(v8)
End:
  Goto(blk7, {v9 -> v13})

blk7:
Statements:
End:
  Goto(blk10, {v13 -> v18})

blk8:
Statements:
  (v11: ()) <- struct_construct()
  (v12: core::option::Option::<core::integer::u16>) <- Option::None(v11)
End:
  Goto(blk9, {v12 -> v13})

blk9:
Statements:
  (v16: core::integer::u16) <- 2u
  (v17: core::option::Option::<core::integer::u16>) <- Option::Some(v16)
End:
  Goto(blk10, {v17 -> v18})

blk10:
Statements:
End:
  Return(v18)

//! > ==========================================================================

//! > Test match optimizer after inline

//! > test_runner_name
test_match_optimizer

//! > function
fn foo() -> u16 {
  match bar() {
    Option::Some(x) => x,
    Option::None(()) => {
        17_u16
    },
  }
}

//! > function_name
foo

//! > module_code
extern fn get_option() -> Option<u16> nopanic;

#[inline(always)]
fn bar() -> Option<u16> {
  get_option()
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > before
Parameters:
blk0 (root):
Statements:
End:
  Goto(blk5, {})

blk1:
Statements:
End:
  Goto(blk3, {v1 -> v4})

blk2:
Statements:
  () <- struct_destructure(v2)
  (v3: core::integer::u16) <- 17u
End:
  Goto(blk3, {v3 -> v4})

blk3:
Statements:
End:
  Return(v4)

blk4:
Statements:
End:
  Match(match_enum(v0) {
    Option::Some(v1) => blk1,
    Option::None(v2) => blk2,
  })

blk5:
Statements:
End:
  Match(match test::get_option() {
    Option::Some(v5) => blk6,
    Option::None => blk7,
  })

blk6:
Statements:
  (v6: core::option::Option::<core::integer::u16>) <- Option::Some(v5)
End:
  Goto(blk8, {v6 -> v7})

blk7:
Statements:
  (v8: ()) <- struct_construct()
  (v9: core::option::Option::<core::integer::u16>) <- Option::None(v8)
End:
  Goto(blk8, {v9 -> v7})

blk8:
Statements:
End:
  Goto(blk4, {v7 -> v0})

//! > after
Parameters:
blk0 (root):
Statements:
End:
  Goto(blk1, {})

blk1:
Statements:
End:
  Match(match test::get_option() {
    Option::Some(v5) => blk2,
    Option::None => blk4,
  })

blk2:
Statements:
  (v6: core::option::Option::<core::integer::u16>) <- Option::Some(v5)
End:
  Goto(blk3, {v6 -> v0})

blk3:
Statements:
End:
  Goto(blk6, {v1 -> v4})

blk4:
Statements:
  (v8: ()) <- struct_construct()
  (v9: core::option::Option::<core::integer::u16>) <- Option::None(v8)
End:
  Goto(blk5, {v9 -> v0})

blk5:
Statements:
  () <- struct_destructure(v2)
  (v3: core::integer::u16) <- 17u
End:
  Goto(blk6, {v3 -> v4})

blk6:
Statements:
End:
  Return(v4)
