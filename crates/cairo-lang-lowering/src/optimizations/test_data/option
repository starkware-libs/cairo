//! > Test match optimizer simple scenario.

//! > test_runner_name
test_match_optimizer

//! > function
fn foo() -> u16 {
   let opt = get_option();
   match opt {
        Option::Some(v) => v,
        Option::None(_) => 17_u16,
   }
}

//! > function_name
foo

//! > module_code
extern fn get_option() -> Option<u16> nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > before
Parameters:
blk0 (root):
Statements:
End:
  Match(match test::get_option() {
    Option::Some(v0) => blk1,
    Option::None => blk2,
  })

blk1:
Statements:
  (v1: core::option::Option::<core::integer::u16>) <- Option::Some(v0)
End:
  Goto(blk3, {v1 -> v4})

blk2:
Statements:
  (v2: ()) <- struct_construct()
  (v3: core::option::Option::<core::integer::u16>) <- Option::None(v2)
End:
  Goto(blk3, {v3 -> v4})

blk3:
Statements:
End:
  Match(match_enum(v4) {
    Option::Some(v5) => blk4,
    Option::None(v6) => blk5,
  })

blk4:
Statements:
End:
  Goto(blk6, {v5 -> v8})

blk5:
Statements:
  (v7: core::integer::u16) <- 17u
End:
  Goto(blk6, {v7 -> v8})

blk6:
Statements:
End:
  Return(v8)

//! > after
Parameters:
blk0 (root):
Statements:
End:
  Match(match test::get_option() {
    Option::Some(v0) => blk1,
    Option::None => blk3,
  })

blk1:
Statements:
End:
  Goto(blk2, {v0 -> v5})

blk2:
Statements:
End:
  Goto(blk5, {v5 -> v8})

blk3:
Statements:
  (v2: ()) <- struct_construct()
End:
  Goto(blk4, {})

blk4:
Statements:
  (v7: core::integer::u16) <- 17u
End:
  Goto(blk5, {v7 -> v8})

blk5:
Statements:
End:
  Return(v8)

//! > ==========================================================================

//! > Test match optimizer with unused input

//! > test_runner_name
test_match_optimizer

//! > function
fn foo() -> Option<u16> {
   let opt = get_option();
   match opt {
        Option::Some(v) => Option::Some(1_u16),
        Option::None(_) => Option::None(()),
   }
}

//! > function_name
foo

//! > module_code
extern fn get_option() -> Option<u16> nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > before
Parameters:
blk0 (root):
Statements:
End:
  Match(match test::get_option() {
    Option::Some(v0) => blk1,
    Option::None => blk2,
  })

blk1:
Statements:
  (v1: core::option::Option::<core::integer::u16>) <- Option::Some(v0)
End:
  Goto(blk3, {v1 -> v4})

blk2:
Statements:
  (v2: ()) <- struct_construct()
  (v3: core::option::Option::<core::integer::u16>) <- Option::None(v2)
End:
  Goto(blk3, {v3 -> v4})

blk3:
Statements:
End:
  Match(match_enum(v4) {
    Option::Some(v5) => blk4,
    Option::None(v8) => blk5,
  })

blk4:
Statements:
  (v6: core::integer::u16) <- 1u
  (v7: core::option::Option::<core::integer::u16>) <- Option::Some(v6)
End:
  Goto(blk6, {v7 -> v11})

blk5:
Statements:
  (v9: ()) <- struct_construct()
  (v10: core::option::Option::<core::integer::u16>) <- Option::None(v9)
End:
  Goto(blk6, {v10 -> v11})

blk6:
Statements:
End:
  Return(v11)

//! > after
Parameters:
blk0 (root):
Statements:
End:
  Match(match test::get_option() {
    Option::Some(v0) => blk1,
    Option::None => blk3,
  })

blk1:
Statements:
End:
  Goto(blk2, {})

blk2:
Statements:
  (v6: core::integer::u16) <- 1u
  (v7: core::option::Option::<core::integer::u16>) <- Option::Some(v6)
End:
  Goto(blk5, {v7 -> v11})

blk3:
Statements:
  (v2: ()) <- struct_construct()
End:
  Goto(blk4, {})

blk4:
Statements:
  (v9: ()) <- struct_construct()
  (v10: core::option::Option::<core::integer::u16>) <- Option::None(v9)
End:
  Goto(blk5, {v10 -> v11})

blk5:
Statements:
End:
  Return(v11)

//! > ==========================================================================

//! > Test optimiztion not applied due to input variable usage.

//! > test_runner_name
test_match_optimizer

//! > function
fn foo(a: felt) -> Option<u16> {
   let opt = get_option();

   match opt {
        Option::Some(_) => Option::Some(1_u16),
        // The following instruction should block the optimization.
        Option::None(_) => opt,
   }
}

//! > function_name
foo

//! > module_code
extern fn get_option() -> Option<u16> nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > before
Parameters: v0: core::felt
blk0 (root):
Statements:
End:
  Match(match test::get_option() {
    Option::Some(v1) => blk1,
    Option::None => blk2,
  })

blk1:
Statements:
  (v2: core::option::Option::<core::integer::u16>) <- Option::Some(v1)
End:
  Goto(blk3, {v2 -> v5})

blk2:
Statements:
  (v3: ()) <- struct_construct()
  (v4: core::option::Option::<core::integer::u16>) <- Option::None(v3)
End:
  Goto(blk3, {v4 -> v5})

blk3:
Statements:
End:
  Match(match_enum(v5) {
    Option::Some(v6) => blk4,
    Option::None(v9) => blk5,
  })

blk4:
Statements:
  (v7: core::integer::u16) <- 1u
  (v8: core::option::Option::<core::integer::u16>) <- Option::Some(v7)
End:
  Goto(blk6, {v8 -> v10})

blk5:
Statements:
End:
  Goto(blk6, {v5 -> v10})

blk6:
Statements:
End:
  Return(v10)

//! > after
Parameters: v0: core::felt
blk0 (root):
Statements:
End:
  Match(match test::get_option() {
    Option::Some(v1) => blk1,
    Option::None => blk2,
  })

blk1:
Statements:
  (v2: core::option::Option::<core::integer::u16>) <- Option::Some(v1)
End:
  Goto(blk3, {v2 -> v5})

blk2:
Statements:
  (v3: ()) <- struct_construct()
  (v4: core::option::Option::<core::integer::u16>) <- Option::None(v3)
End:
  Goto(blk3, {v4 -> v5})

blk3:
Statements:
End:
  Match(match_enum(v5) {
    Option::Some(v6) => blk4,
    Option::None(v9) => blk5,
  })

blk4:
Statements:
  (v7: core::integer::u16) <- 1u
  (v8: core::option::Option::<core::integer::u16>) <- Option::Some(v7)
End:
  Goto(blk6, {v8 -> v10})

blk5:
Statements:
End:
  Goto(blk6, {v5 -> v10})

blk6:
Statements:
End:
  Return(v10)

//! > ==========================================================================

//! > Test match optimizer after inline

//! > test_runner_name
test_match_optimizer

//! > function
fn foo() -> u16 {
  match bar() {
    Option::Some(x) => x,
    Option::None(()) => {
        17_u16
    },
  }
}

//! > function_name
foo

//! > module_code
extern fn get_option() -> Option<u16> nopanic;

#[inline(always)]
fn bar() -> Option<u16> {
  get_option()
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > before
Parameters:
blk0 (root):
Statements:
End:
  Goto(blk5, {})

blk1:
Statements:
End:
  Goto(blk3, {v1 -> v4})

blk2:
Statements:
  () <- struct_destructure(v2)
  (v3: core::integer::u16) <- 17u
End:
  Goto(blk3, {v3 -> v4})

blk3:
Statements:
End:
  Return(v4)

blk4:
Statements:
End:
  Match(match_enum(v0) {
    Option::Some(v1) => blk1,
    Option::None(v2) => blk2,
  })

blk5:
Statements:
End:
  Match(match test::get_option() {
    Option::Some(v5) => blk6,
    Option::None => blk7,
  })

blk6:
Statements:
  (v6: core::option::Option::<core::integer::u16>) <- Option::Some(v5)
End:
  Goto(blk8, {v6 -> v7})

blk7:
Statements:
  (v8: ()) <- struct_construct()
  (v9: core::option::Option::<core::integer::u16>) <- Option::None(v8)
End:
  Goto(blk8, {v9 -> v7})

blk8:
Statements:
End:
  Goto(blk4, {v7 -> v0})

//! > after
Parameters:
blk0 (root):
Statements:
End:
  Goto(blk1, {})

blk1:
Statements:
End:
  Match(match test::get_option() {
    Option::Some(v5) => blk2,
    Option::None => blk3,
  })

blk2:
Statements:
  (v6: core::option::Option::<core::integer::u16>) <- Option::Some(v5)
End:
  Goto(blk4, {v6 -> v7})

blk3:
Statements:
  (v8: ()) <- struct_construct()
  (v9: core::option::Option::<core::integer::u16>) <- Option::None(v8)
End:
  Goto(blk4, {v9 -> v7})

blk4:
Statements:
End:
  Goto(blk5, {v7 -> v0})

blk5:
Statements:
End:
  Match(match_enum(v0) {
    Option::Some(v1) => blk6,
    Option::None(v2) => blk7,
  })

blk6:
Statements:
End:
  Goto(blk8, {v1 -> v4})

blk7:
Statements:
  () <- struct_destructure(v2)
  (v3: core::integer::u16) <- 17u
End:
  Goto(blk8, {v3 -> v4})

blk8:
Statements:
End:
  Return(v4)

//! > ==========================================================================

//! > Test match where an input is used only in one arm

//! > test_runner_name
test_match_optimizer

//! > function
fn foo(mut input: Array<felt>) -> Array<felt> {
    let option_val = array::array_pop_front(ref input);

    match option_val {
      Option::Some(_) => {},
      Option::None(_) => panic(array::ArrayTrait::new()),
    }

    input
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > before
Parameters: v0: core::array::Array::<core::felt>
blk0 (root):
Statements:
End:
  Match(match core::array::array_pop_front::<core::felt>(v0) {
    Option::Some(v1, v2) => blk1,
    Option::None(v4) => blk2,
  })

blk1:
Statements:
  (v3: core::option::Option::<core::felt>) <- Option::Some(v2)
End:
  Goto(blk3, {v1 -> v8, v3 -> v7})

blk2:
Statements:
  (v5: ()) <- struct_construct()
  (v6: core::option::Option::<core::felt>) <- Option::None(v5)
End:
  Goto(blk3, {v4 -> v8, v6 -> v7})

blk3:
Statements:
End:
  Match(match_enum(v7) {
    Option::Some(v9) => blk4,
    Option::None(v10) => blk5,
  })

blk4:
Statements:
End:
  Goto(blk6, {})

blk5:
Statements:
End:
  Goto(blk8, {})

blk6:
Statements:
End:
  Return(v8)

blk7:
Statements:
End:
  Panic(v11)

blk8:
Statements:
  (v12: core::array::Array::<core::felt>) <- core::array::array_new::<core::felt>()
End:
  Goto(blk7, {v12 -> v11})

//! > after
Parameters: v0: core::array::Array::<core::felt>
blk0 (root):
Statements:
End:
  Match(match core::array::array_pop_front::<core::felt>(v0) {
    Option::Some(v1, v2) => blk1,
    Option::None(v4) => blk4,
  })

blk1:
Statements:
End:
  Goto(blk2, {v1 -> v8})

blk2:
Statements:
End:
  Goto(blk3, {})

blk3:
Statements:
End:
  Return(v8)

blk4:
Statements:
  (v5: ()) <- struct_construct()
End:
  Goto(blk5, {v4 -> v8})

blk5:
Statements:
End:
  Goto(blk6, {})

blk6:
Statements:
  (v12: core::array::Array::<core::felt>) <- core::array::array_new::<core::felt>()
End:
  Goto(blk7, {v12 -> v11})

blk7:
Statements:
End:
  Panic(v11)

//! > ==========================================================================

//! > Test match optimizer aplied twice.

//! > test_runner_name
test_match_optimizer

//! > function
fn foo(mut input: Array<felt>) -> Array<felt> {
    let option_val = input.pop_front();

    match option_val {
      Option::Some(_) => {},
      Option::None(_) => panic(array::ArrayTrait::new()),
    }

    input
}

//! > function_name
foo

//! > module_code
use array::ArrayTrait;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > before
Parameters: v0: core::array::Array::<core::felt>
blk0 (root):
Statements:
End:
  Goto(blk5, {})

blk1:
Statements:
End:
  Goto(blk3, {})

blk2:
Statements:
End:
  Goto(blk10, {})

blk3:
Statements:
End:
  Return(v2)

blk4:
Statements:
End:
  Match(match_enum(v1) {
    Option::Some(v3) => blk1,
    Option::None(v4) => blk2,
  })

blk5:
Statements:
End:
  Match(match core::array::array_pop_front::<core::felt>(v0) {
    Option::Some(v6, v7) => blk6,
    Option::None(v8) => blk7,
  })

blk6:
Statements:
  (v9: core::option::Option::<core::felt>) <- Option::Some(v7)
End:
  Goto(blk8, {v6 -> v10, v9 -> v11})

blk7:
Statements:
  (v12: ()) <- struct_construct()
  (v13: core::option::Option::<core::felt>) <- Option::None(v12)
End:
  Goto(blk8, {v8 -> v10, v13 -> v11})

blk8:
Statements:
End:
  Goto(blk4, {v10 -> v2, v11 -> v1})

blk9:
Statements:
End:
  Panic(v5)

blk10:
Statements:
  (v14: core::array::Array::<core::felt>) <- core::array::array_new::<core::felt>()
End:
  Goto(blk9, {v14 -> v5})

//! > after
Parameters: v0: core::array::Array::<core::felt>
blk0 (root):
Statements:
End:
  Goto(blk1, {})

blk1:
Statements:
End:
  Match(match core::array::array_pop_front::<core::felt>(v0) {
    Option::Some(v6, v7) => blk2,
    Option::None(v8) => blk3,
  })

blk2:
Statements:
  (v9: core::option::Option::<core::felt>) <- Option::Some(v7)
End:
  Goto(blk4, {v6 -> v10, v9 -> v11})

blk3:
Statements:
  (v12: ()) <- struct_construct()
  (v13: core::option::Option::<core::felt>) <- Option::None(v12)
End:
  Goto(blk4, {v8 -> v10, v13 -> v11})

blk4:
Statements:
End:
  Goto(blk5, {v10 -> v2, v11 -> v1})

blk5:
Statements:
End:
  Match(match_enum(v1) {
    Option::Some(v3) => blk6,
    Option::None(v4) => blk8,
  })

blk6:
Statements:
End:
  Goto(blk7, {})

blk7:
Statements:
End:
  Return(v2)

blk8:
Statements:
End:
  Goto(blk9, {})

blk9:
Statements:
  (v14: core::array::Array::<core::felt>) <- core::array::array_new::<core::felt>()
End:
  Goto(blk10, {v14 -> v5})

blk10:
Statements:
End:
  Panic(v5)
