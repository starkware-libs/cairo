//! > Test expansion of a simple starknet contract.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[contract]
mod TestContract {
    fn internal_func() -> felt {
        1
    }

    #[view]
    fn get_something(ref arg: felt, num: felt) -> felt {
        1
    }

    #[external]
    fn set_something(ref arg: felt, num: felt) {
    }
}

//! > generated_cairo_code
#[generated_contract]
mod TestContract {
    fn internal_func() -> felt {
        1
    }

    #[view]
    fn get_something(ref arg: felt, num: felt) -> felt {
        1
    }

    #[external]
    fn set_something(ref arg: felt, num: felt) {
    }


    trait __abi {
    fn get_something(
        ref arg: felt, num: felt
        ) -> felt; fn set_something(
        ref arg: felt, num: felt
    ); }

    mod __external {
        fn get_something(mut data: Array::<felt>) -> Array::<felt> {
            match get_gas() {
                Option::Some(_) => {
                },
                Option::None(_) => {
                    let mut err_data = array_new::<felt>();
                    array_append::<felt>(err_data, 'Out of gas');
                    panic(err_data);
                },
            }

            let mut __arg_arg = match serde::deserialize_felt(data) {
                Option::Some(x) => x,
                Option::None(()) => {
                    let mut err_data = array_new::<felt>();
                    array_append::<felt>(err_data, 'Input too short for arguments');
                    panic(err_data)
                },
            };
            let __arg_num = match serde::deserialize_felt(data) {
                Option::Some(x) => x,
                Option::None(()) => {
                    let mut err_data = array_new::<felt>();
                    array_append::<felt>(err_data, 'Input too short for arguments');
                    panic(err_data)
                },
            };
            if array_len::<felt>(data) != 0_u128 {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array_new::<felt>();
                array_append::<felt>(err_data, 'Input too long for arguments');
                panic(err_data);
            }
            let res = super::get_something(__arg_arg, __arg_num);
            let mut arr = array_new::<felt>();
            serde::serialize_felt(arr, __arg_arg);
            serde::serialize_felt(arr, res)
            arr
        }
        fn set_something(mut data: Array::<felt>) -> Array::<felt> {
            match get_gas() {
                Option::Some(_) => {
                },
                Option::None(_) => {
                    let mut err_data = array_new::<felt>();
                    array_append::<felt>(err_data, 'Out of gas');
                    panic(err_data);
                },
            }

            let mut __arg_arg = match serde::deserialize_felt(data) {
                Option::Some(x) => x,
                Option::None(()) => {
                    let mut err_data = array_new::<felt>();
                    array_append::<felt>(err_data, 'Input too short for arguments');
                    panic(err_data)
                },
            };
            let __arg_num = match serde::deserialize_felt(data) {
                Option::Some(x) => x,
                Option::None(()) => {
                    let mut err_data = array_new::<felt>();
                    array_append::<felt>(err_data, 'Input too short for arguments');
                    panic(err_data)
                },
            };
            if array_len::<felt>(data) != 0_u128 {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array_new::<felt>();
                array_append::<felt>(err_data, 'Input too long for arguments');
                panic(err_data);
            }
            super::set_something(__arg_arg, __arg_num);
            let mut arr = array_new::<felt>();
            serde::serialize_felt(arr, __arg_arg);

            arr
        }
    }
}

//! > expected_diagnostics
