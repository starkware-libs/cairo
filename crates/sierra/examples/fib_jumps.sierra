type int = int;
type GasBuiltin = GasBuiltin;
type NonZeroInt = NonZero<int>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc store_temp_int = store_temp<int>;
libfunc store_temp_nz_int = store_temp<NonZeroInt>;
libfunc store_temp_gb = store_temp<GasBuiltin>;
libfunc rename_int = rename<int>;
libfunc int_const_1 = int_const<1>;
libfunc int_const_minus_1 = int_const<-1>;
libfunc int_add = int_add;
libfunc int_sub_1 = int_sub<1>;
libfunc int_dup = dup<int>;
libfunc int_drop = drop<int>;
libfunc int_jump_nz = int_jump_nz;
libfunc int_unwrap_nz = unwrap_nz<int>;
libfunc get_gas = get_gas;
libfunc refund_gas = refund_gas;

revoke_ap_tracking() -> ();
// Statement #  1 - tests if n == 0.
int_jump_nz(n) { fallthrough() 7(n) };
// Statement #  2 - n == 0, so we return updated gb and 1.
refund_gas(gb) -> (gb);
store_temp_gb(gb) -> (gb);
int_const_1() -> (one);
store_temp_int(one) -> (one);
return(gb, one);
// Statement #  7 - Calculates n - 1 and tests if n - 1 == 0.
int_unwrap_nz(n) -> (n);
int_sub_1(n) -> (n);
store_temp_int(n) -> (n);
int_jump_nz(n) { fallthrough() 16(n) };
// Statement # 11  - n == 1, so we return updated gb and 1.
refund_gas(gb) -> (gb);
store_temp_gb(gb) -> (gb);
int_const_1() -> (one);
store_temp_int(one) -> (one);
return(gb, one);
// Statement # 16
// Setting up the latest memory to be of the form [b=1, _, n=n-1, gb, a=1].
int_const_1() -> (b);
store_temp_int(b) -> (b);
store_temp_nz_int(n) -> (n); // Adding a value to local memory for alignment with the main loop.
store_temp_nz_int(n) -> (n);
store_temp_gb(gb) -> (gb);
int_const_1() -> (a);
store_temp_int(a) -> (a);
// Statement # 23 - Getting gas for the main loop.
get_gas(gb) { 33(gb) fallthrough(gb) };
// Statement # 24  - Ran out of gas - returning updated gb and -1.
int_drop(a) -> ();
int_drop(b) -> ();
int_unwrap_nz(n) -> (n);
int_drop(n) -> ();
refund_gas(gb) -> (gb); // Statement 27.
store_temp_gb(gb) -> (gb);
int_const_minus_1() -> (err);
store_temp_int(err) -> (err);
return(gb, err);
// Statement # 33
// The main loop - given [b, _, n, gb, a, _] - adds [n-1, updated_gb, a+b]
// Memory cells form is now [b'=a, _, n'=n-1, gb'=updated_gb, a'=a+b]
int_dup(a) -> (a, prev_a);
int_add(a, b) -> (a);
rename_int(prev_a) -> (b);
int_unwrap_nz(n) -> (n);
int_sub_1(n) -> (n);
store_temp_int(n) -> (n);
store_temp_gb(gb) -> (gb);
store_temp_int(a) -> (a);
int_jump_nz(n) { fallthrough() 23(n) };
// Statement # 42 - n == 0, so we can return the latest a.
int_drop(b) -> ();
refund_gas(gb) -> (gb); // Statement 43.
store_temp_gb(gb) -> (gb);
store_temp_int(a) -> (a);
return(gb, a);

Fibonacci@0(gb: GasBuiltin, n: int) -> (GasBuiltin, int);
