//! > Test completion for methods with parameters showing additional info.

//! > test_runner_name
test_completions_text_edits

//! > cairo_project.toml
[crate_roots]
hello = "src"

[config.global]
edition = "2024_07"

//! > cairo_code
mod hidden_trait {
    /// Trait representing a method with parameters.
    pub trait ATrait1<T> {
        /// Executes some method with two parameters.
        ///
        /// # Parameters
        /// - `param1`: The first parameter as `i32`.
        /// - `param2`: The second parameter as `String`.
        fn some_method(self: @T, param1: i32, param2: String);
    }
    impl Felt252ATraitImpl of ATrait1<felt252> {
        fn some_method(self: @felt252, param1: i32, param2: String) {}
    }
}

use hidden_trait::ATrait1;

mod inner_mod {
    fn main() {
        let x = 5_felt252;
        x.some_method<caret>
    }
}

//! > Completions #0
        x.some_method<caret>
--------------------------
Completion: add_eq()
use core::traits::AddEq;
 --------------------------
Completion: sub_eq()
use core::traits::SubEq;
 --------------------------
Completion: mul_eq()
use core::traits::MulEq;
 --------------------------
Completion: into()
 --------------------------
Completion: try_into()
 --------------------------
Completion: destruct()
 --------------------------
Completion: panic_destruct()
 --------------------------
Completion: new_inputs()
use core::circuit::CircuitInputs;
 --------------------------
Completion: get_descriptor()
 --------------------------
Completion: clone()
 --------------------------
Completion: is_zero()
use core::num::traits::Zero;
 --------------------------
Completion: is_non_zero()
use core::num::traits::Zero;
 --------------------------
Completion: is_one()
use core::num::traits::One;
 --------------------------
Completion: is_non_one()
use core::num::traits::One;
 --------------------------
Completion: add_assign()
use core::ops::AddAssign;
 --------------------------
Completion: sub_assign()
use core::ops::SubAssign;
 --------------------------
Completion: mul_assign()
use core::ops::MulAssign;
 --------------------------
Completion: serialize()
 --------------------------
Completion: print()
 --------------------------
Completion: fmt()
use core::fmt::Display;
 --------------------------
Completion: fmt()
use core::fmt::Debug;
 --------------------------
Completion: fmt()
use core::fmt::LowerHex;
 --------------------------
Completion: is_zero()
 --------------------------
Completion: is_non_zero()
 --------------------------
Completion: append_formatted_to_byte_array()
use core::to_byte_array::AppendFormattedToByteArray;
 --------------------------
Completion: format_as_byte_array()
use core::to_byte_array::FormatAsByteArray;
 --------------------------
Completion: some_method()
use super::ATrait1;

//! > ==========================================================================

//! > Test completion for methods without parameters showing additional info.

//! > test_runner_name
test_completions_text_edits

//! > cairo_project.toml
[crate_roots]
hello = "src"

[config.global]
edition = "2024_07"

//! > cairo_code
mod hidden_trait {
    /// Trait representing a method without parameters.
    pub trait ATrait2<T> {
        /// Executes a method that doesn't require parameters.
        fn no_param_method(self: @T);
    }
    impl Felt252ATraitImpl of ATrait2<felt252> {
        fn no_param_method(self: @felt252) {}
    }
}

use hidden_trait::ATrait2;

mod inner_mod {
    fn main() {
        let x = 5_felt252;
        x.no_param_method<caret>
    }
}

//! > Completions #0
        x.no_param_method<caret>
--------------------------
Completion: add_eq()
use core::traits::AddEq;
 --------------------------
Completion: sub_eq()
use core::traits::SubEq;
 --------------------------
Completion: mul_eq()
use core::traits::MulEq;
 --------------------------
Completion: into()
 --------------------------
Completion: try_into()
 --------------------------
Completion: destruct()
 --------------------------
Completion: panic_destruct()
 --------------------------
Completion: new_inputs()
use core::circuit::CircuitInputs;
 --------------------------
Completion: get_descriptor()
 --------------------------
Completion: clone()
 --------------------------
Completion: is_zero()
use core::num::traits::Zero;
 --------------------------
Completion: is_non_zero()
use core::num::traits::Zero;
 --------------------------
Completion: is_one()
use core::num::traits::One;
 --------------------------
Completion: is_non_one()
use core::num::traits::One;
 --------------------------
Completion: add_assign()
use core::ops::AddAssign;
 --------------------------
Completion: sub_assign()
use core::ops::SubAssign;
 --------------------------
Completion: mul_assign()
use core::ops::MulAssign;
 --------------------------
Completion: serialize()
 --------------------------
Completion: print()
 --------------------------
Completion: fmt()
use core::fmt::Display;
 --------------------------
Completion: fmt()
use core::fmt::Debug;
 --------------------------
Completion: fmt()
use core::fmt::LowerHex;
 --------------------------
Completion: is_zero()
 --------------------------
Completion: is_non_zero()
 --------------------------
Completion: append_formatted_to_byte_array()
use core::to_byte_array::AppendFormattedToByteArray;
 --------------------------
Completion: format_as_byte_array()
use core::to_byte_array::FormatAsByteArray;
 --------------------------
Completion: no_param_method()
use super::ATrait2;

