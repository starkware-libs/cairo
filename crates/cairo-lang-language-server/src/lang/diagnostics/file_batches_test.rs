use super::make_batches;

#[test]
fn test_make_batches() {
    check(&[], &[], 3, &[&[], &[], &[]]);
    check(&[1], &[], 3, &[&[1], &[], &[]]);
    check(&[], &[11], 3, &[&[11], &[], &[]]);
    check(&[1], &[11], 3, &[&[1], &[11], &[]]);
    check(&[1, 2], &[11], 3, &[&[1], &[2], &[11]]);
    check(&[1, 2, 3, 4, 5, 6], &[11, 12, 13, 14, 15, 16], 3, &[
        &[1, 4, 11, 14],
        &[2, 5, 12, 15],
        &[3, 6, 13, 16],
    ]);

    check(&[1, 2, 3, 4, 5, 6, 7], &[11, 12, 13, 14, 15, 16], 3, &[
        &[1, 4, 7, 13, 16],
        &[2, 5, 11, 14],
        &[3, 6, 12, 15],
    ]);
    check(&[1, 2, 3, 4, 5, 6], &[11, 12, 13, 14, 15, 16, 17], 3, &[
        &[1, 4, 11, 14, 17],
        &[2, 5, 12, 15],
        &[3, 6, 13, 16],
    ]);
    check(&[1, 2, 3, 4, 5, 6, 7], &[11, 12, 13, 14, 15, 16, 17], 3, &[
        &[1, 4, 7, 13, 16],
        &[2, 5, 11, 14, 17],
        &[3, 6, 12, 15],
    ]);

    fn check(primary: &[i32], secondary: &[i32], n: usize, expected: &[&[i32]]) {
        let chunks = make_batches(primary.to_vec(), secondary.to_vec(), n.try_into().unwrap());
        assert_eq!(chunks, expected.iter().map(|&chunk| chunk.to_vec()).collect::<Vec<_>>());
    }
}
