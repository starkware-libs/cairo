//! > Test simple macro definition

//! > test_runner_name
test_partial_parser_tree(expect_diagnostics: false)

//! > cairo_code
macro macro_name {
    () => {
        2 + $placeholder
    };
}

//! > top_level_kind

//! > ignored_kinds

//! > expected_diagnostics

//! > expected_tree
└── root (kind: SyntaxFile)
    ├── items (kind: ModuleItemList)
    │   └── child #0 (kind: ItemMacroDeclaration)
    │       ├── attributes (kind: AttributeList) []
    │       ├── visibility (kind: VisibilityDefault) []
    │       ├── macro_kw (kind: TokenMacro): 'macro'
    │       ├── name (kind: TokenIdentifier): 'macro_name'
    │       ├── lbrace (kind: TokenLBrace): '{'
    │       ├── rules (kind: MacroRulesList)
    │       │   └── child #0 (kind: MacroRule)
    │       │       ├── lhs (kind: ParenthesizedMacroMatcher)
    │       │       │   ├── lparen (kind: TokenLParen): '('
    │       │       │   ├── elements (kind: MacroRuleElements) []
    │       │       │   └── rparen (kind: TokenRParen): ')'
    │       │       ├── fat_arrow (kind: TokenMatchArrow): '=>'
    │       │       ├── rhs (kind: ExprBlock)
    │       │       │   ├── lbrace (kind: TokenLBrace): '{'
    │       │       │   ├── statements (kind: StatementList)
    │       │       │   │   └── child #0 (kind: StatementExpr)
    │       │       │   │       ├── attributes (kind: AttributeList) []
    │       │       │   │       ├── expr (kind: ExprBinary)
    │       │       │   │       │   ├── lhs (kind: TokenLiteralNumber): '2'
    │       │       │   │       │   ├── op (kind: TokenPlus): '+'
    │       │       │   │       │   └── rhs (kind: ExprPlaceholder)
    │       │       │   │       │       ├── dollar (kind: TokenDollar): '$'
    │       │       │   │       │       └── name (kind: TokenIdentifier): 'placeholder'
    │       │       │   │       └── semicolon (kind: OptionTerminalSemicolonEmpty) []
    │       │       │   └── rbrace (kind: TokenRBrace): '}'
    │       │       └── semicolon (kind: TokenSemicolon): ';'
    │       └── rbrace (kind: TokenRBrace): '}'
    └── eof (kind: TokenEndOfFile).

//! > ==========================================================================

//! > Test macro definition with several rules

//! > test_runner_name
test_partial_parser_tree(expect_diagnostics: false)

//! > cairo_code
macro macro_name {
    () => {
        2 + $placeholder
    };

    ($x:ident x + y) => {
        2 + $x
    };
}

//! > top_level_kind

//! > ignored_kinds

//! > expected_diagnostics

//! > expected_tree
└── root (kind: SyntaxFile)
    ├── items (kind: ModuleItemList)
    │   └── child #0 (kind: ItemMacroDeclaration)
    │       ├── attributes (kind: AttributeList) []
    │       ├── visibility (kind: VisibilityDefault) []
    │       ├── macro_kw (kind: TokenMacro): 'macro'
    │       ├── name (kind: TokenIdentifier): 'macro_name'
    │       ├── lbrace (kind: TokenLBrace): '{'
    │       ├── rules (kind: MacroRulesList)
    │       │   ├── child #0 (kind: MacroRule)
    │       │   │   ├── lhs (kind: ParenthesizedMacroMatcher)
    │       │   │   │   ├── lparen (kind: TokenLParen): '('
    │       │   │   │   ├── elements (kind: MacroRuleElements) []
    │       │   │   │   └── rparen (kind: TokenRParen): ')'
    │       │   │   ├── fat_arrow (kind: TokenMatchArrow): '=>'
    │       │   │   ├── rhs (kind: ExprBlock)
    │       │   │   │   ├── lbrace (kind: TokenLBrace): '{'
    │       │   │   │   ├── statements (kind: StatementList)
    │       │   │   │   │   └── child #0 (kind: StatementExpr)
    │       │   │   │   │       ├── attributes (kind: AttributeList) []
    │       │   │   │   │       ├── expr (kind: ExprBinary)
    │       │   │   │   │       │   ├── lhs (kind: TokenLiteralNumber): '2'
    │       │   │   │   │       │   ├── op (kind: TokenPlus): '+'
    │       │   │   │   │       │   └── rhs (kind: ExprPlaceholder)
    │       │   │   │   │       │       ├── dollar (kind: TokenDollar): '$'
    │       │   │   │   │       │       └── name (kind: TokenIdentifier): 'placeholder'
    │       │   │   │   │       └── semicolon (kind: OptionTerminalSemicolonEmpty) []
    │       │   │   │   └── rbrace (kind: TokenRBrace): '}'
    │       │   │   └── semicolon (kind: TokenSemicolon): ';'
    │       │   └── child #1 (kind: MacroRule)
    │       │       ├── lhs (kind: ParenthesizedMacroMatcher)
    │       │       │   ├── lparen (kind: TokenLParen): '('
    │       │       │   ├── elements (kind: MacroRuleElements)
    │       │       │   │   ├── child #0 (kind: MacroRuleParam)
    │       │       │   │   │   ├── dollar (kind: TokenDollar): '$'
    │       │       │   │   │   ├── name (kind: TokenIdentifier): 'x'
    │       │       │   │   │   ├── colon (kind: TokenColon): ':'
    │       │       │   │   │   └── kind (kind: TokenIdentifier): 'ident'
    │       │       │   │   ├── child #1 (kind: TokenTreeLeaf)
    │       │       │   │   │   └── leaf (kind: TokenIdentifier): 'x'
    │       │       │   │   ├── child #2 (kind: TokenTreeLeaf)
    │       │       │   │   │   └── leaf (kind: TokenPlus): '+'
    │       │       │   │   └── child #3 (kind: TokenTreeLeaf)
    │       │       │   │       └── leaf (kind: TokenIdentifier): 'y'
    │       │       │   └── rparen (kind: TokenRParen): ')'
    │       │       ├── fat_arrow (kind: TokenMatchArrow): '=>'
    │       │       ├── rhs (kind: ExprBlock)
    │       │       │   ├── lbrace (kind: TokenLBrace): '{'
    │       │       │   ├── statements (kind: StatementList)
    │       │       │   │   └── child #0 (kind: StatementExpr)
    │       │       │   │       ├── attributes (kind: AttributeList) []
    │       │       │   │       ├── expr (kind: ExprBinary)
    │       │       │   │       │   ├── lhs (kind: TokenLiteralNumber): '2'
    │       │       │   │       │   ├── op (kind: TokenPlus): '+'
    │       │       │   │       │   └── rhs (kind: ExprPlaceholder)
    │       │       │   │       │       ├── dollar (kind: TokenDollar): '$'
    │       │       │   │       │       └── name (kind: TokenIdentifier): 'x'
    │       │       │   │       └── semicolon (kind: OptionTerminalSemicolonEmpty) []
    │       │       │   └── rbrace (kind: TokenRBrace): '}'
    │       │       └── semicolon (kind: TokenSemicolon): ';'
    │       └── rbrace (kind: TokenRBrace): '}'
    └── eof (kind: TokenEndOfFile).

//! > ==========================================================================

//! > Test expr placeholder outside of macro definition

//! > test_runner_name
test_partial_parser_tree(expect_diagnostics: true)

//! > cairo_code
fn foo() {
    2 + $ placeholder
}

//! > top_level_kind

//! > ignored_kinds

//! > expected_diagnostics
error: Missing tokens. Expected an expression.
 --> dummy_file.cairo:2:8
    2 + $ placeholder
       ^

error: Skipped tokens. Expected: statement.
 --> dummy_file.cairo:2:9
    2 + $ placeholder
        ^

//! > expected_tree
└── root (kind: SyntaxFile)
    ├── items (kind: ModuleItemList)
    │   └── child #0 (kind: FunctionWithBody)
    │       ├── attributes (kind: AttributeList) []
    │       ├── visibility (kind: VisibilityDefault) []
    │       ├── declaration (kind: FunctionDeclaration)
    │       │   ├── function_kw (kind: TokenFunction): 'fn'
    │       │   ├── name (kind: TokenIdentifier): 'foo'
    │       │   ├── generic_params (kind: OptionWrappedGenericParamListEmpty) []
    │       │   └── signature (kind: FunctionSignature)
    │       │       ├── lparen (kind: TokenLParen): '('
    │       │       ├── parameters (kind: ParamList) []
    │       │       ├── rparen (kind: TokenRParen): ')'
    │       │       ├── ret_ty (kind: OptionReturnTypeClauseEmpty) []
    │       │       ├── implicits_clause (kind: OptionImplicitsClauseEmpty) []
    │       │       └── optional_no_panic (kind: OptionTerminalNoPanicEmpty) []
    │       └── body (kind: ExprBlock)
    │           ├── lbrace (kind: TokenLBrace): '{'
    │           ├── statements (kind: StatementList)
    │           │   ├── child #0 (kind: StatementExpr)
    │           │   │   ├── attributes (kind: AttributeList) []
    │           │   │   ├── expr (kind: ExprBinary)
    │           │   │   │   ├── lhs (kind: TokenLiteralNumber): '2'
    │           │   │   │   ├── op (kind: TokenPlus): '+'
    │           │   │   │   └── rhs: Missing []
    │           │   │   └── semicolon (kind: OptionTerminalSemicolonEmpty) []
    │           │   └── child #1 (kind: StatementExpr)
    │           │       ├── attributes (kind: AttributeList) []
    │           │       ├── expr (kind: ExprPath)
    │           │       │   └── item #0 (kind: PathSegmentSimple)
    │           │       │       └── ident (kind: TokenIdentifier): 'placeholder'
    │           │       └── semicolon (kind: OptionTerminalSemicolonEmpty) []
    │           └── rbrace (kind: TokenRBrace): '}'
    └── eof (kind: TokenEndOfFile).

//! > ==========================================================================

//! > Test macro definition with unknown param kind.

//! > test_runner_name
test_partial_parser_tree(expect_diagnostics: true)

//! > cairo_code
macro macro_name {
    ($x:unknown) => {
        2 + $x
    };
}

//! > top_level_kind

//! > ignored_kinds

//! > expected_diagnostics
error: Missing tokens. Expected a macro rule parameter kind.
 --> dummy_file.cairo:2:9
    ($x:unknown) => {
        ^

//! > expected_tree
└── root (kind: SyntaxFile)
    ├── items (kind: ModuleItemList)
    │   └── child #0 (kind: ItemMacroDeclaration)
    │       ├── attributes (kind: AttributeList) []
    │       ├── visibility (kind: VisibilityDefault) []
    │       ├── macro_kw (kind: TokenMacro): 'macro'
    │       ├── name (kind: TokenIdentifier): 'macro_name'
    │       ├── lbrace (kind: TokenLBrace): '{'
    │       ├── rules (kind: MacroRulesList)
    │       │   └── child #0 (kind: MacroRule)
    │       │       ├── lhs (kind: ParenthesizedMacroMatcher)
    │       │       │   ├── lparen (kind: TokenLParen): '('
    │       │       │   ├── elements (kind: MacroRuleElements)
    │       │       │   │   ├── child #0 (kind: MacroRuleParam)
    │       │       │   │   │   ├── dollar (kind: TokenDollar): '$'
    │       │       │   │   │   ├── name (kind: TokenIdentifier): 'x'
    │       │       │   │   │   ├── colon (kind: TokenColon): ':'
    │       │       │   │   │   └── kind (kind: MacroRuleParamKindMissing) []
    │       │       │   │   └── child #1 (kind: TokenTreeLeaf)
    │       │       │   │       └── leaf (kind: TokenIdentifier): 'unknown'
    │       │       │   └── rparen (kind: TokenRParen): ')'
    │       │       ├── fat_arrow (kind: TokenMatchArrow): '=>'
    │       │       ├── rhs (kind: ExprBlock)
    │       │       │   ├── lbrace (kind: TokenLBrace): '{'
    │       │       │   ├── statements (kind: StatementList)
    │       │       │   │   └── child #0 (kind: StatementExpr)
    │       │       │   │       ├── attributes (kind: AttributeList) []
    │       │       │   │       ├── expr (kind: ExprBinary)
    │       │       │   │       │   ├── lhs (kind: TokenLiteralNumber): '2'
    │       │       │   │       │   ├── op (kind: TokenPlus): '+'
    │       │       │   │       │   └── rhs (kind: ExprPlaceholder)
    │       │       │   │       │       ├── dollar (kind: TokenDollar): '$'
    │       │       │   │       │       └── name (kind: TokenIdentifier): 'x'
    │       │       │   │       └── semicolon (kind: OptionTerminalSemicolonEmpty) []
    │       │       │   └── rbrace (kind: TokenRBrace): '}'
    │       │       └── semicolon (kind: TokenSemicolon): ';'
    │       └── rbrace (kind: TokenRBrace): '}'
    └── eof (kind: TokenEndOfFile).
