//! > Test parsing of a short code.

//! > test_runner_name
test_full_parser_tree(expect_diagnostics: *)

//! > cairo_code
>>> file: src/parser_test_data/cairo_test_files/short.cairo

//! > print_trivia
false

//! > print_colors
false

//! > expected_diagnostics

//! > expected_tree
â””â”€â”€ root (kind: SyntaxFile)
    â”œâ”€â”€ items (kind: ItemList)
    â”‚   â”œâ”€â”€ child #0 (kind: ItemUse)
    â”‚   â”‚   â”œâ”€â”€ attributes (kind: AttributeList) []
    â”‚   â”‚   â”œâ”€â”€ visibility (kind: VisibilityDefault) []
    â”‚   â”‚   â”œâ”€â”€ use_kw (kind: TokenUse): 'use'
    â”‚   â”‚   â”œâ”€â”€ use_path (kind: UsePathSingle)
    â”‚   â”‚   â”‚   â”œâ”€â”€ ident (kind: PathSegmentSimple)
    â”‚   â”‚   â”‚   â”‚   â””â”€â”€ ident (kind: TokenIdentifier): 'std'
    â”‚   â”‚   â”‚   â”œâ”€â”€ colon_colon (kind: TokenColonColon): '::'
    â”‚   â”‚   â”‚   â””â”€â”€ use_path (kind: UsePathLeaf)
    â”‚   â”‚   â”‚       â”œâ”€â”€ ident (kind: PathSegmentSimple)
    â”‚   â”‚   â”‚       â”‚   â””â”€â”€ ident (kind: TokenIdentifier): 'format'
    â”‚   â”‚   â”‚       â””â”€â”€ alias_clause (kind: OptionAliasClauseEmpty) []
    â”‚   â”‚   â””â”€â”€ semicolon (kind: TokenSemicolon): ';'
    â”‚   â””â”€â”€ child #1 (kind: FunctionWithBody)
    â”‚       â”œâ”€â”€ attributes (kind: AttributeList) []
    â”‚       â”œâ”€â”€ visibility (kind: VisibilityDefault) []
    â”‚       â”œâ”€â”€ declaration (kind: FunctionDeclaration)
    â”‚       â”‚   â”œâ”€â”€ function_kw (kind: TokenFunction): 'fn'
    â”‚       â”‚   â”œâ”€â”€ name (kind: TokenIdentifier): 'foo'
    â”‚       â”‚   â”œâ”€â”€ generic_params (kind: OptionWrappedGenericParamListEmpty) []
    â”‚       â”‚   â””â”€â”€ signature (kind: FunctionSignature)
    â”‚       â”‚       â”œâ”€â”€ lparen (kind: TokenLParen): '('
    â”‚       â”‚       â”œâ”€â”€ parameters (kind: ParamList)
    â”‚       â”‚       â”‚   â””â”€â”€ item #0 (kind: Param)
    â”‚       â”‚       â”‚       â”œâ”€â”€ modifiers (kind: ModifierList) []
    â”‚       â”‚       â”‚       â”œâ”€â”€ name (kind: TokenIdentifier): 'a'
    â”‚       â”‚       â”‚       â””â”€â”€ type_clause (kind: TypeClause)
    â”‚       â”‚       â”‚           â”œâ”€â”€ colon (kind: TokenColon): ':'
    â”‚       â”‚       â”‚           â””â”€â”€ ty (kind: ExprPath)
    â”‚       â”‚       â”‚               â””â”€â”€ item #0 (kind: PathSegmentSimple)
    â”‚       â”‚       â”‚                   â””â”€â”€ ident (kind: TokenIdentifier): 'int'
    â”‚       â”‚       â”œâ”€â”€ rparen (kind: TokenRParen): ')'
    â”‚       â”‚       â”œâ”€â”€ ret_ty (kind: ReturnTypeClause)
    â”‚       â”‚       â”‚   â”œâ”€â”€ arrow (kind: TokenArrow): '->'
    â”‚       â”‚       â”‚   â””â”€â”€ ty (kind: ExprPath)
    â”‚       â”‚       â”‚       â””â”€â”€ item #0 (kind: PathSegmentSimple)
    â”‚       â”‚       â”‚           â””â”€â”€ ident (kind: TokenIdentifier): 'felt252'
    â”‚       â”‚       â”œâ”€â”€ implicits_clause (kind: OptionImplicitsClauseEmpty) []
    â”‚       â”‚       â””â”€â”€ optional_no_panic (kind: OptionTerminalNoPanicEmpty) []
    â”‚       â””â”€â”€ body (kind: ExprBlock)
    â”‚           â”œâ”€â”€ lbrace (kind: TokenLBrace): '{'
    â”‚           â”œâ”€â”€ statements (kind: StatementList)
    â”‚           â”‚   â””â”€â”€ child #0 (kind: StatementReturn)
    â”‚           â”‚       â”œâ”€â”€ attributes (kind: AttributeList) []
    â”‚           â”‚       â”œâ”€â”€ return_kw (kind: TokenReturn): 'return'
    â”‚           â”‚       â”œâ”€â”€ expr_clause (kind: ExprClause)
    â”‚           â”‚       â”‚   â””â”€â”€ expr (kind: ExprPath)
    â”‚           â”‚       â”‚       â””â”€â”€ item #0 (kind: PathSegmentSimple)
    â”‚           â”‚       â”‚           â””â”€â”€ ident (kind: TokenIdentifier): 'a'
    â”‚           â”‚       â””â”€â”€ semicolon (kind: TokenSemicolon): ';'
    â”‚           â””â”€â”€ rbrace (kind: TokenRBrace): '}'
    â””â”€â”€ eof (kind: TokenEndOfFile).

//! > ==========================================================================

//! > Test parsing of a short code, colored.

//! > test_runner_name
test_full_parser_tree(expect_diagnostics: *)

//! > cairo_code
>>> file: src/parser_test_data/cairo_test_files/short.cairo

//! > print_trivia
false

//! > print_colors
true

//! > expected_diagnostics

//! > expected_tree
â””â”€â”€ [36mroot[0m (kind: SyntaxFile)
    â”œâ”€â”€ [36mitems[0m (kind: ItemList)
    â”‚   â”œâ”€â”€ [36mchild #0[0m (kind: ItemUse)
    â”‚   â”‚   â”œâ”€â”€ [36mattributes[0m (kind: AttributeList)[95m [][0m
    â”‚   â”‚   â”œâ”€â”€ [36mvisibility[0m (kind: VisibilityDefault)[95m [][0m
    â”‚   â”‚   â”œâ”€â”€ [34muse_kw[0m (kind: TokenUse): '[1;32muse[0m'
    â”‚   â”‚   â”œâ”€â”€ [36muse_path[0m (kind: UsePathSingle)
    â”‚   â”‚   â”‚   â”œâ”€â”€ [36mident[0m (kind: PathSegmentSimple)
    â”‚   â”‚   â”‚   â”‚   â””â”€â”€ [34mident[0m (kind: TokenIdentifier): '[1;32mstd[0m'
    â”‚   â”‚   â”‚   â”œâ”€â”€ [34mcolon_colon[0m (kind: TokenColonColon): '[1;32m::[0m'
    â”‚   â”‚   â”‚   â””â”€â”€ [36muse_path[0m (kind: UsePathLeaf)
    â”‚   â”‚   â”‚       â”œâ”€â”€ [36mident[0m (kind: PathSegmentSimple)
    â”‚   â”‚   â”‚       â”‚   â””â”€â”€ [34mident[0m (kind: TokenIdentifier): '[1;32mformat[0m'
    â”‚   â”‚   â”‚       â””â”€â”€ [36malias_clause[0m (kind: OptionAliasClauseEmpty)[95m [][0m
    â”‚   â”‚   â””â”€â”€ [34msemicolon[0m (kind: TokenSemicolon): '[1;32m;[0m'
    â”‚   â””â”€â”€ [36mchild #1[0m (kind: FunctionWithBody)
    â”‚       â”œâ”€â”€ [36mattributes[0m (kind: AttributeList)[95m [][0m
    â”‚       â”œâ”€â”€ [36mvisibility[0m (kind: VisibilityDefault)[95m [][0m
    â”‚       â”œâ”€â”€ [36mdeclaration[0m (kind: FunctionDeclaration)
    â”‚       â”‚   â”œâ”€â”€ [34mfunction_kw[0m (kind: TokenFunction): '[1;32mfn[0m'
    â”‚       â”‚   â”œâ”€â”€ [34mname[0m (kind: TokenIdentifier): '[1;32mfoo[0m'
    â”‚       â”‚   â”œâ”€â”€ [36mgeneric_params[0m (kind: OptionWrappedGenericParamListEmpty)[95m [][0m
    â”‚       â”‚   â””â”€â”€ [36msignature[0m (kind: FunctionSignature)
    â”‚       â”‚       â”œâ”€â”€ [34mlparen[0m (kind: TokenLParen): '[1;32m([0m'
    â”‚       â”‚       â”œâ”€â”€ [36mparameters[0m (kind: ParamList)
    â”‚       â”‚       â”‚   â””â”€â”€ [36mitem #0[0m (kind: Param)
    â”‚       â”‚       â”‚       â”œâ”€â”€ [36mmodifiers[0m (kind: ModifierList)[95m [][0m
    â”‚       â”‚       â”‚       â”œâ”€â”€ [34mname[0m (kind: TokenIdentifier): '[1;32ma[0m'
    â”‚       â”‚       â”‚       â””â”€â”€ [36mtype_clause[0m (kind: TypeClause)
    â”‚       â”‚       â”‚           â”œâ”€â”€ [34mcolon[0m (kind: TokenColon): '[1;32m:[0m'
    â”‚       â”‚       â”‚           â””â”€â”€ [36mty[0m (kind: ExprPath)
    â”‚       â”‚       â”‚               â””â”€â”€ [36mitem #0[0m (kind: PathSegmentSimple)
    â”‚       â”‚       â”‚                   â””â”€â”€ [34mident[0m (kind: TokenIdentifier): '[1;32mint[0m'
    â”‚       â”‚       â”œâ”€â”€ [34mrparen[0m (kind: TokenRParen): '[1;32m)[0m'
    â”‚       â”‚       â”œâ”€â”€ [36mret_ty[0m (kind: ReturnTypeClause)
    â”‚       â”‚       â”‚   â”œâ”€â”€ [34marrow[0m (kind: TokenArrow): '[1;32m->[0m'
    â”‚       â”‚       â”‚   â””â”€â”€ [36mty[0m (kind: ExprPath)
    â”‚       â”‚       â”‚       â””â”€â”€ [36mitem #0[0m (kind: PathSegmentSimple)
    â”‚       â”‚       â”‚           â””â”€â”€ [34mident[0m (kind: TokenIdentifier): '[1;32mfelt252[0m'
    â”‚       â”‚       â”œâ”€â”€ [36mimplicits_clause[0m (kind: OptionImplicitsClauseEmpty)[95m [][0m
    â”‚       â”‚       â””â”€â”€ [36moptional_no_panic[0m (kind: OptionTerminalNoPanicEmpty)[95m [][0m
    â”‚       â””â”€â”€ [36mbody[0m (kind: ExprBlock)
    â”‚           â”œâ”€â”€ [34mlbrace[0m (kind: TokenLBrace): '[1;32m{[0m'
    â”‚           â”œâ”€â”€ [36mstatements[0m (kind: StatementList)
    â”‚           â”‚   â””â”€â”€ [36mchild #0[0m (kind: StatementReturn)
    â”‚           â”‚       â”œâ”€â”€ [36mattributes[0m (kind: AttributeList)[95m [][0m
    â”‚           â”‚       â”œâ”€â”€ [34mreturn_kw[0m (kind: TokenReturn): '[1;32mreturn[0m'
    â”‚           â”‚       â”œâ”€â”€ [36mexpr_clause[0m (kind: ExprClause)
    â”‚           â”‚       â”‚   â””â”€â”€ [36mexpr[0m (kind: ExprPath)
    â”‚           â”‚       â”‚       â””â”€â”€ [36mitem #0[0m (kind: PathSegmentSimple)
    â”‚           â”‚       â”‚           â””â”€â”€ [34mident[0m (kind: TokenIdentifier): '[1;32ma[0m'
    â”‚           â”‚       â””â”€â”€ [34msemicolon[0m (kind: TokenSemicolon): '[1;32m;[0m'
    â”‚           â””â”€â”€ [34mrbrace[0m (kind: TokenRBrace): '[1;32m}[0m'
    â””â”€â”€ [34meof[0m (kind: TokenEndOfFile).
