//! > Test function call syntax tree

//! > test_function_name
test_partial_parser_tree

//! > cairo_code
fn test() {
    f::<felt, 7>(12, a + 3, b);
}

//! > top_level_kind
ExprFunctionCall

//! > ignored_kinds

//! > expected_diagnostics

//! > expected_tree
└── Top level kind: ExprFunctionCall
    ├── path (kind: ExprPath)
    │   └── item #0 (kind: PathSegmentWithGenericArgs)
    │       ├── ident (kind: TokenIdentifier): 'f'
    │       ├── separator (kind: TokenColonColon): '::'
    │       └── generic_args (kind: GenericArgs)
    │           ├── langle (kind: TokenLT): '<'
    │           ├── generic_args (kind: GenericArgList)
    │           │   ├── item #0 (kind: ExprPath)
    │           │   │   └── item #0 (kind: PathSegmentSimple)
    │           │   │       └── ident (kind: TokenIdentifier): 'felt'
    │           │   ├── separator #0 (kind: TokenComma): ','
    │           │   └── item #1 (kind: TokenLiteralNumber): '7'
    │           └── rangle (kind: TokenGT): '>'
    └── arguments (kind: ArgListParenthesized)
        ├── lparen (kind: TokenLParen): '('
        ├── args (kind: ArgList)
        │   ├── item #0 (kind: Arg)
        │   │   ├── name (kind: OptionArgNameClauseEmpty) []
        │   │   └── value (kind: TokenLiteralNumber): '12'
        │   ├── separator #0 (kind: TokenComma): ','
        │   ├── item #1 (kind: Arg)
        │   │   ├── name (kind: OptionArgNameClauseEmpty) []
        │   │   └── value (kind: ExprBinary)
        │   │       ├── lhs (kind: ExprPath)
        │   │       │   └── item #0 (kind: PathSegmentSimple)
        │   │       │       └── ident (kind: TokenIdentifier): 'a'
        │   │       ├── op (kind: TokenPlus): '+'
        │   │       └── rhs (kind: TokenLiteralNumber): '3'
        │   ├── separator #1 (kind: TokenComma): ','
        │   └── item #2 (kind: Arg)
        │       ├── name (kind: OptionArgNameClauseEmpty) []
        │       └── value (kind: ExprPath)
        │           └── item #0 (kind: PathSegmentSimple)
        │               └── ident (kind: TokenIdentifier): 'b'
        └── rparen (kind: TokenRParen): ')'

//! > ==========================================================================

//! > Test function call with named arguments

//! > test_function_name
test_partial_parser_tree

//! > cairo_code
fn test() {
    f(12, y: a + 3);
}

//! > top_level_kind
ExprFunctionCall

//! > ignored_kinds

//! > expected_diagnostics

//! > expected_tree
└── Top level kind: ExprFunctionCall
    ├── path (kind: ExprPath)
    │   └── item #0 (kind: PathSegmentSimple)
    │       └── ident (kind: TokenIdentifier): 'f'
    └── arguments (kind: ArgListParenthesized)
        ├── lparen (kind: TokenLParen): '('
        ├── args (kind: ArgList)
        │   ├── item #0 (kind: Arg)
        │   │   ├── name (kind: OptionArgNameClauseEmpty) []
        │   │   └── value (kind: TokenLiteralNumber): '12'
        │   ├── separator #0 (kind: TokenComma): ','
        │   └── item #1 (kind: Arg)
        │       ├── name (kind: ArgNameClause)
        │       │   ├── name (kind: TokenIdentifier): 'y'
        │       │   └── colon (kind: TokenColon): ':'
        │       └── value (kind: ExprBinary)
        │           ├── lhs (kind: ExprPath)
        │           │   └── item #0 (kind: PathSegmentSimple)
        │           │       └── ident (kind: TokenIdentifier): 'a'
        │           ├── op (kind: TokenPlus): '+'
        │           └── rhs (kind: TokenLiteralNumber): '3'
        └── rparen (kind: TokenRParen): ')'
