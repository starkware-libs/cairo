//! > Two functions, no consts.

//! > test_runner_name
BytecodeSegmentLengthTest

//! > sierra
type felt252 = felt252;
type NonZeroFelt252 = NonZero<felt252>;

libfunc felt252_const_0 = felt252_const<0>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc jump = jump;
libfunc store_temp_felt252 = store_temp<felt252>;
libfunc branch_align = branch_align;
libfunc drop_felt252 = drop<felt252>;
libfunc drop_non_zero_felt252 = drop<NonZeroFelt252>;

felt252_const_0() -> (zero0);  // 0
felt252_const_0() -> (zero1);  // 1
drop_felt252(zero1) -> ();  // 2
store_temp_felt252(zero0) -> (zero0);  // 3
felt252_is_zero(zero0) { fallthrough() if_branch0(zero0) };  // 4
branch_align() -> ();  // 5
felt252_const_0() -> (zero2);  // 6
felt252_const_0() -> (zero3);  // 7
drop_felt252(zero2) -> ();  // 8
drop_felt252(zero3) -> ();  // 9
jump() { jump_label() };  // 10

if_branch0:
branch_align() -> ();  // 11
drop_non_zero_felt252(zero0) -> ();  // 12
felt252_const_0() -> (zero4);  // 13
felt252_const_0() -> (zero5);  // 14
felt252_const_0() -> (zero6);  // 15
felt252_const_0() -> (zero7);  // 16
felt252_const_0() -> (zero8);  // 17
felt252_const_0() -> (zero9);  // 18
drop_felt252(zero4) -> ();  // 19
drop_felt252(zero5) -> ();  // 20
drop_felt252(zero6) -> ();  // 21
drop_felt252(zero7) -> ();  // 22
drop_felt252(zero8) -> ();  // 23
drop_felt252(zero9) -> ();  // 24
jump_label:
felt252_const_0() -> (zero10);  // 25
felt252_const_0() -> (zero11);  // 26
drop_felt252(zero10) -> ();  // 27
drop_felt252(zero11) -> ();  // 28
return();  // 29

function1:
felt252_const_0() -> (zero);  // 30
drop_felt252(zero) -> ();  // 31
return();  // 32

// Order is reversed to check the sorting.
function1@30() -> ();
function0@0() -> ();

//! > cairo_program
[ap + 0] = 0, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 2;
ret;
ret;

//! > function_segments
Ok([0, 30])

//! > bytecode_lengths
Ok(Node([Leaf(7), Leaf(1)]))

//! > ==========================================================================

//! > One function with simple consts.

//! > test_runner_name
BytecodeSegmentLengthTest

//! > sierra
type felt252 = felt252;
type Const<felt252, 5> = Const<felt252, 5>;
type Const<felt252, 17> = Const<felt252, 17>;
type Const<felt252, 15> = Const<felt252, 15>;
type BoxFelt252 = Box<felt252>;

libfunc const_as_box<Const<felt252, 5>> = const_as_box<Const<felt252, 5>, 0>;
libfunc const_as_box<Const<felt252, 17>> = const_as_box<Const<felt252, 17>, 1>;
libfunc const_as_box<Const<felt252, 15>> = const_as_box<Const<felt252, 15>, 0>;
libfunc unbox<felt252> = unbox<felt252>;
libfunc store_temp_felt252 = store_temp<felt252>;
libfunc drop<felt252> = drop<felt252>;

const_as_box<Const<felt252, 5>>() -> ([1]); // 0
const_as_box<Const<felt252, 17>>() -> ([2]); // 1
const_as_box<Const<felt252, 15>>() -> ([3]); // 2
unbox<felt252>([1]) -> ([1]); // 3
unbox<felt252>([2]) -> ([2]); // 4
unbox<felt252>([3]) -> ([3]); // 5
store_temp_felt252([1]) -> ([1]); // 6
drop<felt252>([1]) -> (); // 7
store_temp_felt252([2]) -> ([2]); // 8
drop<felt252>([2]) -> (); // 9
store_temp_felt252([3]) -> ([3]); // 10
return([3]); // 11

test_program@0() -> (felt252);

//! > cairo_program
call rel 16;
[ap + 0] = [ap + -1] + 15, ap++;
call rel 15;
[ap + 0] = [ap + -1] + 14, ap++;
call rel 8;
[ap + 0] = [ap + -1] + 8, ap++;
[ap + 0] = [[ap + -7] + 0], ap++;
[ap + 0] = [[ap + -5] + 0], ap++;
[ap + 0] = [[ap + -3] + 0], ap++;
ret;
ret;
dw 5;
dw 15;
ret;
dw 17;

//! > function_segments
Ok([0])

//! > bytecode_lengths
Ok(Node([Leaf(16), Leaf(3), Leaf(2)]))

//! > ==========================================================================

//! > Two functions, with complex consts.

//! > test_runner_name
BytecodeSegmentLengthTest

//! > sierra
type felt252 = felt252;
type Tuple<felt252, felt252> = Struct<ut@Tuple, felt252, felt252>;
type Const<felt252, 5> = Const<felt252, 5>;
type Const<felt252, 17> = Const<felt252, 17>;
type Const<
    Tuple<felt252, felt252>,
    Const<felt252, 5>,
    Const<felt252, 17>
> = Const<
    Tuple<felt252, felt252>,
    Const<felt252, 5>,
    Const<felt252, 17>
>;
type Box<Tuple<felt252, felt252>> = Box<Tuple<felt252, felt252>>;
type MyEnum = Enum<ut@MyEnum, felt252, felt252>;
type Const<MyEnum, 0, Const<felt252, 5>> = Const<MyEnum, 0, Const<felt252, 5>>;
type Box<MyEnum> = Box<MyEnum>;

libfunc const_as_box<
    Const<
        Tuple<felt252, felt252>,
        Const<felt252, 5>,
        Const<felt252, 17>
    >
> = const_as_box<
    Const<
        Tuple<felt252, felt252>,
        Const<felt252, 5>,
        Const<felt252, 17>
    >,
    0,
>;
libfunc unbox<Tuple<felt252, felt252>> = unbox<Tuple<felt252, felt252>>;
libfunc store_temp<Tuple<felt252, felt252>> = store_temp<Tuple<felt252, felt252>>;
libfunc drop<Tuple<felt252, felt252>> = drop<Tuple<felt252, felt252>>;
libfunc const_as_box<Const<MyEnum, 0, Const<felt252, 5>>> =
    const_as_box<Const<MyEnum, 0, Const<felt252, 5>>, 1>;
libfunc unbox<MyEnum> = unbox<MyEnum>;
libfunc store_temp<MyEnum> = store_temp<MyEnum>;
libfunc drop<MyEnum> = drop<MyEnum>;

const_as_box<Const<Tuple<felt252, felt252>, Const<felt252, 5>, Const<felt252, 17>>>() -> ([1]); // 0
unbox<Tuple<felt252, felt252>>([1]) -> ([1]); // 1
store_temp<Tuple<felt252, felt252>>([1]) -> ([1]); // 2
drop<Tuple<felt252, felt252>>([1]) -> (); // 3
return(); // 4
const_as_box<Const<MyEnum, 0, Const<felt252, 5>>>() -> ([2]); // 5
unbox<MyEnum>([2]) -> ([2]); // 6
store_temp<MyEnum>([2]) -> ([2]); // 7
drop<MyEnum>([2]) -> (); // 8
return(); // 9

test_const_struct@0() -> ();
test_const_enum@5() -> ();

//! > cairo_program
call rel 14;
[ap + 0] = [ap + -1] + 13, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -2] + 1], ap++;
ret;
call rel 10;
[ap + 0] = [ap + -1] + 9, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -2] + 1], ap++;
ret;
ret;
dw 5;
dw 17;
ret;
dw 0;
dw 5;

//! > function_segments
Ok([0, 5])

//! > bytecode_lengths
Ok(Node([Leaf(7), Leaf(7), Leaf(3), Leaf(3)]))

//! > ==========================================================================

//! > No function start at zero

//! > test_runner_name
BytecodeSegmentLengthTest

//! > sierra
type felt252 = felt252;

libfunc felt252_const_0 = felt252_const<0>;

return();  // 0

function1:
return();  // 1

function1@1() -> ();

//! > cairo_program
Casm compilation failed.

//! > function_segments
Err(NoFunctionStartAtZero)

//! > bytecode_lengths
Casm compilation failed.

//! > ==========================================================================

//! > jump outside function (fallthrough)

//! > test_runner_name
BytecodeSegmentLengthTest

//! > sierra
type felt252 = felt252;

libfunc felt252_const_0 = felt252_const<0>;

felt252_const_0() -> (zero);  // 0
// Falls through to function1.
felt252_const_0() -> (zero);  // 1

function1:
felt252_const_0() -> (zero);  // 2
felt252_const_0() -> (zero);  // 3
return();  // 4

function0@0() -> ();
function1@2() -> ();

//! > cairo_program
Casm compilation failed.

//! > function_segments
Err(JumpOutsideFunction(StatementIdx(1)))

//! > bytecode_lengths
Casm compilation failed.

//! > ==========================================================================

//! > jump outside function (after)

//! > test_runner_name
BytecodeSegmentLengthTest

//! > sierra
type felt252 = felt252;

libfunc felt252_const_0 = felt252_const<0>;

function0:
felt252_const_0() -> (zero); // 0
jump() { function1() };  // 1
return();  // 2

function1:
felt252_const_0() -> (zero);  // 3
return();  // 4

function0@0() -> ();
function1@3() -> ();

//! > cairo_program
Casm compilation failed.

//! > function_segments
Err(JumpOutsideFunction(StatementIdx(1)))

//! > bytecode_lengths
Casm compilation failed.

//! > ==========================================================================

//! > jump outside function (before)

//! > test_runner_name
BytecodeSegmentLengthTest

//! > sierra
type felt252 = felt252;

libfunc felt252_const_0 = felt252_const<0>;

function0:
felt252_const_0() -> (zero);  // 0
return();  // 1

function1:
felt252_const_0() -> (zero); // 2
jump() { function0() };  // 3
return();  // 4

function0@0() -> ();
function1@2() -> ();

//! > cairo_program
Casm compilation failed.

//! > function_segments
Err(JumpOutsideFunction(StatementIdx(3)))

//! > bytecode_lengths
Casm compilation failed.

//! > ==========================================================================

//! > One function with simple circuit.

//! > test_runner_name
BytecodeSegmentLengthTest

//! > sierra
type CircuitDescriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = CircuitDescriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> [storable: true, drop: true, dup: true, zero_sized: false];
type Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)> = Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)> [storable: true, drop: true, dup: true, zero_sized: false];
type core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>> = AddModGate<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<2> = CircuitInput<2> [storable: false, drop: false, dup: false, zero_sized: false];
type (core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>) = Struct<ut@Tuple, core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<0> = CircuitInput<0> [storable: false, drop: false, dup: false, zero_sized: false];
type core::circuit::CircuitInput::<1> = CircuitInput<1> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc get_circuit_descriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>> = get_circuit_descriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>;

get_circuit_descriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>() -> ([0]); // 0
return([0]); // 1

test::foo@0() -> (CircuitDescriptor<Circuit<(core::circuit::AddModGate::<core::circuit::CircuitInput::<0>, core::circuit::CircuitInput::<1>>, core::circuit::CircuitInput::<2>)>>);

//! > cairo_program
call rel 11;
[ap + 0] = [ap + -1] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2] + 3, ap++;
[ap + 0] = 3, ap++;
ret;
ret;
dw 16;
dw 20;
dw 32;
dw 12;
dw 0;
dw 16;
dw 12;
dw 4;
dw 20;
dw 12;
dw 8;
dw 24;

//! > function_segments
Ok([0])

//! > bytecode_lengths
Ok(Node([Leaf(11), Leaf(13)]))
