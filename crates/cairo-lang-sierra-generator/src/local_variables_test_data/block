//! > Block

//! > test_runner_name
check_find_local_variables

//! > function_name
foo

//! > function_code
fn foo(x: felt) -> felt {
    let x1 = x + x;
    let x2 = x1 + x1;
    // TODO(lior): Replace with let (y, z) = { ... } and make sure z does not appear in the result.
    let y = {
        revoke_ap();
        x1 + x1
    };
    // TODO(lior): Replace with "let w = x1 + x2 + z".
    let w = x1 + x2;
    revoke_ap();
    x1 + y
}

//! > module_code
// Revokes ap since this function is recursive.
fn revoke_ap() -> felt {
    revoke_ap()
}

//! > lowering_format
blk0 (root):
Inputs: v0: core::felt
Statements:
End:
  Goto(blk1, {})

blk1:
Inputs:
Statements:
  (v8: core::felt) <- core::felt_add(v0, v0)
End:
  Goto(blk2, {})

blk2:
Inputs:
Statements:
End:
  Goto(blk3, {})

blk3:
Inputs:
Statements:
  (v9: core::felt) <- core::felt_add(v8, v8)
End:
  Goto(blk4, {})

blk4:
Inputs:
Statements:
  (v3: core::felt) <- test::revoke_ap()
End:
  Goto(blk5, {})

blk5:
Inputs:
Statements:
  (v10: core::felt) <- core::felt_add(v8, v8)
End:
  Goto(blk6, {})

blk6:
Inputs:
Statements:
End:
  Goto(blk7, {})

blk7:
Inputs:
Statements:
  (v11: core::felt) <- core::felt_add(v8, v9)
End:
  Goto(blk8, {})

blk8:
Inputs:
Statements:
  (v6: core::felt) <- test::revoke_ap()
End:
  Goto(blk9, {})

blk9:
Inputs:
Statements:
  (v12: core::felt) <- core::felt_add(v8, v10)
End:
  Goto(blk10, {})

blk10:
Inputs:
Statements:
End:
  Return(v12)

//! > local_variables
v10, v8, v9

//! > block_infos
