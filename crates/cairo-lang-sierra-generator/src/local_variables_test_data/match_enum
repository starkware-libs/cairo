//! > Match enum

//! > test_runner_name
check_find_local_variables

//! > function_name
foo

//! > function_code
fn foo() -> felt252 {
  let x = bar();
  let literal = 2;
  let w1 = non_literal();
  let y = match x {
    MyEnum::A(a) => {
      revoke_ap();
      a + a
    },
    MyEnum::B(b) => {
      // 'b' is not revoked.
      b + b + b
    }
  };
  // 'w1' is revoked because of the revoke_ap() inside the match.
  let w2 = w1 + w1;
  // 'literal' is not revoked since it is a const.
  let w3 = literal + literal;
  revoke_ap();
  // 'y' is revoked.
  y
}

//! > module_code
// Revokes ap since this function is recursive.
fn revoke_ap() -> felt252 {
    revoke_ap()
}

#[inline(never)]
fn non_literal() -> felt252 {
    1
}

fn bar() -> MyEnum {
    bar()
}

#[derive(Drop)]
enum MyEnum {
  A: felt252,
  B: felt252,
}

//! > lowering_format
Parameters: v35: core::RangeCheck, v36: core::gas::GasBuiltin
blk0 (root):
Statements:
  (v37: core::RangeCheck, v38: core::gas::GasBuiltin, v18: core::PanicResult::<(test::MyEnum,)>) <- test::bar(v35, v36)
End:
  Match(match_enum(v18) {
    PanicResult::Ok(v19) => blk1,
    PanicResult::Err(v21) => blk9,
  })

blk1:
Statements:
  (v20: test::MyEnum) <- struct_destructure(v19)
  (v2: core::felt252) <- test::non_literal()
  (v1: core::felt252) <- 2u
End:
  Match(match_enum(v20) {
    MyEnum::A(v3) => blk2,
    MyEnum::B(v6) => blk5,
  })

blk2:
Statements:
  (v41: core::RangeCheck, v42: core::gas::GasBuiltin, v22: core::PanicResult::<(core::felt252,)>) <- test::revoke_ap(v37, v38)
End:
  Match(match_enum(v22) {
    PanicResult::Ok(v23) => blk3,
    PanicResult::Err(v25) => blk4,
  })

blk3:
Statements:
  (v24: core::felt252) <- struct_destructure(v23)
  (v13: core::felt252) <- core::felt252_add(v3, v3)
End:
  Goto(blk6, {v41 -> v49, v42 -> v50, v13 -> v9})

blk4:
Statements:
  (v31: core::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v25)
End:
  Return(v41, v42, v31)

blk5:
Statements:
  (v14: core::felt252) <- core::felt252_add(v6, v6)
  (v16: core::felt252) <- core::felt252_add(v14, v6)
End:
  Goto(blk6, {v37 -> v49, v38 -> v50, v16 -> v9})

blk6:
Statements:
  (v15: core::felt252) <- core::felt252_add(v2, v2)
  (v17: core::felt252) <- core::felt252_add(v1, v1)
  (v59: core::RangeCheck, v60: core::gas::GasBuiltin, v26: core::PanicResult::<(core::felt252,)>) <- test::revoke_ap(v49, v50)
End:
  Match(match_enum(v26) {
    PanicResult::Ok(v27) => blk7,
    PanicResult::Err(v29) => blk8,
  })

blk7:
Statements:
  (v28: core::felt252) <- struct_destructure(v27)
  (v32: (core::felt252,)) <- struct_construct(v9)
  (v33: core::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v32)
End:
  Return(v59, v60, v33)

blk8:
Statements:
  (v34: core::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v29)
End:
  Return(v59, v60, v34)

blk9:
Statements:
  (v30: core::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v21)
End:
  Return(v37, v38, v30)

//! > local_variables
v9, v3, v2

//! > block_infos

//! > ==========================================================================

//! > Match enum early return

//! > test_runner_name
check_find_local_variables

//! > function_name
foo

//! > function_code
fn foo(x: MyEnum, z: felt252) -> felt252 {
    let w1 = z + z;
    match x {
        MyEnum::A(a) => {
            revoke_ap();
            return 0;
        },
        MyEnum::B(b) => {
            b + b + b
        }
    };

    // w1 is not revoked.
    let w2 = w1 + z;

    match x {
        MyEnum::A(a) => {
            // Same as above, without revoke_ap() and without an early return.
            a
        },
        MyEnum::B(b) => {
            b + b + b
        }
    };

    // w2 is revoked.
    w2 + z
}

//! > module_code
// Revokes ap since this function is recursive.
fn revoke_ap() -> felt252 {
    revoke_ap()
}

#[derive(Copy, Drop)]
enum MyEnum {
  A: felt252,
  B: felt252,
}

//! > lowering_format
Parameters: v33: core::RangeCheck, v34: core::gas::GasBuiltin, v0: test::MyEnum, v1: core::felt252
blk0 (root):
Statements:
  (v17: core::felt252) <- core::felt252_add(v1, v1)
End:
  Match(match_enum(v0) {
    MyEnum::A(v3) => blk1,
    MyEnum::B(v6) => blk4,
  })

blk1:
Statements:
  (v39: core::RangeCheck, v40: core::gas::GasBuiltin, v24: core::PanicResult::<(core::felt252,)>) <- test::revoke_ap(v33, v34)
End:
  Match(match_enum(v24) {
    PanicResult::Ok(v25) => blk2,
    PanicResult::Err(v27) => blk3,
  })

blk2:
Statements:
  (v26: core::felt252) <- struct_destructure(v25)
  (v5: core::felt252) <- 0u
  (v30: (core::felt252,)) <- struct_construct(v5)
  (v31: core::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v30)
End:
  Return(v39, v40, v31)

blk3:
Statements:
  (v32: core::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v27)
End:
  Return(v39, v40, v32)

blk4:
Statements:
  (v18: core::felt252) <- core::felt252_add(v6, v6)
  (v22: core::felt252) <- core::felt252_add(v18, v6)
  (v19: core::felt252) <- core::felt252_add(v17, v1)
End:
  Match(match_enum(v0) {
    MyEnum::A(v11) => blk5,
    MyEnum::B(v12) => blk6,
  })

blk5:
Statements:
End:
  Goto(blk7, {})

blk6:
Statements:
  (v20: core::felt252) <- core::felt252_add(v12, v12)
  (v23: core::felt252) <- core::felt252_add(v20, v12)
End:
  Goto(blk7, {})

blk7:
Statements:
  (v21: core::felt252) <- core::felt252_add(v19, v1)
  (v28: (core::felt252,)) <- struct_construct(v21)
  (v29: core::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v28)
End:
  Return(v33, v34, v29)

//! > local_variables

//! > block_infos
