//! > Match enum

//! > test_runner_name
check_find_local_variables

//! > function_name
foo

//! > function_code
fn foo() -> felt {
  let x = bar();
  let literal = 2;
  let w1 = non_literal();
  let y = match x {
    MyEnum::A(a) => {
      revoke_ap();
      a + a
    },
    MyEnum::B(b) => {
      // 'b' is not revoked.
      b + b + b
    }
  };
  // 'w1' is revoked because of the revoke_ap() inside the match.
  let w2 = w1 + w1;
  // 'literal' is not revoked since it is a const.
  let w3 = literal + literal;
  revoke_ap();
  // 'y' is revoked.
  y
}

//! > module_code
// Revokes ap since this function is recursive.
fn revoke_ap() -> felt {
    revoke_ap()
}

fn non_literal() -> felt {
    1 + 2;
    1
}

fn bar() -> MyEnum {
    bar()
}

enum MyEnum {
  A: felt,
  B: felt,
}

//! > lowering_format
blk0:
Inputs: v3: core::felt
Statements:
  (v4: core::felt) <- test::revoke_ap()
End:
  Fallthrough(blk4, {})

blk1:
Inputs: v6: core::felt
Statements:
End:
  Fallthrough(blk6, {})

blk2 (root):
Inputs:
Statements:
  (v0: test::MyEnum) <- test::bar()
  (v1: core::felt) <- 2u
  (v2: core::felt) <- test::non_literal()
  () <- match_enum(v0) {
    MyEnum::A => blk0,
    MyEnum::B => blk1,
  }
End:
  Fallthrough(blk8, {})

blk3:
Inputs:
Statements:
End:
  Callsite({v5 -> v9})

blk4:
Inputs:
Statements:
  (v13: core::felt) <- core::felt_add(v3, v3)
End:
  Fallthrough(blk3, {v13 -> v5})

blk5:
Inputs:
Statements:
End:
  Fallthrough(blk10, {})

blk6:
Inputs:
Statements:
  (v14: core::felt) <- core::felt_add(v6, v6)
End:
  Fallthrough(blk5, {v14 -> v7})

blk7:
Inputs:
Statements:
End:
  Fallthrough(blk12, {})

blk8:
Inputs:
Statements:
  (v15: core::felt) <- core::felt_add(v2, v2)
End:
  Fallthrough(blk7, {v15 -> v10})

blk9:
Inputs:
Statements:
End:
  Callsite({v8 -> v9})

blk10:
Inputs:
Statements:
  (v16: core::felt) <- core::felt_add(v7, v6)
End:
  Fallthrough(blk9, {v16 -> v8})

blk11:
Inputs:
Statements:
  (v12: core::felt) <- test::revoke_ap()
End:
  Return(v9)

blk12:
Inputs:
Statements:
  (v17: core::felt) <- core::felt_add(v1, v1)
End:
  Fallthrough(blk11, {v17 -> v11})

//! > local_variables
v0, v9

//! > block_infos

//! > ==========================================================================

//! > Match enum early return

//! > test_runner_name
check_find_local_variables

//! > function_name
foo

//! > function_code
fn foo(x: MyEnum, z: felt) -> felt {
    let w1 = z + z;
    match x {
        MyEnum::A(a) => {
            revoke_ap();
            return 0;
        },
        MyEnum::B(b) => {
            b + b + b
        }
    };

    // w1 is not revoked.
    let w2 = w1 + z;

    match x {
        MyEnum::A(a) => {
            // Same as above, without revoke_ap() and without an early return.
            a
        },
        MyEnum::B(b) => {
            b + b + b
        }
    };

    // w2 is revoked.
    w2 + z
}

//! > module_code
// Revokes ap since this function is recursive.
fn revoke_ap() -> felt {
    revoke_ap()
}

enum MyEnum {
  A: felt,
  B: felt,
}
impl MyEnumCopy of Copy::<MyEnum>;

//! > lowering_format
blk0:
Inputs: v3: core::felt
Statements:
  (v4: core::felt) <- test::revoke_ap()
  (v5: core::felt) <- 0u
End:
  Return(v5)

blk1:
Inputs: v6: core::felt
Statements:
End:
  Fallthrough(blk6, {})

blk2:
Inputs: v11: core::felt
Statements:
End:
  Callsite({})

blk3:
Inputs: v12: core::felt
Statements:
End:
  Fallthrough(blk8, {})

blk4 (root):
Inputs: v0: test::MyEnum, v1: core::felt
Statements:
End:
  Fallthrough(blk10, {})

blk5:
Inputs:
Statements:
End:
  Fallthrough(blk12, {})

blk6:
Inputs:
Statements:
  (v17: core::felt) <- core::felt_add(v6, v6)
End:
  Fallthrough(blk5, {v17 -> v7})

blk7:
Inputs:
Statements:
End:
  Fallthrough(blk14, {})

blk8:
Inputs:
Statements:
  (v18: core::felt) <- core::felt_add(v12, v12)
End:
  Fallthrough(blk7, {v18 -> v13})

blk9:
Inputs:
Statements:
  () <- match_enum(v0) {
    MyEnum::A => blk0,
    MyEnum::B => blk1,
  }
End:
  Fallthrough(blk16, {})

blk10:
Inputs:
Statements:
  (v19: core::felt) <- core::felt_add(v1, v1)
End:
  Fallthrough(blk9, {v19 -> v2})

blk11:
Inputs:
Statements:
End:
  Callsite({})

blk12:
Inputs:
Statements:
  (v20: core::felt) <- core::felt_add(v7, v6)
End:
  Fallthrough(blk11, {v20 -> v8})

blk13:
Inputs:
Statements:
End:
  Callsite({})

blk14:
Inputs:
Statements:
  (v21: core::felt) <- core::felt_add(v13, v12)
End:
  Fallthrough(blk13, {v21 -> v14})

blk15:
Inputs:
Statements:
  () <- match_enum(v0) {
    MyEnum::A => blk2,
    MyEnum::B => blk3,
  }
End:
  Fallthrough(blk18, {})

blk16:
Inputs:
Statements:
  (v22: core::felt) <- core::felt_add(v2, v1)
End:
  Fallthrough(blk15, {v22 -> v10})

blk17:
Inputs:
Statements:
End:
  Return(v16)

blk18:
Inputs:
Statements:
  (v23: core::felt) <- core::felt_add(v10, v1)
End:
  Fallthrough(blk17, {v23 -> v16})

//! > local_variables

//! > block_infos
