//! > Match enum

//! > test_function_name
check_find_local_variables

//! > function_name
foo

//! > function_code
fn foo() -> felt {
  let x = bar();
  let literal = 2;
  let w1 = non_literal();
  let y = match x {
    MyEnum::A(a) => {
      revoke_ap()
      a + a
    },
    MyEnum::B(b) => {
      // 'b' is not revoked.
      b + b + b
    }
  };
  // 'w1' is revoked because of the revoke_ap() inside the match.
  let w2 = w1 + w1;
  // 'literal' is not revoked since it is a const.
  let w3 = literal + literal;
  revoke_ap();
  // 'y' is revoked.
  y
}

//! > module_code
// Revokes ap since this function is recursive.
fn revoke_ap() -> felt {
    revoke_ap()
}

fn non_literal() -> felt {
    1
}

fn bar() -> MyEnum {
    bar()
}

enum MyEnum {
  A: felt,
  B: felt,
}

//! > lowering_format
blk0:
Inputs:
Statements:
  (v4: core::felt) <- test::revoke_ap()
  (v5: core::felt) <- core::felt_add(v3, v3)
End:
  Callsite(v5 -> v6)

blk1:
Inputs:
Statements:
  (v8: core::felt) <- core::felt_add(v7, v7)
  (v9: core::felt) <- core::felt_add(v8, v7)
End:
  Callsite(v9 -> v10)

blk2:
Inputs: v3: core::felt
Statements:
  () <- blk0()
End:
  Callsite(v6 -> v11)

blk3:
Inputs: v7: core::felt
Statements:
  () <- blk1()
End:
  Callsite(v10 -> v11)

blk4 (root):
Inputs:
Statements:
  (v0: test::MyEnum) <- test::bar()
  (v1: core::felt) <- 2u
  (v2: core::felt) <- test::non_literal()
  () <- match_enum(v0) {
    MyEnum::A => blk2,
    MyEnum::B => blk3,
  }
  (v12: core::felt) <- core::felt_add(v2, v2)
  (v13: core::felt) <- core::felt_add(v1, v1)
  (v14: core::felt) <- test::revoke_ap()
End:
  Return(v11)

//! > local_variables
v0, v2, v11

//! > ==========================================================================

//! > Match enum early return

//! > test_function_name
check_find_local_variables

//! > function_name
foo

//! > function_code
fn foo(x: MyEnum, z: felt) -> felt {
    let w1 = z + z;
    match x {
        MyEnum::A(a) => {
            revoke_ap()
            return 0;
        },
        MyEnum::B(b) => {
            b + b + b
        }
    };

    // w1 is not revoked.
    let w2 = w1 + z;

    match x {
        MyEnum::A(a) => {
            // Same as above, without revoke_ap() and without an early return.
            a
        },
        MyEnum::B(b) => {
            b + b + b
        }
    };

    // w2 is revoked.
    w2 + z
}

//! > module_code
// Revokes ap since this function is recursive.
fn revoke_ap() -> felt {
    revoke_ap()
}

enum MyEnum {
  A: felt,
  B: felt,
}
impl MyEnumCopy of Copy::<MyEnum>;

//! > lowering_format
blk0:
Inputs:
Statements:
  (v4: core::felt) <- test::revoke_ap()
  (v5: core::felt) <- 0u
End:
  Return(v5)

blk1:
Inputs:
Statements:
  (v7: core::felt) <- core::felt_add(v6, v6)
  (v8: core::felt) <- core::felt_add(v7, v6)
End:
  Callsite(v8 -> v9)

blk2:
Inputs: v3: core::felt
Statements:
  () <- blk0()
End:
  Unreachable

blk3:
Inputs: v6: core::felt
Statements:
  () <- blk1()
End:
  Callsite(v9 -> v10)

blk4:
Inputs:
Statements:
End:
  Callsite(v12 -> v13)

blk5:
Inputs:
Statements:
  (v15: core::felt) <- core::felt_add(v14, v14)
  (v16: core::felt) <- core::felt_add(v15, v14)
End:
  Callsite(v16 -> v17)

blk6:
Inputs: v12: core::felt
Statements:
  () <- blk4()
End:
  Callsite(v13 -> v18)

blk7:
Inputs: v14: core::felt
Statements:
  () <- blk5()
End:
  Callsite(v17 -> v18)

blk8 (root):
Inputs: v0: test::MyEnum, v1: core::felt
Statements:
  (v2: core::felt) <- core::felt_add(v1, v1)
  () <- match_enum(v0) {
    MyEnum::A => blk2,
    MyEnum::B => blk3,
  }
  (v11: core::felt) <- core::felt_add(v2, v1)
  () <- match_enum(v0) {
    MyEnum::A => blk6,
    MyEnum::B => blk7,
  }
  (v19: core::felt) <- core::felt_add(v11, v1)
End:
  Return(v19)

//! > local_variables
v11
