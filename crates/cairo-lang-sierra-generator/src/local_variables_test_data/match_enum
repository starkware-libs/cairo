//! > Match enum

//! > test_runner_name
check_find_local_variables

//! > function_name
foo

//! > function_code
fn foo() -> felt252 {
    let x = bar();
    let literal = 2;
    let w1 = non_literal();
    let y = match x {
        MyEnum::A(a) => {
            revoke_ap();
            a + a
        },
        MyEnum::B(b) => {
            // 'b' is not revoked.
            b + b + b
        },
    };
    // 'w1' is revoked because of the revoke_ap() inside the match.
    let _w2 = w1 + w1;
    // 'literal' is not revoked since it is a const.
    let _w3 = literal + literal;
    revoke_ap();
    // 'y' is revoked.
    y
}

//! > module_code
// Revokes ap since this function is recursive.
fn revoke_ap() -> felt252 {
    revoke_ap()
}

#[inline(never)]
fn non_literal() -> felt252 {
    1
}

fn bar() -> MyEnum {
    bar()
}

#[derive(Drop)]
enum MyEnum {
    A: felt252,
    B: felt252,
}

//! > lowering_format
Parameters:
blk0 (root):
Statements:
  (v0: test::MyEnum) <- test::bar()
  (v1: core::felt252) <- test::non_literal()
  (v2: core::felt252) <- 2
End:
  Match(match_enum(v0) {
    MyEnum::A(v3) => blk1,
    MyEnum::B(v4) => blk2,
  })

blk1:
Statements:
  (v5: core::felt252) <- test::revoke_ap()
  (v6: core::felt252) <- core::felt252_add(v3, v3)
End:
  Goto(blk3, {v6 -> v7})

blk2:
Statements:
  (v8: core::felt252) <- core::felt252_add(v4, v4)
  (v9: core::felt252) <- core::felt252_add(v8, v4)
End:
  Goto(blk3, {v9 -> v7})

blk3:
Statements:
  (v10: core::felt252) <- core::felt252_add(v1, v1)
  (v11: core::felt252) <- core::felt252_add(v2, v2)
  (v12: core::felt252) <- test::revoke_ap()
End:
  Return(v7)

//! > local_variables
v7, v1, v3

//! > ==========================================================================

//! > Match enum early return

//! > test_runner_name
check_find_local_variables

//! > function_name
foo

//! > function_code
fn foo(x: MyEnum, z: felt252) -> felt252 {
    let w1 = z + z;
    match x {
        MyEnum::A(_a) => {
            revoke_ap();
            return 0;
        },
        MyEnum::B(b) => { b + b + b },
    };

    // w1 is not revoked.
    let w2 = w1 + z;

    match x {
        MyEnum::A(a) => {
            // Same as above, without revoke_ap() and without an early return.
            a
        },
        MyEnum::B(b) => { b + b + b },
    };

    // w2 is revoked.
    w2 + z
}

//! > module_code
// Revokes ap since this function is recursive.
fn revoke_ap() -> felt252 {
    revoke_ap()
}

#[derive(Copy, Drop)]
enum MyEnum {
    A: felt252,
    B: felt252,
}

//! > lowering_format
Parameters: v0: test::MyEnum, v1: core::felt252
blk0 (root):
Statements:
  (v2: core::felt252) <- core::felt252_add(v1, v1)
End:
  Match(match_enum(v0) {
    MyEnum::A(v3) => blk1,
    MyEnum::B(v4) => blk2,
  })

blk1:
Statements:
  (v5: core::felt252) <- test::revoke_ap()
  (v6: core::felt252) <- 0
End:
  Return(v6)

blk2:
Statements:
  (v7: core::felt252) <- core::felt252_add(v4, v4)
  (v8: core::felt252) <- core::felt252_add(v7, v4)
  (v9: core::felt252) <- core::felt252_add(v2, v1)
End:
  Match(match_enum(v0) {
    MyEnum::A(v10) => blk3,
    MyEnum::B(v11) => blk4,
  })

blk3:
Statements:
End:
  Goto(blk5, {})

blk4:
Statements:
  (v12: core::felt252) <- core::felt252_add(v11, v11)
  (v13: core::felt252) <- core::felt252_add(v12, v11)
End:
  Goto(blk5, {})

blk5:
Statements:
  (v14: core::felt252) <- core::felt252_add(v9, v1)
End:
  Return(v14)

//! > local_variables
