//! > Local variables in function calls

//! > test_runner_name
test_function_generator

//! > function
fn foo(a: felt) -> felt {
    bar(bar(a)) + bar(bar(a) + bar(a)) + bar(a)
}

//! > function_name
foo

//! > module_code
fn bar(x: felt) -> felt {
    bar(x)
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label0:
alloc_local<felt>() -> ([2])
alloc_local<felt>() -> ([4])
alloc_local<felt>() -> ([6])
finalize_locals() -> ()
dup<felt>([0]) -> ([0], [8])
store_temp<felt>([8]) -> ([8])
function_call<user@test::bar>([8]) -> ([7])
rename<felt>([7]) -> ([9])
function_call<user@test::bar>([9]) -> ([3])
dup<felt>([0]) -> ([0], [10])
store_temp<felt>([10]) -> ([10])
store_local<felt>([4], [3]) -> ([3])
function_call<user@test::bar>([10]) -> ([1])
dup<felt>([0]) -> ([0], [12])
store_temp<felt>([12]) -> ([12])
store_local<felt>([2], [1]) -> ([1])
function_call<user@test::bar>([12]) -> ([11])
felt_add([1], [11]) -> ([13])
store_temp<felt>([13]) -> ([15])
function_call<user@test::bar>([15]) -> ([14])
felt_add([3], [14]) -> ([5])
store_temp<felt>([0]) -> ([17])
store_local<felt>([6], [5]) -> ([5])
function_call<user@test::bar>([17]) -> ([16])
felt_add([5], [16]) -> ([18])
store_temp<felt>([18]) -> ([19])
return([19])

//! > ==========================================================================

//! > Test locals with if

//! > test_runner_name
test_function_generator

//! > function
fn foo() -> felt {
    let a = revoke_ap();
    let x = if true { 1 } else { revoke_ap() };
    revoke_ap();
    a + x
}

//! > function_name
foo

//! > module_code
fn revoke_ap() -> felt {
    revoke_ap()
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label0:
alloc_local<felt>() -> ([1])
finalize_locals() -> ()
function_call<user@test::revoke_ap>() -> ([0])
struct_construct<Unit>() -> ([2])
enum_init<core::bool, 1>([2]) -> ([3])
store_temp<core::bool>([3]) -> ([3])
store_local<felt>([1], [0]) -> ([0])
enum_match<core::bool>([3]) { fallthrough([4]) label1([5]) }
branch_align() -> ()
drop<Unit>([4]) -> ()
function_call<user@test::revoke_ap>() -> ([6])
dup<felt>([6]) -> ([6], [7])
jump() { label3() }
label1:
branch_align() -> ()
drop<Unit>([5]) -> ()
felt_const<1>() -> ([8])
dup<felt>([8]) -> ([8], [7])
store_temp<felt>([7]) -> ([7])
jump() { label3() }
label2:
label3:
function_call<user@test::revoke_ap>() -> ([9])
drop<felt>([9]) -> ()
felt_add([0], [7]) -> ([10])
store_temp<felt>([10]) -> ([11])
return([11])

//! > ==========================================================================

//! > Local used immediately after definition

//! > test_runner_name
test_function_generator

//! > function
fn foo(x: felt) -> felt {
    let a = x + x;
    foo(a) + a
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label0:
alloc_local<felt>() -> ([2])
finalize_locals() -> ()
dup<felt>([0]) -> ([0], [3])
felt_add([3], [0]) -> ([1])
store_local<felt>([2], [1]) -> ([1])
dup<felt>([1]) -> ([1], [5])
store_temp<felt>([5]) -> ([5])
function_call<user@test::foo>([5]) -> ([4])
felt_add([4], [1]) -> ([6])
store_temp<felt>([6]) -> ([7])
return([7])

//! > ==========================================================================

//! > Test locals with dup

//! > test_runner_name
test_function_generator

//! > function
fn foo() -> felt {
    let x = revoke_ap();
    let (y, z) = dup::<felt>(x);
    revoke_ap();
    y
}

//! > function_name
foo

//! > module_code
fn revoke_ap() -> felt {
    revoke_ap()
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label0:
alloc_local<felt>() -> ([1])
finalize_locals() -> ()
function_call<user@test::revoke_ap>() -> ([0])
store_local<felt>([1], [0]) -> ([0])
dup<felt>([0]) -> ([2], [3])
drop<felt>([3]) -> ()
function_call<user@test::revoke_ap>() -> ([4])
drop<felt>([4]) -> ()
store_temp<felt>([2]) -> ([5])
return([5])
