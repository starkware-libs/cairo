//! > Local variables in function calls

//! > test_runner_name
test_function_generator

//! > function
fn foo(a: felt252) -> felt252 {
    bar(bar(a)) + bar(bar(a) + bar(a)) + bar(a)
}

//! > function_name
foo

//! > module_code
fn bar(x: felt252) -> felt252 {
    bar(x)
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label0:
alloc_local<felt252>() -> ([4])
alloc_local<felt252>() -> ([6])
alloc_local<felt252>() -> ([8])
finalize_locals() -> ()
disable_ap_tracking() -> ()
store_temp<RangeCheck>([0]) -> ([12])
store_temp<GasBuiltin>([1]) -> ([13])
dup<felt252>([2]) -> ([2], [14])
store_temp<felt252>([14]) -> ([14])
function_call<user@test::bar>([12], [13], [14]) -> ([9], [10], [11])
enum_match<core::PanicResult::<(core::felt252,)>>([11]) { fallthrough([15]) label1([16]) }
branch_align() -> ()
struct_deconstruct<Tuple<felt252>>([15]) -> ([17])
store_temp<RangeCheck>([9]) -> ([21])
store_temp<GasBuiltin>([10]) -> ([22])
store_temp<felt252>([17]) -> ([23])
function_call<user@test::bar>([21], [22], [23]) -> ([18], [19], [20])
enum_match<core::PanicResult::<(core::felt252,)>>([20]) { fallthrough([24]) label3([25]) }
branch_align() -> ()
struct_deconstruct<Tuple<felt252>>([24]) -> ([5])
store_temp<RangeCheck>([18]) -> ([29])
store_temp<GasBuiltin>([19]) -> ([30])
dup<felt252>([2]) -> ([2], [31])
store_temp<felt252>([31]) -> ([31])
store_local<felt252>([6], [5]) -> ([5])
function_call<user@test::bar>([29], [30], [31]) -> ([26], [27], [28])
enum_match<core::PanicResult::<(core::felt252,)>>([28]) { fallthrough([32]) label5([33]) }
branch_align() -> ()
struct_deconstruct<Tuple<felt252>>([32]) -> ([7])
store_temp<RangeCheck>([26]) -> ([37])
store_temp<GasBuiltin>([27]) -> ([38])
dup<felt252>([2]) -> ([2], [39])
store_temp<felt252>([39]) -> ([39])
store_local<felt252>([8], [7]) -> ([7])
function_call<user@test::bar>([37], [38], [39]) -> ([34], [35], [36])
enum_match<core::PanicResult::<(core::felt252,)>>([36]) { fallthrough([40]) label7([41]) }
branch_align() -> ()
struct_deconstruct<Tuple<felt252>>([40]) -> ([42])
felt252_add([7], [42]) -> ([43])
store_temp<RangeCheck>([34]) -> ([47])
store_temp<GasBuiltin>([35]) -> ([48])
store_temp<felt252>([43]) -> ([49])
function_call<user@test::bar>([47], [48], [49]) -> ([44], [45], [46])
enum_match<core::PanicResult::<(core::felt252,)>>([46]) { fallthrough([50]) label9([51]) }
branch_align() -> ()
struct_deconstruct<Tuple<felt252>>([50]) -> ([52])
felt252_add([5], [52]) -> ([3])
store_temp<RangeCheck>([44]) -> ([56])
store_temp<GasBuiltin>([45]) -> ([57])
store_temp<felt252>([2]) -> ([58])
store_local<felt252>([4], [3]) -> ([3])
function_call<user@test::bar>([56], [57], [58]) -> ([53], [54], [55])
enum_match<core::PanicResult::<(core::felt252,)>>([55]) { fallthrough([59]) label11([60]) }
branch_align() -> ()
struct_deconstruct<Tuple<felt252>>([59]) -> ([61])
felt252_add([3], [61]) -> ([62])
struct_construct<Tuple<felt252>>([62]) -> ([63])
enum_init<core::PanicResult::<(core::felt252,)>, 0>([63]) -> ([64])
store_temp<RangeCheck>([53]) -> ([65])
store_temp<GasBuiltin>([54]) -> ([66])
store_temp<core::PanicResult::<(core::felt252,)>>([64]) -> ([67])
return([65], [66], [67])
label11:
branch_align() -> ()
drop<felt252>([3]) -> ()
enum_init<core::PanicResult::<(core::felt252,)>, 1>([60]) -> ([68])
store_temp<RangeCheck>([53]) -> ([69])
store_temp<GasBuiltin>([54]) -> ([70])
store_temp<core::PanicResult::<(core::felt252,)>>([68]) -> ([71])
return([69], [70], [71])
label12:
label9:
branch_align() -> ()
drop<felt252>([2]) -> ()
drop<Uninitialized<felt252>>([4]) -> ()
drop<felt252>([5]) -> ()
enum_init<core::PanicResult::<(core::felt252,)>, 1>([51]) -> ([72])
store_temp<RangeCheck>([44]) -> ([73])
store_temp<GasBuiltin>([45]) -> ([74])
store_temp<core::PanicResult::<(core::felt252,)>>([72]) -> ([75])
return([73], [74], [75])
label10:
label7:
branch_align() -> ()
drop<Uninitialized<felt252>>([4]) -> ()
drop<felt252>([2]) -> ()
drop<felt252>([5]) -> ()
drop<felt252>([7]) -> ()
enum_init<core::PanicResult::<(core::felt252,)>, 1>([41]) -> ([76])
store_temp<RangeCheck>([34]) -> ([77])
store_temp<GasBuiltin>([35]) -> ([78])
store_temp<core::PanicResult::<(core::felt252,)>>([76]) -> ([79])
return([77], [78], [79])
label8:
label5:
branch_align() -> ()
drop<Uninitialized<felt252>>([4]) -> ()
drop<felt252>([2]) -> ()
drop<felt252>([5]) -> ()
drop<Uninitialized<felt252>>([8]) -> ()
enum_init<core::PanicResult::<(core::felt252,)>, 1>([33]) -> ([80])
store_temp<RangeCheck>([26]) -> ([81])
store_temp<GasBuiltin>([27]) -> ([82])
store_temp<core::PanicResult::<(core::felt252,)>>([80]) -> ([83])
return([81], [82], [83])
label6:
label3:
branch_align() -> ()
drop<Uninitialized<felt252>>([4]) -> ()
drop<felt252>([2]) -> ()
drop<Uninitialized<felt252>>([8]) -> ()
drop<Uninitialized<felt252>>([6]) -> ()
enum_init<core::PanicResult::<(core::felt252,)>, 1>([25]) -> ([84])
store_temp<RangeCheck>([18]) -> ([85])
store_temp<GasBuiltin>([19]) -> ([86])
store_temp<core::PanicResult::<(core::felt252,)>>([84]) -> ([87])
return([85], [86], [87])
label4:
label1:
branch_align() -> ()
drop<Uninitialized<felt252>>([4]) -> ()
drop<felt252>([2]) -> ()
drop<Uninitialized<felt252>>([6]) -> ()
drop<Uninitialized<felt252>>([8]) -> ()
enum_init<core::PanicResult::<(core::felt252,)>, 1>([16]) -> ([88])
store_temp<RangeCheck>([9]) -> ([89])
store_temp<GasBuiltin>([10]) -> ([90])
store_temp<core::PanicResult::<(core::felt252,)>>([88]) -> ([91])
return([89], [90], [91])
label2:

//! > ==========================================================================

//! > Test locals with if

//! > test_runner_name
test_function_generator

//! > function
fn foo(b: bool) -> felt252 {
    let a = revoke_ap();
    let x = if b { 1 } else { revoke_ap() };
    revoke_ap();
    a + x
}

//! > function_name
foo

//! > module_code
fn revoke_ap() -> felt252 {
    revoke_ap()
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label0:
alloc_local<felt252>() -> ([4])
alloc_local<felt252>() -> ([6])
finalize_locals() -> ()
disable_ap_tracking() -> ()
store_temp<RangeCheck>([0]) -> ([10])
store_temp<GasBuiltin>([1]) -> ([11])
function_call<user@test::revoke_ap>([10], [11]) -> ([7], [8], [9])
enum_match<core::PanicResult::<(core::felt252,)>>([9]) { fallthrough([12]) label1([13]) }
branch_align() -> ()
struct_deconstruct<Tuple<felt252>>([12]) -> ([5])
store_local<felt252>([6], [5]) -> ([5])
enum_match<core::bool>([2]) { fallthrough([14]) label3([15]) }
branch_align() -> ()
drop<Unit>([14]) -> ()
store_temp<RangeCheck>([7]) -> ([19])
store_temp<GasBuiltin>([8]) -> ([20])
function_call<user@test::revoke_ap>([19], [20]) -> ([16], [17], [18])
enum_match<core::PanicResult::<(core::felt252,)>>([18]) { fallthrough([21]) label5([22]) }
branch_align() -> ()
struct_deconstruct<Tuple<felt252>>([21]) -> ([23])
store_temp<RangeCheck>([16]) -> ([24])
store_temp<GasBuiltin>([17]) -> ([25])
store_temp<felt252>([23]) -> ([3])
jump() { label7() }
label5:
branch_align() -> ()
drop<felt252>([5]) -> ()
drop<Uninitialized<felt252>>([4]) -> ()
enum_init<core::PanicResult::<(core::felt252,)>, 1>([22]) -> ([26])
store_temp<RangeCheck>([16]) -> ([27])
store_temp<GasBuiltin>([17]) -> ([28])
store_temp<core::PanicResult::<(core::felt252,)>>([26]) -> ([29])
return([27], [28], [29])
label6:
label3:
branch_align() -> ()
drop<Unit>([15]) -> ()
felt252_const<1>() -> ([30])
store_temp<RangeCheck>([7]) -> ([24])
store_temp<GasBuiltin>([8]) -> ([25])
store_temp<felt252>([30]) -> ([3])
label7:
store_temp<RangeCheck>([24]) -> ([34])
store_temp<GasBuiltin>([25]) -> ([35])
store_local<felt252>([4], [3]) -> ([3])
function_call<user@test::revoke_ap>([34], [35]) -> ([31], [32], [33])
enum_match<core::PanicResult::<(core::felt252,)>>([33]) { fallthrough([36]) label8([37]) }
branch_align() -> ()
struct_deconstruct<Tuple<felt252>>([36]) -> ([38])
drop<felt252>([38]) -> ()
felt252_add([5], [3]) -> ([39])
struct_construct<Tuple<felt252>>([39]) -> ([40])
enum_init<core::PanicResult::<(core::felt252,)>, 0>([40]) -> ([41])
store_temp<RangeCheck>([31]) -> ([42])
store_temp<GasBuiltin>([32]) -> ([43])
store_temp<core::PanicResult::<(core::felt252,)>>([41]) -> ([44])
return([42], [43], [44])
label8:
branch_align() -> ()
drop<felt252>([3]) -> ()
drop<felt252>([5]) -> ()
enum_init<core::PanicResult::<(core::felt252,)>, 1>([37]) -> ([45])
store_temp<RangeCheck>([31]) -> ([46])
store_temp<GasBuiltin>([32]) -> ([47])
store_temp<core::PanicResult::<(core::felt252,)>>([45]) -> ([48])
return([46], [47], [48])
label9:
label4:
label1:
branch_align() -> ()
drop<Uninitialized<felt252>>([4]) -> ()
drop<core::bool>([2]) -> ()
drop<Uninitialized<felt252>>([6]) -> ()
enum_init<core::PanicResult::<(core::felt252,)>, 1>([13]) -> ([49])
store_temp<RangeCheck>([7]) -> ([50])
store_temp<GasBuiltin>([8]) -> ([51])
store_temp<core::PanicResult::<(core::felt252,)>>([49]) -> ([52])
return([50], [51], [52])
label2:

//! > ==========================================================================

//! > Local used immediately after definition

//! > test_runner_name
test_function_generator

//! > function
fn foo(x: felt252) -> felt252 {
    let a = x + x;
    foo(a) + a
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label0:
alloc_local<felt252>() -> ([4])
finalize_locals() -> ()
disable_ap_tracking() -> ()
get_builtin_costs() -> ([5])
store_temp<BuiltinCosts>([5]) -> ([5])
withdraw_gas_all([0], [1], [5]) { fallthrough([6], [7]) label1([8], [9]) }
branch_align() -> ()
dup<felt252>([2]) -> ([2], [10])
felt252_add([10], [2]) -> ([3])
store_temp<RangeCheck>([6]) -> ([14])
store_temp<GasBuiltin>([7]) -> ([15])
store_local<felt252>([4], [3]) -> ([3])
dup<felt252>([3]) -> ([3], [16])
store_temp<felt252>([16]) -> ([16])
function_call<user@test::foo>([14], [15], [16]) -> ([11], [12], [13])
enum_match<core::PanicResult::<(core::felt252,)>>([13]) { fallthrough([17]) label3([18]) }
branch_align() -> ()
struct_deconstruct<Tuple<felt252>>([17]) -> ([19])
felt252_add([19], [3]) -> ([20])
struct_construct<Tuple<felt252>>([20]) -> ([21])
enum_init<core::PanicResult::<(core::felt252,)>, 0>([21]) -> ([22])
store_temp<RangeCheck>([11]) -> ([23])
store_temp<GasBuiltin>([12]) -> ([24])
store_temp<core::PanicResult::<(core::felt252,)>>([22]) -> ([25])
return([23], [24], [25])
label3:
branch_align() -> ()
drop<felt252>([3]) -> ()
enum_init<core::PanicResult::<(core::felt252,)>, 1>([18]) -> ([26])
store_temp<RangeCheck>([11]) -> ([27])
store_temp<GasBuiltin>([12]) -> ([28])
store_temp<core::PanicResult::<(core::felt252,)>>([26]) -> ([29])
return([27], [28], [29])
label4:
label1:
branch_align() -> ()
drop<felt252>([2]) -> ()
drop<Uninitialized<felt252>>([4]) -> ()
array_new<felt252>() -> ([30])
felt252_const<375233589013918064796019>() -> ([31])
store_temp<felt252>([31]) -> ([31])
array_append<felt252>([30], [31]) -> ([32])
enum_init<core::PanicResult::<(core::felt252,)>, 1>([32]) -> ([33])
store_temp<RangeCheck>([8]) -> ([34])
store_temp<GasBuiltin>([9]) -> ([35])
store_temp<core::PanicResult::<(core::felt252,)>>([33]) -> ([36])
return([34], [35], [36])
label2:

//! > ==========================================================================

//! > Test locals with dup

//! > test_runner_name
test_function_generator

//! > function
fn foo() -> felt252 {
    let x = revoke_ap();
    let (y, z) = dup::<felt252>(x);
    revoke_ap();
    y
}

//! > function_name
foo

//! > module_code
fn revoke_ap() -> felt252 {
    revoke_ap()
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label0:
alloc_local<felt252>() -> ([3])
finalize_locals() -> ()
disable_ap_tracking() -> ()
store_temp<RangeCheck>([0]) -> ([7])
store_temp<GasBuiltin>([1]) -> ([8])
function_call<user@test::revoke_ap>([7], [8]) -> ([4], [5], [6])
enum_match<core::PanicResult::<(core::felt252,)>>([6]) { fallthrough([9]) label1([10]) }
branch_align() -> ()
struct_deconstruct<Tuple<felt252>>([9]) -> ([2])
store_local<felt252>([3], [2]) -> ([2])
dup<felt252>([2]) -> ([11], [12])
drop<felt252>([12]) -> ()
store_temp<RangeCheck>([4]) -> ([16])
store_temp<GasBuiltin>([5]) -> ([17])
function_call<user@test::revoke_ap>([16], [17]) -> ([13], [14], [15])
enum_match<core::PanicResult::<(core::felt252,)>>([15]) { fallthrough([18]) label3([19]) }
branch_align() -> ()
struct_deconstruct<Tuple<felt252>>([18]) -> ([20])
drop<felt252>([20]) -> ()
struct_construct<Tuple<felt252>>([11]) -> ([21])
enum_init<core::PanicResult::<(core::felt252,)>, 0>([21]) -> ([22])
store_temp<RangeCheck>([13]) -> ([23])
store_temp<GasBuiltin>([14]) -> ([24])
store_temp<core::PanicResult::<(core::felt252,)>>([22]) -> ([25])
return([23], [24], [25])
label3:
branch_align() -> ()
drop<felt252>([11]) -> ()
enum_init<core::PanicResult::<(core::felt252,)>, 1>([19]) -> ([26])
store_temp<RangeCheck>([13]) -> ([27])
store_temp<GasBuiltin>([14]) -> ([28])
store_temp<core::PanicResult::<(core::felt252,)>>([26]) -> ([29])
return([27], [28], [29])
label4:
label1:
branch_align() -> ()
drop<Uninitialized<felt252>>([3]) -> ()
enum_init<core::PanicResult::<(core::felt252,)>, 1>([10]) -> ([30])
store_temp<RangeCheck>([4]) -> ([31])
store_temp<GasBuiltin>([5]) -> ([32])
store_temp<core::PanicResult::<(core::felt252,)>>([30]) -> ([33])
return([31], [32], [33])
label2:

//! > ==========================================================================

//! > Partial param local variable of local variable

//! > test_runner_name
test_function_generator

//! > function
fn foo(strct: MyStruct) -> felt252 {
    let a = strct.a;
    internal::revoke_ap_tracking();
    a
}

//! > function_name
foo

//! > module_code
struct MyStruct {
    a: felt252,
}

impl MyStructDrop of Drop::<MyStruct>;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label0:
disable_ap_tracking() -> ()
struct_deconstruct<test::MyStruct>([0]) -> ([1])
revoke_ap_tracking() -> ()
store_temp<felt252>([1]) -> ([2])
return([2])

//! > ==========================================================================

//! > Partial param local variable of struct of struct

//! > test_runner_name
test_function_generator

//! > function
fn foo() -> felt252 {
	let strct1 = MyStruct1{strct: MyStruct2{value: 12}};
    let strct2 = strct1.strct;
    let value = strct1.strct.value;
    internal::revoke_ap_tracking();
    get_value_1(strct1) + get_value_2(strct2) + value
}

//! > function_name
foo

//! > module_code
struct MyStruct1 {
    strct: MyStruct2,
}

#[derive(Copy, Drop)]
struct MyStruct2 {
    value: felt252,
}

fn get_value_1(strct: MyStruct1) -> felt252{
    strct.strct.value
}

fn get_value_2(strct: MyStruct2) -> felt252{
    strct.value
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label2:
alloc_local<test::MyStruct2>() -> ([1])
finalize_locals() -> ()
disable_ap_tracking() -> ()
felt252_const<12>() -> ([2])
struct_construct<test::MyStruct2>([2]) -> ([3])
struct_construct<test::MyStruct1>([3]) -> ([4])
struct_deconstruct<test::MyStruct1>([4]) -> ([0])
store_local<test::MyStruct2>([1], [0]) -> ([0])
dup<test::MyStruct2>([0]) -> ([0], [5])
struct_deconstruct<test::MyStruct2>([5]) -> ([6])
revoke_ap_tracking() -> ()
dup<felt252>([6]) -> ([6], [7])
struct_construct<test::MyStruct2>([7]) -> ([8])
struct_construct<test::MyStruct1>([8]) -> ([9])
store_temp<test::MyStruct1>([9]) -> ([11])
function_call<user@test::get_value_1>([11]) -> ([10])
store_temp<test::MyStruct2>([0]) -> ([13])
function_call<user@test::get_value_2>([13]) -> ([12])
felt252_add([10], [12]) -> ([14])
store_temp<felt252>([14]) -> ([14])
felt252_add([14], [6]) -> ([15])
store_temp<felt252>([15]) -> ([16])
return([16])
