//! > Local variables in function calls

//! > test_runner_name
test_function_generator

//! > function
fn foo(a: felt252) -> felt252 {
    bar(bar(a)) + bar(bar(a) + bar(a)) + bar(a)
}

//! > function_name
foo

//! > module_code
fn bar(x: felt252) -> felt252 {
    bar(x)
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label_test::foo::0:
alloc_local<felt252>() -> ([2])
alloc_local<felt252>() -> ([4])
alloc_local<felt252>() -> ([6])
finalize_locals() -> ()
disable_ap_tracking() -> ()
dup<felt252>([0]) -> ([0], [8])
store_temp<felt252>([8]) -> ([8])
function_call<user@test::bar>([8]) -> ([7])
rename<felt252>([7]) -> ([9])
function_call<user@test::bar>([9]) -> ([3])
dup<felt252>([0]) -> ([0], [10])
store_temp<felt252>([10]) -> ([10])
store_local<felt252>([4], [3]) -> ([3])
function_call<user@test::bar>([10]) -> ([5])
dup<felt252>([0]) -> ([0], [12])
store_temp<felt252>([12]) -> ([12])
store_local<felt252>([6], [5]) -> ([5])
function_call<user@test::bar>([12]) -> ([11])
felt252_add([5], [11]) -> ([13])
store_temp<felt252>([13]) -> ([15])
function_call<user@test::bar>([15]) -> ([14])
felt252_add([3], [14]) -> ([1])
store_temp<felt252>([0]) -> ([17])
store_local<felt252>([2], [1]) -> ([1])
function_call<user@test::bar>([17]) -> ([16])
felt252_add([1], [16]) -> ([18])
store_temp<felt252>([18]) -> ([19])
return([19])

//! > ==========================================================================

//! > Test locals with if

//! > test_runner_name
test_function_generator

//! > function
fn foo(b: bool) -> felt252 {
    let a = revoke_ap();
    let x = if b { 1 } else { revoke_ap() };
    revoke_ap();
    a + x
}

//! > function_name
foo

//! > module_code
fn revoke_ap() -> felt252 {
    revoke_ap()
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label_test::foo::0:
alloc_local<felt252>() -> ([2])
alloc_local<felt252>() -> ([4])
finalize_locals() -> ()
disable_ap_tracking() -> ()
function_call<user@test::revoke_ap>() -> ([3])
store_local<felt252>([4], [3]) -> ([3])
enum_match<core::bool>([0]) { fallthrough([5]) label_test::foo::1([6]) }
branch_align() -> ()
drop<Unit>([5]) -> ()
function_call<user@test::revoke_ap>() -> ([7])
rename<felt252>([7]) -> ([1])
jump() { label_test::foo::3() }
label_test::foo::1:
branch_align() -> ()
drop<Unit>([6]) -> ()
felt252_const<1>() -> ([8])
store_temp<felt252>([8]) -> ([1])
label_test::foo::3:
store_local<felt252>([2], [1]) -> ([1])
function_call<user@test::revoke_ap>() -> ([9])
drop<felt252>([9]) -> ()
felt252_add([3], [1]) -> ([10])
store_temp<felt252>([10]) -> ([11])
return([11])
label_test::foo::2:

//! > ==========================================================================

//! > Local used immediately after definition

//! > test_runner_name
test_function_generator

//! > function
fn foo(x: felt252) -> felt252 {
    let a = x + x;
    foo(a) + a
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label_test::foo::0:
alloc_local<felt252>() -> ([2])
finalize_locals() -> ()
disable_ap_tracking() -> ()
dup<felt252>([0]) -> ([0], [3])
felt252_add([3], [0]) -> ([1])
store_local<felt252>([2], [1]) -> ([1])
dup<felt252>([1]) -> ([1], [5])
store_temp<felt252>([5]) -> ([5])
function_call<user@test::foo>([5]) -> ([4])
felt252_add([4], [1]) -> ([6])
store_temp<felt252>([6]) -> ([7])
return([7])

//! > ==========================================================================

//! > Test locals with dup

//! > test_runner_name
test_function_generator

//! > function
fn foo() -> felt252 {
    let x = revoke_ap();
    let (y, z) = dup::<felt252>(x);
    revoke_ap();
    y
}

//! > function_name
foo

//! > module_code
fn revoke_ap() -> felt252 {
    revoke_ap()
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label_test::foo::0:
alloc_local<felt252>() -> ([1])
finalize_locals() -> ()
disable_ap_tracking() -> ()
function_call<user@test::revoke_ap>() -> ([0])
store_local<felt252>([1], [0]) -> ([0])
dup<felt252>([0]) -> ([2], [3])
drop<felt252>([3]) -> ()
function_call<user@test::revoke_ap>() -> ([4])
drop<felt252>([4]) -> ()
store_temp<felt252>([2]) -> ([5])
return([5])

//! > ==========================================================================

//! > Partial param local variable of local variable

//! > test_runner_name
test_function_generator

//! > function
fn foo(strct: MyStruct) -> felt252 {
    let MyStruct{a, b} = strct;
    immovable(b);
    internal::revoke_ap_tracking();
    a
}

//! > function_name
foo

//! > module_code
struct MyStruct {
    a: felt252,
    b: felt252,
}

impl MyStructDrop of Drop::<MyStruct>;

#[inline(never)]
fn immovable<T>(t: T) -> T { t }

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label_test::foo::0:
disable_ap_tracking() -> ()
struct_deconstruct<test::MyStruct>([0]) -> ([1], [2])
store_temp<felt252>([2]) -> ([4])
function_call<user@test::immovable::<core::felt252>>([4]) -> ([3])
drop<felt252>([3]) -> ()
revoke_ap_tracking() -> ()
store_temp<felt252>([1]) -> ([5])
return([5])

//! > ==========================================================================

//! > Partial param local variable of struct of struct

//! > test_runner_name
test_function_generator

//! > function
fn foo() -> felt252 {
	let strct1 = MyStruct1{strct: MyStruct2{value: 12}};
    let strct2 = strct1.strct;
    let value = strct1.strct.value;
    immovable(value);
    internal::revoke_ap_tracking();
    get_value_1(strct1) + get_value_2(strct2) + value
}

//! > function_name
foo

//! > module_code
struct MyStruct1 {
    strct: MyStruct2,
}

#[derive(Copy, Drop)]
struct MyStruct2 {
    value: felt252,
}

fn get_value_1(strct: MyStruct1) -> felt252{
    strct.strct.value
}

fn get_value_2(strct: MyStruct2) -> felt252{
    strct.value
}

#[inline(never)]
fn immovable<T>(t: T) -> T { t }

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label_test::foo::0:
alloc_local<test::MyStruct2>() -> ([1])
finalize_locals() -> ()
disable_ap_tracking() -> ()
felt252_const<12>() -> ([2])
struct_construct<test::MyStruct2>([2]) -> ([3])
struct_construct<test::MyStruct1>([3]) -> ([4])
struct_deconstruct<test::MyStruct1>([4]) -> ([0])
store_local<test::MyStruct2>([1], [0]) -> ([0])
dup<test::MyStruct2>([0]) -> ([0], [5])
struct_deconstruct<test::MyStruct2>([5]) -> ([6])
dup<felt252>([6]) -> ([6], [8])
store_temp<felt252>([8]) -> ([8])
function_call<user@test::immovable::<core::felt252>>([8]) -> ([7])
drop<felt252>([7]) -> ()
revoke_ap_tracking() -> ()
dup<felt252>([6]) -> ([6], [9])
struct_construct<test::MyStruct2>([9]) -> ([10])
struct_construct<test::MyStruct1>([10]) -> ([11])
store_temp<test::MyStruct1>([11]) -> ([13])
function_call<user@test::get_value_1>([13]) -> ([12])
store_temp<test::MyStruct2>([0]) -> ([15])
function_call<user@test::get_value_2>([15]) -> ([14])
felt252_add([12], [14]) -> ([16])
store_temp<felt252>([16]) -> ([16])
felt252_add([16], [6]) -> ([17])
store_temp<felt252>([17]) -> ([18])
return([18])
