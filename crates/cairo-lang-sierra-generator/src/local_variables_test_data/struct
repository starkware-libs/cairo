//! > Block

//! > test_runner_name
check_find_local_variables

//! > function_name
foo

//! > function_code
fn foo(x: felt) -> felt {
    let x2 = x + x;
    revoke_ap();
    let s = MyStruct{a: x, b: x2};
    let s2 = MyStruct{a: s.a, b: 0};
    let s3 = MyStruct{a: x, b: 1};
    revoke_ap();
    s3.a
}

//! > module_code
// Revokes ap since this function is recursive.
fn revoke_ap() -> felt {
    revoke_ap()
}

struct MyStruct {
    a: felt,
    b: felt,
}

impl MyStructDrop of Drop::<MyStruct>;

//! > lowering_format
blk0 (root):
Inputs: v0: core::felt
Statements:
End:
  Goto(blk1, {})

blk1:
Inputs:
Statements:
  (v13: core::felt) <- core::felt_add(v0, v0)
End:
  Goto(blk2, {})

blk2:
Inputs:
Statements:
  (v2: core::felt) <- test::revoke_ap()
  (v3: test::MyStruct) <- struct_construct(v0, v13)
  (v4: core::felt, v5: core::felt) <- struct_destructure(v3)
  (v6: core::felt) <- 0u
  (v7: test::MyStruct) <- struct_construct(v4, v6)
  (v8: core::felt) <- 1u
  (v9: test::MyStruct) <- struct_construct(v0, v8)
  (v10: core::felt) <- test::revoke_ap()
  (v11: core::felt, v12: core::felt) <- struct_destructure(v9)
End:
  Return(v11)

//! > local_variables
v9, v13

//! > block_infos
