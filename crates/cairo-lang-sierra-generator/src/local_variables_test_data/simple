//! > Simple local variables

//! > test_runner_name
check_find_local_variables

//! > function_name
foo

//! > function_code
fn foo(x: felt) -> felt {
    let y0 = x + x;
    let y1 = y0 + y0;
    let y2 = y1 + y1;  // Note: y2 is not used below.
    revoke_ap();
    let z = x + y1;
    revoke_ap();
    let w = x + y1 + z;
    x
}

//! > module_code
// Revokes ap since this function is recursive.
fn revoke_ap() -> felt {
    revoke_ap()
}

//! > lowering_format
blk0 (root):
Inputs: v0: core::felt
Statements:
End:
  Fallthrough(blk2, {})

blk1:
Inputs:
Statements:
End:
  Fallthrough(blk4, {})

blk2:
Inputs:
Statements:
  (v9: core::felt) <- core::felt_add(v0, v0)
End:
  Fallthrough(blk1, {v9 -> v1})

blk3:
Inputs:
Statements:
End:
  Fallthrough(blk6, {})

blk4:
Inputs:
Statements:
  (v10: core::felt) <- core::felt_add(v1, v1)
End:
  Fallthrough(blk3, {v10 -> v2})

blk5:
Inputs:
Statements:
  (v4: core::felt) <- test::revoke_ap()
End:
  Fallthrough(blk8, {})

blk6:
Inputs:
Statements:
  (v11: core::felt) <- core::felt_add(v2, v2)
End:
  Fallthrough(blk5, {v11 -> v3})

blk7:
Inputs:
Statements:
  (v6: core::felt) <- test::revoke_ap()
End:
  Fallthrough(blk10, {})

blk8:
Inputs:
Statements:
  (v12: core::felt) <- core::felt_add(v0, v2)
End:
  Fallthrough(blk7, {v12 -> v5})

blk9:
Inputs:
Statements:
End:
  Fallthrough(blk12, {})

blk10:
Inputs:
Statements:
  (v13: core::felt) <- core::felt_add(v0, v2)
End:
  Fallthrough(blk9, {v13 -> v7})

blk11:
Inputs:
Statements:
End:
  Return(v0)

blk12:
Inputs:
Statements:
  (v14: core::felt) <- core::felt_add(v7, v5)
End:
  Fallthrough(blk11, {v14 -> v8})

//! > local_variables
v10, v12

//! > block_infos

//! > ==========================================================================

//! > Return revoked value

//! > test_runner_name
check_find_local_variables

//! > function_name
foo

//! > function_code
fn foo(x: felt) -> felt {
    let y0 = x + x;
    revoke_ap();
    return y0;
}

//! > module_code
// Revokes ap since this function is recursive.
fn revoke_ap() -> felt {
    revoke_ap()
}

//! > lowering_format
blk0 (root):
Inputs: v0: core::felt
Statements:
End:
  Fallthrough(blk2, {})

blk1:
Inputs:
Statements:
  (v2: core::felt) <- test::revoke_ap()
End:
  Return(v1)

blk2:
Inputs:
Statements:
  (v3: core::felt) <- core::felt_add(v0, v0)
End:
  Fallthrough(blk1, {v3 -> v1})

//! > local_variables
v3

//! > block_infos

//! > ==========================================================================

//! > SameAsParam

//! > test_runner_name
check_find_local_variables

//! > function_name
foo

//! > function_code
fn foo(x: felt) -> felt {
    let y = x + x;
    let z = y + y;
    let (z0, z1) = dup::<felt>(z);
    let (z2, z3) = dup::<felt>(z1);
    let (z4, z5) = dup::<felt>(z2);
    revoke_ap();
    z4 + z5
}

//! > module_code
// Revokes ap since this function is recursive.
fn revoke_ap() -> felt {
    revoke_ap()
}

//! > lowering_format
blk0 (root):
Inputs: v0: core::felt
Statements:
End:
  Fallthrough(blk2, {})

blk1:
Inputs:
Statements:
End:
  Fallthrough(blk4, {})

blk2:
Inputs:
Statements:
  (v11: core::felt) <- core::felt_add(v0, v0)
End:
  Fallthrough(blk1, {v11 -> v1})

blk3:
Inputs:
Statements:
  (v3: core::felt, v4: core::felt) <- core::dup::<core::felt>(v2)
  (v5: core::felt, v6: core::felt) <- core::dup::<core::felt>(v4)
  (v7: core::felt, v8: core::felt) <- core::dup::<core::felt>(v5)
  (v9: core::felt) <- test::revoke_ap()
End:
  Fallthrough(blk6, {})

blk4:
Inputs:
Statements:
  (v12: core::felt) <- core::felt_add(v1, v1)
End:
  Fallthrough(blk3, {v12 -> v2})

blk5:
Inputs:
Statements:
End:
  Return(v10)

blk6:
Inputs:
Statements:
  (v13: core::felt) <- core::felt_add(v7, v8)
End:
  Fallthrough(blk5, {v13 -> v10})

//! > local_variables
v12

//! > block_infos
