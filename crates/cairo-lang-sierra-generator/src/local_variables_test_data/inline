//! > inlining of a function with a local var.

//! > test_runner_name
check_find_local_variables

//! > function_name
foo

//! > function_code
fn foo(x: felt252) -> felt252 {
    bar(x)
}

//! > module_code
#[inline(always)]
fn bar(x: felt252) -> felt252 {
    if x == 0 {
        return x + 1;
    } else {
        let a = x + x;
        // The call will force `a` to be a local variable.
        revoke_ap();
        a
    }
}

// Revokes ap since this function is recursive.
fn revoke_ap() {
    revoke_ap()
}

//! > lowering_format
Parameters: v17: core::RangeCheck, v18: core::gas::GasBuiltin, v0: core::felt252
blk0 (root):
Statements:
End:
  Match(match core::felt252_is_zero(v0) {
    IsZeroResult::Zero => blk1,
    IsZeroResult::NonZero(v2) => blk2,
  })

blk1:
Statements:
  (v3: core::felt252) <- 1u
  (v8: core::felt252) <- core::felt252_add(v0, v3)
End:
  Goto(blk4, {v17 -> v25, v18 -> v26, v8 -> v1})

blk2:
Statements:
  (v9: core::felt252) <- core::felt252_add(v0, v0)
  (v31: core::RangeCheck, v32: core::gas::GasBuiltin, v12: core::PanicResult::<((),)>) <- test::revoke_ap(v17, v18)
End:
  Match(match_enum(v12) {
    PanicResult::Ok(v13) => blk3,
    PanicResult::Err(v15) => blk5,
  })

blk3:
Statements:
  (v14: ()) <- struct_destructure(v13)
End:
  Goto(blk4, {v31 -> v25, v32 -> v26, v9 -> v1})

blk4:
Statements:
  (v10: (core::felt252,)) <- struct_construct(v1)
  (v11: core::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v10)
End:
  Return(v25, v26, v11)

blk5:
Statements:
  (v16: core::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v15)
End:
  Return(v31, v32, v16)

//! > local_variables
v9

//! > block_infos
blk1: known_ap_change: true.

//! > ==========================================================================

//! > inlining of a function with a revoking goto.

//! > test_runner_name
check_find_local_variables

//! > function_name
foo

//! > function_code
fn foo(x: felt252) -> felt252 {
    bar(x) + x
}

//! > module_code
#[inline(always)]
fn bar(x: felt252) -> felt252 {
    if x == 0 {
        revoke_ap();
        return x + 1;
    } else {
        let a = x + x;
        // The call will force `a` to be a local variable.
        revoke_ap();
        a
    }
}

// Revokes ap since this function is recursive.
fn revoke_ap() {
  revoke_ap()
}

//! > lowering_format
Parameters: v25: core::RangeCheck, v26: core::gas::GasBuiltin, v0: core::felt252
blk0 (root):
Statements:
End:
  Match(match core::felt252_is_zero(v0) {
    IsZeroResult::Zero => blk1,
    IsZeroResult::NonZero(v3) => blk4,
  })

blk1:
Statements:
  (v29: core::RangeCheck, v30: core::gas::GasBuiltin, v13: core::PanicResult::<((),)>) <- test::revoke_ap(v25, v26)
End:
  Match(match_enum(v13) {
    PanicResult::Ok(v14) => blk2,
    PanicResult::Err(v16) => blk3,
  })

blk2:
Statements:
  (v15: ()) <- struct_destructure(v14)
  (v5: core::felt252) <- 1u
  (v11: core::felt252) <- core::felt252_add(v0, v5)
End:
  Goto(blk6, {v29 -> v37, v30 -> v38, v11 -> v1})

blk3:
Statements:
  (v23: core::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v16)
End:
  Return(v29, v30, v23)

blk4:
Statements:
  (v12: core::felt252) <- core::felt252_add(v0, v0)
  (v47: core::RangeCheck, v48: core::gas::GasBuiltin, v19: core::PanicResult::<((),)>) <- test::revoke_ap(v25, v26)
End:
  Match(match_enum(v19) {
    PanicResult::Ok(v20) => blk5,
    PanicResult::Err(v22) => blk7,
  })

blk5:
Statements:
  (v21: ()) <- struct_destructure(v20)
End:
  Goto(blk6, {v47 -> v37, v48 -> v38, v12 -> v1})

blk6:
Statements:
  (v10: core::felt252) <- core::felt252_add(v1, v0)
  (v17: (core::felt252,)) <- struct_construct(v10)
  (v18: core::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v17)
End:
  Return(v37, v38, v18)

blk7:
Statements:
  (v24: core::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v22)
End:
  Return(v47, v48, v24)

//! > local_variables
v12

//! > block_infos
blk1: known_ap_change: true.

//! > ==========================================================================

//! > Remapping - fallthrough without incoming gotos

//! > test_runner_name
check_find_local_variables

//! > function_name
foo

//! > function_code
fn foo(x: felt252) -> felt252 {
    let y = bar(x + 1);
    revoke_ap();
    y
}

//! > module_code
#[inline(always)]
fn bar(x: felt252) -> felt252 {
    x
}

// Revokes ap since this function is recursive.
fn revoke_ap() {
  revoke_ap()
}

//! > lowering_format
Parameters: v13: core::RangeCheck, v14: core::gas::GasBuiltin, v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- 1u
  (v5: core::felt252) <- core::felt252_add(v0, v1)
  (v23: core::RangeCheck, v24: core::gas::GasBuiltin, v6: core::PanicResult::<((),)>) <- test::revoke_ap(v13, v14)
End:
  Match(match_enum(v6) {
    PanicResult::Ok(v7) => blk1,
    PanicResult::Err(v9) => blk2,
  })

blk1:
Statements:
  (v8: ()) <- struct_destructure(v7)
  (v10: (core::felt252,)) <- struct_construct(v5)
  (v11: core::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v10)
End:
  Return(v23, v24, v11)

blk2:
Statements:
  (v12: core::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v9)
End:
  Return(v23, v24, v12)

//! > local_variables
v5

//! > block_infos
