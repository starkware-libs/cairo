//! > inlining of a function with a local var.

//! > test_runner_name
check_find_local_variables

//! > function_name
foo

//! > function_code
fn foo(x: felt) -> felt {
    bar(x)
}

//! > module_code
#[inline(always)]
fn bar(x: felt) -> felt {
    if x == 0 {
        return x + 1;
    } else {
        let a = x + x;
        // The call will force `a` to be a local variable.
        revoke_ap();
        a
    }
}

// Revokes ap since this function is recursive.
fn revoke_ap() {
    revoke_ap()
}

//! > lowering_format
blk0 (root):
Inputs: v0: core::felt
Statements:
End:
  Fallthrough(blk2, {})

blk1:
Inputs:
Statements:
End:
  Return(v1)

blk2:
Inputs:
Statements:
  () <- match core::felt_is_zero(v0) {
    IsZeroResult::Zero => blk3,
    IsZeroResult::NonZero => blk4,
  }
End:
  Fallthrough(blk5, {})

blk3:
Inputs:
Statements:
  (v2: core::felt) <- 1u
End:
  Fallthrough(blk7, {})

blk4:
Inputs: v4: core::NonZero::<core::felt>
Statements:
End:
  Fallthrough(blk9, {})

blk5:
Inputs:
Statements:
End:
  Fallthrough(blk1, {v9 -> v1})

blk6:
Inputs:
Statements:
End:
  Goto(blk1, {v8 -> v1})

blk7:
Inputs:
Statements:
  (v8: core::felt) <- core::felt_add(v0, v2)
End:
  Fallthrough(blk6, {})

blk8:
Inputs:
Statements:
  (v6: ()) <- test::revoke_ap()
End:
  Goto(blk5, {})

blk9:
Inputs:
Statements:
  (v9: core::felt) <- core::felt_add(v0, v0)
End:
  Fallthrough(blk8, {})

//! > local_variables

//! > block_infos
blk1: known_ap_change: true.
blk5: known_ap_change: false.

//! > ==========================================================================

//! > inlining of a function with a revoking goto.

//! > test_runner_name
check_find_local_variables

//! > function_name
foo

//! > function_code
fn foo(x: felt) -> felt {
    bar(x) + x
}

//! > module_code
#[inline(always)]
fn bar(x: felt) -> felt {
    if x == 0 {
        revoke_ap();
        return x + 1;
    } else {
        let a = x + x;
        // The call will force `a` to be a local variable.
        revoke_ap();
        a
    }
}

// Revokes ap since this function is recursive.
fn revoke_ap() {
  revoke_ap()
}

//! > lowering_format
blk0 (root):
Inputs: v0: core::felt
Statements:
End:
  Fallthrough(blk2, {})

blk1:
Inputs:
Statements:
End:
  Fallthrough(blk7, {})

blk2:
Inputs:
Statements:
  () <- match core::felt_is_zero(v0) {
    IsZeroResult::Zero => blk3,
    IsZeroResult::NonZero => blk4,
  }
End:
  Fallthrough(blk5, {})

blk3:
Inputs:
Statements:
  (v3: ()) <- test::revoke_ap()
  (v4: core::felt) <- 1u
End:
  Fallthrough(blk9, {})

blk4:
Inputs: v6: core::NonZero::<core::felt>
Statements:
End:
  Fallthrough(blk11, {})

blk5:
Inputs:
Statements:
End:
  Fallthrough(blk1, {v12 -> v1})

blk6:
Inputs:
Statements:
End:
  Return(v10)

blk7:
Inputs:
Statements:
  (v10: core::felt) <- core::felt_add(v1, v0)
End:
  Fallthrough(blk6, {})

blk8:
Inputs:
Statements:
End:
  Goto(blk1, {v11 -> v1})

blk9:
Inputs:
Statements:
  (v11: core::felt) <- core::felt_add(v0, v4)
End:
  Fallthrough(blk8, {})

blk10:
Inputs:
Statements:
  (v8: ()) <- test::revoke_ap()
End:
  Goto(blk5, {})

blk11:
Inputs:
Statements:
  (v12: core::felt) <- core::felt_add(v0, v0)
End:
  Fallthrough(blk10, {})

//! > local_variables

//! > block_infos
blk1: known_ap_change: true.
blk5: known_ap_change: false.

//! > ==========================================================================

//! > Remapping - fallthrough without incoming gotos

//! > test_runner_name
check_find_local_variables

//! > function_name
foo

//! > function_code
fn foo(x: felt) -> felt {
    let y = bar(x + 1);
    revoke_ap();
    y
}

//! > module_code
#[inline(always)]
fn bar(x: felt) -> felt {
    x
}

// Revokes ap since this function is recursive.
fn revoke_ap() {
  revoke_ap()
}

//! > lowering_format
blk0 (root):
Inputs: v0: core::felt
Statements:
  (v1: core::felt) <- 1u
End:
  Fallthrough(blk2, {})

blk1:
Inputs:
Statements:
End:
  Fallthrough(blk4, {})

blk2:
Inputs:
Statements:
  (v5: core::felt) <- core::felt_add(v0, v1)
End:
  Fallthrough(blk1, {})

blk3:
Inputs:
Statements:
  (v4: ()) <- test::revoke_ap()
End:
  Return(v5)

blk4:
Inputs:
Statements:
End:
  Fallthrough(blk3, {})

//! > local_variables
v5

//! > block_infos
