//! > Simple function call

//! > test_runner_name
test_sierra_locations

//! > function
fn foo(a: felt252, b: felt252) -> felt252 {
    let b = felt252_add(a, 5);
    bar(b, b, b)
}

//! > function_name
foo

//! > module_code
fn bar(x: felt252, y: felt252, z: felt252) -> felt252 {
    bar(x, y, z)
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label_test::foo::0:

disable_ap_tracking() -> ()

drop<felt252>([1]) -> ()

felt252_const<5>() -> ([2])

felt252_add([0], [2]) -> ([3])
Originating location:
    let b = felt252_add(a, 5);
            ^***************^
In function: lib.cairo::foo
store_temp<felt252>([3]) -> ([4])
Originating location:
    bar(b, b, b)
    ^**********^
In function: lib.cairo::foo
dup<felt252>([4]) -> ([4], [3])
Originating location:
    bar(b, b, b)
    ^**********^
In function: lib.cairo::foo
dup<felt252>([3]) -> ([3], [5])
Originating location:
    bar(b, b, b)
    ^**********^
In function: lib.cairo::foo
store_temp<felt252>([5]) -> ([5])
Originating location:
    bar(b, b, b)
    ^**********^
In function: lib.cairo::foo
store_temp<felt252>([3]) -> ([3])
Originating location:
    bar(b, b, b)
    ^**********^
In function: lib.cairo::foo
function_call<user@test::bar>([4], [5], [3]) -> ([6])
Originating location:
    bar(b, b, b)
    ^**********^
In function: lib.cairo::foo
return([6])
Originating location:
    bar(b, b, b)
    ^**********^
In function: lib.cairo::foo

//! > ==========================================================================

//! > match statement

//! > test_runner_name
test_sierra_locations

//! > function
fn foo(myEnum: MyEnum) -> u8 {
    match myEnum {
        MyEnum::A(a) => a,
        MyEnum::B(b) => b,
        MyEnum::C((c1, c2)) => {
            if c1 > c2 {
                c1 + c2
            } else {
                c1 * c2
            }
        }
    }
}

//! > function_name
foo

//! > module_code
enum MyEnum {
    A: u8,
    B: u8,
    C: (u8, u8),
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label_test::foo::0:

enum_match<test::MyEnum>([1]) { fallthrough([2]) label_test::foo::1([3]) label_test::foo::2([4]) }
Originating location:
    match myEnum {
    ^************^
In function: lib.cairo::foo
branch_align() -> ()
Originating location:
    match myEnum {
    ^************^
In function: lib.cairo::foo
store_temp<u8>([2]) -> ([5])

jump() { label_test::foo::4() }

label_test::foo::1:

branch_align() -> ()
Originating location:
    match myEnum {
    ^************^
In function: lib.cairo::foo
store_temp<u8>([3]) -> ([5])

label_test::foo::4:

struct_construct<Tuple<u8>>([5]) -> ([6])

enum_init<core::panics::PanicResult::<(core::integer::u8,)>, 0>([6]) -> ([7])
Originating location:
    match myEnum {
    ^************^
In function: lib.cairo::foo
store_temp<RangeCheck>([0]) -> ([0])
Originating location:
    match myEnum {
    ^************^
In function: lib.cairo::foo
store_temp<core::panics::PanicResult::<(core::integer::u8,)>>([7]) -> ([7])
Originating location:
    match myEnum {
    ^************^
In function: lib.cairo::foo
return([0], [7])
Originating location:
    match myEnum {
    ^************^
In function: lib.cairo::foo
label_test::foo::2:

branch_align() -> ()
Originating location:
    match myEnum {
    ^************^
In function: lib.cairo::foo
struct_deconstruct<Tuple<u8, u8>>([4]) -> ([8], [9])
Originating location:
        MyEnum::C((c1, c2)) => {
                  ^******^
In function: lib.cairo::foo
dup<u8>([9]) -> ([9], [10])

dup<u8>([8]) -> ([8], [11])

u8_overflowing_sub([0], [10], [11]) { fallthrough([12], [13]) label_test::foo::5([14], [15]) }
Originating location:
        u8_overflowing_sub(rhs, lhs).into_is_err()
        ^**************************^
In function: integer.cairo::U8PartialOrd::gt
branch_align() -> ()
Originating location:
        u8_overflowing_sub(rhs, lhs).into_is_err()
        ^**************************^
In function: integer.cairo::U8PartialOrd::gt
drop<u8>([13]) -> ()

store_temp<RangeCheck>([12]) -> ([12])
Originating location:
                c1 * c2
                ^*****^
In function: lib.cairo::foo
store_temp<u8>([8]) -> ([8])
Originating location:
                c1 * c2
                ^*****^
In function: lib.cairo::foo
store_temp<u8>([9]) -> ([9])
Originating location:
                c1 * c2
                ^*****^
In function: lib.cairo::foo
function_call<user@core::integer::U8Mul::mul>([12], [8], [9]) -> ([16], [17])
Originating location:
                c1 * c2
                ^*****^
In function: lib.cairo::foo
return([16], [17])
Originating location:
                c1 * c2
                ^*****^
In function: lib.cairo::foo
label_test::foo::5:

branch_align() -> ()
Originating location:
        u8_overflowing_sub(rhs, lhs).into_is_err()
        ^**************************^
In function: integer.cairo::U8PartialOrd::gt
drop<u8>([15]) -> ()

store_temp<RangeCheck>([14]) -> ([14])
Originating location:
                c1 + c2
                ^*****^
In function: lib.cairo::foo
store_temp<u8>([8]) -> ([8])
Originating location:
                c1 + c2
                ^*****^
In function: lib.cairo::foo
store_temp<u8>([9]) -> ([9])
Originating location:
                c1 + c2
                ^*****^
In function: lib.cairo::foo
function_call<user@core::integer::U8Add::add>([14], [8], [9]) -> ([18], [19])
Originating location:
                c1 + c2
                ^*****^
In function: lib.cairo::foo
return([18], [19])
Originating location:
                c1 + c2
                ^*****^
In function: lib.cairo::foo
label_test::foo::6:

label_test::foo::3:
