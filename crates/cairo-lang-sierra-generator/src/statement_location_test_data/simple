//! > Simple function call

//! > test_runner_name
test_sierra_locations

//! > function
fn foo(a: felt252, b: felt252) -> felt252 {
    let b = felt252_add(a, 5);
    bar(b, b, b)
}

//! > function_name
foo

//! > module_code
fn bar(x: felt252, y: felt252, z: felt252) -> felt252 {
    bar(x, y, z)
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label_test::foo::0:

disable_ap_tracking() -> ()

drop<felt252>([1]) -> ()

felt252_const<5>() -> ([2])

felt252_add([0], [2]) -> ([3])
Originating location:
    let b = felt252_add(a, 5);
            ^***************^
In function: lib.cairo::foo
store_temp<felt252>([3]) -> ([4])
Originating location:
    bar(b, b, b)
    ^**********^
In function: lib.cairo::foo
dup<felt252>([4]) -> ([4], [3])
Originating location:
    bar(b, b, b)
    ^**********^
In function: lib.cairo::foo
dup<felt252>([3]) -> ([3], [5])
Originating location:
    bar(b, b, b)
    ^**********^
In function: lib.cairo::foo
store_temp<felt252>([5]) -> ([5])
Originating location:
    bar(b, b, b)
    ^**********^
In function: lib.cairo::foo
store_temp<felt252>([3]) -> ([3])
Originating location:
    bar(b, b, b)
    ^**********^
In function: lib.cairo::foo
function_call<user@test::bar>([4], [5], [3]) -> ([6])
Originating location:
    bar(b, b, b)
    ^**********^
In function: lib.cairo::foo
return([6])

//! > ==========================================================================

//! > match statement

//! > test_runner_name
test_sierra_locations

//! > function
fn foo(myEnum: MyEnum) -> felt252 {
    match myEnum {
        MyEnum::A(a) => a,
        MyEnum::B(b) => b,
        MyEnum::C((c1, c2)) => {
            if c1 == 0 {
                c1 + c2
            } else {
                c1 * c2
            }
        }
    }
}

//! > function_name
foo

//! > module_code
enum MyEnum {
    A: felt252,
    B: felt252,
    C: (felt252, felt252),
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label_test::foo::0:

enum_match<test::MyEnum>([0]) { fallthrough([1]) label_test::foo::1([2]) label_test::foo::2([3]) }
Originating location:
    match myEnum {
    ^************^
In function: lib.cairo::foo
branch_align() -> ()
Originating location:
    match myEnum {
    ^************^
In function: lib.cairo::foo
store_temp<felt252>([1]) -> ([1])

return([1])

label_test::foo::1:

branch_align() -> ()
Originating location:
    match myEnum {
    ^************^
In function: lib.cairo::foo
store_temp<felt252>([2]) -> ([2])

return([2])

label_test::foo::2:

branch_align() -> ()
Originating location:
    match myEnum {
    ^************^
In function: lib.cairo::foo
struct_deconstruct<Tuple<felt252, felt252>>([3]) -> ([4], [5])
Originating location:
        MyEnum::C((c1, c2)) => {
                  ^******^
In function: lib.cairo::foo
dup<felt252>([4]) -> ([4], [6])

felt252_is_zero([6]) { fallthrough() label_test::foo::4([7]) }
Originating location:
            if c1 == 0 {
            ^**********^
In function: lib.cairo::foo
branch_align() -> ()
Originating location:
            if c1 == 0 {
            ^**********^
In function: lib.cairo::foo
felt252_add([4], [5]) -> ([8])
Originating location:
        felt252_add(lhs, rhs)
        ^*******************^
In function: lib.cairo::Felt252Add::add
store_temp<felt252>([8]) -> ([8])

return([8])

label_test::foo::4:

branch_align() -> ()
Originating location:
            if c1 == 0 {
            ^**********^
In function: lib.cairo::foo
drop<NonZero<felt252>>([7]) -> ()

felt252_mul([4], [5]) -> ([9])
Originating location:
        felt252_mul(lhs, rhs)
        ^*******************^
In function: lib.cairo::Felt252Mul::mul
store_temp<felt252>([9]) -> ([9])

return([9])

label_test::foo::5:

label_test::foo::3:
