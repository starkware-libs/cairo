//! > Match with dup

//! > test_runner_name
test_function_generator

//! > function
fn foo(a: felt252) {
    let (_x, _y) = immovable(if a == 0 {
        (a, a+1)
    } else {
        (a+2, a)
    });
}

//! > function_name
foo

//! > module_code
#[inline(never)]
fn immovable<T>(t: T) -> T { t }

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label_test::foo::0:
dup<felt252>([0]) -> ([0], [1])
felt252_is_zero([1]) { fallthrough() label_test::foo::1([2]) }
branch_align() -> ()
felt252_const<1>() -> ([3])
dup<felt252>([0]) -> ([0], [4])
felt252_add([4], [3]) -> ([5])
store_temp<felt252>([0]) -> ([6])
store_temp<felt252>([5]) -> ([7])
jump() { label_test::foo::3() }
label_test::foo::1:
branch_align() -> ()
drop<NonZero<felt252>>([2]) -> ()
felt252_const<2>() -> ([8])
dup<felt252>([0]) -> ([0], [9])
felt252_add([9], [8]) -> ([10])
store_temp<felt252>([10]) -> ([6])
store_temp<felt252>([0]) -> ([7])
label_test::foo::3:
struct_construct<Tuple<felt252, felt252>>([6], [7]) -> ([11])
store_temp<Tuple<felt252, felt252>>([11]) -> ([11])
function_call<user@test::immovable::<(core::felt252, core::felt252)>>([11]) -> ([12])
drop<Tuple<felt252, felt252>>([12]) -> ()
struct_construct<Unit>() -> ([13])
return([13])
label_test::foo::2:
