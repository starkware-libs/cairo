//! > Test stack tracting

//! > test_runner_name
test_function_generator

//! > function
fn foo() {
    let (a, _, b) = get_val();
    test_func(a, b)
}

//! > function_name
foo

//! > module_code
#[inline(never)]
fn get_val() -> (u32, (), u32) {
  (13, (), 17)
}

fn test_func(a: u32, b: u32) {}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label_test::foo::0:
function_call<user@test::get_val>() -> ([0])
drop<Tuple<u32, Unit, u32>>([0]) -> ()
struct_construct<Unit>() -> ([1])
return([1])

//! > ==========================================================================

//! > Test that we lose track of the original stack item after `struct_deconstruct`.

//! > test_runner_name
test_function_generator

//! > function
fn foo() -> (felt252, felt252) {
    let tuple = get_val();
    let (_a, b) = tuple;
    // Call drop explicitly to avoid the `struct_deconstruct` above from being optimized out.
    drop::<felt252>(b);
    tuple
}

//! > function_name
foo

//! > module_code
#[inline(never)]
fn get_val() -> (felt252, felt252) {
  (13, 17)
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label_test::foo::0:
function_call<user@test::get_val>() -> ([0])
dup<Tuple<felt252, felt252>>([0]) -> ([0], [1])
struct_deconstruct<Tuple<felt252, felt252>>([1]) -> ([2], [3])
drop<felt252>([2]) -> ()
drop<felt252>([3]) -> ()
store_temp<Tuple<felt252, felt252>>([0]) -> ([0])
return([0])

//! > ==========================================================================

//! > Test stack tracking through struct_construct.

//! > test_runner_name
test_function_generator

//! > function
fn foo() {
    let arr = get_val();
    test_func(arr.span());
}

//! > function_name
foo

//! > module_code
#[inline(never)]
fn get_val() -> Array<felt252>{
  ArrayTrait::new()
}

fn test_func(a: Span<felt252>) {}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label_test::foo::0:
function_call<user@test::get_val>() -> ([0])
drop<Array<felt252>>([0]) -> ()
struct_construct<Unit>() -> ([1])
return([1])
