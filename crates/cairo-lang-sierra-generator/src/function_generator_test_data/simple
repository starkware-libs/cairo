//! > Simple function call

//! > test_runner_name
test_function_generator

//! > function
fn foo(a: felt252, b: felt252) -> felt252 {
    let b = felt252_add(a, 5);
    bar(b, b, b)
}

//! > function_name
foo

//! > module_code
fn bar(x: felt252, y: felt252, z: felt252) -> felt252 {
    bar(x, y, z)
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label0:
disable_ap_tracking() -> ()
drop<felt252>([3]) -> ()
felt252_const<5>() -> ([4])
felt252_add([2], [4]) -> ([5])
store_temp<RangeCheck>([0]) -> ([9])
store_temp<GasBuiltin>([1]) -> ([10])
store_temp<felt252>([5]) -> ([11])
dup<felt252>([11]) -> ([11], [5])
dup<felt252>([5]) -> ([5], [12])
store_temp<felt252>([12]) -> ([12])
store_temp<felt252>([5]) -> ([13])
function_call<user@test::bar>([9], [10], [11], [12], [13]) -> ([6], [7], [8])
enum_match<core::PanicResult::<(core::felt252,)>>([8]) { fallthrough([14]) label1([15]) }
branch_align() -> ()
struct_deconstruct<Tuple<felt252>>([14]) -> ([16])
struct_construct<Tuple<felt252>>([16]) -> ([17])
enum_init<core::PanicResult::<(core::felt252,)>, 0>([17]) -> ([18])
store_temp<RangeCheck>([6]) -> ([19])
store_temp<GasBuiltin>([7]) -> ([20])
store_temp<core::PanicResult::<(core::felt252,)>>([18]) -> ([21])
return([19], [20], [21])
label1:
branch_align() -> ()
enum_init<core::PanicResult::<(core::felt252,)>, 1>([15]) -> ([22])
store_temp<RangeCheck>([6]) -> ([23])
store_temp<GasBuiltin>([7]) -> ([24])
store_temp<core::PanicResult::<(core::felt252,)>>([22]) -> ([25])
return([23], [24], [25])
label2:
