//! > Test usage of original array after snapshot.

//! > test_runner_name
test_function_generator

//! > function
fn foo(ref arr: Array<felt252>) {
    arr.append(5);
    arr.span();
    revoke_ap();
    arr.append(6);
}

//! > function_name
foo

//! > module_code
use array::ArrayTrait;

// Revokes ap since this function is recursive.
fn revoke_ap() -> felt252 {
    revoke_ap()
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label0:
alloc_local<Array<felt252>>() -> ([4])
finalize_locals() -> ()
disable_ap_tracking() -> ()
felt252_const<5>() -> ([5])
store_temp<felt252>([5]) -> ([5])
array_append<felt252>([2], [5]) -> ([3])
store_local<Array<felt252>>([4], [3]) -> ([3])
snapshot_take<Array<felt252>>([3]) -> ([6], [7])
struct_construct<core::array::Span::<core::felt252>>([7]) -> ([8])
drop<core::array::Span::<core::felt252>>([8]) -> ()
store_temp<RangeCheck>([0]) -> ([12])
store_temp<GasBuiltin>([1]) -> ([13])
function_call<user@test::revoke_ap>([12], [13]) -> ([9], [10], [11])
enum_match<core::PanicResult::<(core::felt252,)>>([11]) { fallthrough([14]) label1([15]) }
branch_align() -> ()
struct_deconstruct<Tuple<felt252>>([14]) -> ([16])
drop<felt252>([16]) -> ()
felt252_const<6>() -> ([17])
store_temp<felt252>([17]) -> ([17])
array_append<felt252>([6], [17]) -> ([18])
struct_construct<Unit>() -> ([19])
struct_construct<Tuple<Array<felt252>, Unit>>([18], [19]) -> ([20])
enum_init<core::PanicResult::<(core::array::Array::<core::felt252>, ())>, 0>([20]) -> ([21])
store_temp<RangeCheck>([9]) -> ([22])
store_temp<GasBuiltin>([10]) -> ([23])
store_temp<core::PanicResult::<(core::array::Array::<core::felt252>, ())>>([21]) -> ([24])
return([22], [23], [24])
label1:
branch_align() -> ()
drop<Array<felt252>>([6]) -> ()
enum_init<core::PanicResult::<(core::array::Array::<core::felt252>, ())>, 1>([15]) -> ([25])
store_temp<RangeCheck>([9]) -> ([26])
store_temp<GasBuiltin>([10]) -> ([27])
store_temp<core::PanicResult::<(core::array::Array::<core::felt252>, ())>>([25]) -> ([28])
return([26], [27], [28])
label2:

//! > ==========================================================================

//! > Test desnap before and after branching.

//! > test_runner_name
test_function_generator

//! > function
fn foo(x: @u32) {
  *x + 1;
  if true {
    *x + 2;
  }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label9:
dup<u32>([1]) -> ([1], [2])
rename<u32>([2]) -> ([3])
u32_const<1>() -> ([4])
store_temp<RangeCheck>([0]) -> ([7])
store_temp<u32>([3]) -> ([8])
store_temp<u32>([4]) -> ([9])
function_call<user@core::integer::U32Add::add>([7], [8], [9]) -> ([5], [6])
enum_match<core::PanicResult::<(core::integer::u32,)>>([6]) { fallthrough([10]) label10([11]) }
branch_align() -> ()
struct_deconstruct<Tuple<u32>>([10]) -> ([12])
drop<u32>([12]) -> ()
rename<u32>([1]) -> ([13])
u32_const<2>() -> ([14])
store_temp<RangeCheck>([5]) -> ([17])
store_temp<u32>([13]) -> ([18])
store_temp<u32>([14]) -> ([19])
function_call<user@core::integer::U32Add::add>([17], [18], [19]) -> ([15], [16])
enum_match<core::PanicResult::<(core::integer::u32,)>>([16]) { fallthrough([20]) label12([21]) }
branch_align() -> ()
struct_deconstruct<Tuple<u32>>([20]) -> ([22])
drop<u32>([22]) -> ()
struct_construct<Unit>() -> ([23])
struct_construct<Tuple<Unit>>([23]) -> ([24])
enum_init<core::PanicResult::<((),)>, 0>([24]) -> ([25])
store_temp<RangeCheck>([15]) -> ([26])
store_temp<core::PanicResult::<((),)>>([25]) -> ([27])
return([26], [27])
label12:
branch_align() -> ()
enum_init<core::PanicResult::<((),)>, 1>([21]) -> ([28])
store_temp<RangeCheck>([15]) -> ([29])
store_temp<core::PanicResult::<((),)>>([28]) -> ([30])
return([29], [30])
label13:
label10:
branch_align() -> ()
drop<u32>([1]) -> ()
enum_init<core::PanicResult::<((),)>, 1>([11]) -> ([31])
store_temp<RangeCheck>([5]) -> ([32])
store_temp<core::PanicResult::<((),)>>([31]) -> ([33])
return([32], [33])
label11:
