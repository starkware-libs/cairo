//! > Test usage of original array after snapshot.

//! > test_runner_name
test_function_generator

//! > function
fn foo(ref arr: Array<felt252>) {
    arr.append(5);
    let _ = immovable(@arr);
    revoke_ap();
    arr.append(6);
}

//! > function_name
foo

//! > module_code
// Revokes ap since this function is recursive.
fn revoke_ap() -> felt252 {
    revoke_ap()
}

#[inline(never)]
fn immovable<T>(t: T) -> T {
    t
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label_test::foo::0:
alloc_local<Array<felt252>>() -> ([2])
finalize_locals() -> ()
disable_ap_tracking() -> ()
const_as_immediate<Const<felt252, 5>>() -> ([3])
store_temp<felt252>([3]) -> ([3])
array_append<felt252>([0], [3]) -> ([1])
store_local<Array<felt252>>([2], [1]) -> ([1])
snapshot_take<Array<felt252>>([1]) -> ([4], [5])
store_temp<Snapshot<Array<felt252>>>([5]) -> ([5])
function_call<user@test::immovable::<@core::array::Array::<core::felt252>>>([5]) -> ([6])
drop<Snapshot<Array<felt252>>>([6]) -> ()
function_call<user@test::revoke_ap>() -> ([7])
drop<felt252>([7]) -> ()
const_as_immediate<Const<felt252, 6>>() -> ([8])
store_temp<felt252>([8]) -> ([8])
array_append<felt252>([4], [8]) -> ([9])
store_temp<Array<felt252>>([9]) -> ([9])
return([9])

//! > ==========================================================================

//! > Test desnap before and after branching.

//! > test_runner_name
test_function_generator

//! > function
fn foo(x: @u32) {
    *x + 1;
    if true {
        *x + 2;
    }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label_test::foo::0:
rename<u32>([1]) -> ([2])
dup<u32>([2]) -> ([2], [3])
store_temp<u32>([3]) -> ([3])
function_call<user@core::internal::num::u32_inc>([3]) -> ([4])
enum_match<core::result::Result::<core::integer::u32, core::integer::u32>>([4]) { fallthrough([5]) label_test::foo::1([6]) }
branch_align() -> ()
drop<u32>([5]) -> ()
const_as_immediate<Const<u32, 2>>() -> ([7])
store_temp<u32>([7]) -> ([7])
u32_overflowing_add([0], [2], [7]) { fallthrough([8], [9]) label_test::foo::3([10], [11]) }
branch_align() -> ()
drop<u32>([9]) -> ()
struct_construct<Unit>() -> ([12])
struct_construct<Tuple<Unit>>([12]) -> ([13])
enum_init<core::panics::PanicResult::<((),)>, 0>([13]) -> ([14])
store_temp<RangeCheck>([8]) -> ([8])
store_temp<core::panics::PanicResult::<((),)>>([14]) -> ([14])
return([8], [14])
label_test::foo::3:
branch_align() -> ()
drop<u32>([11]) -> ()
store_temp<RangeCheck>([10]) -> ([15])
jump() { label_test::foo::5() }
label_test::foo::4:
label_test::foo::1:
branch_align() -> ()
drop<u32>([6]) -> ()
drop<u32>([2]) -> ()
store_temp<RangeCheck>([0]) -> ([15])
label_test::foo::5:
function_call<user@core::panic_with_const_felt252::<155785504323917466144735657540098748279>>() -> ([16])
enum_init<core::panics::PanicResult::<((),)>, 1>([16]) -> ([17])
store_temp<RangeCheck>([15]) -> ([15])
store_temp<core::panics::PanicResult::<((),)>>([17]) -> ([17])
return([15], [17])
label_test::foo::2:
