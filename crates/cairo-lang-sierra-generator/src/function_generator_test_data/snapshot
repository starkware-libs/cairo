//! > Test usage of original array after snapshot.

//! > test_runner_name
test_function_generator

//! > function
fn foo(ref arr: Array<felt252>) {
    arr.append(5);
    let _ = immovable(@arr);
    revoke_ap();
    arr.append(6);
}

//! > function_name
foo

//! > module_code
// Revokes ap since this function is recursive.
fn revoke_ap() -> felt252 {
    revoke_ap()
}

#[inline(never)]
fn immovable<T>(t: T) -> T { t }

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label_test::foo::0:
alloc_local<Array<felt252>>() -> ([2])
finalize_locals() -> ()
disable_ap_tracking() -> ()
felt252_const<5>() -> ([3])
store_temp<felt252>([3]) -> ([3])
array_append<felt252>([0], [3]) -> ([1])
store_local<Array<felt252>>([2], [1]) -> ([1])
snapshot_take<Array<felt252>>([1]) -> ([4], [5])
store_temp<Snapshot<Array<felt252>>>([5]) -> ([5])
function_call<user@test::immovable::<@core::array::Array::<core::felt252>>>([5]) -> ([6])
drop<Snapshot<Array<felt252>>>([6]) -> ()
function_call<user@test::revoke_ap>() -> ([7])
drop<felt252>([7]) -> ()
felt252_const<6>() -> ([8])
store_temp<felt252>([8]) -> ([8])
array_append<felt252>([4], [8]) -> ([9])
struct_construct<Unit>() -> ([10])
store_temp<Array<felt252>>([9]) -> ([9])
return([9], [10])

//! > ==========================================================================

//! > Test desnap before and after branching.

//! > test_runner_name
test_function_generator

//! > function
fn foo(x: @u32) {
  *x + 1;
  if true {
    *x + 2;
  }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label_test::foo::0:
dup<u32>([1]) -> ([1], [2])
rename<u32>([2]) -> ([3])
u32_const<1>() -> ([4])
store_temp<u32>([4]) -> ([4])
u32_overflowing_add([0], [3], [4]) { fallthrough([5], [6]) label_test::foo::1([7], [8]) }
branch_align() -> ()
enum_init<core::result::Result::<core::integer::u32, core::integer::u32>, 0>([6]) -> ([9])
store_temp<RangeCheck>([5]) -> ([10])
store_temp<core::result::Result::<core::integer::u32, core::integer::u32>>([9]) -> ([11])
jump() { label_test::foo::3() }
label_test::foo::1:
branch_align() -> ()
enum_init<core::result::Result::<core::integer::u32, core::integer::u32>, 1>([8]) -> ([12])
store_temp<RangeCheck>([7]) -> ([10])
store_temp<core::result::Result::<core::integer::u32, core::integer::u32>>([12]) -> ([11])
label_test::foo::3:
felt252_const<155785504323917466144735657540098748279>() -> ([13])
store_temp<felt252>([13]) -> ([13])
function_call<user@core::result::ResultTraitImpl::<core::integer::u32, core::integer::u32>::expect::<core::integer::u32Drop>>([11], [13]) -> ([14])
enum_match<core::panics::PanicResult::<(core::integer::u32,)>>([14]) { fallthrough([15]) label_test::foo::4([16]) }
branch_align() -> ()
drop<Tuple<u32>>([15]) -> ()
rename<u32>([1]) -> ([17])
u32_const<2>() -> ([18])
store_temp<u32>([18]) -> ([18])
u32_overflowing_add([10], [17], [18]) { fallthrough([19], [20]) label_test::foo::6([21], [22]) }
branch_align() -> ()
enum_init<core::result::Result::<core::integer::u32, core::integer::u32>, 0>([20]) -> ([23])
store_temp<RangeCheck>([19]) -> ([24])
store_temp<core::result::Result::<core::integer::u32, core::integer::u32>>([23]) -> ([25])
jump() { label_test::foo::8() }
label_test::foo::6:
branch_align() -> ()
enum_init<core::result::Result::<core::integer::u32, core::integer::u32>, 1>([22]) -> ([26])
store_temp<RangeCheck>([21]) -> ([24])
store_temp<core::result::Result::<core::integer::u32, core::integer::u32>>([26]) -> ([25])
label_test::foo::8:
felt252_const<155785504323917466144735657540098748279>() -> ([27])
store_temp<felt252>([27]) -> ([27])
function_call<user@core::result::ResultTraitImpl::<core::integer::u32, core::integer::u32>::expect::<core::integer::u32Drop>>([25], [27]) -> ([28])
enum_match<core::panics::PanicResult::<(core::integer::u32,)>>([28]) { fallthrough([29]) label_test::foo::9([30]) }
branch_align() -> ()
drop<Tuple<u32>>([29]) -> ()
struct_construct<Unit>() -> ([31])
struct_construct<Tuple<Unit>>([31]) -> ([32])
enum_init<core::panics::PanicResult::<((),)>, 0>([32]) -> ([33])
store_temp<RangeCheck>([24]) -> ([24])
store_temp<core::panics::PanicResult::<((),)>>([33]) -> ([33])
return([24], [33])
label_test::foo::9:
branch_align() -> ()
enum_init<core::panics::PanicResult::<((),)>, 1>([30]) -> ([34])
store_temp<RangeCheck>([24]) -> ([24])
store_temp<core::panics::PanicResult::<((),)>>([34]) -> ([34])
return([24], [34])
label_test::foo::10:
label_test::foo::7:
label_test::foo::4:
branch_align() -> ()
drop<u32>([1]) -> ()
enum_init<core::panics::PanicResult::<((),)>, 1>([16]) -> ([35])
store_temp<RangeCheck>([10]) -> ([10])
store_temp<core::panics::PanicResult::<((),)>>([35]) -> ([35])
return([10], [35])
label_test::foo::5:
label_test::foo::2:
