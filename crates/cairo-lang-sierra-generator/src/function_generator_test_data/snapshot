//! > Test usage of original array after snapshot.

//! > test_runner_name
test_function_generator

//! > function
fn foo(ref arr: Array<felt252>) {
    arr.append(5);
    let _ = immovable(@arr);
    revoke_ap();
    arr.append(6);
}

//! > function_name
foo

//! > module_code
// Revokes ap since this function is recursive.
fn revoke_ap() -> felt252 {
    revoke_ap()
}

#[inline(never)]
fn immovable<T>(t: T) -> T {
    t
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label_test::foo::0:
alloc_local<Array<felt252>>() -> ([2])
finalize_locals() -> ()
disable_ap_tracking() -> ()
const_as_immediate<Const<felt252, 5>>() -> ([3])
store_temp<felt252>([3]) -> ([3])
array_append<felt252>([0], [3]) -> ([1])
store_local<Array<felt252>>([2], [1]) -> ([1])
snapshot_take<Array<felt252>>([1]) -> ([4], [5])
store_temp<Snapshot<Array<felt252>>>([5]) -> ([5])
function_call<user@test::immovable::<@core::array::Array::<core::felt252>>>([5]) -> ([6])
drop<Snapshot<Array<felt252>>>([6]) -> ()
function_call<user@test::revoke_ap>() -> ([7])
drop<felt252>([7]) -> ()
const_as_immediate<Const<felt252, 6>>() -> ([8])
store_temp<felt252>([8]) -> ([8])
array_append<felt252>([4], [8]) -> ([9])
store_temp<Array<felt252>>([9]) -> ([9])
return([9])

//! > ==========================================================================

//! > Test desnap before and after branching.

//! > test_runner_name
test_function_generator

//! > function
fn foo(x: @u32) {
    *x + 1;
    if true {
        *x + 2;
    }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label_test::foo::0:
dup<u32>([1]) -> ([1], [2])
rename<u32>([2]) -> ([3])
const_as_immediate<Const<u32, 1>>() -> ([4])
store_temp<u32>([4]) -> ([4])
u32_overflowing_add([0], [3], [4]) { fallthrough([5], [6]) label_test::foo::1([7], [8]) }
branch_align() -> ()
drop<u32>([6]) -> ()
rename<u32>([1]) -> ([9])
const_as_immediate<Const<u32, 2>>() -> ([10])
store_temp<u32>([10]) -> ([10])
u32_overflowing_add([5], [9], [10]) { fallthrough([11], [12]) label_test::foo::3([13], [14]) }
branch_align() -> ()
drop<u32>([12]) -> ()
struct_construct<Unit>() -> ([15])
struct_construct<Tuple<Unit>>([15]) -> ([16])
enum_init<core::panics::PanicResult::<((),)>, 0>([16]) -> ([17])
store_temp<RangeCheck>([11]) -> ([11])
store_temp<core::panics::PanicResult::<((),)>>([17]) -> ([17])
return([11], [17])
label_test::foo::3:
branch_align() -> ()
drop<u32>([14]) -> ()
array_new<felt252>() -> ([18])
const_as_immediate<Const<felt252, 155785504323917466144735657540098748279>>() -> ([19])
store_temp<felt252>([19]) -> ([19])
array_append<felt252>([18], [19]) -> ([20])
struct_construct<core::panics::Panic>() -> ([21])
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([21], [20]) -> ([22])
enum_init<core::panics::PanicResult::<((),)>, 1>([22]) -> ([23])
store_temp<RangeCheck>([13]) -> ([13])
store_temp<core::panics::PanicResult::<((),)>>([23]) -> ([23])
return([13], [23])
label_test::foo::4:
label_test::foo::1:
branch_align() -> ()
drop<u32>([8]) -> ()
drop<u32>([1]) -> ()
array_new<felt252>() -> ([24])
const_as_immediate<Const<felt252, 155785504323917466144735657540098748279>>() -> ([25])
store_temp<felt252>([25]) -> ([25])
array_append<felt252>([24], [25]) -> ([26])
struct_construct<core::panics::Panic>() -> ([27])
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([27], [26]) -> ([28])
enum_init<core::panics::PanicResult::<((),)>, 1>([28]) -> ([29])
store_temp<RangeCheck>([7]) -> ([7])
store_temp<core::panics::PanicResult::<((),)>>([29]) -> ([29])
return([7], [29])
label_test::foo::2:
