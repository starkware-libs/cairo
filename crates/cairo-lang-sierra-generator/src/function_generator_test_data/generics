//! > Test that accessing a member of a struct does not cause all the struct to be stored.

//! > Test that generic impls are allowed in extern functions.

//! > test_runner_name
test_function_generator

//! > function
fn foo() -> @Array<felt252> {
  span_from_tuple(BoxTrait::new(@(10, 20, 30)))
}

//! > function_name
foo

//! > module_code
pub extern fn span_from_tuple<T, impl T_Inner: Inner<T>, +Copy<T>>(
  struct_like: Box<@T>
) -> @Array<felt252> nopanic;

trait Inner<T> {
  type inner;
}

impl Inner1 of Inner<(felt252, felt252, felt252)>{
  type inner = felt252;
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label_test::foo::0:
const_as_box<Const<Tuple<felt252, felt252, felt252>, Const<felt252, 10>, Const<felt252, 20>, Const<felt252, 30>>, 0>() -> ([0])
span_from_tuple<Tuple<felt252, felt252, felt252>>([0]) -> ([1])
store_temp<Snapshot<Array<felt252>>>([1]) -> ([1])
return([1])
