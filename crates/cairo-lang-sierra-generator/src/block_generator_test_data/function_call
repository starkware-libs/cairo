//! > Test function call.

//! > test_function_name
block_generator_test

//! > function
fn foo(mut z: MyStruct) -> () {
    let x = bar(1, 2, ref z);
    bar(x, x + x, ref z);
}

fn bar(a: felt, b: felt, ref z: MyStruct) -> felt {
    0
}

//! > function_name
foo

//! > module_code
extern type MyStruct;

//! > semantic_diagnostics

//! > lowering_diagnostics
error: Variable not dropped.
 --> lib.cairo:4:5
    bar(x, x + x, ref z);
    ^******************^

//! > sierra_gen_diagnostics

//! > sierra_code
felt_const<1>() -> ([0])
felt_const<2>() -> ([1])
PushValues([2]: MyStruct, [0]: felt, [1]: felt) -> ([5], [6], [7])
function_call<user@test::bar>([5], [6], [7]) -> ([3], [4])
dup<felt>([4]) -> ([4], [9])
dup<felt>([4]) -> ([4], [10])
felt_add([9], [10]) -> ([8])
PushValues([3]: MyStruct, [4]: felt, [8]: felt) -> ([13], [14], [15])
function_call<user@test::bar>([13], [14], [15]) -> ([11], [12])
drop<MyStruct>([11]) -> ()
drop<felt>([12]) -> ()
struct_construct<Unit>() -> ([16])

//! > ==========================================================================

//! > Test function call 2.

//! > test_function_name
block_generator_test

//! > function
fn foo() -> felt {
    let x = 7;
    bar(x, 7);
    bar2(bar(x, 7), bar(x, 7))
}

//! > function_name
foo

//! > module_code
fn bar(a: felt, b: felt) -> felt {
    0
}
fn bar2(a: felt, b: felt) -> felt {
    0
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
felt_const<7>() -> ([0])
felt_const<7>() -> ([1])
PushValues([0]: felt, [1]: felt) -> ([4] [3], [5])
function_call<user@test::bar>([4], [5]) -> ([2])
drop<felt>([2]) -> ()
felt_const<7>() -> ([6])
PushValues([0]: felt, [6]: felt) -> ([9] [8], [10])
function_call<user@test::bar>([9], [10]) -> ([7])
felt_const<7>() -> ([11])
PushValues([0]: felt, [11]: felt) -> ([13], [14])
function_call<user@test::bar>([13], [14]) -> ([12])
PushValues([7]: felt, [12]: felt) -> ([16], [17])
function_call<user@test::bar2>([16], [17]) -> ([15])

//! > ==========================================================================

//! > Call libfunc explicitly

//! > test_function_name
block_generator_test

//! > function
fn foo() -> felt {
    my_libfunc(3, 6)
}

//! > function_name
foo

//! > module_code
extern fn my_libfunc(a: felt, b: felt) -> felt;

//! > semantic_diagnostics
error: An extern function must be marked as nopanic.
 --> lib.cairo:1:1
extern fn my_libfunc(a: felt, b: felt) -> felt;
^*********************************************^

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
felt_const<3>() -> ([0])
felt_const<6>() -> ([1])
my_libfunc([0], [1]) -> ([2])
enum_init<core::PanicResult::<core::felt>, 0>([2]) -> ([3])
