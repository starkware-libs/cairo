//! > Test function call.

//! > test_runner_name
block_generator_test

//! > function
fn foo(mut z: MyStruct) -> () {
    let x = bar(1, 2, ref z);
    bar(x, felt252_add(x, x), ref z);
}

#[inline(never)]
fn bar(a: felt252, b: felt252, ref z: MyStruct) -> felt252 {
    0
}

//! > function_name
foo

//! > module_code
#[derive(Drop)]
struct MyStruct {}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > lowering_flat
Parameters: v0: test::MyStruct
blk0 (root):
Statements:
  (v1: test::MyStruct, v2: core::felt252) <- test::bar[1, 2, None, (v0)
  (v3: core::felt252) <- core::felt252_add(v2, v2)
  (v4: test::MyStruct, v5: core::felt252) <- test::bar(v2, v3, v1)
End:
  Return()

//! > sierra_code
PushValues([0]: test::MyStruct) -> ([0])
function_call<user@[0]>([0]) -> ([1], [2])
dup<felt252>([2]) -> ([2], [3])
dup<felt252>([2]) -> ([2], [4])
felt252_add([3], [4]) -> ([5])
PushValues([2]: felt252, [5]: felt252, [1]: test::MyStruct) -> ([2], [5], [1])
function_call<user@test::bar>([2], [5], [1]) -> ([6], [7])
drop<test::MyStruct>([6]) -> ()
drop<felt252>([7]) -> ()
PushValues() -> ()
return()

//! > ==========================================================================

//! > Test function call 2.

//! > test_runner_name
block_generator_test

//! > function
fn foo() -> felt252 {
    let x = 7;
    bar(x, 7);
    bar2(bar(x, 7), bar(x, 7))
}

//! > function_name
foo

//! > module_code
fn bar(a: felt252, b: felt252) -> felt252 {
    bar(a, b)
}
fn bar2(a: felt252, b: felt252) -> felt252 {
    bar2(a, b)
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
PushValues() -> ()
function_call<user@[0]>() -> ([0])
drop<felt252>([0]) -> ()
PushValues() -> ()
function_call<user@[0]>() -> ([1])
PushValues() -> ()
function_call<user@[0]>() -> ([2])
PushValues([1]: felt252, [2]: felt252) -> ([1], [2])
function_call<user@test::bar2>([1], [2]) -> ([3])
PushValues([3]: felt252) -> ([3])
return([3])

//! > lowering_flat
Parameters:
blk0 (root):
Statements:
  (v0: core::felt252) <- test::bar[7, 7, ()
  (v1: core::felt252) <- test::bar[7, 7, ()
  (v2: core::felt252) <- test::bar[7, 7, ()
  (v3: core::felt252) <- test::bar2(v1, v2)
End:
  Return(v3)

//! > ==========================================================================

//! > Call libfunc explicitly

//! > test_runner_name
block_generator_test

//! > function
fn foo() -> felt252 {
    felt252_add(3, 6)
}

//! > function_name
foo

//! > module_code
extern fn felt252_add(a: felt252, b: felt252) -> felt252;

//! > semantic_diagnostics
error: An extern function must be marked as nopanic.
 --> lib.cairo:1:1
extern fn felt252_add(a: felt252, b: felt252) -> felt252;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
const_as_immediate<Const<felt252, 3>>() -> ([0])
const_as_immediate<Const<felt252, 6>>() -> ([1])
felt252_add([0], [1]) -> ([2])
struct_construct<Tuple<felt252>>([2]) -> ([3])
enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>([3]) -> ([4])
PushValues([4]: core::panics::PanicResult::<(core::felt252,)>) -> ([4])
return([4])

//! > lowering_flat
Parameters:
blk0 (root):
Statements:
  (v0: core::felt252) <- 3
  (v1: core::felt252) <- 6
  (v2: core::felt252) <- test::felt252_add(v0, v1)
  (v3: (core::felt252,)) <- struct_construct(v2)
  (v4: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v3)
End:
  Return(v4)
