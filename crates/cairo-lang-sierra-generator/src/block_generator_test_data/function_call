//! > Test function call.

//! > test_runner_name
block_generator_test

//! > function
fn foo(mut z: MyStruct) -> () {
    let x = bar(1, 2, ref z);
    bar(x, felt252_add(x, x), ref z);
}

#[inline(never)]
fn bar(a: felt252, b: felt252, ref z: MyStruct) -> felt252 {
    0
}

//! > function_name
foo

//! > module_code
#[derive(Drop)]
struct MyStruct {}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > lowering_flat
Parameters: v0: test::MyStruct
blk0 (root):
Statements:
  (v1: core::felt252) <- 1u
  (v2: core::felt252) <- 2u
  (v4: test::MyStruct, v3: core::felt252) <- test::bar(v1, v2, v0)
  (v5: core::felt252) <- core::felt252_add(v3, v3)
  (v7: test::MyStruct, v6: core::felt252) <- test::bar(v3, v5, v4)
  (v8: ()) <- struct_construct()
End:
  Return(v8)

//! > sierra_code
felt252_const<1>() -> ([0])
felt252_const<2>() -> ([1])
PushValues([0]: felt252, [1]: felt252, [2]: test::MyStruct) -> ([5], [6], [7])
function_call<user@test::bar>([5], [6], [7]) -> ([3], [4])
dup<felt252>([4]) -> ([4], [9])
dup<felt252>([4]) -> ([4], [10])
felt252_add([9], [10]) -> ([8])
PushValues([4]: felt252, [8]: felt252, [3]: test::MyStruct) -> ([13], [14], [15])
function_call<user@test::bar>([13], [14], [15]) -> ([11], [12])
drop<test::MyStruct>([11]) -> ()
drop<felt252>([12]) -> ()
struct_construct<Unit>() -> ([16])
PushValues([16]: Unit) -> ([17])
return([17])

//! > ==========================================================================

//! > Test function call 2.

//! > test_runner_name
block_generator_test

//! > function
fn foo() -> felt252 {
    let x = 7;
    bar(x, 7);
    bar2(bar(x, 7), bar(x, 7))
}

//! > function_name
foo

//! > module_code
fn bar(a: felt252, b: felt252) -> felt252 {
    bar(a, b)
}
fn bar2(a: felt252, b: felt252) -> felt252 {
    bar2(a, b)
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
felt252_const<7>() -> ([0])
felt252_const<7>() -> ([1])
PushValues([0]: felt252, [1]: felt252) -> ([3]*, [4])
function_call<user@test::bar>([3], [4]) -> ([2])
drop<felt252>([2]) -> ()
felt252_const<7>() -> ([5])
PushValues([0]: felt252, [5]: felt252) -> ([7]*, [8])
function_call<user@test::bar>([7], [8]) -> ([6])
felt252_const<7>() -> ([9])
PushValues([0]: felt252, [9]: felt252) -> ([11], [12])
function_call<user@test::bar>([11], [12]) -> ([10])
PushValues([6]: felt252, [10]: felt252) -> ([14], [15])
function_call<user@test::bar2>([14], [15]) -> ([13])
PushValues([13]: felt252) -> ([16])
return([16])

//! > lowering_flat
Parameters:
blk0 (root):
Statements:
  (v0: core::felt252) <- 7u
  (v1: core::felt252) <- 7u
  (v2: core::felt252) <- test::bar(v0, v1)
  (v3: core::felt252) <- 7u
  (v4: core::felt252) <- test::bar(v0, v3)
  (v5: core::felt252) <- 7u
  (v6: core::felt252) <- test::bar(v0, v5)
  (v7: core::felt252) <- test::bar2(v4, v6)
End:
  Return(v7)

//! > ==========================================================================

//! > Call libfunc explicitly

//! > test_runner_name
block_generator_test

//! > function
fn foo() -> felt252 {
  felt252_add(3, 6)
}

//! > function_name
foo

//! > module_code
extern fn felt252_add(a: felt252, b: felt252) -> felt252;

//! > semantic_diagnostics
error: An extern function must be marked as nopanic.
 --> lib.cairo:1:1
extern fn felt252_add(a: felt252, b: felt252) -> felt252;
^*******************************************************^

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
felt252_const<3>() -> ([0])
felt252_const<6>() -> ([1])
felt252_add([0], [1]) -> ([2])
struct_construct<Tuple<felt252>>([2]) -> ([3])
enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>([3]) -> ([4])
PushValues([4]: core::panics::PanicResult::<(core::felt252,)>) -> ([5])
return([5])

//! > lowering_flat
Parameters:
blk0 (root):
Statements:
  (v0: core::felt252) <- 3u
  (v1: core::felt252) <- 6u
  (v2: core::felt252) <- test::felt252_add(v0, v1)
  (v3: (core::felt252,)) <- struct_construct(v2)
  (v4: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v3)
End:
  Return(v4)
