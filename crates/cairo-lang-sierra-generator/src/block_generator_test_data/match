//! > Test match zero.

//! > test_runner_name
block_generator_test

//! > function
fn foo(x: felt252) -> felt252 {
    match x {
        0 => 3,
        _ => {
            let y = 4;
            y
        },
    }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
felt252_is_zero([0]) { fallthrough() label_test::foo::0([1]) }
branch_align() -> ()
const_as_immediate<Const<felt252, 3>>() -> ([2])
PushValues([2]: felt252) -> ([2])
return([2])
label_test::foo::0:
branch_align() -> ()
drop<NonZero<felt252>>([1]) -> ()
const_as_immediate<Const<felt252, 4>>() -> ([3])
PushValues([3]: felt252) -> ([3])
return([3])
label_test::foo::1:

//! > lowering_flat
Parameters: v0: core::felt252
blk0 (root):
Statements:
End:
  Match(match core::felt252_is_zero(v0) {
    IsZeroResult::Zero => blk1,
    IsZeroResult::NonZero(v1) => blk2,
  })

blk1:
Statements:
  (v2: core::felt252) <- 3
End:
  Return(v2)

blk2:
Statements:
  (v3: core::felt252) <- 4
End:
  Return(v3)

//! > ==========================================================================

//! > Test match zero 2.

//! > test_runner_name
block_generator_test

//! > function
fn foo(x: felt252) -> felt252 {
    match x {
        0 => x,
        _ => 7,
    }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
dup<felt252>([0]) -> ([0], [1])
felt252_is_zero([1]) { fallthrough() label_test::foo::0([2]) }
branch_align() -> ()
PushValues([0]: felt252) -> ([0])
return([0])
label_test::foo::0:
branch_align() -> ()
drop<NonZero<felt252>>([2]) -> ()
drop<felt252>([0]) -> ()
const_as_immediate<Const<felt252, 7>>() -> ([3])
PushValues([3]: felt252) -> ([3])
return([3])
label_test::foo::1:

//! > lowering_flat
Parameters: v0: core::felt252
blk0 (root):
Statements:
End:
  Match(match core::felt252_is_zero(v0) {
    IsZeroResult::Zero => blk1,
    IsZeroResult::NonZero(v1) => blk2,
  })

blk1:
Statements:
End:
  Return(v0)

blk2:
Statements:
  (v2: core::felt252) <- 7
End:
  Return(v2)

//! > ==========================================================================

//! > Test match on an option of a snapshot.

//! > test_runner_name
block_generator_test

//! > function
fn foo(opt: Option<@felt252>) -> felt252 {
    match opt {
        Some(x) => *x,
        None => 0,
    }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
enum_match<core::option::Option::<@core::felt252>>([0]) { fallthrough([1]) label_test::foo::0([2]) }
branch_align() -> ()
rename<felt252>([1]) -> ([3])
PushValues([3]: felt252) -> ([3])
return([3])
label_test::foo::0:
branch_align() -> ()
drop<Unit>([2]) -> ()
const_as_immediate<Const<felt252, 0>>() -> ([4])
PushValues([4]: felt252) -> ([4])
return([4])
label_test::foo::1:

//! > lowering_flat
Parameters: v0: core::option::Option::<@core::felt252>
blk0 (root):
Statements:
End:
  Match(match_enum(v0) {
    Option::Some(v1) => blk1,
    Option::None(v2) => blk2,
  })

blk1:
Statements:
  (v3: core::felt252) <- desnap(v1)
End:
  Return(v3)

blk2:
Statements:
  (v4: core::felt252) <- 0
End:
  Return(v4)

//! > ==========================================================================

//! > Test dedup of panic code.

//! > test_runner_name
block_generator_test

//! > function
fn foo(mut a: Array<u32>) {
    a.pop_front().unwrap();
    a.pop_front().unwrap();
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
array_pop_front<u32>([0]) { fallthrough([1], [2]) label_test::foo::0([3]) }
branch_align() -> ()
unbox<u32>([2]) -> ([4])
drop<u32>([4]) -> ()
array_pop_front<u32>([1]) { fallthrough([5], [6]) label_test::foo::2([7]) }
branch_align() -> ()
drop<Array<u32>>([5]) -> ()
unbox<u32>([6]) -> ([8])
drop<u32>([8]) -> ()
struct_construct<Unit>() -> ([9])
struct_construct<Tuple<Unit>>([9]) -> ([10])
enum_init<core::panics::PanicResult::<((),)>, 0>([10]) -> ([11])
PushValues([11]: core::panics::PanicResult::<((),)>) -> ([11])
return([11])
label_test::foo::2:
branch_align() -> ()
drop<Array<u32>>([7]) -> ()
PushValues() -> ()
jump() { label_test::foo::4() }
label_test::foo::3:
label_test::foo::0:
branch_align() -> ()
drop<Array<u32>>([3]) -> ()
PushValues() -> ()
label_test::foo::4:
PushValues() -> ()
function_call<user@core::panic_with_const_felt252::<29721761890975875353235833581453094220424382983267374>>() -> ([12])
enum_init<core::panics::PanicResult::<((),)>, 1>([12]) -> ([13])
PushValues([13]: core::panics::PanicResult::<((),)>) -> ([13])
return([13])
label_test::foo::1:

//! > lowering_flat
Parameters: v0: core::array::Array::<core::integer::u32>
blk0 (root):
Statements:
End:
  Match(match core::array::array_pop_front::<core::integer::u32>(v0) {
    Option::Some(v1, v2) => blk1,
    Option::None(v3) => blk4,
  })

blk1:
Statements:
  (v4: core::integer::u32) <- core::box::unbox::<core::integer::u32>(v2)
End:
  Match(match core::array::array_pop_front::<core::integer::u32>(v1) {
    Option::Some(v5, v6) => blk2,
    Option::None(v7) => blk3,
  })

blk2:
Statements:
  (v8: core::integer::u32) <- core::box::unbox::<core::integer::u32>(v6)
  (v9: ()) <- struct_construct()
  (v10: ((),)) <- struct_construct(v9)
  (v11: core::panics::PanicResult::<((),)>) <- PanicResult::Ok(v10)
End:
  Return(v11)

blk3:
Statements:
End:
  Goto(blk5, {})

blk4:
Statements:
End:
  Goto(blk5, {})

blk5:
Statements:
  (v12: (core::panics::Panic, core::array::Array::<core::felt252>)) <- core::panic_with_const_felt252::<29721761890975875353235833581453094220424382983267374>()
  (v13: core::panics::PanicResult::<((),)>) <- PanicResult::Err(v12)
End:
  Return(v13)
