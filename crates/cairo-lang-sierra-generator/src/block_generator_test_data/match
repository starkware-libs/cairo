//! > Test match zero.

//! > test_runner_name
block_generator_test

//! > function
fn foo() -> felt {
    let x = 10;
    match x {
        0 => 3,
        _ => {
            let y = 4;
            y
        }
    }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
felt_const<10>() -> ([0])
felt_is_zero([0]) { fallthrough() label0([1]) }
branch_align() -> ()
felt_const<3>() -> ([2])
PushValues([2]: felt) -> ([3])
jump() { label2() }
label0:
branch_align() -> ()
drop<NonZero<felt>>([1]) -> ()
felt_const<4>() -> ([4])
PushValues([4]: felt) -> ([3])
label2:
PushValues([3]: felt) -> ([5])
return([5])
label1:

//! > lowering_flat
blk0 (root):
Inputs:
Statements:
  (v0: core::felt) <- 10u
End:
  Match(match core::felt_is_zero(v0) {
    IsZeroResult::Zero => blk1,
    IsZeroResult::NonZero => blk2,
  })

blk1:
Inputs:
Statements:
  (v2: core::felt) <- 3u
End:
  Goto(blk3, {v2 -> v4})

blk2:
Inputs: v1: core::NonZero::<core::felt>
Statements:
  (v3: core::felt) <- 4u
End:
  Goto(blk3, {v3 -> v4})

blk3:
Inputs:
Statements:
End:
  Return(v4)

//! > ==========================================================================

//! > Test match zero 2.

//! > test_runner_name
block_generator_test

//! > function
fn foo() -> felt {
    let x = 7;
    match x {
        0 => x,
        _ => 7,
    }
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
felt_const<7>() -> ([0])
dup<felt>([0]) -> ([0], [2])
felt_is_zero([2]) { fallthrough() label0([1]) }
branch_align() -> ()
PushValues([0]: felt) -> ([3])
jump() { label2() }
label0:
branch_align() -> ()
drop<NonZero<felt>>([1]) -> ()
drop<felt>([0]) -> ()
felt_const<7>() -> ([4])
PushValues([4]: felt) -> ([3])
label2:
PushValues([3]: felt) -> ([5])
return([5])
label1:

//! > lowering_flat
blk0 (root):
Inputs:
Statements:
  (v0: core::felt) <- 7u
End:
  Match(match core::felt_is_zero(v0) {
    IsZeroResult::Zero => blk1,
    IsZeroResult::NonZero => blk2,
  })

blk1:
Inputs:
Statements:
End:
  Goto(blk3, {v0 -> v3})

blk2:
Inputs: v1: core::NonZero::<core::felt>
Statements:
  (v2: core::felt) <- 7u
End:
  Goto(blk3, {v2 -> v3})

blk3:
Inputs:
Statements:
End:
  Return(v3)
