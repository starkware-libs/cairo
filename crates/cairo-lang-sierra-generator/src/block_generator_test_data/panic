//! > Test match zero.

//! > test_runner_name
block_generator_test

//! > function
fn foo(opt: Option<felt252>) -> felt252 {
  expect(opt)
}

//! > function_name
foo

//! > module_code
use array::ArrayTrait;

#[inline(always)]
fn expect(opt: Option<felt252>) -> felt252 {
   match opt {
      Option::Some(x) => x,
      Option::None(_) => no_inline_panic(),
  }
}


#[inline(never)]
fn no_inline_panic() -> never {
  let mut data = ArrayTrait::new();
  data.append(1);
  panic(data)
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > lowering_flat
Parameters: v0: core::option::Option::<core::felt252>
blk0 (root):
Statements:
End:
  Match(match_enum(v0) {
    Option::Some(v9) => blk1,
    Option::None(v10) => blk2,
  })

blk1:
Statements:
  (v15: (core::felt252,)) <- struct_construct(v9)
  (v4: core::felt252) <- struct_destructure(v15)
  (v6: (core::felt252,)) <- struct_construct(v4)
  (v7: core::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v6)
End:
  Return(v7)

blk2:
Statements:
  (v12: core::PanicResult::<(core::never,)>) <- test::no_inline_panic()
End:
  Match(match_enum(v12) {
    PanicResult::Ok(v13) => blk3,
    PanicResult::Err(v14) => blk4,
  })

blk3:
Statements:
  (v18: core::never) <- struct_destructure(v13)
End:
  Match(match_enum(v18) {
  })

blk4:
Statements:
  (v8: core::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v14)
End:
  Return(v8)

//! > sierra_code
enum_match<core::option::Option::<core::felt252>>([0]) { fallthrough([1]) label0([2]) }
branch_align() -> ()
struct_construct<Tuple<felt252>>([1]) -> ([3])
struct_deconstruct<Tuple<felt252>>([3]) -> ([4])
struct_construct<Tuple<felt252>>([4]) -> ([5])
enum_init<core::PanicResult::<(core::felt252,)>, 0>([5]) -> ([6])
PushValues([6]: core::PanicResult::<(core::felt252,)>) -> ([7])
return([7])
label0:
branch_align() -> ()
drop<Unit>([2]) -> ()
PushValues() -> ()
function_call<user@test::no_inline_panic>() -> ([8])
enum_match<core::PanicResult::<(core::never,)>>([8]) { fallthrough([9]) label2([10]) }
branch_align() -> ()
struct_deconstruct<Tuple<core::never>>([9]) -> ([11])
enum_match<core::never>([11]) { }
label4:
label2:
branch_align() -> ()
enum_init<core::PanicResult::<(core::felt252,)>, 1>([10]) -> ([12])
PushValues([12]: core::PanicResult::<(core::felt252,)>) -> ([13])
return([13])
label3:
label1:
