//! > Type dependency

//! > test_runner_name
test_program_generator

//! > cairo
use box::BoxTrait;
fn unbox_twice(a: Box::<Box::<Box::<felt252>>>) -> Box::<felt252> {
    a.unbox().unbox()
}

//! > sierra_code
type Box<Box<Box<felt252>>> = Box<Box<Box<felt252>>> [storable: true, drop: true, dup: true, zero_sized: false];
type Box<felt252> = Box<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Box<Box<felt252>> = Box<Box<felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc unbox<Box<Box<felt252>>> = unbox<Box<Box<felt252>>>;
libfunc store_temp<Box<Box<felt252>>> = store_temp<Box<Box<felt252>>>;
libfunc unbox<Box<felt252>> = unbox<Box<felt252>>;
libfunc store_temp<Box<felt252>> = store_temp<Box<felt252>>;

unbox<Box<Box<felt252>>>([0]) -> ([1]); // 0
store_temp<Box<Box<felt252>>>([1]) -> ([1]); // 1
unbox<Box<felt252>>([1]) -> ([2]); // 2
store_temp<Box<felt252>>([2]) -> ([2]); // 3
return([2]); // 4

test::unbox_twice@0([0]: Box<Box<Box<felt252>>>) -> (Box<felt252>);
