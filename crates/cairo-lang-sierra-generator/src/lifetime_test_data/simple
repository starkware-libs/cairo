//! > Test variable lifetime in simple scenario

//! > test_runner_name
check_variable_lifetime

//! > function_name
foo

//! > function_code
fn foo(x: felt, y: felt) -> felt {
    let a = x + x;
    let b = a + a;
    let c = b + b;
    let d = b + 1;
    1234;
    a
}

//! > module_code

//! > lowering_format
blk0 (root):
Inputs: v0: core::felt, v1: core::felt
Statements:
End:
  Fallthrough(blk2, {})

blk1:
Inputs:
Statements:
End:
  Fallthrough(blk4, {})

blk2:
Inputs:
Statements:
  (v8: core::felt) <- core::felt_add(v0, v0)
End:
  Fallthrough(blk1, {v8 -> v2})

blk3:
Inputs:
Statements:
End:
  Fallthrough(blk6, {})

blk4:
Inputs:
Statements:
  (v9: core::felt) <- core::felt_add(v2, v2)
End:
  Fallthrough(blk3, {v9 -> v3})

blk5:
Inputs:
Statements:
  (v5: core::felt) <- 1u
End:
  Fallthrough(blk8, {})

blk6:
Inputs:
Statements:
  (v10: core::felt) <- core::felt_add(v3, v3)
End:
  Fallthrough(blk5, {v10 -> v4})

blk7:
Inputs:
Statements:
  (v7: core::felt) <- 1234u
End:
  Return(v2)

blk8:
Inputs:
Statements:
  (v11: core::felt) <- core::felt_add(v3, v5)
End:
  Fallthrough(blk7, {v11 -> v6})

//! > last_use
v2: ((BlockId(7), 1), 0)
v11: ((BlockId(8), 1), 0)
v5: ((BlockId(8), 0), 1)
v3: ((BlockId(8), 0), 0)
v10: ((BlockId(6), 1), 0)
v9: ((BlockId(4), 1), 0)
v8: ((BlockId(2), 1), 0)
v0: ((BlockId(2), 0), 1)

//! > drops
PostStatement((BlockId(7), 0)): v7
BeginningOfBlock(BlockId(7)): v6
BeginningOfBlock(BlockId(5)): v4
BeginningOfBlock(BlockId(0)): v1
