//! > Test variable lifetime in simple scenario

//! > test_runner_name
check_variable_lifetime

//! > function_name
foo

//! > function_code
fn foo(a: u8, b: u8) -> Result::<u8, u8> {
    integer::u8_overflowing_add(a, b)
}

//! > module_code

//! > lowering_format
blk0 (root):
Inputs: v0: core::RangeCheck, v1: core::integer::u8, v2: core::integer::u8
Statements:
  () <- match core::integer::u8_overflowing_add(v0, v1, v2) {
    Result::Ok => blk1,
    Result::Err => blk2,
  }
End:
  Fallthrough(blk3, {})

blk1:
Inputs: v3: core::RangeCheck, v4: core::integer::u8
Statements:
  (v5: core::result::Result::<core::integer::u8, core::integer::u8>) <- Result::Ok(v4)
End:
  Goto(blk3, {v3 -> v10, v5 -> v9})

blk2:
Inputs: v6: core::RangeCheck, v7: core::integer::u8
Statements:
  (v8: core::result::Result::<core::integer::u8, core::integer::u8>) <- Result::Err(v7)
End:
  Goto(blk3, {v6 -> v10, v8 -> v9})

blk3:
Inputs:
Statements:
End:
  Return(v10, v9)

//! > last_use
v9: ((BlockId(3), 0), 1)
v10: ((BlockId(3), 0), 0)
v4: ((BlockId(1), 0), 0)
v7: ((BlockId(2), 0), 0)
v2: ((BlockId(0), 0), 2)
v1: ((BlockId(0), 0), 1)
v0: ((BlockId(0), 0), 0)

//! > drops
