//! > Test variable lifetime in simple scenario

//! > test_function_name
check_variable_lifetime

//! > function_name
foo

//! > function_code
fn foo(data: Array::<felt>) -> Array::<felt> {
     bar(data)
}

//! > module_code
#[inline(always)]
fn bar(data: Array::<felt>) -> Array::<felt> {
     match get_gas() {
          Option::Some(_) => {},
          Option::None(_) => {
              let mut err_data = array_new();
              array_append(ref err_data, 'Out of gas');
              panic(err_data)
          },
      }

      let mut arr = array_new();

      arr
}

//! > lowering_format
blk0 (root):
Inputs: v0: core::RangeCheck, v1: core::gas::GasBuiltin, v2: core::array::Array::<core::felt>
Statements:
  () <- match core::gas::get_gas(v0, v1) {
    Option::Some => blk4,
    Option::None => blk5,
  }
  (v19: core::array::Array::<core::felt>) <- core::array::array_new::<core::felt>()
  (v6: core::PanicResult::<core::array::Array::<core::felt>>) <- PanicResult::Ok(v19)
End:
  Fallthrough(blk3, {})

blk1:
Inputs: v7: core::array::Array::<core::felt>
Statements:
End:
  Callsite({v7 -> v3})

blk2:
Inputs: v8: core::array::Array::<core::felt>
Statements:
  (v10: core::PanicResult::<core::array::Array::<core::felt>>) <- PanicResult::Err(v8)
End:
  Return(v4, v5, v10)

blk3:
Inputs:
Statements:
  () <- match_enum(v6) {
    PanicResult::Ok => blk1,
    PanicResult::Err => blk2,
  }
  (v9: core::PanicResult::<core::array::Array::<core::felt>>) <- PanicResult::Ok(v3)
End:
  Return(v4, v5, v9)

blk4:
Inputs: v11: core::RangeCheck, v12: core::gas::GasBuiltin
Statements:
End:
  Callsite({v11 -> v4, v12 -> v5})

blk5:
Inputs: v17: core::RangeCheck, v18: core::gas::GasBuiltin
Statements:
  (v13: core::array::Array::<core::felt>) <- core::array::array_new::<core::felt>()
  (v14: core::felt) <- 375233589013918064796019u
  (v15: core::array::Array::<core::felt>) <- core::array::array_append::<core::felt>(v13, v14)
  (v16: core::PanicResult::<core::array::Array::<core::felt>>) <- PanicResult::Err(v15)
End:
  Goto(blk3, {v17 -> v4, v18 -> v5, v16 -> v6})

//! > drops
BeginningOfBlock(BlockId(4)): v4, v5, v6
BeginningOfBlock(BlockId(0)): v2

//! > last_use
v9: ((BlockId(3), 2), 2)
v5: ((BlockId(3), 2), 1)
v4: ((BlockId(3), 2), 0)
v3: ((BlockId(3), 1), 0)
v7: ((BlockId(1), 0), 0)
v10: ((BlockId(2), 1), 2)
v5: ((BlockId(2), 1), 1)
v4: ((BlockId(2), 1), 0)
v8: ((BlockId(2), 0), 0)
v6: ((BlockId(3), 0), 0)
v19: ((BlockId(0), 2), 0)
v12: ((BlockId(4), 0), 1)
v11: ((BlockId(4), 0), 0)
v16: ((BlockId(5), 4), 2)
v18: ((BlockId(5), 4), 1)
v17: ((BlockId(5), 4), 0)
v15: ((BlockId(5), 3), 0)
v14: ((BlockId(5), 2), 1)
v13: ((BlockId(5), 2), 0)
v1: ((BlockId(0), 0), 1)
v0: ((BlockId(0), 0), 0)
