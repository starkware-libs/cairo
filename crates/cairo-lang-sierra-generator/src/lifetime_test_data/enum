//! > Test variable lifetime in enum and match

//! > test_runner_name
check_variable_lifetime

//! > function_name
foo

//! > function_code
fn foo(x: MyEnum, y: felt252, z: felt252, w: felt252) -> felt252 {
    match x {
        MyEnum::A(a) => {
            MyEnum::A(1);
            MyEnum::A(2)
        },
        MyEnum::B(b) => {
            MyEnum::A(b + y + z)
        },
        MyEnum::C((c0, c1)) => {
            MyEnum::C((z, w))
        },
    };
    w
}

//! > module_code
enum MyEnum {
    A: felt252,
    B: felt252,
    C: (felt252, felt252),
}

impl MyEnumDrop of Drop::<MyEnum>;

//! > lowering_format
Parameters: v0: test::MyEnum, v1: core::felt252, v2: core::felt252, v3: core::felt252
blk0 (root):
Statements:
End:
  Match(match_enum(v0) {
    MyEnum::A(v4) => blk1,
    MyEnum::B(v9) => blk2,
    MyEnum::C(v13) => blk3,
  })

blk1:
Statements:
End:
  Goto(blk4, {})

blk2:
Statements:
  (v19: core::felt252) <- core::felt252_add(v9, v1)
  (v20: core::felt252) <- core::felt252_add(v19, v2)
End:
  Goto(blk4, {})

blk3:
Statements:
End:
  Goto(blk4, {})

blk4:
Statements:
End:
  Return(v3)

//! > last_use
v3: ((BlockId(4), 0), 0)
v2: ((BlockId(2), 1), 1)
v19: ((BlockId(2), 1), 0)
v1: ((BlockId(2), 0), 1)
v9: ((BlockId(2), 0), 0)
v0: ((BlockId(0), 0), 0)

//! > drops
PostStatement((BlockId(2), 1)): v20
BeginningOfBlock(BlockId(1)): v4, v2, v1
BeginningOfBlock(BlockId(3)): v13, v2, v1
