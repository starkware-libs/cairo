//! > Test variable lifetime for structs

//! > test_function_name
check_variable_lifetime

//! > function_name
foo

//! > function_code
fn foo(x: MyStruct) -> MyStruct {
    let s = MyStruct{ a: x.a, b: x.b };
    let w = MyStruct{ a: s.a, b: s.b };
    MyStruct{ a: 10, b: 20 }
}

//! > module_code
#[derive(Copy)]
struct MyStruct {
    a: felt,
    b: felt,
}

impl MyStructDrop of Drop::<MyStruct>;

//! > lowering_format
blk0 (root):
Inputs: v0: test::MyStruct
Statements:
  (v1: core::felt, v2: core::felt) <- struct_destructure(v0)
  (v3: core::felt, v4: core::felt) <- struct_destructure(v0)
  (v5: test::MyStruct) <- struct_construct(v1, v4)
  (v6: core::felt, v7: core::felt) <- struct_destructure(v5)
  (v8: core::felt, v9: core::felt) <- struct_destructure(v5)
  (v10: test::MyStruct) <- struct_construct(v6, v9)
  (v11: core::felt) <- 10u
  (v12: core::felt) <- 20u
  (v13: test::MyStruct) <- struct_construct(v11, v12)
End:
  Return(v13)

//! > last_use
((BlockId(0), 9), 0)
((BlockId(0), 8), 1)
((BlockId(0), 8), 0)
((BlockId(0), 5), 1)
((BlockId(0), 5), 0)
((BlockId(0), 4), 0)
((BlockId(0), 2), 1)
((BlockId(0), 2), 0)
((BlockId(0), 1), 0)

//! > drops
PostStatement((BlockId(0), 5)): v10
PostStatement((BlockId(0), 4)): v8
PostStatement((BlockId(0), 3)): v7
PostStatement((BlockId(0), 1)): v3
PostStatement((BlockId(0), 0)): v2
