//! > Test variable lifetime in simple inlining scenario

//! > test_function_name
check_variable_lifetime

//! > function_code
fn foo(a: felt) -> felt {
  bar(a)
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn bar(a: felt) -> felt {
  if a == 0 {
    return 1;
  }
  0
}

//! > lowering_format
blk0 (root):
Inputs: v0: core::felt
Statements:
  () <- match core::felt_is_zero(v0) {
    IsZeroResult::Zero => blk2,
    IsZeroResult::NonZero => blk3,
  }
  (v1: core::felt) <- 0u
End:
  Fallthrough(1, {})

blk1:
Inputs:
Statements:
End:
  Return(v1)

blk2:
Inputs:
Statements:
  (v2: core::felt) <- 1u
End:
  Goto(1, {v2 -> v1})

blk3:
Inputs: v3: core::NonZero::<core::felt>
Statements:
End:
  Callsite({})

//! > last_use
((BlockId(1), 0), 0)
((BlockId(2), 1), 0)
((BlockId(0), 0), 0)

//! > drops
BeginningOfBlock(BlockId(3)): v3, v1

//! > ==========================================================================

//! > Test variable lifetime in inlining scenario with callsite

//! > test_function_name
check_variable_lifetime

//! > function_code
fn foo(a: felt) -> felt {
  if a == 2 {
    bar(a)
  } else {
    a
  }
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn bar(a: felt) -> felt {
  if a == 0 {
    return 1;
  }
  0
}

//! > lowering_format
blk0:
Inputs:
Statements:
  () <- match core::felt_is_zero(v0) {
    IsZeroResult::Zero => blk4,
    IsZeroResult::NonZero => blk5,
  }
  (v3: core::felt) <- 0u
End:
  Fallthrough(3, {})

blk1:
Inputs: v4: core::NonZero::<core::felt>
Statements:
End:
  Callsite({v0 -> v5})

blk2 (root):
Inputs: v0: core::felt
Statements:
  (v1: core::felt) <- 2u
  (v2: core::felt) <- core::felt_sub(v0, v1)
  () <- match core::felt_is_zero(v2) {
    IsZeroResult::Zero => blk0,
    IsZeroResult::NonZero => blk1,
  }
End:
  Return(v5)

blk3:
Inputs:
Statements:
End:
  Callsite({v3 -> v5})

blk4:
Inputs:
Statements:
  (v6: core::felt) <- 1u
End:
  Goto(3, {v6 -> v3})

blk5:
Inputs: v7: core::NonZero::<core::felt>
Statements:
End:
  Callsite({})

//! > last_use
((BlockId(2), 3), 0)
((BlockId(3), 0), 0)
((BlockId(4), 1), 0)
((BlockId(0), 0), 0)
((BlockId(1), 0), 0)
((BlockId(2), 2), 0)
((BlockId(2), 1), 1)

//! > drops
BeginningOfBlock(BlockId(5)): v7, v3
BeginningOfBlock(BlockId(1)): v4, v3
