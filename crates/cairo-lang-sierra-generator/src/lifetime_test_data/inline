//! > Test variable lifetime in simple inlining scenario

//! > test_runner_name
check_variable_lifetime

//! > function_code
fn foo(a: felt252) -> felt252 {
  bar(a)
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn bar(a: felt252) -> felt252 {
  if a == 0 {
    return 1;
  }
  0
}

//! > lowering_format
Parameters: v0: core::felt252
blk0 (root):
Statements:
End:
  Match(match core::felt252_is_zero(v0) {
    IsZeroResult::Zero => blk1,
    IsZeroResult::NonZero(v2) => blk2,
  })

blk1:
Statements:
  (v3: core::felt252) <- 1u
End:
  Goto(blk3, {v3 -> v1})

blk2:
Statements:
  (v4: core::felt252) <- 0u
End:
  Goto(blk3, {v4 -> v1})

blk3:
Statements:
End:
  Return(v1)

//! > last_use
v1: ((BlockId(3), 0), 0)
v0: ((BlockId(0), 0), 0)

//! > drops
BeginningOfBlock(BlockId(2)): v2

//! > ==========================================================================

//! > Test variable lifetime in inlining scenario with callsite

//! > test_runner_name
check_variable_lifetime

//! > function_code
fn foo(a: felt252) -> felt252 {
  if a == 2 {
    bar(a)
  } else {
    a
  }
}

//! > function_name
foo

//! > module_code
#[inline(always)]
fn bar(a: felt252) -> felt252 {
  if a == 0 {
    return 1;
  }
  0
}

//! > lowering_format
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- 2u
  (v6: core::felt252) <- core::felt252_sub(v0, v1)
End:
  Match(match core::felt252_is_zero(v6) {
    IsZeroResult::Zero => blk1,
    IsZeroResult::NonZero(v4) => blk5,
  })

blk1:
Statements:
End:
  Match(match core::felt252_is_zero(v0) {
    IsZeroResult::Zero => blk2,
    IsZeroResult::NonZero(v7) => blk3,
  })

blk2:
Statements:
  (v8: core::felt252) <- 1u
End:
  Goto(blk4, {v8 -> v3})

blk3:
Statements:
  (v9: core::felt252) <- 0u
End:
  Goto(blk4, {v9 -> v3})

blk4:
Statements:
End:
  Goto(blk6, {v3 -> v5})

blk5:
Statements:
End:
  Goto(blk6, {v0 -> v5})

blk6:
Statements:
End:
  Return(v5)

//! > last_use
v5: ((BlockId(6), 0), 0)
v0: ((BlockId(1), 0), 0)
v6: ((BlockId(0), 2), 0)
v1: ((BlockId(0), 1), 1)

//! > drops
BeginningOfBlock(BlockId(3)): v7
BeginningOfBlock(BlockId(5)): v4

//! > ==========================================================================

//! > Test variable lifetime with local variables

//! > test_runner_name
check_variable_lifetime

//! > function_name
foo

//! > function_code
fn foo(x: felt252) -> felt252 {
   bar(x)
}

//! > module_code
#[inline(always)]
fn bar(x: felt252) -> felt252 {
    if x == 0 {
        x
    } else {
        let a = x + x;
        // The call will force `a` to be a local variable.
        revoke_tempvars();
        a
    }
}

fn revoke_tempvars() {
  revoke_tempvars()
}

//! > lowering_format
Parameters: v14: core::RangeCheck, v15: core::gas::GasBuiltin, v0: core::felt252
blk0 (root):
Statements:
End:
  Match(match core::felt252_is_zero(v0) {
    IsZeroResult::Zero => blk1,
    IsZeroResult::NonZero(v2) => blk2,
  })

blk1:
Statements:
End:
  Goto(blk4, {v14 -> v18, v15 -> v19, v0 -> v3})

blk2:
Statements:
  (v6: core::felt252) <- core::felt252_add(v0, v0)
  (v26: core::RangeCheck, v27: core::gas::GasBuiltin, v9: core::PanicResult::<((),)>) <- test::revoke_tempvars(v14, v15)
End:
  Match(match_enum(v9) {
    PanicResult::Ok(v10) => blk3,
    PanicResult::Err(v12) => blk5,
  })

blk3:
Statements:
  (v11: ()) <- struct_destructure(v10)
End:
  Goto(blk4, {v26 -> v18, v27 -> v19, v6 -> v3})

blk4:
Statements:
  (v7: (core::felt252,)) <- struct_construct(v3)
  (v8: core::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v7)
End:
  Return(v18, v19, v8)

blk5:
Statements:
  (v13: core::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v12)
End:
  Return(v26, v27, v13)

//! > last_use
v13: ((BlockId(5), 1), 2)
v27: ((BlockId(5), 1), 1)
v26: ((BlockId(5), 1), 0)
v12: ((BlockId(5), 0), 0)
v8: ((BlockId(4), 2), 2)
v19: ((BlockId(4), 2), 1)
v18: ((BlockId(4), 2), 0)
v7: ((BlockId(4), 1), 0)
v3: ((BlockId(4), 0), 0)
v10: ((BlockId(3), 0), 0)
v9: ((BlockId(2), 2), 0)
v15: ((BlockId(2), 1), 1)
v14: ((BlockId(2), 1), 0)
v0: ((BlockId(2), 0), 1)

//! > drops
PostStatement((BlockId(3), 0)): v11
BeginningOfBlock(BlockId(5)): v6
BeginningOfBlock(BlockId(2)): v2
BeginningOfBlock(BlockId(1)): UninitializedLocal(v6)

//! > ==========================================================================

//! > Test match where is there a goto in one arm and callsite in another.

//! > test_runner_name
check_variable_lifetime

//! > function_name
foo

//! > function_code
fn foo(data: Array::<felt252>) -> Array::<felt252> {
     bar(data)
}

//! > module_code
use array::ArrayTrait;
use option::OptionTrait;

#[inline(always)]
fn bar(data: Array::<felt252>) -> Array::<felt252> {
    gas::withdraw_gas().expect('Out of gas');

    let mut arr = ArrayTrait::new();
    arr
}

//! > lowering_format
Parameters: v24: core::RangeCheck, v25: core::gas::GasBuiltin, v0: core::array::Array::<core::felt252>
blk0 (root):
Statements:
End:
  Match(match core::gas::withdraw_gas(v24, v25) {
    Option::Some(v28, v29) => blk1,
    Option::None(v30, v31) => blk2,
  })

blk1:
Statements:
  (v14: core::array::Array::<core::felt252>) <- core::array::array_new::<core::felt252>()
  (v21: (core::array::Array::<core::felt252>,)) <- struct_construct(v14)
  (v22: core::PanicResult::<(core::array::Array::<core::felt252>,)>) <- PanicResult::Ok(v21)
End:
  Return(v28, v29, v22)

blk2:
Statements:
  (v18: core::array::Array::<core::felt252>) <- core::array::array_new::<core::felt252>()
  (v7: core::felt252) <- 375233589013918064796019u
  (v19: core::array::Array::<core::felt252>) <- core::array::array_append::<core::felt252>(v18, v7)
  (v23: core::PanicResult::<(core::array::Array::<core::felt252>,)>) <- PanicResult::Err(v19)
End:
  Return(v30, v31, v23)

//! > last_use
v23: ((BlockId(2), 4), 2)
v31: ((BlockId(2), 4), 1)
v30: ((BlockId(2), 4), 0)
v19: ((BlockId(2), 3), 0)
v7: ((BlockId(2), 2), 1)
v18: ((BlockId(2), 2), 0)
v22: ((BlockId(1), 3), 2)
v29: ((BlockId(1), 3), 1)
v28: ((BlockId(1), 3), 0)
v21: ((BlockId(1), 2), 0)
v14: ((BlockId(1), 1), 0)
v25: ((BlockId(0), 0), 1)
v24: ((BlockId(0), 0), 0)

//! > drops
BeginningOfBlock(BlockId(0)): v0
