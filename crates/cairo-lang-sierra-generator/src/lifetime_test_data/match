//! > Last use in one branch

//! > test_runner_name
check_variable_lifetime

//! > function_name
foo

//! > function_code
fn foo(x: felt, y: felt) -> felt {
    if x == 0 { y } else { 0 }
}

//! > module_code

//! > lowering_format
blk0 (root):
Inputs: v0: core::felt, v1: core::felt
Statements:
End:
  Match(match core::felt_is_zero(v0) {
    IsZeroResult::Zero => blk1,
    IsZeroResult::NonZero => blk2,
  })

blk1:
Inputs:
Statements:
End:
  Goto(blk3, {v1 -> v4})

blk2:
Inputs: v2: core::NonZero::<core::felt>
Statements:
  (v3: core::felt) <- 0u
End:
  Goto(blk3, {v3 -> v4})

blk3:
Inputs:
Statements:
End:
  Return(v4)

//! > last_use
v4: ((BlockId(3), 0), 0)
v0: ((BlockId(0), 0), 0)

//! > drops
BeginningOfBlock(BlockId(2)): v2, v1

//! > ==========================================================================

//! > Last use after branch

//! > test_runner_name
check_variable_lifetime

//! > function_name
foo

//! > function_code
fn foo(x: felt, y: felt) -> felt {
    let z = if x == 0 { y } else { 0 };
    y
}

//! > module_code

//! > lowering_format
blk0 (root):
Inputs: v0: core::felt, v1: core::felt
Statements:
End:
  Match(match core::felt_is_zero(v0) {
    IsZeroResult::Zero => blk1,
    IsZeroResult::NonZero => blk2,
  })

blk1:
Inputs:
Statements:
End:
  Goto(blk3, {})

blk2:
Inputs: v2: core::NonZero::<core::felt>
Statements:
  (v3: core::felt) <- 0u
End:
  Goto(blk3, {})

blk3:
Inputs:
Statements:
End:
  Return(v1)

//! > last_use
v1: ((BlockId(3), 0), 0)
v0: ((BlockId(0), 0), 0)

//! > drops
PostStatement((BlockId(2), 0)): v3
BeginningOfBlock(BlockId(2)): v2

//! > ==========================================================================

//! > Last use in both branches

//! > test_runner_name
check_variable_lifetime

//! > function_name
foo

//! > function_code
fn foo(x: felt, y: felt) {
    let z = if x == 0 { y } else { y + 3 };
}

//! > module_code

//! > lowering_format
blk0 (root):
Inputs: v0: core::felt, v1: core::felt
Statements:
End:
  Match(match core::felt_is_zero(v0) {
    IsZeroResult::Zero => blk1,
    IsZeroResult::NonZero => blk2,
  })

blk1:
Inputs:
Statements:
End:
  Goto(blk5, {})

blk2:
Inputs: v2: core::NonZero::<core::felt>
Statements:
  (v3: core::felt) <- 3u
End:
  Goto(blk3, {})

blk3:
Inputs:
Statements:
  (v7: core::felt) <- core::felt_add(v1, v3)
End:
  Goto(blk4, {})

blk4:
Inputs:
Statements:
End:
  Goto(blk5, {})

blk5:
Inputs:
Statements:
  (v6: ()) <- struct_construct()
End:
  Return(v6)

//! > last_use
v6: ((BlockId(5), 1), 0)
v3: ((BlockId(3), 0), 1)
v1: ((BlockId(3), 0), 0)
v0: ((BlockId(0), 0), 0)

//! > drops
PostStatement((BlockId(3), 0)): v7
BeginningOfBlock(BlockId(2)): v2
BeginningOfBlock(BlockId(1)): v1

//! > ==========================================================================

//! > Nested ifs

//! > test_runner_name
check_variable_lifetime

//! > function_name
foo

//! > function_code
fn foo(x: felt, y: felt) {
    let z = if x == 0 {
        y
    } else {
        if x == 1 {
            if x == y {
                y
            } else {
                1234
            }
        } else {
            1000
        }
    };
}

//! > module_code

//! > lowering_format
blk0 (root):
Inputs: v0: core::felt, v1: core::felt
Statements:
End:
  Match(match core::felt_is_zero(v0) {
    IsZeroResult::Zero => blk1,
    IsZeroResult::NonZero => blk2,
  })

blk1:
Inputs:
Statements:
End:
  Goto(blk13, {})

blk2:
Inputs: v2: core::NonZero::<core::felt>
Statements:
  (v3: core::felt) <- 1u
End:
  Goto(blk3, {})

blk3:
Inputs:
Statements:
  (v14: core::felt) <- core::felt_sub(v0, v3)
End:
  Goto(blk4, {})

blk4:
Inputs:
Statements:
End:
  Match(match core::felt_is_zero(v14) {
    IsZeroResult::Zero => blk5,
    IsZeroResult::NonZero => blk11,
  })

blk5:
Inputs:
Statements:
End:
  Goto(blk6, {})

blk6:
Inputs:
Statements:
  (v15: core::felt) <- core::felt_sub(v0, v1)
End:
  Goto(blk7, {})

blk7:
Inputs:
Statements:
End:
  Match(match core::felt_is_zero(v15) {
    IsZeroResult::Zero => blk8,
    IsZeroResult::NonZero => blk9,
  })

blk8:
Inputs:
Statements:
End:
  Goto(blk10, {})

blk9:
Inputs: v6: core::NonZero::<core::felt>
Statements:
  (v7: core::felt) <- 1234u
End:
  Goto(blk10, {})

blk10:
Inputs:
Statements:
End:
  Goto(blk12, {})

blk11:
Inputs: v9: core::NonZero::<core::felt>
Statements:
  (v10: core::felt) <- 1000u
End:
  Goto(blk12, {})

blk12:
Inputs:
Statements:
End:
  Goto(blk13, {})

blk13:
Inputs:
Statements:
  (v13: ()) <- struct_construct()
End:
  Return(v13)

//! > last_use
v13: ((BlockId(13), 1), 0)
v15: ((BlockId(7), 0), 0)
v1: ((BlockId(6), 0), 1)
v0: ((BlockId(6), 0), 0)
v14: ((BlockId(4), 0), 0)
v3: ((BlockId(3), 0), 1)

//! > drops
PostStatement((BlockId(11), 0)): v10
BeginningOfBlock(BlockId(11)): v9, v1, v0
PostStatement((BlockId(9), 0)): v7
BeginningOfBlock(BlockId(9)): v6
BeginningOfBlock(BlockId(2)): v2
BeginningOfBlock(BlockId(1)): v1, v0
