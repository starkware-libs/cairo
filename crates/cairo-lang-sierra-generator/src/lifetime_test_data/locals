//! > Test variable lifetime with local variables

//! > test_runner_name
check_variable_lifetime

//! > function_name
foo

//! > function_code
fn foo(x: felt) -> felt {
    if x == 0 {
        x
    } else {
        let a = x + x;
        // The recursive call will force `a` to be a local variable.
        foo(0);
        a
    }
}

//! > module_code

//! > lowering_format
Parameters: v0: core::felt
blk0 (root):
Statements:
End:
  Match(match core::felt_is_zero(v0) {
    IsZeroResult::Zero => blk1,
    IsZeroResult::NonZero(v1) => blk2,
  })

blk1:
Statements:
End:
  Goto(blk5, {v0 -> v5})

blk2:
Statements:
End:
  Goto(blk3, {})

blk3:
Statements:
  (v6: core::felt) <- core::felt_add(v0, v0)
End:
  Goto(blk4, {})

blk4:
Statements:
  (v3: core::felt) <- 0u
  (v4: core::felt) <- test::foo(v3)
End:
  Goto(blk5, {v6 -> v5})

blk5:
Statements:
End:
  Return(v5)

//! > last_use
v5: ((BlockId(5), 0), 0)
v3: ((BlockId(4), 1), 0)
v0: ((BlockId(3), 0), 1)

//! > drops
PostStatement((BlockId(4), 1)): v4
BeginningOfBlock(BlockId(2)): v1
BeginningOfBlock(BlockId(1)): UninitializedLocal(v6)
