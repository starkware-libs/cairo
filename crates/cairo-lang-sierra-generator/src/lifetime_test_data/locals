//! > Test variable lifetime with local variables

//! > test_function_name
check_variable_lifetime

//! > function_name
foo

//! > function_code
fn foo(x: felt) -> felt {
    if x == 0 {
        x
    } else {
        let a = x + x;
        // The recursive call will force `a` to be a local variable.
        foo(0);
        a
    }
}

//! > module_code

//! > lowering_format
blk0:
Inputs:
Statements:
End:
  Callsite({v0 -> v5})

blk1:
Inputs: v1: core::NonZero::<core::felt>
Statements:
  (v2: core::felt) <- core::felt_add(v0, v0)
  (v3: core::felt) <- 0u
  (v4: core::felt) <- test::foo(v3)
End:
  Callsite({v2 -> v5})

blk2 (root):
Inputs: v0: core::felt
Statements:
  () <- match core::felt_is_zero(v0) {
    IsZeroResult::Zero => blk0,
    IsZeroResult::NonZero => blk1,
  }
End:
  Return(v5)

//! > last_use
((BlockId(2), 1), 0)
((BlockId(0), 0), 0)
((BlockId(1), 3), 0)
((BlockId(1), 2), 0)
((BlockId(1), 0), 1)

//! > drops
PostStatement((BlockId(1), 2)): v4
BeginningOfBlock(BlockId(1)): v1
BeginningOfBlock(BlockId(0)): UninitializedLocal(v2)
