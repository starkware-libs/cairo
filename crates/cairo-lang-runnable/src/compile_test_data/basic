//! > Basic runnable.

//! > test_runner_name
CompileRunnableTestRunner(expect_diagnostics: false)

//! > cairo_code
#[runnable]
fn main() {}

//! > generated_casm_code
# builtins: 
# header #
call rel 3;
ret;
# sierra based code #
ret;
# footer #
ret;

//! > expected_diagnostics

//! > ==========================================================================

//! > Test runnable with arguments.

//! > test_runner_name
CompileRunnableTestRunner(expect_diagnostics: false)

//! > cairo_code
#[runnable]
fn main(a: felt252, b: felt252) -> felt252 {
    a + b
}

//! > generated_casm_code
# builtins: 
# header #
%{ raise NotImplementedError("memory[ap + 0].. = params[0])") %}
%{ raise NotImplementedError("memory[ap + 1].. = params[1])") %}
ap += 2;
call rel 3;
ret;
# sierra based code #
[ap + 0] = [fp + -4] + [fp + -3], ap++;
ret;
# footer #
ret;

//! > expected_diagnostics

//! > ==========================================================================

//! > Test runnable with recursion.

//! > test_runner_name
CompileRunnableTestRunner(expect_diagnostics: false)

//! > cairo_code
#[runnable]
fn fib(a: u128, b: u128, n: u128) -> u128 {
    if n == 0 {
        a
    } else {
        fib(b, a + b, n - 1)
    }
}

//! > generated_casm_code
# builtins: range_check
# header #
[ap + 0] = [fp + -3], ap++;
%{ raise NotImplementedError("memory[ap + 0].. = params[0])") %}
%{ raise NotImplementedError("memory[ap + 1].. = params[1])") %}
%{ raise NotImplementedError("memory[ap + 2].. = params[2])") %}
ap += 3;
call rel 3;
ret;
# sierra based code #
jmp rel 9 if [fp + -3] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
ret;
[ap + 1] = [fp + -5] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 35;
[ap + -1] = [[fp + -6] + 0];
[ap + 0] = 1, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -6] + 1];
jmp rel 11;
[ap + -1] = [[fp + -6] + 1];
[ap + 0] = [fp + -6] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -4], ap++;
call rel -34;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 39878429859763533771555484554338820190071, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -6] + 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 39878429859757942499084499860145094553463, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
# footer #
ret;

//! > expected_diagnostics
