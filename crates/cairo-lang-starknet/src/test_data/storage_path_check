//! > Test event variant not deriving starknet::Event.

//! > test_runner_name
test_storage_path_check(expect_diagnostics: true)

//! > cairo_code
use core::starknet::storage::{StoragePointerWriteAccess, StoragePointerReadAccess};

#[starknet::storage_node]
struct Struct1 {
    pub member1: felt252,
}

#[starknet::storage_node]
struct Struct0 {
    pub member0: Struct1,
}

#[starknet::storage_node]
struct IgnoredMemberStruct {
    #[flat]
    pub ignored_member: Struct0,
}

#[starknet::component]
mod component_with_and_without_ignored {
    use super::{Struct0, IgnoredMemberStruct};
    #[storage]
    pub struct Storage {
        #[flat]
        pub x: Struct0,
        #[flat]
        pub y: IgnoredMemberStruct,
    }
}

#[starknet::contract]
mod contract_with_and_without_ignored {
    use super::{IgnoredMemberStruct, Struct0};
    #[storage]
    pub struct Storage {
        #[flat]
        pub x: IgnoredMemberStruct,
        #[flat]
        pub y: Struct0,
    }
}

#[starknet::storage_node]
struct HasA {
    a: felt252,
}

#[starknet::storage_node]
struct ComponentNewStorage {
    a: felt252,
    #[flat]
    has_a: HasA,
}

//! > expected_diagnostics
warning: Plugin diagnostic: The path `has_a.a` collides with existing path `a`.
 --> lib.cairo:40:5
    #[flat]
    ^*****^

//! > diagnostics
