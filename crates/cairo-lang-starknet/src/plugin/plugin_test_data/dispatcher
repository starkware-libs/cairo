//! > Test expansion of a dispatcher.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[abi]
trait IContract {
    fn get_something(arg: felt, num: felt) -> felt;

    fn empty();

    fn bad_sig(ref arg1: felt, ref arg2: felt) -> felt;

    #[event]
    fn my_event();
}

//! > generated_cairo_code
#[abi]
trait IContract {
    fn get_something(arg: felt, num: felt) -> felt;

    fn empty();

    fn bad_sig(ref arg1: felt, ref arg2: felt) -> felt;

    #[event]
    fn my_event();
}
mod IContractDispatcher {
    use starknet::SyscallResultTrait;
    use starknet::SyscallResultTraitImpl;
    use option::OptionTrait;
    use option::OptionTraitImpl;

    fn get_something(contract_address: ContractAddress, arg: felt, num: felt) -> felt {
        let mut calldata = array_new();
        serde::Serde::<felt>::serialize(ref calldata, arg);
        serde::Serde::<felt>::serialize(ref calldata, num);

        let mut ret_data = starknet::call_contract_syscall(
            contract_address,
            calldata,
        ).unwrap_syscall();

        serde::Serde::<felt>::deserialize(ref ret_data).expect(
            'Returned data too short')
    }

    fn empty(contract_address: ContractAddress, ) {
        let mut calldata = array_new();

        let mut ret_data = starknet::call_contract_syscall(
            contract_address,
            calldata,
        ).unwrap_syscall();

    }

}

//! > expected_diagnostics
error: Plugin diagnostic: `ref` parameters are not supported in the ABI of a contract.
 --> lib.cairo:7:16
    fn bad_sig(ref arg1: felt, ref arg2: felt) -> felt;
               ^*^

error: Plugin diagnostic: `ref` parameters are not supported in the ABI of a contract.
 --> lib.cairo:7:32
    fn bad_sig(ref arg1: felt, ref arg2: felt) -> felt;
                               ^*^
