//! > Test expansion of a dispatcher.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[abi]
trait IContract {
    fn get_something(arg: felt252, num: felt252) -> felt252;

    fn empty();

    fn bad_sig(ref arg1: felt252, ref arg2: felt252) -> felt252;

    fn bad_sig2(__calldata__: felt252);

    #[event]
    fn my_event();
}

//! > generated_cairo_code
#[abi]
trait IContract {
    fn get_something(arg: felt252, num: felt252) -> felt252;

    fn empty();

    fn bad_sig(ref arg1: felt252, ref arg2: felt252) -> felt252;

    fn bad_sig2(__calldata__: felt252);

    #[event]
    fn my_event();
}
trait IContractDispatcherTrait<T> {
    fn get_something(self: T, arg: felt252, num: felt252) -> felt252;
    fn empty(self: T, );
}

#[derive(Copy, Drop)]
struct IContractDispatcher {
    contract_address: starknet::ContractAddress,
}

impl IContractDispatcherImpl of IContractDispatcherTrait::<IContractDispatcher> {
    fn get_something(self: IContractDispatcher, arg: felt252, num: felt252) -> felt252 {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<felt252>::serialize(@arg, ref __calldata__);
        serde::Serde::<felt252>::serialize(@num, ref __calldata__);

        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(
            starknet::call_contract_syscall(
                self.contract_address,
                0x3c52d61651de3dcab6ceaa9f6505f7aed8f1ffc0f694ce2a9ed76e758d87a3,
                array::ArrayTrait::span(@__calldata__),
            )
        );

        option::OptionTrait::expect(
            serde::Serde::<felt252>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }

    fn empty(self: IContractDispatcher, ) {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(
            starknet::call_contract_syscall(
                self.contract_address,
                0x1fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80,
                array::ArrayTrait::span(@__calldata__),
            )
        );

    }

}

#[derive(Copy, Drop)]
struct IContractLibraryDispatcher {
    class_hash: starknet::ClassHash,
}

impl IContractLibraryDispatcherImpl of IContractDispatcherTrait::<IContractLibraryDispatcher> {
    fn get_something(self: IContractLibraryDispatcher, arg: felt252, num: felt252) -> felt252 {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<felt252>::serialize(@arg, ref __calldata__);
        serde::Serde::<felt252>::serialize(@num, ref __calldata__);

        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(
            starknet::syscalls::library_call_syscall(
                self.class_hash,
                0x3c52d61651de3dcab6ceaa9f6505f7aed8f1ffc0f694ce2a9ed76e758d87a3,
                array::ArrayTrait::span(@__calldata__),
            )
        );

        option::OptionTrait::expect(
            serde::Serde::<felt252>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }

    fn empty(self: IContractLibraryDispatcher, ) {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(
            starknet::syscalls::library_call_syscall(
                self.class_hash,
                0x1fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80,
                array::ArrayTrait::span(@__calldata__),
            )
        );

    }

}

impl IContractDispatcherStorageAccess of starknet::StorageAccess::<IContractDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<IContractDispatcher> {
        starknet::StorageAccess::<IContractDispatcher>::read_at_offset_internal(address_domain, base, 0_u8)
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: IContractDispatcher) -> starknet::SyscallResult<()> {
        starknet::StorageAccess::<IContractDispatcher>::write_at_offset_internal(address_domain, base, 0_u8, value)
    }
    fn read_at_offset_internal(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<IContractDispatcher> {
        starknet::SyscallResult::Ok(
            IContractDispatcher {
                contract_address: starknet::StorageAccess::<starknet::ContractAddress>::read_at_offset_internal(address_domain, base, offset)?
            }
        )
    }
    fn write_at_offset_internal(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: IContractDispatcher) -> starknet::SyscallResult<()> {
        starknet::StorageAccess::<starknet::ContractAddress>::write_at_offset_internal(address_domain, base, offset, value.contract_address)
    }
    fn size_internal(value: IContractDispatcher) -> u8 {
        1_u8
    }
}

impl IContractLibraryDispatcherStorageAccess of starknet::StorageAccess::<IContractLibraryDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<IContractLibraryDispatcher> {
        starknet::StorageAccess::<IContractLibraryDispatcher>::read_at_offset_internal(address_domain, base, 0_u8)
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: IContractLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::StorageAccess::<IContractLibraryDispatcher>::write_at_offset_internal(address_domain, base, 0_u8, value)
    }
    fn read_at_offset_internal(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<IContractLibraryDispatcher> {
        starknet::SyscallResult::Ok(
            IContractLibraryDispatcher {
                class_hash: starknet::StorageAccess::<starknet::ClassHash>::read_at_offset_internal(address_domain, base, offset)?
            }
        )
    }
    fn write_at_offset_internal(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: IContractLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::StorageAccess::<starknet::ClassHash>::write_at_offset_internal(address_domain, base, offset, value.class_hash)
    }
    fn size_internal(value: IContractLibraryDispatcher) -> u8 {
        1_u8
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: `ref` parameters are not supported in the ABI of a contract.
 --> lib.cairo:7:16
    fn bad_sig(ref arg1: felt252, ref arg2: felt252) -> felt252;
               ^*^

error: Plugin diagnostic: `ref` parameters are not supported in the ABI of a contract.
 --> lib.cairo:7:35
    fn bad_sig(ref arg1: felt252, ref arg2: felt252) -> felt252;
                                  ^*^

error: Plugin diagnostic: Parameter name `__calldata__` cannot be used.
 --> lib.cairo:9:17
    fn bad_sig2(__calldata__: felt252);
                ^**********^
