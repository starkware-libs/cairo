//! > Test expansion of Starknet for user types.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    struct Storage {
        var: WrappedFelt252,
        mapping: LegacyMap::<WrappedFelt252, WrappedFelt252>,
    }
    struct WrappedFelt252 {
        value: felt252,
    }
    use array::ArrayTrait;
    use array::SpanTrait;
    use starknet::storage_access::AddressDomain;
    impl WrappedFelt252Serde of serde::Serde::<WrappedFelt252> {
        fn serialize(ref serialized: Array::<felt252>, input: WrappedFelt252) {
            serialized.append(input.value);
        }
        fn deserialize(ref serialized: Span::<felt252>) -> Option::<WrappedFelt252> {
            Option::<WrappedFelt252>::Some(WrappedFelt252 { value: *serialized.pop_front()? })
        }
    }
    impl WrappedFelt252StorageAccess of starknet::StorageAccess::<WrappedFelt252> {
        fn read(address_domain: AddressDomain, base: starknet::StorageBaseAddress) -> starknet::SyscallResult::<WrappedFelt252> {
            starknet::SyscallResult::<WrappedFelt252>::Ok(WrappedFelt252 {
                value: starknet::StorageAccess::read(address_domain, base)?
            })
        }
        #[inline(always)]
        fn write(address_domain: AddressDomain, base: starknet::StorageBaseAddress, value: WrappedFelt252) -> starknet::SyscallResult::<()> {
            starknet::StorageAccess::write(address_domain, base, value.value)
        }
    }
    impl WrappedFelt252LegacyHash of hash::LegacyHash::<WrappedFelt252> {
        #[inline(always)]
        fn hash(state: felt252, value: WrappedFelt252) -> felt252 {
            hash::LegacyHash::hash(state, value.value)
        }
    }
}

//! > generated_cairo_code
mod TestContract {
    use starknet::SyscallResultTrait;
    use starknet::SyscallResultTraitImpl;

    struct WrappedFelt252 {
        value: felt252,
    }
    use array::ArrayTrait;
    use array::SpanTrait;
    use starknet::storage_access::AddressDomain;
    impl WrappedFelt252Serde of serde::Serde::<WrappedFelt252> {
        fn serialize(ref serialized: Array::<felt252>, input: WrappedFelt252) {
            serialized.append(input.value);
        }
        fn deserialize(ref serialized: Span::<felt252>) -> Option::<WrappedFelt252> {
            Option::<WrappedFelt252>::Some(WrappedFelt252 { value: *serialized.pop_front()? })
        }
    }
    impl WrappedFelt252StorageAccess of starknet::StorageAccess::<WrappedFelt252> {
        fn read(address_domain: AddressDomain, base: starknet::StorageBaseAddress) -> starknet::SyscallResult::<WrappedFelt252> {
            starknet::SyscallResult::<WrappedFelt252>::Ok(WrappedFelt252 {
                value: starknet::StorageAccess::read(address_domain, base)?
            })
        }
        #[inline(always)]
        fn write(address_domain: AddressDomain, base: starknet::StorageBaseAddress, value: WrappedFelt252) -> starknet::SyscallResult::<()> {
            starknet::StorageAccess::write(address_domain, base, value.value)
        }
    }
    impl WrappedFelt252LegacyHash of hash::LegacyHash::<WrappedFelt252> {
        #[inline(always)]
        fn hash(state: felt252, value: WrappedFelt252) -> felt252 {
            hash::LegacyHash::hash(state, value.value)
        }
    }

    
    mod var {
        use super::WrappedFelt252;
        use super::ArrayTrait;
        use super::SpanTrait;
        use super::AddressDomain;
        use super::WrappedFelt252Serde;
        use super::WrappedFelt252StorageAccess;
        use super::WrappedFelt252LegacyHash;
        use starknet::SyscallResultTrait;
        use starknet::SyscallResultTraitImpl;

        fn address() -> starknet::StorageBaseAddress {
            starknet::storage_base_address_const::<0x1c1c14d56e959d57ab94facd0d6c86740ac46c453bf9107bba1c735d7783c71>()
        }
        fn read() -> WrappedFelt252 {
            starknet::StorageAccess::<WrappedFelt252>::read(
                starknet::storage_access::address_domain_default(),
                address(),
            ).unwrap_syscall()
        }
        fn write(value: WrappedFelt252) {
            starknet::StorageAccess::<WrappedFelt252>::write(
                starknet::storage_access::address_domain_default(),
                address(),
                value,
            ).unwrap_syscall()
        }
    }
    mod mapping {
        use super::WrappedFelt252;
        use super::ArrayTrait;
        use super::SpanTrait;
        use super::AddressDomain;
        use super::WrappedFelt252Serde;
        use super::WrappedFelt252StorageAccess;
        use super::WrappedFelt252LegacyHash;
        use starknet::SyscallResultTrait;
        use starknet::SyscallResultTraitImpl;

        fn address(key: WrappedFelt252) -> starknet::StorageBaseAddress {
            starknet::storage_base_address_from_felt252(
                hash::LegacyHash::<WrappedFelt252>::hash(0x3043534c8400cf510f61f13082bd823461a59a867690d0148bae4bfcbdb1a4, key))
        }
        fn read(key: WrappedFelt252) -> WrappedFelt252 {
            starknet::StorageAccess::<WrappedFelt252>::read(
                starknet::storage_access::address_domain_default(),
                address(key),
            ).unwrap_syscall()
        }
        fn write(key: WrappedFelt252, value: WrappedFelt252) {
            starknet::StorageAccess::<WrappedFelt252>::write(
                starknet::storage_access::address_domain_default(),
                address(key),
                value,
            ).unwrap_syscall()
        }
    }

    

    trait __abi {
        
        
    }

    mod __external {
        use super::WrappedFelt252;
        use super::ArrayTrait;
        use super::SpanTrait;
        use super::AddressDomain;
        use super::WrappedFelt252Serde;
        use super::WrappedFelt252StorageAccess;
        use super::WrappedFelt252LegacyHash;
        use starknet::contract_address::ContractAddressSerde;

        
    }

    mod __l1_handler {
        use super::WrappedFelt252;
        use super::ArrayTrait;
        use super::SpanTrait;
        use super::AddressDomain;
        use super::WrappedFelt252Serde;
        use super::WrappedFelt252StorageAccess;
        use super::WrappedFelt252LegacyHash;
        use starknet::contract_address::ContractAddressSerde;

        
    }

    mod __constructor {
        use super::WrappedFelt252;
        use super::ArrayTrait;
        use super::SpanTrait;
        use super::AddressDomain;
        use super::WrappedFelt252Serde;
        use super::WrappedFelt252StorageAccess;
        use super::WrappedFelt252LegacyHash;
        use starknet::contract_address::ContractAddressSerde;

        
    }
}

//! > expected_diagnostics
