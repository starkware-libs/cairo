//! > Test expansion of Starknet for user types.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    struct Storage {
        var: WrappedFelt,
        mapping: LegacyMap::<WrappedFelt, WrappedFelt>,
    }
    struct WrappedFelt {
        value: felt,
    }
    use array::ArrayTrait;
    use array::SpanTrait;
    impl WrappedFeltSerde of serde::Serde::<WrappedFelt> {
        fn serialize(ref serialized: Array::<felt>, input: WrappedFelt) {
            serialized.append(input.value);
        }
        fn deserialize(ref serialized: Span::<felt>) -> Option::<WrappedFelt> {
            Option::<WrappedFelt>::Some(WrappedFelt { value: *serialized.pop_front()? })
        }
    }
    impl WrappedFeltStorageAccess of starknet::StorageAccess::<WrappedFelt> {
        fn read(address_domain: felt, base: starknet::StorageBaseAddress) -> starknet::SyscallResult::<WrappedFelt> {
            starknet::SyscallResult::<WrappedFelt>::Ok(WrappedFelt {
                value: starknet::StorageAccess::read(address_domain, base)?
            })
        }
        #[inline(always)]
        fn write(address_domain: felt, base: starknet::StorageBaseAddress, value: WrappedFelt) -> starknet::SyscallResult::<()> {
            starknet::StorageAccess::write(address_domain, base, value.value)
        }
    }
    impl WrappedFeltLegacyHash of hash::LegacyHash::<WrappedFelt> {
        #[inline(always)]
        fn hash(state: felt, value: WrappedFelt) -> felt {
            hash::LegacyHash::hash(state, value.value)
        }
    }
}

//! > generated_cairo_code
mod TestContract {
    use starknet::SyscallResultTrait;
    use starknet::SyscallResultTraitImpl;

    struct WrappedFelt {
        value: felt,
    }
    use array::ArrayTrait;
    use array::SpanTrait;
    impl WrappedFeltSerde of serde::Serde::<WrappedFelt> {
        fn serialize(ref serialized: Array::<felt>, input: WrappedFelt) {
            serialized.append(input.value);
        }
        fn deserialize(ref serialized: Span::<felt>) -> Option::<WrappedFelt> {
            Option::<WrappedFelt>::Some(WrappedFelt { value: *serialized.pop_front()? })
        }
    }
    impl WrappedFeltStorageAccess of starknet::StorageAccess::<WrappedFelt> {
        fn read(address_domain: felt, base: starknet::StorageBaseAddress) -> starknet::SyscallResult::<WrappedFelt> {
            starknet::SyscallResult::<WrappedFelt>::Ok(WrappedFelt {
                value: starknet::StorageAccess::read(address_domain, base)?
            })
        }
        #[inline(always)]
        fn write(address_domain: felt, base: starknet::StorageBaseAddress, value: WrappedFelt) -> starknet::SyscallResult::<()> {
            starknet::StorageAccess::write(address_domain, base, value.value)
        }
    }
    impl WrappedFeltLegacyHash of hash::LegacyHash::<WrappedFelt> {
        #[inline(always)]
        fn hash(state: felt, value: WrappedFelt) -> felt {
            hash::LegacyHash::hash(state, value.value)
        }
    }

    
    mod var {
        use super::WrappedFelt;
        use super::ArrayTrait;
        use super::SpanTrait;
        use super::WrappedFeltSerde;
        use super::WrappedFeltStorageAccess;
        use super::WrappedFeltLegacyHash;
        use starknet::SyscallResultTrait;
        use starknet::SyscallResultTraitImpl;

        fn address() -> starknet::StorageBaseAddress {
            starknet::storage_base_address_const::<0x1c1c14d56e959d57ab94facd0d6c86740ac46c453bf9107bba1c735d7783c71>()
        }
        fn read() -> WrappedFelt {
            // Only address_domain 0 is currently supported.
            let address_domain = 0;
            starknet::StorageAccess::<WrappedFelt>::read(
                address_domain,
                address(),
            ).unwrap_syscall()
        }
        fn write(value: WrappedFelt) {
            // Only address_domain 0 is currently supported.
            let address_domain = 0;
            starknet::StorageAccess::<WrappedFelt>::write(
                address_domain,
                address(),
                value,
            ).unwrap_syscall()
        }
    }
    mod mapping {
        use super::WrappedFelt;
        use super::ArrayTrait;
        use super::SpanTrait;
        use super::WrappedFeltSerde;
        use super::WrappedFeltStorageAccess;
        use super::WrappedFeltLegacyHash;
        use starknet::SyscallResultTrait;
        use starknet::SyscallResultTraitImpl;

        fn address(key: WrappedFelt) -> starknet::StorageBaseAddress {
            starknet::storage_base_address_from_felt(
                hash::LegacyHash::<WrappedFelt>::hash(0x3043534c8400cf510f61f13082bd823461a59a867690d0148bae4bfcbdb1a4, key))
        }
        fn read(key: WrappedFelt) -> WrappedFelt {
            // Only address_domain 0 is currently supported.
            let address_domain = 0;
            starknet::StorageAccess::<WrappedFelt>::read(
                address_domain,
                address(key),
            ).unwrap_syscall()
        }
        fn write(key: WrappedFelt, value: WrappedFelt) {
            // Only address_domain 0 is currently supported.
            let address_domain = 0;
            starknet::StorageAccess::<WrappedFelt>::write(
                address_domain,
                address(key),
                value,
            ).unwrap_syscall()
        }
    }

    

    trait __abi {
        
        
    }

    mod __external {
        use super::WrappedFelt;
        use super::ArrayTrait;
        use super::SpanTrait;
        use super::WrappedFeltSerde;
        use super::WrappedFeltStorageAccess;
        use super::WrappedFeltLegacyHash;
        use starknet::contract_address::ContractAddressSerde;

        
    }

    mod __l1_handler {
        use super::WrappedFelt;
        use super::ArrayTrait;
        use super::SpanTrait;
        use super::WrappedFeltSerde;
        use super::WrappedFeltStorageAccess;
        use super::WrappedFeltLegacyHash;
        use starknet::contract_address::ContractAddressSerde;

        
    }

    mod __constructor {
        use super::WrappedFelt;
        use super::ArrayTrait;
        use super::SpanTrait;
        use super::WrappedFeltSerde;
        use super::WrappedFeltStorageAccess;
        use super::WrappedFeltLegacyHash;
        use starknet::contract_address::ContractAddressSerde;

        
    }
}

//! > expected_diagnostics
