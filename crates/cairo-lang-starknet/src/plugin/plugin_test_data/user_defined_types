//! > Test expansion of Starknet for user types.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {
        var: WrappedFelt252,
        mapping: LegacyMap::<WrappedFelt252, WrappedFelt252>,
    }
    #[derive(Drop)]
    struct WrappedFelt252 {
        value: felt252,
    }
    use array::ArrayTrait;
    use array::SpanTrait;
    impl WrappedFelt252Serde of serde::Serde::<WrappedFelt252> {
        fn serialize(self: @WrappedFelt252, ref output: Array::<felt252>) {
            output.append(*self.value);
        }
        fn deserialize(ref serialized: Span::<felt252>) -> Option::<WrappedFelt252> {
            Option::<WrappedFelt252>::Some(WrappedFelt252 { value: *serialized.pop_front()? })
        }
    }
    impl WrappedFelt252StorageAccess of starknet::StorageAccess::<WrappedFelt252> {
        fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult::<WrappedFelt252> {
            starknet::SyscallResult::<WrappedFelt252>::Ok(WrappedFelt252 {
                value: starknet::StorageAccess::read(address_domain, base)?
            })
        }
        #[inline(always)]
        fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: WrappedFelt252) -> starknet::SyscallResult::<()> {
            starknet::StorageAccess::write(address_domain, base, value.value)
        }
    }
    impl WrappedFelt252LegacyHash of hash::LegacyHash::<WrappedFelt252> {
        #[inline(always)]
        fn hash(state: felt252, value: WrappedFelt252) -> felt252 {
            hash::LegacyHash::hash(state, value.value)
        }
    }
}

//! > generated_cairo_code
lib.cairo:

#[contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {
        var: WrappedFelt252,
        mapping: LegacyMap::<WrappedFelt252, WrappedFelt252>,
    }
    #[derive(Drop)]
    struct WrappedFelt252 {
        value: felt252,
    }
    use array::ArrayTrait;
    use array::SpanTrait;
    impl WrappedFelt252Serde of serde::Serde::<WrappedFelt252> {
        fn serialize(self: @WrappedFelt252, ref output: Array::<felt252>) {
            output.append(*self.value);
        }
        fn deserialize(ref serialized: Span::<felt252>) -> Option::<WrappedFelt252> {
            Option::<WrappedFelt252>::Some(WrappedFelt252 { value: *serialized.pop_front()? })
        }
    }
    impl WrappedFelt252StorageAccess of starknet::StorageAccess::<WrappedFelt252> {
        fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult::<WrappedFelt252> {
            starknet::SyscallResult::<WrappedFelt252>::Ok(WrappedFelt252 {
                value: starknet::StorageAccess::read(address_domain, base)?
            })
        }
        #[inline(always)]
        fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: WrappedFelt252) -> starknet::SyscallResult::<()> {
            starknet::StorageAccess::write(address_domain, base, value.value)
        }
    }
    impl WrappedFelt252LegacyHash of hash::LegacyHash::<WrappedFelt252> {
        #[inline(always)]
        fn hash(state: felt252, value: WrappedFelt252) -> felt252 {
            hash::LegacyHash::hash(state, value.value)
        }
    }
}

contract:

use starknet::SyscallResultTrait;
use starknet::SyscallResultTraitImpl;

const TEST_CLASS_HASH: felt252 = 808877893083012127599869904407415973525020792828232527456610011816583808387;
#[derive(Copy, Drop)]
    struct Storage {
        var: var::Storage,
        mapping: mapping::Storage,
    }
    #[inline(always)]
    fn unsafe_new_storage() -> Storage {
        Storage {
            var: var::Storage{},
            mapping: mapping::Storage{},
        }
    }

    use var::InternalStorageTrait as varStorageTrait;
    mod var {
        use super::WrappedFelt252;
        use super::ArrayTrait;
        use super::SpanTrait;
        use super::WrappedFelt252Serde;
        use super::WrappedFelt252StorageAccess;
        use super::WrappedFelt252LegacyHash;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;
        use starknet::SyscallResultTrait;
        use starknet::SyscallResultTraitImpl;
        use super;

        #[derive(Copy, Drop)]
        struct Storage {}
        trait InternalStorageTrait {
            fn address(self: @Storage) -> starknet::StorageBaseAddress;
            fn read(self: @Storage) -> WrappedFelt252;
            fn write(ref self: Storage, value: WrappedFelt252);
        }

        impl InternalStorageImpl of InternalStorageTrait {
            fn address(self: @Storage) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_const::<0x1c1c14d56e959d57ab94facd0d6c86740ac46c453bf9107bba1c735d7783c71>()
            }
            fn read(self: @Storage) -> WrappedFelt252 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<WrappedFelt252>::read(
                    address_domain,
                    self.address(),
                ).unwrap_syscall()
            }
            fn write(ref self: Storage, value: WrappedFelt252) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<WrappedFelt252>::write(
                    address_domain,
                    self.address(),
                    value,
                ).unwrap_syscall()
            }
        }
    }
    use mapping::InternalStorageTrait as mappingStorageTrait;
    mod mapping {
        use super::WrappedFelt252;
        use super::ArrayTrait;
        use super::SpanTrait;
        use super::WrappedFelt252Serde;
        use super::WrappedFelt252StorageAccess;
        use super::WrappedFelt252LegacyHash;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;
        use starknet::SyscallResultTrait;
        use starknet::SyscallResultTraitImpl;
        use super;

        #[derive(Copy, Drop)]
        struct Storage {}
        trait InternalStorageTrait {
            fn address(self: @Storage, key: WrappedFelt252) -> starknet::StorageBaseAddress;
            fn read(self: @Storage, key: WrappedFelt252) -> WrappedFelt252;
            fn write(ref self: Storage, key: WrappedFelt252, value: WrappedFelt252);
        }

        impl InternalStorageImpl of InternalStorageTrait {
            fn address(self: @Storage, key: WrappedFelt252) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_from_felt252(
                    hash::LegacyHash::<WrappedFelt252>::hash(0x3043534c8400cf510f61f13082bd823461a59a867690d0148bae4bfcbdb1a4, key))
            }
            fn read(self: @Storage, key: WrappedFelt252) -> WrappedFelt252 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<WrappedFelt252>::read(
                    address_domain,
                    self.address(key),
                ).unwrap_syscall()
            }
            fn write(ref self: Storage, key: WrappedFelt252, value: WrappedFelt252) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<WrappedFelt252>::write(
                    address_domain,
                    self.address(key),
                    value,
                ).unwrap_syscall()
            }
        }
    }




trait __abi {
    
    
}

mod __external {
        use super::WrappedFelt252;
        use super::ArrayTrait;
        use super::SpanTrait;
        use super::WrappedFelt252Serde;
        use super::WrappedFelt252StorageAccess;
        use super::WrappedFelt252LegacyHash;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __l1_handler {
        use super::WrappedFelt252;
        use super::ArrayTrait;
        use super::SpanTrait;
        use super::WrappedFelt252Serde;
        use super::WrappedFelt252StorageAccess;
        use super::WrappedFelt252LegacyHash;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __constructor {
        use super::WrappedFelt252;
        use super::ArrayTrait;
        use super::SpanTrait;
        use super::WrappedFelt252Serde;
        use super::WrappedFelt252StorageAccess;
        use super::WrappedFelt252LegacyHash;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}


impls:

impl WrappedFelt252Drop<> of Drop::<WrappedFelt252<>>;


impls:

impl StorageCopy<> of Copy::<Storage<>>;
impl StorageDrop<> of Drop::<Storage<>>;

//! > expected_diagnostics
error: Type not found.
 --> contract:18:55
    impl StorageEventEmitter of EventEmitter<Storage, Event> {
                                                      ^***^

error: Type not found.
 --> contract:19:44
        fn emit(ref self: Storage, event: @Event) {
                                           ^***^

error: Trait has no implementation in context: core::starknet::event::Event::<<missing>>
 --> contract:22:30
            starknet::Event::append_keys_and_values(event, ref keys, ref values);
                             ^********************^
