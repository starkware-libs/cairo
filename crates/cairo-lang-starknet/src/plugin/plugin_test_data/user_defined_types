//! > Test expansion of Starknet for user types.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[starknet::contract]
mod test_contract {
    use hash::HashStateExTrait;

    #[storage]
    struct Storage {
        var: WrappedFelt252,
        mapping: LegacyMap::<WrappedFelt252, WrappedFelt252>,
    }
    #[derive(Drop, Serde, starknet::Store)]
    struct WrappedFelt252 {
        value: felt252,
    }

    impl WrappedFelt252Hash<S, impl SHashState: hash::HashStateTrait<S>> of hash::Hash::<WrappedFelt252, S> {
        #[inline(always)]
        fn update_state(state: S, value: WrappedFelt252) -> S {
            state.update_with(value.value)
        }
    }
}

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod test_contract {
    use hash::HashStateExTrait;

    #[storage]
    struct Storage {
        var: WrappedFelt252,
        mapping: LegacyMap::<WrappedFelt252, WrappedFelt252>,
    }
    #[derive(Drop, Serde, starknet::Store)]
    struct WrappedFelt252 {
        value: felt252,
    }

    impl WrappedFelt252Hash<S, impl SHashState: hash::HashStateTrait<S>> of hash::Hash::<WrappedFelt252, S> {
        #[inline(always)]
        fn update_state(state: S, value: WrappedFelt252) -> S {
            state.update_with(value.value)
        }
    }
}

contract:

use starknet::SyscallResultTrait;
use starknet::SyscallResultTraitImpl;

#[cfg(test)]
const TEST_CLASS_HASH: felt252 = 1090235882087285791379912674174278306285664468228278518270514047518829301646;
use starknet::event::EventEmitter;
#[derive(Drop)]
    struct ContractState {
        var: var::ContractState,
        mapping: mapping::ContractState,
    }
    #[inline(always)]
    fn unsafe_new_contract_state() -> ContractState {
        ContractState {
            var: var::ContractState{},
            mapping: mapping::ContractState{},
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn contract_state_for_testing() -> ContractState {
        unsafe_new_contract_state()
    }


    #[event] #[derive(Drop, starknet::Event)] enum Event {}

    impl ContractStateEventEmitter of EventEmitter<ContractState, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ContractState, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::syscalls::emit_event_syscall(
                array::ArrayTrait::span(@keys),
                array::ArrayTrait::span(@data),
            ).unwrap_syscall()
        }
    }

    use var::InternalContractStateTrait as varContractStateTrait;
    mod var {
        use super::HashStateExTrait;
        use super::WrappedFelt252;
        use super::WrappedFelt252Hash;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;
        use starknet::SyscallResultTrait;
        use starknet::SyscallResultTraitImpl;
        use super;

        #[derive(Copy, Drop)]
        struct ContractState {}
        trait InternalContractStateTrait {
            fn address(self: @ContractState) -> starknet::StorageBaseAddress;
            fn read(self: @ContractState) -> WrappedFelt252;
            fn write(ref self: ContractState, value: WrappedFelt252);
        }

        impl InternalContractStateImpl of InternalContractStateTrait {
            fn address(self: @ContractState) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_const::<0x1c1c14d56e959d57ab94facd0d6c86740ac46c453bf9107bba1c735d7783c71>()
            }
            fn read(self: @ContractState) -> WrappedFelt252 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::Store::<WrappedFelt252>::read(
                    address_domain,
                    self.address(),
                ).unwrap_syscall()
            }
            fn write(ref self: ContractState, value: WrappedFelt252) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::Store::<WrappedFelt252>::write(
                    address_domain,
                    self.address(),
                    value,
                ).unwrap_syscall()
            }
        }
    }
    use mapping::InternalContractStateTrait as mappingContractStateTrait;
    mod mapping {
        use super::HashStateExTrait;
        use super::WrappedFelt252;
        use super::WrappedFelt252Hash;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;
        use starknet::SyscallResultTrait;
        use starknet::SyscallResultTraitImpl;
        use super;

        #[derive(Copy, Drop)]
        struct ContractState {}
        trait InternalContractStateTrait {
            fn address(self: @ContractState, key: WrappedFelt252) -> starknet::StorageBaseAddress;
            fn read(self: @ContractState, key: WrappedFelt252) -> WrappedFelt252;
            fn write(ref self: ContractState, key: WrappedFelt252, value: WrappedFelt252);
        }

        impl InternalContractStateImpl of InternalContractStateTrait {
            fn address(self: @ContractState, key: WrappedFelt252) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_from_felt252(
                    hash::LegacyHash::<WrappedFelt252>::hash(0x3043534c8400cf510f61f13082bd823461a59a867690d0148bae4bfcbdb1a4, key))
            }
            fn read(self: @ContractState, key: WrappedFelt252) -> WrappedFelt252 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::Store::<WrappedFelt252>::read(
                    address_domain,
                    self.address(key),
                ).unwrap_syscall()
            }
            fn write(ref self: ContractState, key: WrappedFelt252, value: WrappedFelt252) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::Store::<WrappedFelt252>::write(
                    address_domain,
                    self.address(key),
                    value,
                ).unwrap_syscall()
            }
        }
    }


trait __abi<ContractState> {
    
}

mod __external {
        use super::HashStateExTrait;
        use super::WrappedFelt252;
        use super::WrappedFelt252Hash;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __l1_handler {
        use super::HashStateExTrait;
        use super::WrappedFelt252;
        use super::WrappedFelt252Hash;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __constructor {
        use super::HashStateExTrait;
        use super::WrappedFelt252;
        use super::WrappedFelt252Hash;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}


impls:

impl WrappedFelt252Drop of Drop::<WrappedFelt252>;
impl WrappedFelt252Serde of Serde::<WrappedFelt252> {
    fn serialize(self: @WrappedFelt252, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.value, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<WrappedFelt252> {
        Option::Some(WrappedFelt252 {
            value: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


storage_access_impl:

impl StoreWrappedFelt252 of starknet::Store::<WrappedFelt252> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<WrappedFelt252> {
        let value = starknet::Store::<felt252>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            WrappedFelt252 {
                value,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: WrappedFelt252) -> starknet::SyscallResult<()> {
        starknet::Store::<felt252>::write(address_domain, base, value.value)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<WrappedFelt252> {
        let value = starknet::Store::<felt252>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            WrappedFelt252 {
                value,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: WrappedFelt252) -> starknet::SyscallResult<()> {
        starknet::Store::<felt252>::write_at_offset(address_domain, base, offset, value.value)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<felt252>::size()
    }
}

impls:

impl ContractStateDrop of Drop::<ContractState>;


impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
        Option::None
    }
}

//! > expected_diagnostics
