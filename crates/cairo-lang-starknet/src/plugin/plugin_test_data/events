//! > Test expansion of a simple starknet contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[derive(Drop, starknet::Event)]
struct MyEventStruct {
    x: felt252,
    data: Array::<felt252>,
}

#[derive(starknet::Event)]
enum MyEventEnum {
    A: MyEventStruct,
    B: felt252,
}

//! > generated_cairo_code
#[derive(Drop, starknet::Event)]
struct MyEventStruct {
    x: felt252,
    data: Array::<felt252>,
}

impl MyEventStructIsEvent of starknet::Event<MyEventStruct> {
    fn append_keys_and_values(
        self: MyEventStruct, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
        starknet::Event::append_keys_and_values(
            self.x, ref keys, ref values
        );
        starknet::Event::append_keys_and_values(
            self.data, ref keys, ref values
        );
    }
}

#[derive(starknet::Event)]
enum MyEventEnum {
    A: MyEventStruct,
    B: felt252,
}
impl MyEventEnumIsEvent of starknet::Event<MyEventEnum> {
    fn append_keys_and_values(
        self: MyEventEnum, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
        match self {
            MyEventEnum::A(val) => {
                array::ArrayTrait::append(ref keys, 0x3783fac2efed8fbc9ad443e592ee30e61d65f471140c10ca155e937b435b760);
                starknet::Event::append_keys_and_values(val, ref keys, ref values);
            },
            MyEventEnum::B(val) => {
                array::ArrayTrait::append(ref keys, 0x3675bff07515f5df96737194ea945c36c41e7b4fcef307b7cd4d0e602a69111);
                starknet::Event::append_keys_and_values(val, ref keys, ref values);
            },
        }
    }
}

//! > expected_diagnostics
