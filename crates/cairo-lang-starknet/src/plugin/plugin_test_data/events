//! > Test expansion of a simple starknet contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[derive(Drop, starknet::Event)]
struct MyEventStruct {
    x: felt252,
    data: Array::<felt252>,
}

#[derive(starknet::Event)]
enum MyEventEnum {
    #[event]
    A: MyEventStruct,
    B: felt252,
}

//! > generated_cairo_code
lib.cairo:

#[derive(Drop, starknet::Event)]
struct MyEventStruct {
    x: felt252,
    data: Array::<felt252>,
}

#[derive(starknet::Event)]
enum MyEventEnum {
    #[event]
    A: MyEventStruct,
    B: felt252,
}

impls:

impl MyEventStructDrop<> of Drop::<MyEventStruct<>>;


event_impl:

impl MyEventStructIsEvent of starknet::Event<MyEventStruct> {
    fn append_keys_and_values(
        self: @MyEventStruct, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
                serde::Serde::serialize(self.x, ref values);
                serde::Serde::serialize(self.data, ref values);
    }
    fn deserialize(
        ref keys: Span<felt252>, ref values: Span<felt252>,
    ) -> Option<MyEventStruct> {
                let x = serde::Serde::deserialize(
                    ref values
                )?;
                let data = serde::Serde::deserialize(
                    ref values
                )?;
        Option::Some(MyEventStruct {x, data, })
    }
}

event_impl:

impl MyEventEnumIsEvent of starknet::Event<MyEventEnum> {
    fn append_keys_and_values(
        self: @MyEventEnum, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
        match self {
            MyEventEnum::A(val) => {
                array::ArrayTrait::append(ref keys, 0x3783fac2efed8fbc9ad443e592ee30e61d65f471140c10ca155e937b435b760);
                starknet::Event::append_keys_and_values(
                    val, ref keys, ref values
                );
            },
            MyEventEnum::B(val) => {
                array::ArrayTrait::append(ref keys, 0x3675bff07515f5df96737194ea945c36c41e7b4fcef307b7cd4d0e602a69111);
                serde::Serde::serialize(val, ref values);
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref values: Span<felt252>,
    ) -> Option<MyEventEnum> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
            if selector == 0x3783fac2efed8fbc9ad443e592ee30e61d65f471140c10ca155e937b435b760 {
                let val = starknet::Event::deserialize(
                    ref keys, ref values
                )?;
                return Option::Some(MyEventEnum::A(val));
            }
            if selector == 0x3675bff07515f5df96737194ea945c36c41e7b4fcef307b7cd4d0e602a69111 {
                let val = serde::Serde::deserialize(
                    ref values
                )?;
                return Option::Some(MyEventEnum::B(val));
            }
        Option::None(())
    }
}

//! > expected_diagnostics
