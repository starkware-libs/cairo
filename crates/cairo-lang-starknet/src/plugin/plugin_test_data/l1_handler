//! > Test expansion of a simple starknet contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    #[l1_handler]
    fn good_l1_handler(from_address: felt252, arg: felt252) {}

    #[l1_handler]
    fn good_l1_handler_ignored(_from_address: felt252, arg: felt252) {}

    #[l1_handler]
    fn l1_handler_no_params() {}

    #[l1_handler]
    fn l1_handler_wrong_first_param_name(abc: felt252) {}

    #[l1_handler]
    fn l1_handler_wrong_first_param_type(from_address: u128) {}
}

//! > generated_cairo_code
mod TestContract {
    use starknet::SyscallResultTrait;
    use starknet::SyscallResultTraitImpl;

    #[l1_handler]
    fn good_l1_handler(from_address: felt252, arg: felt252) {}

    #[l1_handler]
    fn good_l1_handler_ignored(_from_address: felt252, arg: felt252) {}

    #[l1_handler]
    fn l1_handler_no_params() {}

    #[l1_handler]
    fn l1_handler_wrong_first_param_name(abc: felt252) {}

    #[l1_handler]
    fn l1_handler_wrong_first_param_type(from_address: u128) {}

    const TEST_CLASS_HASH: felt252 = 1055478556891347552205958247167314964337017986860946356987102910672004927573;
    

    

    trait __abi {
        #[l1_handler]
        fn good_l1_handler(from_address: felt252, arg: felt252);
        #[l1_handler]
        fn good_l1_handler_ignored(_from_address: felt252, arg: felt252);
        #[l1_handler]
        fn l1_handler_no_params();
        #[l1_handler]
        fn l1_handler_wrong_first_param_name(abc: felt252);
        #[l1_handler]
        fn l1_handler_wrong_first_param_type(from_address: u128);
        
        
    }

    mod __external {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

        
    }

    mod __l1_handler {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

        #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn good_l1_handler(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            let __arg_from_address =
                serde::Serde::<felt252>::deserialize(ref data).expect('Input too short for arguments');

            let __arg_arg =
                serde::Serde::<felt252>::deserialize(ref data).expect('Input too short for arguments');
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            super::good_l1_handler(__arg_from_address, __arg_arg);
            let mut arr = array::array_new();
            // References.
            // Result.
            array::ArrayTrait::span(@arr)
        }
        #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn good_l1_handler_ignored(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            let __arg__from_address =
                serde::Serde::<felt252>::deserialize(ref data).expect('Input too short for arguments');

            let __arg_arg =
                serde::Serde::<felt252>::deserialize(ref data).expect('Input too short for arguments');
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            super::good_l1_handler_ignored(__arg__from_address, __arg_arg);
            let mut arr = array::array_new();
            // References.
            // Result.
            array::ArrayTrait::span(@arr)
        }
        #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn l1_handler_no_params(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            super::l1_handler_no_params();
            let mut arr = array::array_new();
            // References.
            // Result.
            array::ArrayTrait::span(@arr)
        }
        #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn l1_handler_wrong_first_param_name(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            let __arg_abc =
                serde::Serde::<felt252>::deserialize(ref data).expect('Input too short for arguments');
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            super::l1_handler_wrong_first_param_name(__arg_abc);
            let mut arr = array::array_new();
            // References.
            // Result.
            array::ArrayTrait::span(@arr)
        }
        #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn l1_handler_wrong_first_param_type(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            let __arg_from_address =
                serde::Serde::<u128>::deserialize(ref data).expect('Input too short for arguments');
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            super::l1_handler_wrong_first_param_type(__arg_from_address);
            let mut arr = array::array_new();
            // References.
            // Result.
            array::ArrayTrait::span(@arr)
        }
        
    }

    mod __constructor {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

        
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: An L1 handler must have the 'from_address' parameter.
 --> lib.cairo:10:29
    fn l1_handler_no_params() {}
                            ^

error: Plugin diagnostic: The first parameter of an L1 handler must be named 'from_address'.
 --> lib.cairo:13:42
    fn l1_handler_wrong_first_param_name(abc: felt252) {}
                                         ^**********^

error: Plugin diagnostic: The first parameter of an L1 handler must be of type `felt252`.
 --> lib.cairo:16:42
    fn l1_handler_wrong_first_param_type(from_address: u128) {}
                                         ^****************^
