//! > Test expansion of a simple starknet contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}

    #[l1_handler]
    fn good_l1_handler(ref self: Storage, from_address: felt252, arg: felt252) {}

    #[l1_handler]
    fn good_l1_handler_ignored(ref self: Storage, _from_address: felt252, arg: felt252) {}

    #[l1_handler]
    fn l1_handler_no_params(ref self: Storage) {}

    #[l1_handler]
    fn l1_handler_wrong_first_param_name(ref self: Storage, abc: felt252) {}

    #[l1_handler]
    fn l1_handler_wrong_first_param_type(ref self: Storage, from_address: u128) {}
}

//! > generated_cairo_code
lib.cairo:

#[contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}

    #[l1_handler]
    fn good_l1_handler(ref self: Storage, from_address: felt252, arg: felt252) {}

    #[l1_handler]
    fn good_l1_handler_ignored(ref self: Storage, _from_address: felt252, arg: felt252) {}

    #[l1_handler]
    fn l1_handler_no_params(ref self: Storage) {}

    #[l1_handler]
    fn l1_handler_wrong_first_param_name(ref self: Storage, abc: felt252) {}

    #[l1_handler]
    fn l1_handler_wrong_first_param_type(ref self: Storage, from_address: u128) {}
}

contract:

use starknet::SyscallResultTrait;
use starknet::SyscallResultTraitImpl;

const TEST_CLASS_HASH: felt252 = 918174549580266604503441218109207430507634958787470180837423312089900769935;
use starknet::event::EventEmitter;
#[derive(Copy, Drop)]
    struct Storage {
    }
    #[inline(always)]
    fn unsafe_new_storage() -> Storage {
        Storage {
        }
    }
    
    #[derive(Drop, starknet::Event)] struct Event {}

    impl StorageEventEmitter of EventEmitter<Storage, Event> {
        fn emit(ref self: Storage, event: Event) {
            let mut keys = Default::<array::Array>::default();
            let mut values = Default::<array::Array>::default();
            starknet::Event::append_keys_and_values(@event, ref keys, ref values);
            starknet::syscalls::emit_event_syscall(
                array::ArrayTrait::span(@keys),
                array::ArrayTrait::span(@values),
            ).unwrap_syscall()
        }
    }





trait __abi {
    #[l1_handler]
        fn good_l1_handler(ref self: Storage, from_address: felt252, arg: felt252);
        #[l1_handler]
        fn good_l1_handler_ignored(ref self: Storage, _from_address: felt252, arg: felt252);
        #[l1_handler]
        fn l1_handler_no_params(ref self: Storage);
        #[l1_handler]
        fn l1_handler_wrong_first_param_name(ref self: Storage, abc: felt252);
        #[l1_handler]
        fn l1_handler_wrong_first_param_type(ref self: Storage, from_address: u128);
        
    
}

mod __external {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __l1_handler {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn good_l1_handler(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            let __arg_from_address =
                serde::Serde::<felt252>::deserialize(ref data).expect('Input too short for arguments');

            let __arg_arg =
                serde::Serde::<felt252>::deserialize(ref data).expect('Input too short for arguments');
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut storage = super::unsafe_new_storage();
            super::good_l1_handler(ref storage, __arg_from_address, __arg_arg);
            let mut arr = array::array_new();
            // References.
            // Result.
            array::ArrayTrait::span(@arr)
        }
        #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn good_l1_handler_ignored(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            let __arg__from_address =
                serde::Serde::<felt252>::deserialize(ref data).expect('Input too short for arguments');

            let __arg_arg =
                serde::Serde::<felt252>::deserialize(ref data).expect('Input too short for arguments');
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut storage = super::unsafe_new_storage();
            super::good_l1_handler_ignored(ref storage, __arg__from_address, __arg_arg);
            let mut arr = array::array_new();
            // References.
            // Result.
            array::ArrayTrait::span(@arr)
        }
        #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn l1_handler_no_params(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut storage = super::unsafe_new_storage();
            super::l1_handler_no_params(ref storage, );
            let mut arr = array::array_new();
            // References.
            // Result.
            array::ArrayTrait::span(@arr)
        }
        #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn l1_handler_wrong_first_param_name(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            let __arg_abc =
                serde::Serde::<felt252>::deserialize(ref data).expect('Input too short for arguments');
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut storage = super::unsafe_new_storage();
            super::l1_handler_wrong_first_param_name(ref storage, __arg_abc);
            let mut arr = array::array_new();
            // References.
            // Result.
            array::ArrayTrait::span(@arr)
        }
        #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn l1_handler_wrong_first_param_type(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            let __arg_from_address =
                serde::Serde::<u128>::deserialize(ref data).expect('Input too short for arguments');
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut storage = super::unsafe_new_storage();
            super::l1_handler_wrong_first_param_type(ref storage, __arg_from_address);
            let mut arr = array::array_new();
            // References.
            // Result.
            array::ArrayTrait::span(@arr)
        }
        
}

mod __constructor {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}


impls:

impl StorageCopy<> of Copy::<Storage<>>;
impl StorageDrop<> of Drop::<Storage<>>;


impls:

impl EventDrop<> of Drop::<Event<>>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_values(
        self: @Event, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref values: Span<felt252>,
    ) -> Option<Event> {
        Option::Some(Event {})
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: An L1 handler must have the 'from_address' as its second parameter.
 --> lib.cairo:13:29
    fn l1_handler_no_params(ref self: Storage) {}
                            ^***************^

error: Plugin diagnostic: The second parameter of an L1 handler must be named 'from_address'.
 --> lib.cairo:16:61
    fn l1_handler_wrong_first_param_name(ref self: Storage, abc: felt252) {}
                                                            ^**********^

error: Plugin diagnostic: The second parameter of an L1 handler must be of type `felt252`.
 --> lib.cairo:19:61
    fn l1_handler_wrong_first_param_type(ref self: Storage, from_address: u128) {}
                                                            ^****************^
