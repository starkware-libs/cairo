//! > Test expansion of a simple starknet contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    use starknet::class_hash::ClassHash;
    use starknet::contract_address::ContractAddress;
    use starknet::storage_access::StorageAddress;

    #[starknet::storage]
    struct Storage {}

    fn internal_func() -> felt252 {
        1
    }

    #[view]
    fn get_something(self: @Storage, ref arg: felt252, mut num: felt252) -> felt252 {
        num += 1;
        num
    }

    #[external]
    fn set_something(ref self: Storage, ref arg: felt252, num: felt252) {}

    #[l1_handler]
    fn l1_handler_func(ref self: Storage, from_address: felt252, arg: felt252, num: felt252) {}

    #[derive(Drop, starknet::Event)]
    enum Event {
        #[event]
        AwesomeEvent: AwesomeEvent,
        #[event]
        BestEventEver: BestEventEver,
    }
    #[derive(Drop, starknet::Event)]
    struct AwesomeEvent {
        x: felt252,
        data: Array::<felt252>,
    }
    #[derive(Drop, starknet::Event)]
    struct BestEventEver {}

    #[external]
    fn test_serde(
        ref self: Storage,
        contract_address: ContractAddress,
        class_hash: ClassHash,
        storage_address: StorageAddress,
    ) {}
}

//! > generated_cairo_code
lib.cairo:

#[contract]
mod TestContract {
    use starknet::class_hash::ClassHash;
    use starknet::contract_address::ContractAddress;
    use starknet::storage_access::StorageAddress;

    #[starknet::storage]
    struct Storage {}

    fn internal_func() -> felt252 {
        1
    }

    #[view]
    fn get_something(self: @Storage, ref arg: felt252, mut num: felt252) -> felt252 {
        num += 1;
        num
    }

    #[external]
    fn set_something(ref self: Storage, ref arg: felt252, num: felt252) {}

    #[l1_handler]
    fn l1_handler_func(ref self: Storage, from_address: felt252, arg: felt252, num: felt252) {}

    #[derive(Drop, starknet::Event)]
    enum Event {
        #[event]
        AwesomeEvent: AwesomeEvent,
        #[event]
        BestEventEver: BestEventEver,
    }
    #[derive(Drop, starknet::Event)]
    struct AwesomeEvent {
        x: felt252,
        data: Array::<felt252>,
    }
    #[derive(Drop, starknet::Event)]
    struct BestEventEver {}

    #[external]
    fn test_serde(
        ref self: Storage,
        contract_address: ContractAddress,
        class_hash: ClassHash,
        storage_address: StorageAddress,
    ) {}
}

contract:

use starknet::SyscallResultTrait;
use starknet::SyscallResultTraitImpl;

const TEST_CLASS_HASH: felt252 = 716644914446696530889029539963805750096764259432613740442563364409139354163;
use starknet::event::EventEmitter;
#[derive(Copy, Drop)]
    struct Storage {
    }
    #[inline(always)]
    fn unsafe_new_storage() -> Storage {
        Storage {
        }
    }
    
    
    impl StorageEventEmitter of EventEmitter<Storage, Event> {
        fn emit(ref self: Storage, event: Event) {
            let mut keys = Default::<array::Array>::default();
            let mut values = Default::<array::Array>::default();
            starknet::Event::append_keys_and_values(@event, ref keys, ref values);
            starknet::syscalls::emit_event_syscall(
                array::ArrayTrait::span(@keys),
                array::ArrayTrait::span(@values),
            ).unwrap_syscall()
        }
    }





trait __abi {
    #[view]
        fn get_something(self: @Storage, ref arg: felt252, num: felt252) -> felt252;
        #[external]
        fn set_something(ref self: Storage, ref arg: felt252, num: felt252);
        #[l1_handler]
        fn l1_handler_func(ref self: Storage, from_address: felt252, arg: felt252, num: felt252);
        #[external]
        fn test_serde(
        ref self: Storage,
        contract_address: ContractAddress,
        class_hash: ClassHash,
        storage_address: StorageAddress,
    );
        
    
}

mod __external {
        use super::ClassHash;
        use super::ContractAddress;
        use super::StorageAddress;
        use super::Event;
        use super::AwesomeEvent;
        use super::BestEventEver;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn get_something(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            let mut __arg_arg =
                serde::Serde::<felt252>::deserialize(ref data).expect('Input too short for arguments');

            let __arg_num =
                serde::Serde::<felt252>::deserialize(ref data).expect('Input too short for arguments');
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut storage = super::unsafe_new_storage();
            
            let res = super::get_something(@storage, ref __arg_arg, __arg_num);
            let mut arr = array::array_new();
            // References.
            serde::Serde::<felt252>::serialize(@__arg_arg, ref arr);
            // Result.
            serde::Serde::<felt252>::serialize(@res, ref arr);
            array::ArrayTrait::span(@arr)
        }
        #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn set_something(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            let mut __arg_arg =
                serde::Serde::<felt252>::deserialize(ref data).expect('Input too short for arguments');

            let __arg_num =
                serde::Serde::<felt252>::deserialize(ref data).expect('Input too short for arguments');
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut storage = super::unsafe_new_storage();
            super::set_something(ref storage, ref __arg_arg, __arg_num);
            let mut arr = array::array_new();
            // References.
            serde::Serde::<felt252>::serialize(@__arg_arg, ref arr);
            // Result.
            array::ArrayTrait::span(@arr)
        }
        #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn test_serde(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            let __arg_contract_address =
                serde::Serde::<ContractAddress>::deserialize(ref data).expect('Input too short for arguments');

            let __arg_class_hash =
                serde::Serde::<ClassHash>::deserialize(ref data).expect('Input too short for arguments');

            let __arg_storage_address =
                serde::Serde::<StorageAddress>::deserialize(ref data).expect('Input too short for arguments');
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut storage = super::unsafe_new_storage();
            super::test_serde(ref storage, __arg_contract_address, __arg_class_hash, __arg_storage_address);
            let mut arr = array::array_new();
            // References.
            // Result.
            array::ArrayTrait::span(@arr)
        }
        
}

mod __l1_handler {
        use super::ClassHash;
        use super::ContractAddress;
        use super::StorageAddress;
        use super::Event;
        use super::AwesomeEvent;
        use super::BestEventEver;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn l1_handler_func(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            let __arg_from_address =
                serde::Serde::<felt252>::deserialize(ref data).expect('Input too short for arguments');

            let __arg_arg =
                serde::Serde::<felt252>::deserialize(ref data).expect('Input too short for arguments');

            let __arg_num =
                serde::Serde::<felt252>::deserialize(ref data).expect('Input too short for arguments');
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut storage = super::unsafe_new_storage();
            super::l1_handler_func(ref storage, __arg_from_address, __arg_arg, __arg_num);
            let mut arr = array::array_new();
            // References.
            // Result.
            array::ArrayTrait::span(@arr)
        }
        
}

mod __constructor {
        use super::ClassHash;
        use super::ContractAddress;
        use super::StorageAddress;
        use super::Event;
        use super::AwesomeEvent;
        use super::BestEventEver;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}


impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_values(
        self: @Event, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
        match self {
            Event::AwesomeEvent(val) => {
                array::ArrayTrait::append(ref keys, 0x2fbea1ee750e49ff764a5c7183b4201cc4beb8ead010fbb75b671e6f31bb82);
                starknet::Event::append_keys_and_values(
                    val, ref keys, ref values
                );
            },
            Event::BestEventEver(val) => {
                array::ArrayTrait::append(ref keys, 0x7b89143e59dd87ddfbccfa6075ca9296b9b5f26183bc738db54c2313fab4ed);
                starknet::Event::append_keys_and_values(
                    val, ref keys, ref values
                );
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref values: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
            if selector == 0x2fbea1ee750e49ff764a5c7183b4201cc4beb8ead010fbb75b671e6f31bb82 {
                let val = starknet::Event::deserialize(
                    ref keys, ref values
                )?;
                return Option::Some(Event::AwesomeEvent(val));
            }
            if selector == 0x7b89143e59dd87ddfbccfa6075ca9296b9b5f26183bc738db54c2313fab4ed {
                let val = starknet::Event::deserialize(
                    ref keys, ref values
                )?;
                return Option::Some(Event::BestEventEver(val));
            }
        Option::None(())
    }
}


impls:

impl AwesomeEventDrop<> of Drop::<AwesomeEvent<>>;


event_impl:

impl AwesomeEventIsEvent of starknet::Event<AwesomeEvent> {
    fn append_keys_and_values(
        self: @AwesomeEvent, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
                serde::Serde::serialize(self.x, ref values);
                serde::Serde::serialize(self.data, ref values);
    }
    fn deserialize(
        ref keys: Span<felt252>, ref values: Span<felt252>,
    ) -> Option<AwesomeEvent> {
                let x = serde::Serde::deserialize(
                    ref values
                )?;
                let data = serde::Serde::deserialize(
                    ref values
                )?;
        Option::Some(AwesomeEvent {x, data, })
    }
}

impls:

impl BestEventEverDrop<> of Drop::<BestEventEver<>>;


event_impl:

impl BestEventEverIsEvent of starknet::Event<BestEventEver> {
    fn append_keys_and_values(
        self: @BestEventEver, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref values: Span<felt252>,
    ) -> Option<BestEventEver> {
        Option::Some(BestEventEver {})
    }
}

impls:

impl StorageCopy<> of Copy::<Storage<>>;
impl StorageDrop<> of Drop::<Storage<>>;

//! > expected_diagnostics
