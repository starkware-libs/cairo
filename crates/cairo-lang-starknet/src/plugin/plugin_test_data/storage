//! > Test expansion of StarkNet storage logic.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
// TODO(ilya): update format.
#[starknet::contract]
mod test_contract {
    #[storage]
    struct Storage {
        var_felt252: felt252,
        var_u8: u8,
        var_u16: u16,
        var_u32: u32,
        var_u64: u64,
        var_u128: u128,
        var_bool: bool,
        felt252_to_u128: LegacyMap::<felt252, u128>,
        u128_to_bool: LegacyMap::<u128, bool>,
        bool_to_felt252: LegacyMap::<bool, felt252>,
    }
}

//! > generated_cairo_code
lib.cairo:

// TODO(ilya): update format.
#[starknet::contract]
mod test_contract {
    #[storage]
    struct Storage {
        var_felt252: felt252,
        var_u8: u8,
        var_u16: u16,
        var_u32: u32,
        var_u64: u64,
        var_u128: u128,
        var_bool: bool,
        felt252_to_u128: LegacyMap::<felt252, u128>,
        u128_to_bool: LegacyMap::<u128, bool>,
        bool_to_felt252: LegacyMap::<bool, felt252>,
    }
}

contract:

use starknet::SyscallResultTrait;
use starknet::SyscallResultTraitImpl;

#[cfg(test)]
const TEST_CLASS_HASH: felt252 = 394012874717152213897607285090648546398436591943588733136617370902578160851;
use starknet::event::EventEmitter;
#[derive(Drop)]
    struct ContractState {
        var_felt252: var_felt252::ContractState,
        var_u8: var_u8::ContractState,
        var_u16: var_u16::ContractState,
        var_u32: var_u32::ContractState,
        var_u64: var_u64::ContractState,
        var_u128: var_u128::ContractState,
        var_bool: var_bool::ContractState,
        felt252_to_u128: felt252_to_u128::ContractState,
        u128_to_bool: u128_to_bool::ContractState,
        bool_to_felt252: bool_to_felt252::ContractState,
    }
    #[inline(always)]
    fn unsafe_new_contract_state() -> ContractState {
        ContractState {
            var_felt252: var_felt252::ContractState{},
            var_u8: var_u8::ContractState{},
            var_u16: var_u16::ContractState{},
            var_u32: var_u32::ContractState{},
            var_u64: var_u64::ContractState{},
            var_u128: var_u128::ContractState{},
            var_bool: var_bool::ContractState{},
            felt252_to_u128: felt252_to_u128::ContractState{},
            u128_to_bool: u128_to_bool::ContractState{},
            bool_to_felt252: bool_to_felt252::ContractState{},
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn contract_state_for_testing() -> ContractState {
        unsafe_new_contract_state()
    }


    #[event] #[derive(Drop, starknet::Event)] enum Event {}

    impl ContractStateEventEmitter of EventEmitter<ContractState, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ContractState, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::syscalls::emit_event_syscall(
                array::ArrayTrait::span(@keys),
                array::ArrayTrait::span(@data),
            ).unwrap_syscall()
        }
    }

    use var_felt252::InternalContractStateTrait as var_felt252ContractStateTrait;
    mod var_felt252 {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;
        use starknet::SyscallResultTrait;
        use starknet::SyscallResultTraitImpl;
        use super;

        #[derive(Copy, Drop)]
        struct ContractState {}
        trait InternalContractStateTrait {
            fn address(self: @ContractState) -> starknet::StorageBaseAddress;
            fn read(self: @ContractState) -> felt252;
            fn write(ref self: ContractState, value: felt252);
        }

        impl InternalContractStateImpl of InternalContractStateTrait {
            fn address(self: @ContractState) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_const::<0xaa97ff6377ea4c71d88150f635730828734fd5bfd6f834e2ae92d29676846c>()
            }
            fn read(self: @ContractState) -> felt252 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<felt252>::read(
                    address_domain,
                    self.address(),
                ).unwrap_syscall()
            }
            fn write(ref self: ContractState, value: felt252) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<felt252>::write(
                    address_domain,
                    self.address(),
                    value,
                ).unwrap_syscall()
            }
        }
    }
    use var_u8::InternalContractStateTrait as var_u8ContractStateTrait;
    mod var_u8 {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;
        use starknet::SyscallResultTrait;
        use starknet::SyscallResultTraitImpl;
        use super;

        #[derive(Copy, Drop)]
        struct ContractState {}
        trait InternalContractStateTrait {
            fn address(self: @ContractState) -> starknet::StorageBaseAddress;
            fn read(self: @ContractState) -> u8;
            fn write(ref self: ContractState, value: u8);
        }

        impl InternalContractStateImpl of InternalContractStateTrait {
            fn address(self: @ContractState) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_const::<0x2c1cc4c68869a16c4afd31a765927ce369b8ef4b1208114ea00e820ea36fc23>()
            }
            fn read(self: @ContractState) -> u8 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<u8>::read(
                    address_domain,
                    self.address(),
                ).unwrap_syscall()
            }
            fn write(ref self: ContractState, value: u8) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<u8>::write(
                    address_domain,
                    self.address(),
                    value,
                ).unwrap_syscall()
            }
        }
    }
    use var_u16::InternalContractStateTrait as var_u16ContractStateTrait;
    mod var_u16 {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;
        use starknet::SyscallResultTrait;
        use starknet::SyscallResultTraitImpl;
        use super;

        #[derive(Copy, Drop)]
        struct ContractState {}
        trait InternalContractStateTrait {
            fn address(self: @ContractState) -> starknet::StorageBaseAddress;
            fn read(self: @ContractState) -> u16;
            fn write(ref self: ContractState, value: u16);
        }

        impl InternalContractStateImpl of InternalContractStateTrait {
            fn address(self: @ContractState) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_const::<0xf3b2ea0485e7fdfaec3d3e519eeedf3d5dc3434b4f9c8858c217ca6a8b1d45>()
            }
            fn read(self: @ContractState) -> u16 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<u16>::read(
                    address_domain,
                    self.address(),
                ).unwrap_syscall()
            }
            fn write(ref self: ContractState, value: u16) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<u16>::write(
                    address_domain,
                    self.address(),
                    value,
                ).unwrap_syscall()
            }
        }
    }
    use var_u32::InternalContractStateTrait as var_u32ContractStateTrait;
    mod var_u32 {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;
        use starknet::SyscallResultTrait;
        use starknet::SyscallResultTraitImpl;
        use super;

        #[derive(Copy, Drop)]
        struct ContractState {}
        trait InternalContractStateTrait {
            fn address(self: @ContractState) -> starknet::StorageBaseAddress;
            fn read(self: @ContractState) -> u32;
            fn write(ref self: ContractState, value: u32);
        }

        impl InternalContractStateImpl of InternalContractStateTrait {
            fn address(self: @ContractState) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_const::<0x19490a04fdf74ff92d2d73deff1f53be2aa23274d5a6896a509931d308ffa2d>()
            }
            fn read(self: @ContractState) -> u32 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<u32>::read(
                    address_domain,
                    self.address(),
                ).unwrap_syscall()
            }
            fn write(ref self: ContractState, value: u32) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<u32>::write(
                    address_domain,
                    self.address(),
                    value,
                ).unwrap_syscall()
            }
        }
    }
    use var_u64::InternalContractStateTrait as var_u64ContractStateTrait;
    mod var_u64 {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;
        use starknet::SyscallResultTrait;
        use starknet::SyscallResultTraitImpl;
        use super;

        #[derive(Copy, Drop)]
        struct ContractState {}
        trait InternalContractStateTrait {
            fn address(self: @ContractState) -> starknet::StorageBaseAddress;
            fn read(self: @ContractState) -> u64;
            fn write(ref self: ContractState, value: u64);
        }

        impl InternalContractStateImpl of InternalContractStateTrait {
            fn address(self: @ContractState) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_const::<0x2b58a04fca59322572a3335b3f8e9a63dd34db1b715eaaae3ab367afa90a194>()
            }
            fn read(self: @ContractState) -> u64 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<u64>::read(
                    address_domain,
                    self.address(),
                ).unwrap_syscall()
            }
            fn write(ref self: ContractState, value: u64) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<u64>::write(
                    address_domain,
                    self.address(),
                    value,
                ).unwrap_syscall()
            }
        }
    }
    use var_u128::InternalContractStateTrait as var_u128ContractStateTrait;
    mod var_u128 {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;
        use starknet::SyscallResultTrait;
        use starknet::SyscallResultTraitImpl;
        use super;

        #[derive(Copy, Drop)]
        struct ContractState {}
        trait InternalContractStateTrait {
            fn address(self: @ContractState) -> starknet::StorageBaseAddress;
            fn read(self: @ContractState) -> u128;
            fn write(ref self: ContractState, value: u128);
        }

        impl InternalContractStateImpl of InternalContractStateTrait {
            fn address(self: @ContractState) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_const::<0x1ba472df0f88c033d4e0c12eb95fd291de570db0f2df241297c6ebf905889a>()
            }
            fn read(self: @ContractState) -> u128 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<u128>::read(
                    address_domain,
                    self.address(),
                ).unwrap_syscall()
            }
            fn write(ref self: ContractState, value: u128) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<u128>::write(
                    address_domain,
                    self.address(),
                    value,
                ).unwrap_syscall()
            }
        }
    }
    use var_bool::InternalContractStateTrait as var_boolContractStateTrait;
    mod var_bool {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;
        use starknet::SyscallResultTrait;
        use starknet::SyscallResultTraitImpl;
        use super;

        #[derive(Copy, Drop)]
        struct ContractState {}
        trait InternalContractStateTrait {
            fn address(self: @ContractState) -> starknet::StorageBaseAddress;
            fn read(self: @ContractState) -> bool;
            fn write(ref self: ContractState, value: bool);
        }

        impl InternalContractStateImpl of InternalContractStateTrait {
            fn address(self: @ContractState) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_const::<0x379caae8ce359ad2da9b1cd83d4df406d959c199192b9c9e787595a50e0db27>()
            }
            fn read(self: @ContractState) -> bool {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<bool>::read(
                    address_domain,
                    self.address(),
                ).unwrap_syscall()
            }
            fn write(ref self: ContractState, value: bool) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<bool>::write(
                    address_domain,
                    self.address(),
                    value,
                ).unwrap_syscall()
            }
        }
    }
    use felt252_to_u128::InternalContractStateTrait as felt252_to_u128ContractStateTrait;
    mod felt252_to_u128 {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;
        use starknet::SyscallResultTrait;
        use starknet::SyscallResultTraitImpl;
        use super;

        #[derive(Copy, Drop)]
        struct ContractState {}
        trait InternalContractStateTrait {
            fn address(self: @ContractState, key: felt252) -> starknet::StorageBaseAddress;
            fn read(self: @ContractState, key: felt252) -> u128;
            fn write(ref self: ContractState, key: felt252, value: u128);
        }

        impl InternalContractStateImpl of InternalContractStateTrait {
            fn address(self: @ContractState, key: felt252) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_from_felt252(
                    hash::LegacyHash::<felt252>::hash(0x22ccfa174c52d0acc1e51ed6102f40f9e270cefc9a906ff2ee9a366c52db7bc, key))
            }
            fn read(self: @ContractState, key: felt252) -> u128 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<u128>::read(
                    address_domain,
                    self.address(key),
                ).unwrap_syscall()
            }
            fn write(ref self: ContractState, key: felt252, value: u128) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<u128>::write(
                    address_domain,
                    self.address(key),
                    value,
                ).unwrap_syscall()
            }
        }
    }
    use u128_to_bool::InternalContractStateTrait as u128_to_boolContractStateTrait;
    mod u128_to_bool {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;
        use starknet::SyscallResultTrait;
        use starknet::SyscallResultTraitImpl;
        use super;

        #[derive(Copy, Drop)]
        struct ContractState {}
        trait InternalContractStateTrait {
            fn address(self: @ContractState, key: u128) -> starknet::StorageBaseAddress;
            fn read(self: @ContractState, key: u128) -> bool;
            fn write(ref self: ContractState, key: u128, value: bool);
        }

        impl InternalContractStateImpl of InternalContractStateTrait {
            fn address(self: @ContractState, key: u128) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_from_felt252(
                    hash::LegacyHash::<u128>::hash(0xaef662bd0e6cbe2fe1d8a16c45579f35b9c40069d967c414f98cd2e1975d7a, key))
            }
            fn read(self: @ContractState, key: u128) -> bool {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<bool>::read(
                    address_domain,
                    self.address(key),
                ).unwrap_syscall()
            }
            fn write(ref self: ContractState, key: u128, value: bool) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<bool>::write(
                    address_domain,
                    self.address(key),
                    value,
                ).unwrap_syscall()
            }
        }
    }
    use bool_to_felt252::InternalContractStateTrait as bool_to_felt252ContractStateTrait;
    mod bool_to_felt252 {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;
        use starknet::SyscallResultTrait;
        use starknet::SyscallResultTraitImpl;
        use super;

        #[derive(Copy, Drop)]
        struct ContractState {}
        trait InternalContractStateTrait {
            fn address(self: @ContractState, key: bool) -> starknet::StorageBaseAddress;
            fn read(self: @ContractState, key: bool) -> felt252;
            fn write(ref self: ContractState, key: bool, value: felt252);
        }

        impl InternalContractStateImpl of InternalContractStateTrait {
            fn address(self: @ContractState, key: bool) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_from_felt252(
                    hash::LegacyHash::<bool>::hash(0x11ddb648d7a85d8ff1f89f86feb50fd8bd26a25e6837cff5c3c38d8c3a0bb93, key))
            }
            fn read(self: @ContractState, key: bool) -> felt252 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<felt252>::read(
                    address_domain,
                    self.address(key),
                ).unwrap_syscall()
            }
            fn write(ref self: ContractState, key: bool, value: felt252) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<felt252>::write(
                    address_domain,
                    self.address(key),
                    value,
                ).unwrap_syscall()
            }
        }
    }




trait __abi<ContractState> {
    
    
}

mod __external {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __l1_handler {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __constructor {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}


impls:

impl ContractStateDrop<> of Drop::<ContractState<>>;


impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
        Option::None(())
    }
}

//! > expected_diagnostics
