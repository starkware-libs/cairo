//! > Test diagnostics from invalid contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[starknet::contract]
mod TestContract;

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod TestContract;

//! > expected_diagnostics
error: Plugin diagnostic: Contracts without body are not supported.
 --> lib.cairo:1:1
#[starknet::contract]
^*******************^

error: Module file not found. Expected path: src/TestContract.cairo
 --> lib.cairo:1:1
#[starknet::contract]
^*******************^

//! > ==========================================================================

//! > Test diagnostics non legacy storage variable.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {
        mapping: Map::<felt252, felt252>,
    }
}

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {
        mapping: Map::<felt252, felt252>,
    }
}

contract:

use starknet::SyscallResultTrait;
use starknet::SyscallResultTraitImpl;

const TEST_CLASS_HASH: felt252 = 1161579828188226398721666952320333567213323135127594909621778433933798731844;
use starknet::event::EventEmitter;
#[derive(Drop)]
    struct Storage {
        mapping: mapping::Storage,
    }
    #[inline(always)]
    fn unsafe_new_storage() -> Storage {
        Storage {
            mapping: mapping::Storage{},
        }
    }
    
    #[derive(Drop, starknet::Event)] struct Event {}

    impl StorageEventEmitter of EventEmitter<Storage, Event> {
        fn emit(ref self: Storage, event: Event) {
            let mut keys = Default::<array::Array>::default();
            let mut values = Default::<array::Array>::default();
            starknet::Event::append_keys_and_values(@event, ref keys, ref values);
            starknet::syscalls::emit_event_syscall(
                array::ArrayTrait::span(@keys),
                array::ArrayTrait::span(@values),
            ).unwrap_syscall()
        }
    }





trait __abi<Storage> {
    
    
}

mod __external {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __l1_handler {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __constructor {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}


impls:

impl StorageDrop<> of Drop::<Storage<>>;


impls:

impl EventDrop<> of Drop::<Event<>>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_values(
        self: @Event, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref values: Span<felt252>,
    ) -> Option<Event> {
        Option::Some(Event {})
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: Non `LegacyMap` mapping is not yet supported.
 --> lib.cairo:5:18
        mapping: Map::<felt252, felt252>,
                 ^*********************^

error: Plugin diagnostic: Identifier not found.
 --> lib.cairo:5:9
        mapping: Map::<felt252, felt252>,
        ^*****^

error: Plugin diagnostic: Identifier not found.
 --> lib.cairo:5:9
        mapping: Map::<felt252, felt252>,
        ^*****^

error: Invalid drop trait implementation, Trait `core::traits::Drop::<<missing>>` has multiple implementations, in: "test::TestContract::StorageDrop", "test::TestContract::EventDrop", "core::traits::SnapshotDrop", "core::traits::TupleSize0Drop", "core::traits::TupleSize1Drop", "core::traits::TupleSize2Drop", "core::traits::TupleSize3Drop", "core::traits::TupleSize4Drop", "core::boolDrop", "core::felt252Drop".
 --> impls:1:1
impl StorageDrop<> of Drop::<Storage<>>;
^**************************************^

//! > ==========================================================================

//! > Test diagnostics of non-serializable parameter in entry point.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[starknet::external]
    fn foo(ref self: Storage, x: (felt252, felt252)) {
    }
}

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[starknet::external]
    fn foo(ref self: Storage, x: (felt252, felt252)) {
    }
}

contract:

use starknet::SyscallResultTrait;
use starknet::SyscallResultTraitImpl;

const TEST_CLASS_HASH: felt252 = 323072847504244214024227030462973727244639534973975844595479493486329952073;
use starknet::event::EventEmitter;
#[derive(Drop)]
    struct Storage {
    }
    #[inline(always)]
    fn unsafe_new_storage() -> Storage {
        Storage {
        }
    }
    
    #[derive(Drop, starknet::Event)] struct Event {}

    impl StorageEventEmitter of EventEmitter<Storage, Event> {
        fn emit(ref self: Storage, event: Event) {
            let mut keys = Default::<array::Array>::default();
            let mut values = Default::<array::Array>::default();
            starknet::Event::append_keys_and_values(@event, ref keys, ref values);
            starknet::syscalls::emit_event_syscall(
                array::ArrayTrait::span(@keys),
                array::ArrayTrait::span(@values),
            ).unwrap_syscall()
        }
    }





trait __abi<Storage> {
    #[starknet::external]
        fn foo(ref self: Storage, x: (felt252, felt252));
        
    
}

mod __external {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn foo(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            let __arg_x =
                serde::Serde::<(felt252, felt252)>::deserialize(ref data).expect('Input too short for arguments');
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut storage = super::unsafe_new_storage();
            super::foo(ref storage, __arg_x);
            let mut arr = array::array_new();
            // References.
            // Result.
            array::ArrayTrait::span(@arr)
        }
        
}

mod __l1_handler {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __constructor {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}


impls:

impl StorageDrop<> of Drop::<Storage<>>;


impls:

impl EventDrop<> of Drop::<Event<>>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_values(
        self: @Event, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref values: Span<felt252>,
    ) -> Option<Event> {
        Option::Some(Event {})
    }
}

//! > expected_diagnostics

//! > ==========================================================================

//! > Test diagnostics of non-serializable return type in entry point.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[starknet::external]
    fn foo(ref self: Storage) -> (felt252, felt252) {
    }
}

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[starknet::external]
    fn foo(ref self: Storage) -> (felt252, felt252) {
    }
}

contract:

use starknet::SyscallResultTrait;
use starknet::SyscallResultTraitImpl;

const TEST_CLASS_HASH: felt252 = 944263026860202083819962463164092041215917017150857514707968154805776051898;
use starknet::event::EventEmitter;
#[derive(Drop)]
    struct Storage {
    }
    #[inline(always)]
    fn unsafe_new_storage() -> Storage {
        Storage {
        }
    }
    
    #[derive(Drop, starknet::Event)] struct Event {}

    impl StorageEventEmitter of EventEmitter<Storage, Event> {
        fn emit(ref self: Storage, event: Event) {
            let mut keys = Default::<array::Array>::default();
            let mut values = Default::<array::Array>::default();
            starknet::Event::append_keys_and_values(@event, ref keys, ref values);
            starknet::syscalls::emit_event_syscall(
                array::ArrayTrait::span(@keys),
                array::ArrayTrait::span(@values),
            ).unwrap_syscall()
        }
    }





trait __abi<Storage> {
    #[starknet::external]
        fn foo(ref self: Storage) -> (felt252, felt252);
        
    
}

mod __external {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn foo(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut storage = super::unsafe_new_storage();
            
            let res = super::foo(ref storage, );
            let mut arr = array::array_new();
            // References.
            // Result.
            serde::Serde::<(felt252, felt252)>::serialize(@res, ref arr);
            array::ArrayTrait::span(@arr)
        }
        
}

mod __l1_handler {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __constructor {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}


impls:

impl StorageDrop<> of Drop::<Storage<>>;


impls:

impl EventDrop<> of Drop::<Event<>>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_values(
        self: @Event, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref values: Span<felt252>,
    ) -> Option<Event> {
        Option::Some(Event {})
    }
}

//! > expected_diagnostics
error: Unexpected return type. Expected: "(core::felt252, core::felt252)", found: "()".
 --> lib.cairo:6:53
    fn foo(ref self: Storage) -> (felt252, felt252) {
                                                    ^

//! > ==========================================================================

//! > Test diagnostics of generic entry point.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[starknet::external]
    fn foo<T>(ref self: Storage, x: T) {
    }
}

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[starknet::external]
    fn foo<T>(ref self: Storage, x: T) {
    }
}

contract:

use starknet::SyscallResultTrait;
use starknet::SyscallResultTraitImpl;

const TEST_CLASS_HASH: felt252 = 37376797649038349963703225367949240257041791931970575742993653994517206738;
use starknet::event::EventEmitter;
#[derive(Drop)]
    struct Storage {
    }
    #[inline(always)]
    fn unsafe_new_storage() -> Storage {
        Storage {
        }
    }
    
    #[derive(Drop, starknet::Event)] struct Event {}

    impl StorageEventEmitter of EventEmitter<Storage, Event> {
        fn emit(ref self: Storage, event: Event) {
            let mut keys = Default::<array::Array>::default();
            let mut values = Default::<array::Array>::default();
            starknet::Event::append_keys_and_values(@event, ref keys, ref values);
            starknet::syscalls::emit_event_syscall(
                array::ArrayTrait::span(@keys),
                array::ArrayTrait::span(@values),
            ).unwrap_syscall()
        }
    }





trait __abi<Storage> {
    #[starknet::external]
        fn foo<T>(ref self: Storage, x: T);
        
    
}

mod __external {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn foo(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            let __arg_x =
                serde::Serde::<T>::deserialize(ref data).expect('Input too short for arguments');
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut storage = super::unsafe_new_storage();
            super::foo(ref storage, __arg_x);
            let mut arr = array::array_new();
            // References.
            // Result.
            array::ArrayTrait::span(@arr)
        }
        
}

mod __l1_handler {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __constructor {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}


impls:

impl StorageDrop<> of Drop::<Storage<>>;


impls:

impl EventDrop<> of Drop::<Event<>>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_values(
        self: @Event, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref values: Span<felt252>,
    ) -> Option<Event> {
        Option::Some(Event {})
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: Contract entry points cannot have generic arguments
 --> lib.cairo:6:11
    fn foo<T>(ref self: Storage, x: T) {
          ^*^

error: Variable not dropped. Trait has no implementation in context: core::traits::Drop::<T>. Trait has no implementation in context: core::traits::Destruct::<T>.
 --> lib.cairo:6:34
    fn foo<T>(ref self: Storage, x: T) {
                                 ^

error: Type not found.
 --> contract:53:32
                serde::Serde::<T>::deserialize(ref data).expect('Input too short for arguments');
                               ^

error: Plugin diagnostic: Type annotations needed. Failed to infer ?14
 --> lib.cairo:6:8
    fn foo<T>(ref self: Storage, x: T) {
       ^*^

//! > ==========================================================================

//! > Test multiple diagnostics from entry point.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[starknet::external]
    fn foo(ref self: Storage, x: (felt252, felt252), y: (felt252, felt252)) -> (felt252, felt252) {
    }
}

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[starknet::external]
    fn foo(ref self: Storage, x: (felt252, felt252), y: (felt252, felt252)) -> (felt252, felt252) {
    }
}

contract:

use starknet::SyscallResultTrait;
use starknet::SyscallResultTraitImpl;

const TEST_CLASS_HASH: felt252 = 1390816283963149703060588205018537704764875075639910279023841481586092070366;
use starknet::event::EventEmitter;
#[derive(Drop)]
    struct Storage {
    }
    #[inline(always)]
    fn unsafe_new_storage() -> Storage {
        Storage {
        }
    }
    
    #[derive(Drop, starknet::Event)] struct Event {}

    impl StorageEventEmitter of EventEmitter<Storage, Event> {
        fn emit(ref self: Storage, event: Event) {
            let mut keys = Default::<array::Array>::default();
            let mut values = Default::<array::Array>::default();
            starknet::Event::append_keys_and_values(@event, ref keys, ref values);
            starknet::syscalls::emit_event_syscall(
                array::ArrayTrait::span(@keys),
                array::ArrayTrait::span(@values),
            ).unwrap_syscall()
        }
    }





trait __abi<Storage> {
    #[starknet::external]
        fn foo(ref self: Storage, x: (felt252, felt252), y: (felt252, felt252)) -> (felt252, felt252);
        
    
}

mod __external {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn foo(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            let __arg_x =
                serde::Serde::<(felt252, felt252)>::deserialize(ref data).expect('Input too short for arguments');

            let __arg_y =
                serde::Serde::<(felt252, felt252)>::deserialize(ref data).expect('Input too short for arguments');
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut storage = super::unsafe_new_storage();
            
            let res = super::foo(ref storage, __arg_x, __arg_y);
            let mut arr = array::array_new();
            // References.
            // Result.
            serde::Serde::<(felt252, felt252)>::serialize(@res, ref arr);
            array::ArrayTrait::span(@arr)
        }
        
}

mod __l1_handler {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __constructor {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}


impls:

impl StorageDrop<> of Drop::<Storage<>>;


impls:

impl EventDrop<> of Drop::<Event<>>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_values(
        self: @Event, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref values: Span<felt252>,
    ) -> Option<Event> {
        Option::Some(Event {})
    }
}

//! > expected_diagnostics
error: Unexpected return type. Expected: "(core::felt252, core::felt252)", found: "()".
 --> lib.cairo:6:99
    fn foo(ref self: Storage, x: (felt252, felt252), y: (felt252, felt252)) -> (felt252, felt252) {
                                                                                                  ^

//! > ==========================================================================

//! > Test diagnostics from event with nonempty body.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[event]
    fn nonempty_body() {
        let x = 1;
    }
}

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[event]
    fn nonempty_body() {
        let x = 1;
    }
}

contract:

use starknet::SyscallResultTrait;
use starknet::SyscallResultTraitImpl;

const TEST_CLASS_HASH: felt252 = 1452493420983165357424490119941649156134580373115212349409723119771466643057;
use starknet::event::EventEmitter;
#[derive(Drop)]
    struct Storage {
    }
    #[inline(always)]
    fn unsafe_new_storage() -> Storage {
        Storage {
        }
    }
    
    #[derive(Drop, starknet::Event)] struct Event {}

    impl StorageEventEmitter of EventEmitter<Storage, Event> {
        fn emit(ref self: Storage, event: Event) {
            let mut keys = Default::<array::Array>::default();
            let mut values = Default::<array::Array>::default();
            starknet::Event::append_keys_and_values(@event, ref keys, ref values);
            starknet::syscalls::emit_event_syscall(
                array::ArrayTrait::span(@keys),
                array::ArrayTrait::span(@values),
            ).unwrap_syscall()
        }
    }





trait __abi<Storage> {
    
    
}

mod __external {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __l1_handler {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __constructor {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}


impls:

impl StorageDrop<> of Drop::<Storage<>>;


impls:

impl EventDrop<> of Drop::<Event<>>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_values(
        self: @Event, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref values: Span<felt252>,
    ) -> Option<Event> {
        Option::Some(Event {})
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: Event function body must be empty.
 --> lib.cairo:7:9
        let x = 1;
        ^********^

//! > ==========================================================================

//! > Test diagnostics from event with ref params.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[event]
    fn with_ref_param(ref x: felt252, y: u128) {
    }
}

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[event]
    fn with_ref_param(ref x: felt252, y: u128) {
    }
}

contract:

use starknet::SyscallResultTrait;
use starknet::SyscallResultTraitImpl;

const TEST_CLASS_HASH: felt252 = 1322750372335859861651431825988791685291276386696101909567242456459249228205;
use starknet::event::EventEmitter;
#[derive(Drop)]
    struct Storage {
    }
    #[inline(always)]
    fn unsafe_new_storage() -> Storage {
        Storage {
        }
    }
    
    #[derive(Drop, starknet::Event)] struct Event {}

    impl StorageEventEmitter of EventEmitter<Storage, Event> {
        fn emit(ref self: Storage, event: Event) {
            let mut keys = Default::<array::Array>::default();
            let mut values = Default::<array::Array>::default();
            starknet::Event::append_keys_and_values(@event, ref keys, ref values);
            starknet::syscalls::emit_event_syscall(
                array::ArrayTrait::span(@keys),
                array::ArrayTrait::span(@values),
            ).unwrap_syscall()
        }
    }





trait __abi<Storage> {
    
    
}

mod __external {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __l1_handler {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __constructor {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}


impls:

impl StorageDrop<> of Drop::<Storage<>>;


impls:

impl EventDrop<> of Drop::<Event<>>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_values(
        self: @Event, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref values: Span<felt252>,
    ) -> Option<Event> {
        Option::Some(Event {})
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: `ref` parameters are not supported in contract events.
 --> lib.cairo:6:23
    fn with_ref_param(ref x: felt252, y: u128) {
                      ^*^

//! > ==========================================================================

//! > Test diagnostics from event with non-unit return type.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[event]
    fn nonunit_ret_type() -> felt252 {
    }
}

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[event]
    fn nonunit_ret_type() -> felt252 {
    }
}

contract:

use starknet::SyscallResultTrait;
use starknet::SyscallResultTraitImpl;

const TEST_CLASS_HASH: felt252 = 1201447983428111779005363113781237195867633608905836529088057522787828215171;
use starknet::event::EventEmitter;
#[derive(Drop)]
    struct Storage {
    }
    #[inline(always)]
    fn unsafe_new_storage() -> Storage {
        Storage {
        }
    }
    
    #[derive(Drop, starknet::Event)] struct Event {}

    impl StorageEventEmitter of EventEmitter<Storage, Event> {
        fn emit(ref self: Storage, event: Event) {
            let mut keys = Default::<array::Array>::default();
            let mut values = Default::<array::Array>::default();
            starknet::Event::append_keys_and_values(@event, ref keys, ref values);
            starknet::syscalls::emit_event_syscall(
                array::ArrayTrait::span(@keys),
                array::ArrayTrait::span(@values),
            ).unwrap_syscall()
        }
    }





trait __abi<Storage> {
    
    
}

mod __external {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __l1_handler {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __constructor {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}


impls:

impl StorageDrop<> of Drop::<Storage<>>;


impls:

impl EventDrop<> of Drop::<Event<>>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_values(
        self: @Event, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref values: Span<felt252>,
    ) -> Option<Event> {
        Option::Some(Event {})
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: Event functions must not return a value.
 --> lib.cairo:6:27
    fn nonunit_ret_type() -> felt252 {
                          ^********^

//! > ==========================================================================

//! > Test diagnostics from event with a non-serializable type.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[event]
    fn generic_event<T>(x: T) {
    }
}

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[event]
    fn generic_event<T>(x: T) {
    }
}

contract:

use starknet::SyscallResultTrait;
use starknet::SyscallResultTraitImpl;

const TEST_CLASS_HASH: felt252 = 1169493544728526470325400500178533629234340785465386297715597529320266940244;
use starknet::event::EventEmitter;
#[derive(Drop)]
    struct Storage {
    }
    #[inline(always)]
    fn unsafe_new_storage() -> Storage {
        Storage {
        }
    }
    
    #[derive(Drop, starknet::Event)] struct Event {}

    impl StorageEventEmitter of EventEmitter<Storage, Event> {
        fn emit(ref self: Storage, event: Event) {
            let mut keys = Default::<array::Array>::default();
            let mut values = Default::<array::Array>::default();
            starknet::Event::append_keys_and_values(@event, ref keys, ref values);
            starknet::syscalls::emit_event_syscall(
                array::ArrayTrait::span(@keys),
                array::ArrayTrait::span(@values),
            ).unwrap_syscall()
        }
    }





trait __abi<Storage> {
    
    
}

mod __external {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __l1_handler {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __constructor {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}


impls:

impl StorageDrop<> of Drop::<Storage<>>;


impls:

impl EventDrop<> of Drop::<Event<>>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_values(
        self: @Event, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref values: Span<felt252>,
    ) -> Option<Event> {
        Option::Some(Event {})
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: Event functions cannot have generic arguments
 --> lib.cairo:6:21
    fn generic_event<T>(x: T) {
                    ^*^

//! > ==========================================================================

//! > Test multiple diagnostics from event.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[event]
    fn bad_event(ref x: felt252, ref y: felt252, z: (felt252, felt252)) -> felt252 {
        3
    }
}

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[event]
    fn bad_event(ref x: felt252, ref y: felt252, z: (felt252, felt252)) -> felt252 {
        3
    }
}

contract:

use starknet::SyscallResultTrait;
use starknet::SyscallResultTraitImpl;

const TEST_CLASS_HASH: felt252 = 1736544348641821438975002046941667458568727874706336419659951186929988966254;
use starknet::event::EventEmitter;
#[derive(Drop)]
    struct Storage {
    }
    #[inline(always)]
    fn unsafe_new_storage() -> Storage {
        Storage {
        }
    }
    
    #[derive(Drop, starknet::Event)] struct Event {}

    impl StorageEventEmitter of EventEmitter<Storage, Event> {
        fn emit(ref self: Storage, event: Event) {
            let mut keys = Default::<array::Array>::default();
            let mut values = Default::<array::Array>::default();
            starknet::Event::append_keys_and_values(@event, ref keys, ref values);
            starknet::syscalls::emit_event_syscall(
                array::ArrayTrait::span(@keys),
                array::ArrayTrait::span(@values),
            ).unwrap_syscall()
        }
    }





trait __abi<Storage> {
    
    
}

mod __external {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __l1_handler {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __constructor {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}


impls:

impl StorageDrop<> of Drop::<Storage<>>;


impls:

impl EventDrop<> of Drop::<Event<>>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_values(
        self: @Event, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref values: Span<felt252>,
    ) -> Option<Event> {
        Option::Some(Event {})
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: Event functions must not return a value.
 --> lib.cairo:6:73
    fn bad_event(ref x: felt252, ref y: felt252, z: (felt252, felt252)) -> felt252 {
                                                                        ^********^

error: Plugin diagnostic: `ref` parameters are not supported in contract events.
 --> lib.cairo:6:18
    fn bad_event(ref x: felt252, ref y: felt252, z: (felt252, felt252)) -> felt252 {
                 ^*^

error: Plugin diagnostic: `ref` parameters are not supported in contract events.
 --> lib.cairo:6:34
    fn bad_event(ref x: felt252, ref y: felt252, z: (felt252, felt252)) -> felt252 {
                                 ^*^

error: Plugin diagnostic: Event function body must be empty.
 --> lib.cairo:7:9
        3
        ^

//! > ==========================================================================

//! > Test account contract_entry point on a non-account contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[starknet::external]
    fn __validate__(ref self: Storage) {}
    #[starknet::external]
    fn __validate_declare__(ref self: Storage) {}
    #[starknet::external]
    fn __validate_deploy__(ref self: Storage) {}
    #[starknet::external]
    fn __execute__(ref self: Storage) {}
}

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[starknet::external]
    fn __validate__(ref self: Storage) {}
    #[starknet::external]
    fn __validate_declare__(ref self: Storage) {}
    #[starknet::external]
    fn __validate_deploy__(ref self: Storage) {}
    #[starknet::external]
    fn __execute__(ref self: Storage) {}
}

contract:

use starknet::SyscallResultTrait;
use starknet::SyscallResultTraitImpl;

const TEST_CLASS_HASH: felt252 = 1676193387030269516483735317395461874743652446816796136973974522802659042647;
use starknet::event::EventEmitter;
#[derive(Drop)]
    struct Storage {
    }
    #[inline(always)]
    fn unsafe_new_storage() -> Storage {
        Storage {
        }
    }
    
    #[derive(Drop, starknet::Event)] struct Event {}

    impl StorageEventEmitter of EventEmitter<Storage, Event> {
        fn emit(ref self: Storage, event: Event) {
            let mut keys = Default::<array::Array>::default();
            let mut values = Default::<array::Array>::default();
            starknet::Event::append_keys_and_values(@event, ref keys, ref values);
            starknet::syscalls::emit_event_syscall(
                array::ArrayTrait::span(@keys),
                array::ArrayTrait::span(@values),
            ).unwrap_syscall()
        }
    }





trait __abi<Storage> {
    #[starknet::external]
        fn __validate__(ref self: Storage);
        #[starknet::external]
        fn __validate_declare__(ref self: Storage);
        #[starknet::external]
        fn __validate_deploy__(ref self: Storage);
        #[starknet::external]
        fn __execute__(ref self: Storage);
        
    
}

mod __external {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn __validate__(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut storage = super::unsafe_new_storage();
            super::__validate__(ref storage, );
            let mut arr = array::array_new();
            // References.
            // Result.
            array::ArrayTrait::span(@arr)
        }
        #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn __validate_declare__(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut storage = super::unsafe_new_storage();
            super::__validate_declare__(ref storage, );
            let mut arr = array::array_new();
            // References.
            // Result.
            array::ArrayTrait::span(@arr)
        }
        #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn __validate_deploy__(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut storage = super::unsafe_new_storage();
            super::__validate_deploy__(ref storage, );
            let mut arr = array::array_new();
            // References.
            // Result.
            array::ArrayTrait::span(@arr)
        }
        #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn __execute__(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut storage = super::unsafe_new_storage();
            super::__execute__(ref storage, );
            let mut arr = array::array_new();
            // References.
            // Result.
            array::ArrayTrait::span(@arr)
        }
        
}

mod __l1_handler {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __constructor {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}


impls:

impl StorageDrop<> of Drop::<Storage<>>;


impls:

impl EventDrop<> of Drop::<Event<>>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_values(
        self: @Event, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref values: Span<felt252>,
    ) -> Option<Event> {
        Option::Some(Event {})
    }
}

//! > expected_diagnostics

//! > ==========================================================================

//! > Test raw_outputs diagnostics.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}

    #[starknet::external]
    #[raw_output]
    fn foo(ref self: Storage, ref a: felt252, ref b: felt252) {}

    #[starknet::external]
    #[raw_output]
    fn bar1(ref self: Storage, a: felt252) -> felt252 { 0 }

    #[starknet::external]
    #[raw_output]
    fn bar2(ref self: Storage, a: felt252) {}

    // Should generate diagnostic as path resolving is not supported.
    #[starknet::external]
    #[raw_output]
    fn bar3(ref self: Storage, a: felt252) -> core::Array::<felt252> {
         array::array_new()
    }

    // Should generate diagnostic as alias resolving is not supported.
    type my_felt252_array_type = Array::<felt252>;
    #[starknet::external]
    #[raw_output]
    fn bar4(ref self: Storage, a: felt252) -> my_felt252_array_type {
        array::array_new()
    }
}

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}

    #[starknet::external]
    #[raw_output]
    fn foo(ref self: Storage, ref a: felt252, ref b: felt252) {}

    #[starknet::external]
    #[raw_output]
    fn bar1(ref self: Storage, a: felt252) -> felt252 { 0 }

    #[starknet::external]
    #[raw_output]
    fn bar2(ref self: Storage, a: felt252) {}

    // Should generate diagnostic as path resolving is not supported.
    #[starknet::external]
    #[raw_output]
    fn bar3(ref self: Storage, a: felt252) -> core::Array::<felt252> {
         array::array_new()
    }

    // Should generate diagnostic as alias resolving is not supported.
    type my_felt252_array_type = Array::<felt252>;
    #[starknet::external]
    #[raw_output]
    fn bar4(ref self: Storage, a: felt252) -> my_felt252_array_type {
        array::array_new()
    }
}

contract:

use starknet::SyscallResultTrait;
use starknet::SyscallResultTraitImpl;

const TEST_CLASS_HASH: felt252 = 473531488547342264424719342337027423828576061357304609795445500694313630997;
use starknet::event::EventEmitter;
#[derive(Drop)]
    struct Storage {
    }
    #[inline(always)]
    fn unsafe_new_storage() -> Storage {
        Storage {
        }
    }
    
    #[derive(Drop, starknet::Event)] struct Event {}

    impl StorageEventEmitter of EventEmitter<Storage, Event> {
        fn emit(ref self: Storage, event: Event) {
            let mut keys = Default::<array::Array>::default();
            let mut values = Default::<array::Array>::default();
            starknet::Event::append_keys_and_values(@event, ref keys, ref values);
            starknet::syscalls::emit_event_syscall(
                array::ArrayTrait::span(@keys),
                array::ArrayTrait::span(@values),
            ).unwrap_syscall()
        }
    }





trait __abi<Storage> {
    #[starknet::external]
        fn foo(ref self: Storage, ref a: felt252, ref b: felt252);
        #[starknet::external]
        fn bar1(ref self: Storage, a: felt252) -> felt252;
        #[starknet::external]
        fn bar2(ref self: Storage, a: felt252);
        #[starknet::external]
        fn bar3(ref self: Storage, a: felt252) -> core::Array::<felt252>;
        #[starknet::external]
        fn bar4(ref self: Storage, a: felt252) -> my_felt252_array_type;
        
    
}

mod __external {
        use super::my_felt252_array_type;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __l1_handler {
        use super::my_felt252_array_type;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __constructor {
        use super::my_felt252_array_type;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}


impls:

impl StorageDrop<> of Drop::<Storage<>>;


impls:

impl EventDrop<> of Drop::<Event<>>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_values(
        self: @Event, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref values: Span<felt252>,
    ) -> Option<Event> {
        Option::Some(Event {})
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: `raw_output` functions cannot have `ref` parameters.
 --> lib.cairo:8:31
    fn foo(ref self: Storage, ref a: felt252, ref b: felt252) {}
                              ^*^

error: Plugin diagnostic: `raw_output` functions cannot have `ref` parameters.
 --> lib.cairo:8:47
    fn foo(ref self: Storage, ref a: felt252, ref b: felt252) {}
                                              ^*^

error: Plugin diagnostic: `raw_output` functions must return `Span::<felt252>`.
 --> lib.cairo:8:63
    fn foo(ref self: Storage, ref a: felt252, ref b: felt252) {}
                                                              ^

error: Plugin diagnostic: `raw_output` functions must return `Span::<felt252>`.
 --> lib.cairo:12:47
    fn bar1(ref self: Storage, a: felt252) -> felt252 { 0 }
                                              ^*****^

error: Plugin diagnostic: `raw_output` functions must return `Span::<felt252>`.
 --> lib.cairo:16:44
    fn bar2(ref self: Storage, a: felt252) {}
                                           ^

error: Plugin diagnostic: `raw_output` functions must return `Span::<felt252>`.
 --> lib.cairo:21:47
    fn bar3(ref self: Storage, a: felt252) -> core::Array::<felt252> {
                                              ^********************^

error: Plugin diagnostic: `raw_output` functions must return `Span::<felt252>`.
 --> lib.cairo:29:47
    fn bar4(ref self: Storage, a: felt252) -> my_felt252_array_type {
                                              ^*******************^

//! > ==========================================================================

//! > Test reusage of storage var name diagnostics.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {
        same_name: felt252,
    }
    fn same_name() -> felt252 {
        1
    }
}

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {
        same_name: felt252,
    }
    fn same_name() -> felt252 {
        1
    }
}

contract:

use starknet::SyscallResultTrait;
use starknet::SyscallResultTraitImpl;

const TEST_CLASS_HASH: felt252 = 1324177304310684139848069877177910004665398011950788933643739393367960516108;
use starknet::event::EventEmitter;
#[derive(Drop)]
    struct Storage {
        same_name: same_name::Storage,
    }
    #[inline(always)]
    fn unsafe_new_storage() -> Storage {
        Storage {
            same_name: same_name::Storage{},
        }
    }
    
    #[derive(Drop, starknet::Event)] struct Event {}

    impl StorageEventEmitter of EventEmitter<Storage, Event> {
        fn emit(ref self: Storage, event: Event) {
            let mut keys = Default::<array::Array>::default();
            let mut values = Default::<array::Array>::default();
            starknet::Event::append_keys_and_values(@event, ref keys, ref values);
            starknet::syscalls::emit_event_syscall(
                array::ArrayTrait::span(@keys),
                array::ArrayTrait::span(@values),
            ).unwrap_syscall()
        }
    }

    use same_name::InternalStorageTrait as same_nameStorageTrait;
    mod same_name {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;
        use starknet::SyscallResultTrait;
        use starknet::SyscallResultTraitImpl;
        use super;

        #[derive(Copy, Drop)]
        struct Storage {}
        trait InternalStorageTrait {
            fn address(self: @Storage) -> starknet::StorageBaseAddress;
            fn read(self: @Storage) -> felt252;
            fn write(ref self: Storage, value: felt252);
        }

        impl InternalStorageImpl of InternalStorageTrait {
            fn address(self: @Storage) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_const::<0x26673b81123c540a9238f376b833c3914834c3c0cdf4e609f834963616d3ef9>()
            }
            fn read(self: @Storage) -> felt252 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<felt252>::read(
                    address_domain,
                    self.address(),
                ).unwrap_syscall()
            }
            fn write(ref self: Storage, value: felt252) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<felt252>::write(
                    address_domain,
                    self.address(),
                    value,
                ).unwrap_syscall()
            }
        }
    }




trait __abi<Storage> {
    
    
}

mod __external {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __l1_handler {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __constructor {
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}


impls:

impl StorageDrop<> of Drop::<Storage<>>;


impls:

impl EventDrop<> of Drop::<Event<>>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_values(
        self: @Event, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref values: Span<felt252>,
    ) -> Option<Event> {
        Option::Some(Event {})
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: The name `same_name` is defined multiple times.
 --> lib.cairo:5:9
        same_name: felt252,
        ^*******^

//! > ==========================================================================

//! > Contract with no storage.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[starknet::contract]
mod TestContract {
    fn same_name() -> felt252 {
        1
    }
}

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod TestContract {
    fn same_name() -> felt252 {
        1
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: Contracts must define a 'Storage' struct.
 --> lib.cairo:1:1
#[starknet::contract]
^*******************^

//! > ==========================================================================

//! > Not annotated storage struct.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[starknet::contract]
mod TestContract {
    struct Storage {
        same_name: felt252,
    }
    fn same_name() -> felt252 {
        1
    }
}

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod TestContract {
    struct Storage {
        same_name: felt252,
    }
    fn same_name() -> felt252 {
        1
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: 'Storage' struct must be annotated with #[starknet::storage].
 --> lib.cairo:1:1
#[starknet::contract]
^*******************^

//! > ==========================================================================

//! > Non v0 impls.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {
    }
    #[starknet::imp(v0)]
    #[generate_trait]
    impl AImpl of ATrait {}

    #[starknet::imp(v1)]
    #[generate_trait]
    impl BImpl of BTrait {}
}

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {
    }
    #[starknet::imp(v0)]
    #[generate_trait]
    impl AImpl of ATrait {}

    #[starknet::imp(v1)]
    #[generate_trait]
    impl BImpl of BTrait {}
}

contract:

use starknet::SyscallResultTrait;
use starknet::SyscallResultTraitImpl;

const TEST_CLASS_HASH: felt252 = 103933555994881098915347636212803290057487395915616160310801145067369601579;
use starknet::event::EventEmitter;
#[derive(Drop)]
    struct Storage {
    }
    #[inline(always)]
    fn unsafe_new_storage() -> Storage {
        Storage {
        }
    }
    
    #[derive(Drop, starknet::Event)] struct Event {}

    impl StorageEventEmitter of EventEmitter<Storage, Event> {
        fn emit(ref self: Storage, event: Event) {
            let mut keys = Default::<array::Array>::default();
            let mut values = Default::<array::Array>::default();
            starknet::Event::append_keys_and_values(@event, ref keys, ref values);
            starknet::syscalls::emit_event_syscall(
                array::ArrayTrait::span(@keys),
                array::ArrayTrait::span(@values),
            ).unwrap_syscall()
        }
    }





trait __abi<Storage> {
    
    
}

mod __external {
        use super::AImpl;
        use super::BImpl;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __l1_handler {
        use super::AImpl;
        use super::BImpl;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __constructor {
        use super::AImpl;
        use super::BImpl;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}


generate_trait:

trait ATrait {
}


generate_trait:

trait BTrait {
}


impls:

impl StorageDrop<> of Drop::<Storage<>>;


impls:

impl EventDrop<> of Drop::<Event<>>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_values(
        self: @Event, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref values: Span<felt252>,
    ) -> Option<Event> {
        Option::Some(Event {})
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: Only #[starknet::imp(v0)] is supported.
 --> lib.cairo:10:5
    #[starknet::imp(v1)]
    ^******************^

//! > ==========================================================================

//! > old contract attribute.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
  
}

//! > generated_cairo_code
lib.cairo:

#[contract]
mod TestContract {
  
}

//! > expected_diagnostics
error: Plugin diagnostic: The 'contract' attribute was deprecated, please use `starknet::contract` instead.
 --> lib.cairo:1:1
#[contract]
^*********^
