//! > Test expansion of a simple starknet contract with ownable component.

//! > test_runner_name
ExpandContractFromCrateTestRunner(expect_diagnostics: false)

//! > contract_file_name
cairo_level_tests/contracts/mintable.cairo

//! > generated_cairo_code
#[starknet::interface]
trait GetSupply<TContractState> {
    fn get_total_supply_plus_1(self: @TContractState) -> u256;
}

#[starknet::contract]
mod mintable_erc20_ownable {
    use starknet::ContractAddress;
    use cairo_level_tests::components::erc20::erc20 as erc20_comp;
    use cairo_level_tests::components::ownable::ownable as ownable_comp;
    use cairo_level_tests::components::mintable::mintable as mintable_comp;

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        ERC20: erc20_comp::Event,
        Ownable: ownable_comp::Event,
        Mintable: mintable_comp::Event,
    }

    #[abi(embed_v0)]
    impl ERC20Impl = erc20_comp::IERC20<ContractState>;

    impl ERC20Helper = erc20_comp::ERC20HelperImpl<ContractState>;

    #[abi(embed_v0)]
    impl OwnershipTransfer = ownable_comp::Transfer<ContractState>;

    impl OwnershipHelper = ownable_comp::OwnableHelperImpl<ContractState>;

    #[abi(embed_v0)]
    impl MintImpl = mintable_comp::Mint<ContractState>;

    #[abi(per_item)]
    #[generate_trait]
    impl ImplCtor of TraitCtor {
        #[constructor]
        fn constructor(
            ref self: ContractState,
            name: felt252,
            symbol: felt252,
            decimals: u8,
            initial_supply: u256,
            recipient: ContractAddress,
            owner: ContractAddress,
        ) {
            self.erc20_storage.init(name, symbol, decimals, initial_supply, recipient);
            self.ownable_storage.init_ownable(owner);
        }
    }

    #[abi(embed_v0)]
    impl ImplGetSupply of super::GetSupply<ContractState> {
        fn get_total_supply_plus_1(self: @ContractState) -> u256 {
            self.erc20_storage.get_total_supply() + 1
        }
    }


    pub struct ContractState {
        pub erc20_storage: erc20_comp::ComponentState<ContractState>,
        pub ownable_storage: ownable_comp::ComponentState<ContractState>,
        pub mintable_storage: mintable_comp::ComponentState<ContractState>,
    }
    impl ContractStateDrop of Drop<ContractState> {}
    #[inline(always)]
    pub fn unsafe_new_contract_state() -> ContractState {
        ContractState {
            erc20_storage: erc20_comp::unsafe_new_component_state::<ContractState>(),
            ownable_storage: ownable_comp::unsafe_new_component_state::<ContractState>(),
            mintable_storage: mintable_comp::unsafe_new_component_state::<ContractState>(),
        }
    }
    
use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait
};

impl ContractStateIERC20 of
    erc20_comp::UnsafeNewContractStateTraitForIERC20<ContractState> {
    fn unsafe_new_contract_state() -> ContractState {
        unsafe_new_contract_state()
    }
}
impl ContractStateTransfer of
    ownable_comp::UnsafeNewContractStateTraitForTransfer<ContractState> {
    fn unsafe_new_contract_state() -> ContractState {
        unsafe_new_contract_state()
    }
}
impl ContractStateMint of
    mintable_comp::UnsafeNewContractStateTraitForMint<ContractState> {
    fn unsafe_new_contract_state() -> ContractState {
        unsafe_new_contract_state()
    }
}
#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__ImplCtor__constructor(mut data: Span::<felt252>) -> Span::<felt252> {
    core::internal::require_implicit::<System>();
    core::internal::revoke_ap_tracking();
    core::option::OptionTraitImpl::expect(core::gas::withdraw_gas(), 'Out of gas');
    let __arg_name = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_symbol = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    let __arg_decimals = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<u8>::deserialize(ref data),
        'Failed to deserialize param #3'
    );
    let __arg_initial_supply = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<u256>::deserialize(ref data),
        'Failed to deserialize param #4'
    );
    let __arg_recipient = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #5'
    );
    let __arg_owner = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #6'
    );
    assert(core::array::SpanTrait::is_empty(data), 'Input too long for arguments');
    core::option::OptionTraitImpl::expect(
        core::gas::withdraw_gas_all(core::gas::get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    ImplCtor::constructor(ref contract_state, __arg_name, __arg_symbol, __arg_decimals, __arg_initial_supply, __arg_recipient, __arg_owner);
    let mut arr = core::array::array_new();
    // References.
    // Result.
    core::array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__ImplGetSupply__get_total_supply_plus_1(mut data: Span::<felt252>) -> Span::<felt252> {
    core::internal::require_implicit::<System>();
    core::internal::revoke_ap_tracking();
    core::option::OptionTraitImpl::expect(core::gas::withdraw_gas(), 'Out of gas');
    
    assert(core::array::SpanTrait::is_empty(data), 'Input too long for arguments');
    core::option::OptionTraitImpl::expect(
        core::gas::withdraw_gas_all(core::gas::get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    let res = ImplGetSupply::get_total_supply_plus_1(@contract_state, );
    let mut arr = core::array::array_new();
    // References.
    // Result.
    core::serde::Serde::<u256>::serialize(@res, ref arr);
    core::array::ArrayTrait::span(@arr)
}


pub mod __external {
    pub use super::__wrapper__ImplGetSupply__get_total_supply_plus_1 as get_total_supply_plus_1;
}
pub mod __l1_handler {
}
pub mod __constructor {
    pub use super::__wrapper__ImplCtor__constructor as constructor;
}
    impl ContractStateEventEmitter of starknet::event::EventEmitter<
        ContractState, Event
    > {
        fn emit<S, impl IntoImp: core::traits::Into<S, Event>>(
            ref self: ContractState, event: S
        ) {
            let event: Event = core::traits::Into::into(event);
            let mut keys = Default::<core::array::Array>::default();
            let mut data = Default::<core::array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    core::array::ArrayTrait::span(@keys),
                    core::array::ArrayTrait::span(@data),
                )
            )
        }
    }

impl HasComponentImpl_erc20_comp of erc20_comp::HasComponent<ContractState> {
    fn get_component(self: @ContractState) -> @erc20_comp::ComponentState<ContractState> {
        self.erc20_storage
    }
    fn get_component_mut(ref self: ContractState) -> erc20_comp::ComponentState<ContractState> {
        erc20_comp::unsafe_new_component_state::<ContractState>()
    }
    fn get_contract(self: @erc20_comp::ComponentState<ContractState>) -> @ContractState {
        @unsafe_new_contract_state()
    }
    fn get_contract_mut(ref self: erc20_comp::ComponentState<ContractState>) -> ContractState {
        unsafe_new_contract_state()
    }
    fn emit<S, impl IntoImp: core::traits::Into<S, erc20_comp::Event>>(ref self: erc20_comp::ComponentState<ContractState>, event: S) {
        let event: erc20_comp::Event = core::traits::Into::into(event);
        let mut contract = erc20_comp::HasComponent::get_contract_mut(ref self);
        ContractStateEventEmitter::emit(ref contract, Event::ERC20(event));
    }
}
impl HasComponentImpl_ownable_comp of ownable_comp::HasComponent<ContractState> {
    fn get_component(self: @ContractState) -> @ownable_comp::ComponentState<ContractState> {
        self.ownable_storage
    }
    fn get_component_mut(ref self: ContractState) -> ownable_comp::ComponentState<ContractState> {
        ownable_comp::unsafe_new_component_state::<ContractState>()
    }
    fn get_contract(self: @ownable_comp::ComponentState<ContractState>) -> @ContractState {
        @unsafe_new_contract_state()
    }
    fn get_contract_mut(ref self: ownable_comp::ComponentState<ContractState>) -> ContractState {
        unsafe_new_contract_state()
    }
    fn emit<S, impl IntoImp: core::traits::Into<S, ownable_comp::Event>>(ref self: ownable_comp::ComponentState<ContractState>, event: S) {
        let event: ownable_comp::Event = core::traits::Into::into(event);
        let mut contract = ownable_comp::HasComponent::get_contract_mut(ref self);
        ContractStateEventEmitter::emit(ref contract, Event::Ownable(event));
    }
}
impl HasComponentImpl_mintable_comp of mintable_comp::HasComponent<ContractState> {
    fn get_component(self: @ContractState) -> @mintable_comp::ComponentState<ContractState> {
        self.mintable_storage
    }
    fn get_component_mut(ref self: ContractState) -> mintable_comp::ComponentState<ContractState> {
        mintable_comp::unsafe_new_component_state::<ContractState>()
    }
    fn get_contract(self: @mintable_comp::ComponentState<ContractState>) -> @ContractState {
        @unsafe_new_contract_state()
    }
    fn get_contract_mut(ref self: mintable_comp::ComponentState<ContractState>) -> ContractState {
        unsafe_new_contract_state()
    }
    fn emit<S, impl IntoImp: core::traits::Into<S, mintable_comp::Event>>(ref self: mintable_comp::ComponentState<ContractState>, event: S) {
        let event: mintable_comp::Event = core::traits::Into::into(event);
        let mut contract = mintable_comp::HasComponent::get_contract_mut(ref self);
        ContractStateEventEmitter::emit(ref contract, Event::Mintable(event));
    }
}
impl EventDrop of core::traits::Drop::<Event>;
impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
            Event::ERC20(val) => {
                core::array::ArrayTrait::append(ref keys, selector!("ERC20"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
            Event::Ownable(val) => {
                core::array::ArrayTrait::append(ref keys, selector!("Ownable"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
            Event::Mintable(val) => {
                core::array::ArrayTrait::append(ref keys, selector!("Mintable"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let __selector__ = *core::array::SpanTrait::pop_front(ref keys)?;
        if __selector__ == selector!("ERC20") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::ERC20(val));
        }
        if __selector__ == selector!("Ownable") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::Ownable(val));
        }
        if __selector__ == selector!("Mintable") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::Mintable(val));
        }
        Option::None
    }
}
impl EventERC20IntoEvent of Into<erc20_comp::Event, Event> {
    fn into(self: erc20_comp::Event) -> Event {
        Event::ERC20(self)
    }
}
impl EventOwnableIntoEvent of Into<ownable_comp::Event, Event> {
    fn into(self: ownable_comp::Event) -> Event {
        Event::Ownable(self)
    }
}
impl EventMintableIntoEvent of Into<mintable_comp::Event, Event> {
    fn into(self: mintable_comp::Event) -> Event {
        Event::Mintable(self)
    }
}
    trait TraitCtor {
        fn constructor(
            ref self: ContractState,
            name: felt252,
            symbol: felt252,
            decimals: u8,
            initial_supply: u256,
            recipient: ContractAddress,
            owner: ContractAddress,
        );
    }
}
trait GetSupplyDispatcherTrait<T> {
    fn get_total_supply_plus_1(self: T) -> u256;
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct GetSupplyDispatcher {
    pub contract_address: starknet::ContractAddress,
}

impl GetSupplyDispatcherImpl of GetSupplyDispatcherTrait<GetSupplyDispatcher> {
    fn get_total_supply_plus_1(self: GetSupplyDispatcher) -> u256 {
        let mut __calldata__ = core::traits::Default::default();

        let mut __dispatcher_return_data__ = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_total_supply_plus_1"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        core::option::OptionTrait::expect(
            core::serde::Serde::<u256>::deserialize(ref __dispatcher_return_data__),
            'Returned data too short',
        )
    }

}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct GetSupplyLibraryDispatcher {
    pub class_hash: starknet::ClassHash,
}

impl GetSupplyLibraryDispatcherImpl of GetSupplyDispatcherTrait<GetSupplyLibraryDispatcher> {
    fn get_total_supply_plus_1(self: GetSupplyLibraryDispatcher) -> u256 {
        let mut __calldata__ = core::traits::Default::default();

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_total_supply_plus_1"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        core::option::OptionTrait::expect(
            core::serde::Serde::<u256>::deserialize(ref __dispatcher_return_data__),
            'Returned data too short',
        )
    }

}

trait GetSupplySafeDispatcherTrait<T> {
    fn get_total_supply_plus_1(self: T) -> starknet::SyscallResult<u256>;
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct GetSupplySafeLibraryDispatcher {
    pub class_hash: starknet::ClassHash,
}

impl GetSupplySafeLibraryDispatcherImpl of GetSupplySafeDispatcherTrait<GetSupplySafeLibraryDispatcher> {
    fn get_total_supply_plus_1(self: GetSupplySafeLibraryDispatcher) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = core::traits::Default::default();

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_total_supply_plus_1"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(
            core::option::OptionTrait::expect(
                core::serde::Serde::<u256>::deserialize(ref __dispatcher_return_data__),
                'Returned data too short',
            )
        )
    }

}


#[derive(Copy, Drop, starknet::Store, Serde)]
struct GetSupplySafeDispatcher {
    pub contract_address: starknet::ContractAddress,
}

impl GetSupplySafeDispatcherImpl of GetSupplySafeDispatcherTrait<GetSupplySafeDispatcher> {
    fn get_total_supply_plus_1(self: GetSupplySafeDispatcher) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = core::traits::Default::default();

        let mut __dispatcher_return_data__ = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_total_supply_plus_1"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(
            core::option::OptionTrait::expect(
                core::serde::Serde::<u256>::deserialize(ref __dispatcher_return_data__),
                'Returned data too short',
            )
        )
    }

}
impl GetSupplyDispatcherCopy of core::traits::Copy::<GetSupplyDispatcher>;
impl GetSupplyDispatcherDrop of core::traits::Drop::<GetSupplyDispatcher>;
impl GetSupplyDispatcherSerde of core::serde::Serde::<GetSupplyDispatcher> {
    fn serialize(self: @GetSupplyDispatcher, ref output: core::array::Array<felt252>) {
        core::serde::Serde::serialize(self.contract_address, ref output)
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<GetSupplyDispatcher> {
        core::option::Option::Some(GetSupplyDispatcher {
            contract_address: core::serde::Serde::deserialize(ref serialized)?,
        })
    }
}
impl StoreGetSupplyDispatcher of starknet::Store::<GetSupplyDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<GetSupplyDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            GetSupplyDispatcher {
                contract_address,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: GetSupplyDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write(address_domain, base, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<GetSupplyDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            GetSupplyDispatcher {
                contract_address,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: GetSupplyDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write_at_offset(address_domain, base, offset, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ContractAddress>::size()
    }
}
impl GetSupplyLibraryDispatcherCopy of core::traits::Copy::<GetSupplyLibraryDispatcher>;
impl GetSupplyLibraryDispatcherDrop of core::traits::Drop::<GetSupplyLibraryDispatcher>;
impl GetSupplyLibraryDispatcherSerde of core::serde::Serde::<GetSupplyLibraryDispatcher> {
    fn serialize(self: @GetSupplyLibraryDispatcher, ref output: core::array::Array<felt252>) {
        core::serde::Serde::serialize(self.class_hash, ref output)
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<GetSupplyLibraryDispatcher> {
        core::option::Option::Some(GetSupplyLibraryDispatcher {
            class_hash: core::serde::Serde::deserialize(ref serialized)?,
        })
    }
}
impl StoreGetSupplyLibraryDispatcher of starknet::Store::<GetSupplyLibraryDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<GetSupplyLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            GetSupplyLibraryDispatcher {
                class_hash,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: GetSupplyLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write(address_domain, base, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<GetSupplyLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            GetSupplyLibraryDispatcher {
                class_hash,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: GetSupplyLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write_at_offset(address_domain, base, offset, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ClassHash>::size()
    }
}
impl GetSupplySafeLibraryDispatcherCopy of core::traits::Copy::<GetSupplySafeLibraryDispatcher>;
impl GetSupplySafeLibraryDispatcherDrop of core::traits::Drop::<GetSupplySafeLibraryDispatcher>;
impl GetSupplySafeLibraryDispatcherSerde of core::serde::Serde::<GetSupplySafeLibraryDispatcher> {
    fn serialize(self: @GetSupplySafeLibraryDispatcher, ref output: core::array::Array<felt252>) {
        core::serde::Serde::serialize(self.class_hash, ref output)
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<GetSupplySafeLibraryDispatcher> {
        core::option::Option::Some(GetSupplySafeLibraryDispatcher {
            class_hash: core::serde::Serde::deserialize(ref serialized)?,
        })
    }
}
impl StoreGetSupplySafeLibraryDispatcher of starknet::Store::<GetSupplySafeLibraryDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<GetSupplySafeLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            GetSupplySafeLibraryDispatcher {
                class_hash,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: GetSupplySafeLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write(address_domain, base, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<GetSupplySafeLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            GetSupplySafeLibraryDispatcher {
                class_hash,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: GetSupplySafeLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write_at_offset(address_domain, base, offset, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ClassHash>::size()
    }
}
impl GetSupplySafeDispatcherCopy of core::traits::Copy::<GetSupplySafeDispatcher>;
impl GetSupplySafeDispatcherDrop of core::traits::Drop::<GetSupplySafeDispatcher>;
impl GetSupplySafeDispatcherSerde of core::serde::Serde::<GetSupplySafeDispatcher> {
    fn serialize(self: @GetSupplySafeDispatcher, ref output: core::array::Array<felt252>) {
        core::serde::Serde::serialize(self.contract_address, ref output)
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<GetSupplySafeDispatcher> {
        core::option::Option::Some(GetSupplySafeDispatcher {
            contract_address: core::serde::Serde::deserialize(ref serialized)?,
        })
    }
}
impl StoreGetSupplySafeDispatcher of starknet::Store::<GetSupplySafeDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<GetSupplySafeDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            GetSupplySafeDispatcher {
                contract_address,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: GetSupplySafeDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write(address_domain, base, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<GetSupplySafeDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            GetSupplySafeDispatcher {
                contract_address,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: GetSupplySafeDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write_at_offset(address_domain, base, offset, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ContractAddress>::size()
    }
}

    use starknet::ContractAddress;
    use cairo_level_tests::components::erc20::erc20 as erc20_comp;
    use cairo_level_tests::components::ownable::ownable as ownable_comp;
    use cairo_level_tests::components::mintable::mintable as mintable_comp;

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        ERC20: erc20_comp::Event,
        Ownable: ownable_comp::Event,
        Mintable: mintable_comp::Event,
    }

    #[abi(embed_v0)]
    impl ERC20Impl = erc20_comp::IERC20<ContractState>;

    impl ERC20Helper = erc20_comp::ERC20HelperImpl<ContractState>;

    #[abi(embed_v0)]
    impl OwnershipTransfer = ownable_comp::Transfer<ContractState>;

    impl OwnershipHelper = ownable_comp::OwnableHelperImpl<ContractState>;

    #[abi(embed_v0)]
    impl MintImpl = mintable_comp::Mint<ContractState>;

    #[abi(per_item)]
    #[generate_trait]
    impl ImplCtor of TraitCtor {
        #[constructor]
        fn constructor(
            ref self: ContractState,
            name: felt252,
            symbol: felt252,
            decimals: u8,
            initial_supply: u256,
            recipient: ContractAddress,
            owner: ContractAddress,
        ) {
            self.erc20_storage.init(name, symbol, decimals, initial_supply, recipient);
            self.ownable_storage.init_ownable(owner);
        }
    }

    #[abi(embed_v0)]
    impl ImplGetSupply of super::GetSupply<ContractState> {
        fn get_total_supply_plus_1(self: @ContractState) -> u256 {
            self.erc20_storage.get_total_supply() + 1
        }
    }


    pub struct ContractState {
        pub erc20_storage: erc20_comp::ComponentState<ContractState>,
        pub ownable_storage: ownable_comp::ComponentState<ContractState>,
        pub mintable_storage: mintable_comp::ComponentState<ContractState>,
    }
    impl ContractStateDrop of Drop<ContractState> {}
    #[inline(always)]
    pub fn unsafe_new_contract_state() -> ContractState {
        ContractState {
            erc20_storage: erc20_comp::unsafe_new_component_state::<ContractState>(),
            ownable_storage: ownable_comp::unsafe_new_component_state::<ContractState>(),
            mintable_storage: mintable_comp::unsafe_new_component_state::<ContractState>(),
        }
    }
    
use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait
};

impl ContractStateIERC20 of
    erc20_comp::UnsafeNewContractStateTraitForIERC20<ContractState> {
    fn unsafe_new_contract_state() -> ContractState {
        unsafe_new_contract_state()
    }
}
impl ContractStateTransfer of
    ownable_comp::UnsafeNewContractStateTraitForTransfer<ContractState> {
    fn unsafe_new_contract_state() -> ContractState {
        unsafe_new_contract_state()
    }
}
impl ContractStateMint of
    mintable_comp::UnsafeNewContractStateTraitForMint<ContractState> {
    fn unsafe_new_contract_state() -> ContractState {
        unsafe_new_contract_state()
    }
}
#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__ImplCtor__constructor(mut data: Span::<felt252>) -> Span::<felt252> {
    core::internal::require_implicit::<System>();
    core::internal::revoke_ap_tracking();
    core::option::OptionTraitImpl::expect(core::gas::withdraw_gas(), 'Out of gas');
    let __arg_name = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_symbol = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    let __arg_decimals = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<u8>::deserialize(ref data),
        'Failed to deserialize param #3'
    );
    let __arg_initial_supply = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<u256>::deserialize(ref data),
        'Failed to deserialize param #4'
    );
    let __arg_recipient = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #5'
    );
    let __arg_owner = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #6'
    );
    assert(core::array::SpanTrait::is_empty(data), 'Input too long for arguments');
    core::option::OptionTraitImpl::expect(
        core::gas::withdraw_gas_all(core::gas::get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    ImplCtor::constructor(ref contract_state, __arg_name, __arg_symbol, __arg_decimals, __arg_initial_supply, __arg_recipient, __arg_owner);
    let mut arr = core::array::array_new();
    // References.
    // Result.
    core::array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__ImplGetSupply__get_total_supply_plus_1(mut data: Span::<felt252>) -> Span::<felt252> {
    core::internal::require_implicit::<System>();
    core::internal::revoke_ap_tracking();
    core::option::OptionTraitImpl::expect(core::gas::withdraw_gas(), 'Out of gas');
    
    assert(core::array::SpanTrait::is_empty(data), 'Input too long for arguments');
    core::option::OptionTraitImpl::expect(
        core::gas::withdraw_gas_all(core::gas::get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    let res = ImplGetSupply::get_total_supply_plus_1(@contract_state, );
    let mut arr = core::array::array_new();
    // References.
    // Result.
    core::serde::Serde::<u256>::serialize(@res, ref arr);
    core::array::ArrayTrait::span(@arr)
}


pub mod __external {
    pub use super::__wrapper__ImplGetSupply__get_total_supply_plus_1 as get_total_supply_plus_1;
}
pub mod __l1_handler {
}
pub mod __constructor {
    pub use super::__wrapper__ImplCtor__constructor as constructor;
}
    impl ContractStateEventEmitter of starknet::event::EventEmitter<
        ContractState, Event
    > {
        fn emit<S, impl IntoImp: core::traits::Into<S, Event>>(
            ref self: ContractState, event: S
        ) {
            let event: Event = core::traits::Into::into(event);
            let mut keys = Default::<core::array::Array>::default();
            let mut data = Default::<core::array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    core::array::ArrayTrait::span(@keys),
                    core::array::ArrayTrait::span(@data),
                )
            )
        }
    }

impl HasComponentImpl_erc20_comp of erc20_comp::HasComponent<ContractState> {
    fn get_component(self: @ContractState) -> @erc20_comp::ComponentState<ContractState> {
        self.erc20_storage
    }
    fn get_component_mut(ref self: ContractState) -> erc20_comp::ComponentState<ContractState> {
        erc20_comp::unsafe_new_component_state::<ContractState>()
    }
    fn get_contract(self: @erc20_comp::ComponentState<ContractState>) -> @ContractState {
        @unsafe_new_contract_state()
    }
    fn get_contract_mut(ref self: erc20_comp::ComponentState<ContractState>) -> ContractState {
        unsafe_new_contract_state()
    }
    fn emit<S, impl IntoImp: core::traits::Into<S, erc20_comp::Event>>(ref self: erc20_comp::ComponentState<ContractState>, event: S) {
        let event: erc20_comp::Event = core::traits::Into::into(event);
        let mut contract = erc20_comp::HasComponent::get_contract_mut(ref self);
        ContractStateEventEmitter::emit(ref contract, Event::ERC20(event));
    }
}
impl HasComponentImpl_ownable_comp of ownable_comp::HasComponent<ContractState> {
    fn get_component(self: @ContractState) -> @ownable_comp::ComponentState<ContractState> {
        self.ownable_storage
    }
    fn get_component_mut(ref self: ContractState) -> ownable_comp::ComponentState<ContractState> {
        ownable_comp::unsafe_new_component_state::<ContractState>()
    }
    fn get_contract(self: @ownable_comp::ComponentState<ContractState>) -> @ContractState {
        @unsafe_new_contract_state()
    }
    fn get_contract_mut(ref self: ownable_comp::ComponentState<ContractState>) -> ContractState {
        unsafe_new_contract_state()
    }
    fn emit<S, impl IntoImp: core::traits::Into<S, ownable_comp::Event>>(ref self: ownable_comp::ComponentState<ContractState>, event: S) {
        let event: ownable_comp::Event = core::traits::Into::into(event);
        let mut contract = ownable_comp::HasComponent::get_contract_mut(ref self);
        ContractStateEventEmitter::emit(ref contract, Event::Ownable(event));
    }
}
impl HasComponentImpl_mintable_comp of mintable_comp::HasComponent<ContractState> {
    fn get_component(self: @ContractState) -> @mintable_comp::ComponentState<ContractState> {
        self.mintable_storage
    }
    fn get_component_mut(ref self: ContractState) -> mintable_comp::ComponentState<ContractState> {
        mintable_comp::unsafe_new_component_state::<ContractState>()
    }
    fn get_contract(self: @mintable_comp::ComponentState<ContractState>) -> @ContractState {
        @unsafe_new_contract_state()
    }
    fn get_contract_mut(ref self: mintable_comp::ComponentState<ContractState>) -> ContractState {
        unsafe_new_contract_state()
    }
    fn emit<S, impl IntoImp: core::traits::Into<S, mintable_comp::Event>>(ref self: mintable_comp::ComponentState<ContractState>, event: S) {
        let event: mintable_comp::Event = core::traits::Into::into(event);
        let mut contract = mintable_comp::HasComponent::get_contract_mut(ref self);
        ContractStateEventEmitter::emit(ref contract, Event::Mintable(event));
    }
}
impl EventDrop of core::traits::Drop::<Event>;
impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
            Event::ERC20(val) => {
                core::array::ArrayTrait::append(ref keys, selector!("ERC20"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
            Event::Ownable(val) => {
                core::array::ArrayTrait::append(ref keys, selector!("Ownable"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
            Event::Mintable(val) => {
                core::array::ArrayTrait::append(ref keys, selector!("Mintable"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let __selector__ = *core::array::SpanTrait::pop_front(ref keys)?;
        if __selector__ == selector!("ERC20") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::ERC20(val));
        }
        if __selector__ == selector!("Ownable") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::Ownable(val));
        }
        if __selector__ == selector!("Mintable") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::Mintable(val));
        }
        Option::None
    }
}
impl EventERC20IntoEvent of Into<erc20_comp::Event, Event> {
    fn into(self: erc20_comp::Event) -> Event {
        Event::ERC20(self)
    }
}
impl EventOwnableIntoEvent of Into<ownable_comp::Event, Event> {
    fn into(self: ownable_comp::Event) -> Event {
        Event::Ownable(self)
    }
}
impl EventMintableIntoEvent of Into<mintable_comp::Event, Event> {
    fn into(self: mintable_comp::Event) -> Event {
        Event::Mintable(self)
    }
}
    trait TraitCtor {
        fn constructor(
            ref self: ContractState,
            name: felt252,
            symbol: felt252,
            decimals: u8,
            initial_supply: u256,
            recipient: ContractAddress,
            owner: ContractAddress,
        );
    }

//! > expected_diagnostics
