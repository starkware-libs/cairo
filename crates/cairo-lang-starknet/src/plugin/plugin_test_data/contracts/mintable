//! > Test expansion of a starknet contract with mintable component, depending on ownable and erc20.

//! > test_runner_name
ExpandContractTestRunner(expect_diagnostics: false)

//! > cairo_code
>>> file: test_data/mintable.cairo

//! > generated_cairo_code
lib.cairo:

// The ERC20 and Ownable components are duplicates of the ones in `with_erc20` and `with_ownable`
// files. The duplication is done since the expand test which also use this file is not aware to 
// the rest of the crate. The contract using these components is at the end of the file.
// TODO(Gil): Add the capability to read multiple files in the test framework and remove this 
// duplication.

use starknet::ContractAddress;

#[starknet::interface]
trait TransferTrait<TContractState> {
    fn owner(self: @TContractState) -> ContractAddress;
    fn transfer_ownership(ref self: TContractState, new_owner: ContractAddress);
}

#[starknet::component]
mod ownable {
    use starknet::ContractAddress;
    #[storage]
    struct Storage {
        owner: ContractAddress,
    }

    #[embeddable_as(Transfer)]
    impl TransferImpl<
        TContractState, impl X: HasComponent<TContractState>
    > of super::TransferTrait<ComponentState<TContractState>> {
        fn owner(self: @ComponentState<TContractState>) -> ContractAddress {
            self.owner.read()
        }

        fn transfer_ownership(
            ref self: ComponentState<TContractState>, new_owner: ContractAddress
        ) {
            self.validate_ownership();
            self.owner.write(new_owner);
        }
    }

    #[generate_trait]
    impl OwnableHelperImpl<
        TContractState, impl X: HasComponent<TContractState>
    > of OwnableHelperTrait<TContractState, X> {
        fn init_ownable(ref self: ComponentState<TContractState>, owner: ContractAddress) {
            self.owner.write(owner);
        }
        fn validate_ownership(self: @ComponentState<TContractState>) {
            assert(self.owner.read() == starknet::get_caller_address(), 'Wrong owner.');
        }
    }
}


#[starknet::interface]
trait ERC20Trait<TCS> {
    fn get_name(self: @TCS) -> felt252;
    fn get_symbol(self: @TCS) -> felt252;
    fn get_decimals(self: @TCS) -> u8;
    fn get_total_supply(self: @TCS) -> u256;
    fn balance_of(self: @TCS, account: ContractAddress) -> u256;
    fn allowance(self: @TCS, owner: ContractAddress, spender: ContractAddress) -> u256;
    fn transfer(ref self: TCS, recipient: ContractAddress, amount: u256);
    fn transfer_from(
        ref self: TCS, sender: ContractAddress, recipient: ContractAddress, amount: u256
    );
    fn approve(ref self: TCS, spender: ContractAddress, amount: u256);
    fn increase_allowance(ref self: TCS, spender: ContractAddress, added_value: u256);
    fn decrease_allowance(ref self: TCS, spender: ContractAddress, subtracted_value: u256);
}

#[starknet::component]
mod erc20 {
    use starknet::{ContractAddress, get_caller_address, contract_address_const};
    #[storage]
    struct Storage {
        name: felt252,
        symbol: felt252,
        decimals: u8,
        total_supply: u256,
        balances: LegacyMap::<ContractAddress, u256>,
        allowances: LegacyMap::<(ContractAddress, ContractAddress), u256>,
    }

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        Transfer: TransferEvent,
        Approval: ApprovalEvent,
    }
    #[derive(Drop, starknet::Event)]
    struct TransferEvent {
        from: ContractAddress,
        to: ContractAddress,
        value: u256,
    }
    #[derive(Drop, starknet::Event)]
    struct ApprovalEvent {
        owner: ContractAddress,
        spender: ContractAddress,
        value: u256,
    }

    #[embeddable_as(IERC20)]
    impl ERC20Impl<
        TContractState, +HasComponent<TContractState>
    > of super::ERC20Trait<ComponentState<TContractState>> {
        fn get_name(self: @ComponentState<TContractState>) -> felt252 {
            self.name.read()
        }

        fn get_symbol(self: @ComponentState<TContractState>) -> felt252 {
            self.symbol.read()
        }

        fn get_decimals(self: @ComponentState<TContractState>) -> u8 {
            self.decimals.read()
        }

        fn get_total_supply(self: @ComponentState<TContractState>) -> u256 {
            self.total_supply.read()
        }

        fn balance_of(self: @ComponentState<TContractState>, account: ContractAddress) -> u256 {
            self.balances.read(account)
        }

        fn allowance(
            self: @ComponentState<TContractState>, owner: ContractAddress, spender: ContractAddress
        ) -> u256 {
            self.allowances.read((owner, spender))
        }

        fn transfer(
            ref self: ComponentState<TContractState>, recipient: ContractAddress, amount: u256
        ) {
            let sender = get_caller_address();
            self.transfer_helper(sender, recipient, amount);
        }

        fn transfer_from(
            ref self: ComponentState<TContractState>,
            sender: ContractAddress,
            recipient: ContractAddress,
            amount: u256
        ) {
            let caller = get_caller_address();
            self.spend_allowance(sender, caller, amount);
            self.transfer_helper(sender, recipient, amount);
        }

        fn approve(
            ref self: ComponentState<TContractState>, spender: ContractAddress, amount: u256
        ) {
            let caller = get_caller_address();
            self.approve_helper(caller, spender, amount);
        }

        fn increase_allowance(
            ref self: ComponentState<TContractState>, spender: ContractAddress, added_value: u256
        ) {
            let caller = get_caller_address();
            self
                .approve_helper(
                    caller, spender, self.allowances.read((caller, spender)) + added_value
                );
        }

        fn decrease_allowance(
            ref self: ComponentState<TContractState>,
            spender: ContractAddress,
            subtracted_value: u256
        ) {
            let caller = get_caller_address();
            self
                .approve_helper(
                    caller, spender, self.allowances.read((caller, spender)) - subtracted_value
                );
        }
    }

    #[generate_trait]
    impl ERC20HelperImpl<
        TContractState, impl X: HasComponent<TContractState>
    > of ERC20HelperTrait<TContractState, X> {
        fn transfer_helper(
            ref self: ComponentState<TContractState>,
            sender: ContractAddress,
            recipient: ContractAddress,
            amount: u256
        ) {
            assert(!sender.is_zero(), 'ERC20: transfer from 0');
            assert(!recipient.is_zero(), 'ERC20: transfer to 0');
            self.balances.write(sender, self.balances.read(sender) - amount);
            self.balances.write(recipient, self.balances.read(recipient) + amount);
            self.emit(TransferEvent { from: sender, to: recipient, value: amount });
        }

        fn spend_allowance(
            ref self: ComponentState<TContractState>,
            owner: ContractAddress,
            spender: ContractAddress,
            amount: u256
        ) {
            let current_allowance: u256 = self.allowances.read((owner, spender));
            let ONES_MASK = 0xffffffffffffffffffffffffffffffff_u128;
            let is_unlimited_allowance = current_allowance.low == ONES_MASK
                && current_allowance.high == ONES_MASK;
            if !is_unlimited_allowance {
                self.approve_helper(owner, spender, current_allowance - amount);
            }
        }

        fn approve_helper(
            ref self: ComponentState<TContractState>,
            owner: ContractAddress,
            spender: ContractAddress,
            amount: u256
        ) {
            assert(!spender.is_zero(), 'ERC20: approve from 0');
            self.allowances.write((owner, spender), amount);
            self.emit(ApprovalEvent { owner, spender, value: amount });
        }
        fn init(
            ref self: ComponentState<TContractState>,
            name: felt252,
            symbol: felt252,
            decimals: u8,
            initial_supply: u256,
            recipient: ContractAddress
        ) {
            self.name.write(name);
            self.symbol.write(symbol);
            self.decimals.write(decimals);
            assert(!recipient.is_zero(), 'ERC20: mint to the 0 address');
            self.total_supply.write(initial_supply);
            self.balances.write(recipient, initial_supply);
            self
                .emit(
                    Event::Transfer(
                        TransferEvent {
                            from: contract_address_const::<0>(),
                            to: recipient,
                            value: initial_supply
                        }
                    )
                );
        }
    }
}

// End of copied components.

#[starknet::interface]
trait MintTrait<TContractState> {
    fn mint(ref self: TContractState, account: ContractAddress, amount: u256);
}

#[starknet::component]
mod mintable {
    use starknet::{ContractAddress, contract_address_const};
    use super::ownable::OwnableHelperImpl;
    #[storage]
    struct Storage {}

    #[embeddable_as(Mint)]
    impl MintImpl<
        TContractState,
        +HasComponent<TContractState>,
        impl Ownable: super::ownable::HasComponent<TContractState>,
        impl ERC20: super::erc20::HasComponent<TContractState>,
        +Drop<TContractState>
    > of super::MintTrait<ComponentState<TContractState>> {
        fn mint(ref self: ComponentState<TContractState>, account: ContractAddress, amount: u256) {
            assert(!account.is_zero(), 'ERC20: mint to the 0 address');
            let mut contract = self.get_contract_mut();
            let ownable_component = Ownable::get_component(@contract);
            ownable_component.validate_ownership();
            let mut erc20_component = ERC20::get_component_mut(ref contract);
            let total_supply = erc20_component.total_supply.read();
            erc20_component.total_supply.write(total_supply + amount);
            erc20_component
                .balances
                .write(account, erc20_component.balances.read(account) + amount);
            erc20_component
                .emit(
                    super::erc20::TransferEvent {
                        from: contract_address_const::<0>(), to: account, value: amount
                    }
                );
        }
    }
}

#[starknet::interface]
trait GetSupply<TContractState> {
    fn get_total_supply_plus_1(self: @TContractState) -> u256;
}

#[starknet::contract]
mod mintable_erc20_ownable {
    use starknet::ContractAddress;
    #[storage]
    struct Storage {
        #[substorage(v0)]
        erc20_storage: super::erc20::Storage,
        #[substorage(v0)]
        ownable_storage: super::ownable::Storage,
        #[substorage(v0)]
        mintable_storage: super::mintable::Storage,
    }

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        ERC20: super::erc20::Event,
        Ownable: super::ownable::Event,
        Mintable: super::mintable::Event,
    }

    component!(path: super::erc20, storage: erc20_storage, event: ERC20);
    component!(path: super::ownable, storage: ownable_storage, event: Ownable);
    component!(path: super::mintable, storage: mintable_storage, event: Mintable);

    #[abi(embed_v0)]
    impl ERC20Impl = super::erc20::IERC20<ContractState>;

    impl ERC20Helper = super::erc20::ERC20HelperImpl<ContractState>;

    #[abi(embed_v0)]
    impl OwnershipTransfer = super::ownable::Transfer<ContractState>;

    impl OwnershipHelper = super::ownable::OwnableHelperImpl<ContractState>;

    #[abi(embed_v0)]
    impl MintImpl = super::mintable::Mint<ContractState>;

    #[abi(per_item)]
    #[generate_trait]
    impl ImplCtor of TraitCtor {
        #[constructor]
        fn constructor(
            ref self: ContractState,
            name: felt252,
            symbol: felt252,
            decimals: u8,
            initial_supply: u256,
            recipient: ContractAddress,
            owner: ContractAddress,
        ) {
            self.erc20_storage.init(name, symbol, decimals, initial_supply, recipient);
            self.ownable_storage.init_ownable(owner);
        }
    }

    #[abi(embed_v0)]
    impl ImplGetSupply of super::GetSupply<ContractState> {
        fn get_total_supply_plus_1(self: @ContractState) -> u256 {
            self.erc20_storage.get_total_supply() + 1
        }
    }
}


TransferTraitDispatcherTrait:

trait TransferTraitDispatcherTrait<T> {
    fn owner(self: T, ) -> ContractAddress;    fn transfer_ownership(self: T, new_owner: ContractAddress);
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct TransferTraitDispatcher {
    contract_address: starknet::ContractAddress,
}

impl TransferTraitDispatcherImpl of TransferTraitDispatcherTrait<TransferTraitDispatcher> {
    fn owner(self: TransferTraitDispatcher, ) -> ContractAddress {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("owner"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<ContractAddress>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn transfer_ownership(self: TransferTraitDispatcher, new_owner: ContractAddress) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@new_owner, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("transfer_ownership"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }

}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct TransferTraitLibraryDispatcher {
    class_hash: starknet::ClassHash,
}

impl TransferTraitLibraryDispatcherImpl of TransferTraitDispatcherTrait<TransferTraitLibraryDispatcher> {
    fn owner(self: TransferTraitLibraryDispatcher, ) -> ContractAddress {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("owner"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<ContractAddress>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn transfer_ownership(self: TransferTraitLibraryDispatcher, new_owner: ContractAddress) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@new_owner, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("transfer_ownership"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }

}

trait TransferTraitSafeDispatcherTrait<T> {
    fn owner(self: T, ) -> starknet::SyscallResult<ContractAddress>;    fn transfer_ownership(self: T, new_owner: ContractAddress) -> starknet::SyscallResult<()>;
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct TransferTraitSafeLibraryDispatcher {
    class_hash: starknet::ClassHash,
}

impl TransferTraitSafeLibraryDispatcherImpl of TransferTraitSafeDispatcherTrait<TransferTraitSafeLibraryDispatcher> {
    fn owner(self: TransferTraitSafeLibraryDispatcher, ) -> starknet::SyscallResult<ContractAddress> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("owner"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<ContractAddress>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn transfer_ownership(self: TransferTraitSafeLibraryDispatcher, new_owner: ContractAddress) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@new_owner, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("transfer_ownership"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }

}


#[derive(Copy, Drop, starknet::Store, Serde)]
struct TransferTraitSafeDispatcher {
    contract_address: starknet::ContractAddress,
}

impl TransferTraitSafeDispatcherImpl of TransferTraitSafeDispatcherTrait<TransferTraitSafeDispatcher> {
    fn owner(self: TransferTraitSafeDispatcher, ) -> starknet::SyscallResult<ContractAddress> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("owner"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<ContractAddress>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn transfer_ownership(self: TransferTraitSafeDispatcher, new_owner: ContractAddress) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@new_owner, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("transfer_ownership"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }

}


ERC20TraitDispatcherTrait:

trait ERC20TraitDispatcherTrait<T> {
    fn get_name(self: T, ) -> felt252;    fn get_symbol(self: T, ) -> felt252;    fn get_decimals(self: T, ) -> u8;    fn get_total_supply(self: T, ) -> u256;    fn balance_of(self: T, account: ContractAddress) -> u256;    fn allowance(self: T, owner: ContractAddress, spender: ContractAddress) -> u256;    fn transfer(self: T, recipient: ContractAddress, amount: u256);    fn transfer_from(
self: T, sender: ContractAddress, recipient: ContractAddress, amount: u256
    );    fn approve(self: T, spender: ContractAddress, amount: u256);    fn increase_allowance(self: T, spender: ContractAddress, added_value: u256);    fn decrease_allowance(self: T, spender: ContractAddress, subtracted_value: u256);
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct ERC20TraitDispatcher {
    contract_address: starknet::ContractAddress,
}

impl ERC20TraitDispatcherImpl of ERC20TraitDispatcherTrait<ERC20TraitDispatcher> {
    fn get_name(self: ERC20TraitDispatcher, ) -> felt252 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_name"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<felt252>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn get_symbol(self: ERC20TraitDispatcher, ) -> felt252 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_symbol"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<felt252>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn get_decimals(self: ERC20TraitDispatcher, ) -> u8 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_decimals"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u8>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn get_total_supply(self: ERC20TraitDispatcher, ) -> u256 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_total_supply"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u256>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn balance_of(self: ERC20TraitDispatcher, account: ContractAddress) -> u256 {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@account, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("balance_of"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u256>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn allowance(self: ERC20TraitDispatcher, owner: ContractAddress, spender: ContractAddress) -> u256 {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@owner, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u256>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn transfer(self: ERC20TraitDispatcher, recipient: ContractAddress, amount: u256) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("transfer"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn transfer_from(
self: ERC20TraitDispatcher, sender: ContractAddress, recipient: ContractAddress, amount: u256
    ) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@sender, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256
>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("transfer_from"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn approve(self: ERC20TraitDispatcher, spender: ContractAddress, amount: u256) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("approve"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn increase_allowance(self: ERC20TraitDispatcher, spender: ContractAddress, added_value: u256) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@added_value, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("increase_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn decrease_allowance(self: ERC20TraitDispatcher, spender: ContractAddress, subtracted_value: u256) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@subtracted_value, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("decrease_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }

}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct ERC20TraitLibraryDispatcher {
    class_hash: starknet::ClassHash,
}

impl ERC20TraitLibraryDispatcherImpl of ERC20TraitDispatcherTrait<ERC20TraitLibraryDispatcher> {
    fn get_name(self: ERC20TraitLibraryDispatcher, ) -> felt252 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_name"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<felt252>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn get_symbol(self: ERC20TraitLibraryDispatcher, ) -> felt252 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_symbol"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<felt252>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn get_decimals(self: ERC20TraitLibraryDispatcher, ) -> u8 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_decimals"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u8>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn get_total_supply(self: ERC20TraitLibraryDispatcher, ) -> u256 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_total_supply"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u256>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn balance_of(self: ERC20TraitLibraryDispatcher, account: ContractAddress) -> u256 {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@account, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("balance_of"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u256>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn allowance(self: ERC20TraitLibraryDispatcher, owner: ContractAddress, spender: ContractAddress) -> u256 {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@owner, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u256>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn transfer(self: ERC20TraitLibraryDispatcher, recipient: ContractAddress, amount: u256) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("transfer"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn transfer_from(
self: ERC20TraitLibraryDispatcher, sender: ContractAddress, recipient: ContractAddress, amount: u256
    ) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@sender, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256
>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("transfer_from"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn approve(self: ERC20TraitLibraryDispatcher, spender: ContractAddress, amount: u256) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("approve"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn increase_allowance(self: ERC20TraitLibraryDispatcher, spender: ContractAddress, added_value: u256) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@added_value, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("increase_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn decrease_allowance(self: ERC20TraitLibraryDispatcher, spender: ContractAddress, subtracted_value: u256) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@subtracted_value, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("decrease_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }

}

trait ERC20TraitSafeDispatcherTrait<T> {
    fn get_name(self: T, ) -> starknet::SyscallResult<felt252>;    fn get_symbol(self: T, ) -> starknet::SyscallResult<felt252>;    fn get_decimals(self: T, ) -> starknet::SyscallResult<u8>;    fn get_total_supply(self: T, ) -> starknet::SyscallResult<u256>;    fn balance_of(self: T, account: ContractAddress) -> starknet::SyscallResult<u256>;    fn allowance(self: T, owner: ContractAddress, spender: ContractAddress) -> starknet::SyscallResult<u256>;    fn transfer(self: T, recipient: ContractAddress, amount: u256) -> starknet::SyscallResult<()>;    fn transfer_from(
self: T, sender: ContractAddress, recipient: ContractAddress, amount: u256
    ) -> starknet::SyscallResult<()>;    fn approve(self: T, spender: ContractAddress, amount: u256) -> starknet::SyscallResult<()>;    fn increase_allowance(self: T, spender: ContractAddress, added_value: u256) -> starknet::SyscallResult<()>;    fn decrease_allowance(self: T, spender: ContractAddress, subtracted_value: u256) -> starknet::SyscallResult<()>;
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct ERC20TraitSafeLibraryDispatcher {
    class_hash: starknet::ClassHash,
}

impl ERC20TraitSafeLibraryDispatcherImpl of ERC20TraitSafeDispatcherTrait<ERC20TraitSafeLibraryDispatcher> {
    fn get_name(self: ERC20TraitSafeLibraryDispatcher, ) -> starknet::SyscallResult<felt252> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_name"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<felt252>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn get_symbol(self: ERC20TraitSafeLibraryDispatcher, ) -> starknet::SyscallResult<felt252> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_symbol"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<felt252>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn get_decimals(self: ERC20TraitSafeLibraryDispatcher, ) -> starknet::SyscallResult<u8> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_decimals"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u8>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn get_total_supply(self: ERC20TraitSafeLibraryDispatcher, ) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_total_supply"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u256>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn balance_of(self: ERC20TraitSafeLibraryDispatcher, account: ContractAddress) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@account, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("balance_of"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u256>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn allowance(self: ERC20TraitSafeLibraryDispatcher, owner: ContractAddress, spender: ContractAddress) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@owner, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u256>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn transfer(self: ERC20TraitSafeLibraryDispatcher, recipient: ContractAddress, amount: u256) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("transfer"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn transfer_from(
self: ERC20TraitSafeLibraryDispatcher, sender: ContractAddress, recipient: ContractAddress, amount: u256
    ) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@sender, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256
>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("transfer_from"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn approve(self: ERC20TraitSafeLibraryDispatcher, spender: ContractAddress, amount: u256) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("approve"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn increase_allowance(self: ERC20TraitSafeLibraryDispatcher, spender: ContractAddress, added_value: u256) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@added_value, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("increase_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn decrease_allowance(self: ERC20TraitSafeLibraryDispatcher, spender: ContractAddress, subtracted_value: u256) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@subtracted_value, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("decrease_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }

}


#[derive(Copy, Drop, starknet::Store, Serde)]
struct ERC20TraitSafeDispatcher {
    contract_address: starknet::ContractAddress,
}

impl ERC20TraitSafeDispatcherImpl of ERC20TraitSafeDispatcherTrait<ERC20TraitSafeDispatcher> {
    fn get_name(self: ERC20TraitSafeDispatcher, ) -> starknet::SyscallResult<felt252> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_name"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<felt252>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn get_symbol(self: ERC20TraitSafeDispatcher, ) -> starknet::SyscallResult<felt252> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_symbol"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<felt252>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn get_decimals(self: ERC20TraitSafeDispatcher, ) -> starknet::SyscallResult<u8> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_decimals"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u8>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn get_total_supply(self: ERC20TraitSafeDispatcher, ) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_total_supply"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u256>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn balance_of(self: ERC20TraitSafeDispatcher, account: ContractAddress) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@account, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("balance_of"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u256>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn allowance(self: ERC20TraitSafeDispatcher, owner: ContractAddress, spender: ContractAddress) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@owner, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u256>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn transfer(self: ERC20TraitSafeDispatcher, recipient: ContractAddress, amount: u256) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("transfer"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn transfer_from(
self: ERC20TraitSafeDispatcher, sender: ContractAddress, recipient: ContractAddress, amount: u256
    ) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@sender, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256
>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("transfer_from"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn approve(self: ERC20TraitSafeDispatcher, spender: ContractAddress, amount: u256) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("approve"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn increase_allowance(self: ERC20TraitSafeDispatcher, spender: ContractAddress, added_value: u256) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@added_value, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("increase_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn decrease_allowance(self: ERC20TraitSafeDispatcher, spender: ContractAddress, subtracted_value: u256) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@subtracted_value, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("decrease_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }

}


MintTraitDispatcherTrait:

trait MintTraitDispatcherTrait<T> {
    fn mint(self: T, account: ContractAddress, amount: u256);
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct MintTraitDispatcher {
    contract_address: starknet::ContractAddress,
}

impl MintTraitDispatcherImpl of MintTraitDispatcherTrait<MintTraitDispatcher> {
    fn mint(self: MintTraitDispatcher, account: ContractAddress, amount: u256) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@account, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("mint"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }

}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct MintTraitLibraryDispatcher {
    class_hash: starknet::ClassHash,
}

impl MintTraitLibraryDispatcherImpl of MintTraitDispatcherTrait<MintTraitLibraryDispatcher> {
    fn mint(self: MintTraitLibraryDispatcher, account: ContractAddress, amount: u256) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@account, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("mint"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }

}

trait MintTraitSafeDispatcherTrait<T> {
    fn mint(self: T, account: ContractAddress, amount: u256) -> starknet::SyscallResult<()>;
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct MintTraitSafeLibraryDispatcher {
    class_hash: starknet::ClassHash,
}

impl MintTraitSafeLibraryDispatcherImpl of MintTraitSafeDispatcherTrait<MintTraitSafeLibraryDispatcher> {
    fn mint(self: MintTraitSafeLibraryDispatcher, account: ContractAddress, amount: u256) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@account, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("mint"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }

}


#[derive(Copy, Drop, starknet::Store, Serde)]
struct MintTraitSafeDispatcher {
    contract_address: starknet::ContractAddress,
}

impl MintTraitSafeDispatcherImpl of MintTraitSafeDispatcherTrait<MintTraitSafeDispatcher> {
    fn mint(self: MintTraitSafeDispatcher, account: ContractAddress, amount: u256) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@account, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("mint"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }

}


GetSupplyDispatcherTrait:

trait GetSupplyDispatcherTrait<T> {
    fn get_total_supply_plus_1(self: T, ) -> u256;
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct GetSupplyDispatcher {
    contract_address: starknet::ContractAddress,
}

impl GetSupplyDispatcherImpl of GetSupplyDispatcherTrait<GetSupplyDispatcher> {
    fn get_total_supply_plus_1(self: GetSupplyDispatcher, ) -> u256 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_total_supply_plus_1"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u256>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }

}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct GetSupplyLibraryDispatcher {
    class_hash: starknet::ClassHash,
}

impl GetSupplyLibraryDispatcherImpl of GetSupplyDispatcherTrait<GetSupplyLibraryDispatcher> {
    fn get_total_supply_plus_1(self: GetSupplyLibraryDispatcher, ) -> u256 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_total_supply_plus_1"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u256>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }

}

trait GetSupplySafeDispatcherTrait<T> {
    fn get_total_supply_plus_1(self: T, ) -> starknet::SyscallResult<u256>;
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct GetSupplySafeLibraryDispatcher {
    class_hash: starknet::ClassHash,
}

impl GetSupplySafeLibraryDispatcherImpl of GetSupplySafeDispatcherTrait<GetSupplySafeLibraryDispatcher> {
    fn get_total_supply_plus_1(self: GetSupplySafeLibraryDispatcher, ) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_total_supply_plus_1"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u256>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }

}


#[derive(Copy, Drop, starknet::Store, Serde)]
struct GetSupplySafeDispatcher {
    contract_address: starknet::ContractAddress,
}

impl GetSupplySafeDispatcherImpl of GetSupplySafeDispatcherTrait<GetSupplySafeDispatcher> {
    fn get_total_supply_plus_1(self: GetSupplySafeDispatcher, ) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_total_supply_plus_1"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u256>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }

}


impls:

impl TransferTraitDispatcherCopy of Copy::<TransferTraitDispatcher>;
impl TransferTraitDispatcherDrop of Drop::<TransferTraitDispatcher>;
impl TransferTraitDispatcherSerde of Serde::<TransferTraitDispatcher> {
    fn serialize(self: @TransferTraitDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.contract_address, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<TransferTraitDispatcher> {
        Option::Some(TransferTraitDispatcher {
            contract_address: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


starknet_derive:

impl StoreTransferTraitDispatcher of starknet::Store::<TransferTraitDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<TransferTraitDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            TransferTraitDispatcher {
                contract_address,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: TransferTraitDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write(address_domain, base, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<TransferTraitDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            TransferTraitDispatcher {
                contract_address,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: TransferTraitDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write_at_offset(address_domain, base, offset, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ContractAddress>::size()
    }
}


impls:

impl TransferTraitLibraryDispatcherCopy of Copy::<TransferTraitLibraryDispatcher>;
impl TransferTraitLibraryDispatcherDrop of Drop::<TransferTraitLibraryDispatcher>;
impl TransferTraitLibraryDispatcherSerde of Serde::<TransferTraitLibraryDispatcher> {
    fn serialize(self: @TransferTraitLibraryDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.class_hash, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<TransferTraitLibraryDispatcher> {
        Option::Some(TransferTraitLibraryDispatcher {
            class_hash: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


starknet_derive:

impl StoreTransferTraitLibraryDispatcher of starknet::Store::<TransferTraitLibraryDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<TransferTraitLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            TransferTraitLibraryDispatcher {
                class_hash,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: TransferTraitLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write(address_domain, base, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<TransferTraitLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            TransferTraitLibraryDispatcher {
                class_hash,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: TransferTraitLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write_at_offset(address_domain, base, offset, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ClassHash>::size()
    }
}


impls:

impl TransferTraitSafeLibraryDispatcherCopy of Copy::<TransferTraitSafeLibraryDispatcher>;
impl TransferTraitSafeLibraryDispatcherDrop of Drop::<TransferTraitSafeLibraryDispatcher>;
impl TransferTraitSafeLibraryDispatcherSerde of Serde::<TransferTraitSafeLibraryDispatcher> {
    fn serialize(self: @TransferTraitSafeLibraryDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.class_hash, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<TransferTraitSafeLibraryDispatcher> {
        Option::Some(TransferTraitSafeLibraryDispatcher {
            class_hash: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


starknet_derive:

impl StoreTransferTraitSafeLibraryDispatcher of starknet::Store::<TransferTraitSafeLibraryDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<TransferTraitSafeLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            TransferTraitSafeLibraryDispatcher {
                class_hash,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: TransferTraitSafeLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write(address_domain, base, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<TransferTraitSafeLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            TransferTraitSafeLibraryDispatcher {
                class_hash,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: TransferTraitSafeLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write_at_offset(address_domain, base, offset, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ClassHash>::size()
    }
}


impls:

impl TransferTraitSafeDispatcherCopy of Copy::<TransferTraitSafeDispatcher>;
impl TransferTraitSafeDispatcherDrop of Drop::<TransferTraitSafeDispatcher>;
impl TransferTraitSafeDispatcherSerde of Serde::<TransferTraitSafeDispatcher> {
    fn serialize(self: @TransferTraitSafeDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.contract_address, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<TransferTraitSafeDispatcher> {
        Option::Some(TransferTraitSafeDispatcher {
            contract_address: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


starknet_derive:

impl StoreTransferTraitSafeDispatcher of starknet::Store::<TransferTraitSafeDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<TransferTraitSafeDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            TransferTraitSafeDispatcher {
                contract_address,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: TransferTraitSafeDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write(address_domain, base, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<TransferTraitSafeDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            TransferTraitSafeDispatcher {
                contract_address,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: TransferTraitSafeDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write_at_offset(address_domain, base, offset, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ContractAddress>::size()
    }
}


impls:

impl ERC20TraitDispatcherCopy of Copy::<ERC20TraitDispatcher>;
impl ERC20TraitDispatcherDrop of Drop::<ERC20TraitDispatcher>;
impl ERC20TraitDispatcherSerde of Serde::<ERC20TraitDispatcher> {
    fn serialize(self: @ERC20TraitDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.contract_address, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<ERC20TraitDispatcher> {
        Option::Some(ERC20TraitDispatcher {
            contract_address: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


starknet_derive:

impl StoreERC20TraitDispatcher of starknet::Store::<ERC20TraitDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<ERC20TraitDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            ERC20TraitDispatcher {
                contract_address,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: ERC20TraitDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write(address_domain, base, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<ERC20TraitDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            ERC20TraitDispatcher {
                contract_address,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: ERC20TraitDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write_at_offset(address_domain, base, offset, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ContractAddress>::size()
    }
}


impls:

impl ERC20TraitLibraryDispatcherCopy of Copy::<ERC20TraitLibraryDispatcher>;
impl ERC20TraitLibraryDispatcherDrop of Drop::<ERC20TraitLibraryDispatcher>;
impl ERC20TraitLibraryDispatcherSerde of Serde::<ERC20TraitLibraryDispatcher> {
    fn serialize(self: @ERC20TraitLibraryDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.class_hash, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<ERC20TraitLibraryDispatcher> {
        Option::Some(ERC20TraitLibraryDispatcher {
            class_hash: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


starknet_derive:

impl StoreERC20TraitLibraryDispatcher of starknet::Store::<ERC20TraitLibraryDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<ERC20TraitLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            ERC20TraitLibraryDispatcher {
                class_hash,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: ERC20TraitLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write(address_domain, base, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<ERC20TraitLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            ERC20TraitLibraryDispatcher {
                class_hash,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: ERC20TraitLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write_at_offset(address_domain, base, offset, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ClassHash>::size()
    }
}


impls:

impl ERC20TraitSafeLibraryDispatcherCopy of Copy::<ERC20TraitSafeLibraryDispatcher>;
impl ERC20TraitSafeLibraryDispatcherDrop of Drop::<ERC20TraitSafeLibraryDispatcher>;
impl ERC20TraitSafeLibraryDispatcherSerde of Serde::<ERC20TraitSafeLibraryDispatcher> {
    fn serialize(self: @ERC20TraitSafeLibraryDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.class_hash, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<ERC20TraitSafeLibraryDispatcher> {
        Option::Some(ERC20TraitSafeLibraryDispatcher {
            class_hash: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


starknet_derive:

impl StoreERC20TraitSafeLibraryDispatcher of starknet::Store::<ERC20TraitSafeLibraryDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<ERC20TraitSafeLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            ERC20TraitSafeLibraryDispatcher {
                class_hash,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: ERC20TraitSafeLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write(address_domain, base, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<ERC20TraitSafeLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            ERC20TraitSafeLibraryDispatcher {
                class_hash,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: ERC20TraitSafeLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write_at_offset(address_domain, base, offset, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ClassHash>::size()
    }
}


impls:

impl ERC20TraitSafeDispatcherCopy of Copy::<ERC20TraitSafeDispatcher>;
impl ERC20TraitSafeDispatcherDrop of Drop::<ERC20TraitSafeDispatcher>;
impl ERC20TraitSafeDispatcherSerde of Serde::<ERC20TraitSafeDispatcher> {
    fn serialize(self: @ERC20TraitSafeDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.contract_address, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<ERC20TraitSafeDispatcher> {
        Option::Some(ERC20TraitSafeDispatcher {
            contract_address: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


starknet_derive:

impl StoreERC20TraitSafeDispatcher of starknet::Store::<ERC20TraitSafeDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<ERC20TraitSafeDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            ERC20TraitSafeDispatcher {
                contract_address,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: ERC20TraitSafeDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write(address_domain, base, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<ERC20TraitSafeDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            ERC20TraitSafeDispatcher {
                contract_address,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: ERC20TraitSafeDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write_at_offset(address_domain, base, offset, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ContractAddress>::size()
    }
}


impls:

impl MintTraitDispatcherCopy of Copy::<MintTraitDispatcher>;
impl MintTraitDispatcherDrop of Drop::<MintTraitDispatcher>;
impl MintTraitDispatcherSerde of Serde::<MintTraitDispatcher> {
    fn serialize(self: @MintTraitDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.contract_address, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<MintTraitDispatcher> {
        Option::Some(MintTraitDispatcher {
            contract_address: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


starknet_derive:

impl StoreMintTraitDispatcher of starknet::Store::<MintTraitDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<MintTraitDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            MintTraitDispatcher {
                contract_address,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: MintTraitDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write(address_domain, base, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<MintTraitDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            MintTraitDispatcher {
                contract_address,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: MintTraitDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write_at_offset(address_domain, base, offset, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ContractAddress>::size()
    }
}


impls:

impl MintTraitLibraryDispatcherCopy of Copy::<MintTraitLibraryDispatcher>;
impl MintTraitLibraryDispatcherDrop of Drop::<MintTraitLibraryDispatcher>;
impl MintTraitLibraryDispatcherSerde of Serde::<MintTraitLibraryDispatcher> {
    fn serialize(self: @MintTraitLibraryDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.class_hash, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<MintTraitLibraryDispatcher> {
        Option::Some(MintTraitLibraryDispatcher {
            class_hash: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


starknet_derive:

impl StoreMintTraitLibraryDispatcher of starknet::Store::<MintTraitLibraryDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<MintTraitLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            MintTraitLibraryDispatcher {
                class_hash,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: MintTraitLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write(address_domain, base, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<MintTraitLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            MintTraitLibraryDispatcher {
                class_hash,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: MintTraitLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write_at_offset(address_domain, base, offset, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ClassHash>::size()
    }
}


impls:

impl MintTraitSafeLibraryDispatcherCopy of Copy::<MintTraitSafeLibraryDispatcher>;
impl MintTraitSafeLibraryDispatcherDrop of Drop::<MintTraitSafeLibraryDispatcher>;
impl MintTraitSafeLibraryDispatcherSerde of Serde::<MintTraitSafeLibraryDispatcher> {
    fn serialize(self: @MintTraitSafeLibraryDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.class_hash, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<MintTraitSafeLibraryDispatcher> {
        Option::Some(MintTraitSafeLibraryDispatcher {
            class_hash: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


starknet_derive:

impl StoreMintTraitSafeLibraryDispatcher of starknet::Store::<MintTraitSafeLibraryDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<MintTraitSafeLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            MintTraitSafeLibraryDispatcher {
                class_hash,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: MintTraitSafeLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write(address_domain, base, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<MintTraitSafeLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            MintTraitSafeLibraryDispatcher {
                class_hash,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: MintTraitSafeLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write_at_offset(address_domain, base, offset, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ClassHash>::size()
    }
}


impls:

impl MintTraitSafeDispatcherCopy of Copy::<MintTraitSafeDispatcher>;
impl MintTraitSafeDispatcherDrop of Drop::<MintTraitSafeDispatcher>;
impl MintTraitSafeDispatcherSerde of Serde::<MintTraitSafeDispatcher> {
    fn serialize(self: @MintTraitSafeDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.contract_address, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<MintTraitSafeDispatcher> {
        Option::Some(MintTraitSafeDispatcher {
            contract_address: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


starknet_derive:

impl StoreMintTraitSafeDispatcher of starknet::Store::<MintTraitSafeDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<MintTraitSafeDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            MintTraitSafeDispatcher {
                contract_address,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: MintTraitSafeDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write(address_domain, base, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<MintTraitSafeDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            MintTraitSafeDispatcher {
                contract_address,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: MintTraitSafeDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write_at_offset(address_domain, base, offset, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ContractAddress>::size()
    }
}


impls:

impl GetSupplyDispatcherCopy of Copy::<GetSupplyDispatcher>;
impl GetSupplyDispatcherDrop of Drop::<GetSupplyDispatcher>;
impl GetSupplyDispatcherSerde of Serde::<GetSupplyDispatcher> {
    fn serialize(self: @GetSupplyDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.contract_address, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<GetSupplyDispatcher> {
        Option::Some(GetSupplyDispatcher {
            contract_address: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


starknet_derive:

impl StoreGetSupplyDispatcher of starknet::Store::<GetSupplyDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<GetSupplyDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            GetSupplyDispatcher {
                contract_address,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: GetSupplyDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write(address_domain, base, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<GetSupplyDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            GetSupplyDispatcher {
                contract_address,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: GetSupplyDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write_at_offset(address_domain, base, offset, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ContractAddress>::size()
    }
}


impls:

impl GetSupplyLibraryDispatcherCopy of Copy::<GetSupplyLibraryDispatcher>;
impl GetSupplyLibraryDispatcherDrop of Drop::<GetSupplyLibraryDispatcher>;
impl GetSupplyLibraryDispatcherSerde of Serde::<GetSupplyLibraryDispatcher> {
    fn serialize(self: @GetSupplyLibraryDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.class_hash, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<GetSupplyLibraryDispatcher> {
        Option::Some(GetSupplyLibraryDispatcher {
            class_hash: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


starknet_derive:

impl StoreGetSupplyLibraryDispatcher of starknet::Store::<GetSupplyLibraryDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<GetSupplyLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            GetSupplyLibraryDispatcher {
                class_hash,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: GetSupplyLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write(address_domain, base, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<GetSupplyLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            GetSupplyLibraryDispatcher {
                class_hash,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: GetSupplyLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write_at_offset(address_domain, base, offset, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ClassHash>::size()
    }
}


impls:

impl GetSupplySafeLibraryDispatcherCopy of Copy::<GetSupplySafeLibraryDispatcher>;
impl GetSupplySafeLibraryDispatcherDrop of Drop::<GetSupplySafeLibraryDispatcher>;
impl GetSupplySafeLibraryDispatcherSerde of Serde::<GetSupplySafeLibraryDispatcher> {
    fn serialize(self: @GetSupplySafeLibraryDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.class_hash, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<GetSupplySafeLibraryDispatcher> {
        Option::Some(GetSupplySafeLibraryDispatcher {
            class_hash: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


starknet_derive:

impl StoreGetSupplySafeLibraryDispatcher of starknet::Store::<GetSupplySafeLibraryDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<GetSupplySafeLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            GetSupplySafeLibraryDispatcher {
                class_hash,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: GetSupplySafeLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write(address_domain, base, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<GetSupplySafeLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            GetSupplySafeLibraryDispatcher {
                class_hash,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: GetSupplySafeLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write_at_offset(address_domain, base, offset, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ClassHash>::size()
    }
}


impls:

impl GetSupplySafeDispatcherCopy of Copy::<GetSupplySafeDispatcher>;
impl GetSupplySafeDispatcherDrop of Drop::<GetSupplySafeDispatcher>;
impl GetSupplySafeDispatcherSerde of Serde::<GetSupplySafeDispatcher> {
    fn serialize(self: @GetSupplySafeDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.contract_address, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<GetSupplySafeDispatcher> {
        Option::Some(GetSupplySafeDispatcher {
            contract_address: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


starknet_derive:

impl StoreGetSupplySafeDispatcher of starknet::Store::<GetSupplySafeDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<GetSupplySafeDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            GetSupplySafeDispatcher {
                contract_address,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: GetSupplySafeDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write(address_domain, base, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<GetSupplySafeDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            GetSupplySafeDispatcher {
                contract_address,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: GetSupplySafeDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write_at_offset(address_domain, base, offset, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ContractAddress>::size()
    }
}


component:

#[event]
#[derive(Drop, starknet::Event)]
enum Event {}


    struct ComponentState<TContractState> {
        owner: owner::ComponentMemberState,
    }
    impl ComponentStateDrop<TContractState> of Drop<ComponentState<TContractState>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TContractState>() -> ComponentState<TContractState> {
        ComponentState::<TContractState> {
            owner: owner::ComponentMemberState {},
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TContractState>() -> ComponentState<TContractState> {
        unsafe_new_component_state::<TContractState>()
    }
    
    mod owner {
        use super::ContractAddress;
        use super::TransferImpl;
        use super::OwnableHelperImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        impl StorageComponentMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ComponentMemberState, ContractAddress> {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0x2016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c0>()
            }
        }
    }

use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait,
};
trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TContractState>, event: S);
}

#[starknet::embeddable]
impl Transfer<
            TContractState, impl X: HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>
> of super::TransferTrait<TContractState> {
    
    fn owner(self: @TContractState) -> ContractAddress {
        let component = HasComponent::get_component(self);
        TransferImpl::owner(component, )
    }
    
    fn transfer_ownership(ref self: TContractState, new_owner: ContractAddress
) {
        let mut component = HasComponent::get_component_mut(ref self);
        TransferImpl::transfer_ownership(ref component, new_owner, )
    }
}

generate_trait:

    trait OwnableHelperTrait<
        TContractState, impl X: HasComponent<TContractState>
    > {
        fn init_ownable(ref self: ComponentState<TContractState>, owner: ContractAddress);
        fn validate_ownership(self: @ComponentState<TContractState>);
    }


impls:

impl EventDrop of Drop::<Event>;


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        Option::None
    }
}



embeddable:

trait UnsafeNewContractStateTraitForTransfer<TContractState> {
    fn unsafe_new_contract_state() -> TContractState;
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__Transfer__owner<TContractState, impl X: HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForTransfer<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    let res = Transfer::<TContractState, X, TContractStateDrop>::owner(@contract_state, );
    let mut arr = array::array_new();
    // References.
    // Result.
    serde::Serde::<ContractAddress>::serialize(@res, ref arr);
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__Transfer__transfer_ownership<TContractState, impl X: HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForTransfer<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_new_owner = option::OptionTraitImpl::expect(
        serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    Transfer::<TContractState, X, TContractStateDrop>::transfer_ownership(ref contract_state, __arg_new_owner);
    let mut arr = array::array_new();
    // References.
    // Result.
    array::ArrayTrait::span(@arr)
}



mod __external_Transfer {
        use super::__wrapper__Transfer__owner as owner;
        use super::__wrapper__Transfer__transfer_ownership as transfer_ownership;
}

mod __l1_handler_Transfer {
}

mod __constructor_Transfer {
}


component:



    struct ComponentState<TContractState> {
        name: name::ComponentMemberState,
        symbol: symbol::ComponentMemberState,
        decimals: decimals::ComponentMemberState,
        total_supply: total_supply::ComponentMemberState,
        balances: balances::ComponentMemberState,
        allowances: allowances::ComponentMemberState,
    }
    impl ComponentStateDrop<TContractState> of Drop<ComponentState<TContractState>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TContractState>() -> ComponentState<TContractState> {
        ComponentState::<TContractState> {
            name: name::ComponentMemberState {},
            symbol: symbol::ComponentMemberState {},
            decimals: decimals::ComponentMemberState {},
            total_supply: total_supply::ComponentMemberState {},
            balances: balances::ComponentMemberState {},
            allowances: allowances::ComponentMemberState {},
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TContractState>() -> ComponentState<TContractState> {
        unsafe_new_component_state::<TContractState>()
    }
    
    mod name {
        use super::ContractAddress;
        use super::get_caller_address;
        use super::contract_address_const;
        use super::Event;
        use super::TransferEvent;
        use super::ApprovalEvent;
        use super::ERC20Impl;
        use super::ERC20HelperImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        impl StorageComponentMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ComponentMemberState, felt252> {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0x361458367e696363fbcc70777d07ebbd2394e89fd0adcaf147faccd1d294d60>()
            }
        }
    }
    mod symbol {
        use super::ContractAddress;
        use super::get_caller_address;
        use super::contract_address_const;
        use super::Event;
        use super::TransferEvent;
        use super::ApprovalEvent;
        use super::ERC20Impl;
        use super::ERC20HelperImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        impl StorageComponentMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ComponentMemberState, felt252> {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0x216b05c387bab9ac31918a3e61672f4618601f3c598a2f3f2710f37053e1ea4>()
            }
        }
    }
    mod decimals {
        use super::ContractAddress;
        use super::get_caller_address;
        use super::contract_address_const;
        use super::Event;
        use super::TransferEvent;
        use super::ApprovalEvent;
        use super::ERC20Impl;
        use super::ERC20HelperImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        impl StorageComponentMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ComponentMemberState, u8> {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0x4c4fb1ab068f6039d5780c68dd0fa2f8742cceb3426d19667778ca7f3518a9>()
            }
        }
    }
    mod total_supply {
        use super::ContractAddress;
        use super::get_caller_address;
        use super::contract_address_const;
        use super::Event;
        use super::TransferEvent;
        use super::ApprovalEvent;
        use super::ERC20Impl;
        use super::ERC20HelperImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        impl StorageComponentMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ComponentMemberState, u256> {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0x1557182e4359a1f0c6301278e8f5b35a776ab58d39892581e357578fb287836>()
            }
        }
    }
    mod balances {
        use super::ContractAddress;
        use super::get_caller_address;
        use super::contract_address_const;
        use super::Event;
        use super::TransferEvent;
        use super::ApprovalEvent;
        use super::ERC20Impl;
        use super::ERC20HelperImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}

        impl StorageMapComponentMemberStateImpl of starknet::storage::StorageMapMemberAddressTrait<ComponentMemberState, ContractAddress, u256> {
            fn address(self: @ComponentMemberState, key: ContractAddress) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_from_felt252(
                    hash::LegacyHash::<ContractAddress>::hash(0x25b1ef8ee6544359221f3cf316f768360e83448109193bdcef77f52a79d95c4, key))
            }
        }
    }
    mod allowances {
        use super::ContractAddress;
        use super::get_caller_address;
        use super::contract_address_const;
        use super::Event;
        use super::TransferEvent;
        use super::ApprovalEvent;
        use super::ERC20Impl;
        use super::ERC20HelperImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}

        impl StorageMapComponentMemberStateImpl of starknet::storage::StorageMapMemberAddressTrait<ComponentMemberState, (ContractAddress, ContractAddress), u256> {
            fn address(self: @ComponentMemberState, key: (ContractAddress, ContractAddress)) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_from_felt252(
                    hash::LegacyHash::<(ContractAddress, ContractAddress)>::hash(0xbf4c436d6f8521e5c6189511c75075de702ad597ce22c1786275e8e5167ec7, key))
            }
        }
    }

use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait,
};
trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TContractState>, event: S);
}

#[starknet::embeddable]
impl IERC20<
            TContractState, +HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>
> of super::ERC20Trait<TContractState> {
    
    fn get_name(self: @TContractState) -> felt252 {
        let component = HasComponent::get_component(self);
        ERC20Impl::get_name(component, )
    }
    
    fn get_symbol(self: @TContractState) -> felt252 {
        let component = HasComponent::get_component(self);
        ERC20Impl::get_symbol(component, )
    }
    
    fn get_decimals(self: @TContractState) -> u8 {
        let component = HasComponent::get_component(self);
        ERC20Impl::get_decimals(component, )
    }
    
    fn get_total_supply(self: @TContractState) -> u256 {
        let component = HasComponent::get_component(self);
        ERC20Impl::get_total_supply(component, )
    }
    
    fn balance_of(self: @TContractState, account: ContractAddress) -> u256 {
        let component = HasComponent::get_component(self);
        ERC20Impl::balance_of(component, account, )
    }
    
    fn allowance(self: @TContractState, owner: ContractAddress, spender: ContractAddress
) -> u256 {
        let component = HasComponent::get_component(self);
        ERC20Impl::allowance(component, owner, spender, )
    }
    
    fn transfer(ref self: TContractState, recipient: ContractAddress, amount: u256
) {
        let mut component = HasComponent::get_component_mut(ref self);
        ERC20Impl::transfer(ref component, recipient, amount, )
    }
    
    fn transfer_from(ref self: TContractState,             sender: ContractAddress,             recipient: ContractAddress,             amount: u256
) {
        let mut component = HasComponent::get_component_mut(ref self);
        ERC20Impl::transfer_from(ref component,             sender,             recipient,             amount, )
    }
    
    fn approve(ref self: TContractState, spender: ContractAddress, amount: u256
) {
        let mut component = HasComponent::get_component_mut(ref self);
        ERC20Impl::approve(ref component, spender, amount, )
    }
    
    fn increase_allowance(ref self: TContractState, spender: ContractAddress, added_value: u256
) {
        let mut component = HasComponent::get_component_mut(ref self);
        ERC20Impl::increase_allowance(ref component, spender, added_value, )
    }
    
    fn decrease_allowance(ref self: TContractState,             spender: ContractAddress,             subtracted_value: u256
) {
        let mut component = HasComponent::get_component_mut(ref self);
        ERC20Impl::decrease_allowance(ref component,             spender,             subtracted_value, )
    }
}

impls:

impl EventDrop of Drop::<Event>;


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
            Event::Transfer(val) => {
                array::ArrayTrait::append(ref keys, selector!("Transfer"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
            Event::Approval(val) => {
                array::ArrayTrait::append(ref keys, selector!("Approval"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        if selector == selector!("Transfer") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::Transfer(val));
        }
        if selector == selector!("Approval") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::Approval(val));
        }
        Option::None
    }
}
impl EventTransferIntoEvent of Into<TransferEvent, Event> {
    fn into(self: TransferEvent) -> Event {
        Event::Transfer(self)
    }
}
impl EventApprovalIntoEvent of Into<ApprovalEvent, Event> {
    fn into(self: ApprovalEvent) -> Event {
        Event::Approval(self)
    }
}



impls:

impl TransferEventDrop of Drop::<TransferEvent>;


starknet_derive:

impl TransferEventIsEvent of starknet::Event<TransferEvent> {
    fn append_keys_and_data(
        self: @TransferEvent, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
                serde::Serde::serialize(self.from, ref data);
                serde::Serde::serialize(self.to, ref data);
                serde::Serde::serialize(self.value, ref data);
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<TransferEvent> {
                let from = serde::Serde::deserialize(
                    ref data
                )?;
                let to = serde::Serde::deserialize(
                    ref data
                )?;
                let value = serde::Serde::deserialize(
                    ref data
                )?;
        Option::Some(TransferEvent {from, to, value, })
    }
}


impls:

impl ApprovalEventDrop of Drop::<ApprovalEvent>;


starknet_derive:

impl ApprovalEventIsEvent of starknet::Event<ApprovalEvent> {
    fn append_keys_and_data(
        self: @ApprovalEvent, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
                serde::Serde::serialize(self.owner, ref data);
                serde::Serde::serialize(self.spender, ref data);
                serde::Serde::serialize(self.value, ref data);
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<ApprovalEvent> {
                let owner = serde::Serde::deserialize(
                    ref data
                )?;
                let spender = serde::Serde::deserialize(
                    ref data
                )?;
                let value = serde::Serde::deserialize(
                    ref data
                )?;
        Option::Some(ApprovalEvent {owner, spender, value, })
    }
}


generate_trait:

    trait ERC20HelperTrait<
        TContractState, impl X: HasComponent<TContractState>
    > {
        fn transfer_helper(
            ref self: ComponentState<TContractState>,
            sender: ContractAddress,
            recipient: ContractAddress,
            amount: u256
        );

        fn spend_allowance(
            ref self: ComponentState<TContractState>,
            owner: ContractAddress,
            spender: ContractAddress,
            amount: u256
        );

        fn approve_helper(
            ref self: ComponentState<TContractState>,
            owner: ContractAddress,
            spender: ContractAddress,
            amount: u256
        );
        fn init(
            ref self: ComponentState<TContractState>,
            name: felt252,
            symbol: felt252,
            decimals: u8,
            initial_supply: u256,
            recipient: ContractAddress
        );
    }


embeddable:

trait UnsafeNewContractStateTraitForIERC20<TContractState> {
    fn unsafe_new_contract_state() -> TContractState;
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__IERC20__get_name<TContractState, +HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForIERC20<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    let res = IERC20::<TContractState, _, TContractStateDrop>::get_name(@contract_state, );
    let mut arr = array::array_new();
    // References.
    // Result.
    serde::Serde::<felt252>::serialize(@res, ref arr);
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__IERC20__get_symbol<TContractState, +HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForIERC20<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    let res = IERC20::<TContractState, _, TContractStateDrop>::get_symbol(@contract_state, );
    let mut arr = array::array_new();
    // References.
    // Result.
    serde::Serde::<felt252>::serialize(@res, ref arr);
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__IERC20__get_decimals<TContractState, +HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForIERC20<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    let res = IERC20::<TContractState, _, TContractStateDrop>::get_decimals(@contract_state, );
    let mut arr = array::array_new();
    // References.
    // Result.
    serde::Serde::<u8>::serialize(@res, ref arr);
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__IERC20__get_total_supply<TContractState, +HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForIERC20<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    let res = IERC20::<TContractState, _, TContractStateDrop>::get_total_supply(@contract_state, );
    let mut arr = array::array_new();
    // References.
    // Result.
    serde::Serde::<u256>::serialize(@res, ref arr);
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__IERC20__balance_of<TContractState, +HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForIERC20<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_account = option::OptionTraitImpl::expect(
        serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    let res = IERC20::<TContractState, _, TContractStateDrop>::balance_of(@contract_state, __arg_account);
    let mut arr = array::array_new();
    // References.
    // Result.
    serde::Serde::<u256>::serialize(@res, ref arr);
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__IERC20__allowance<TContractState, +HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForIERC20<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_owner = option::OptionTraitImpl::expect(
        serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_spender = option::OptionTraitImpl::expect(
        serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    let res = IERC20::<TContractState, _, TContractStateDrop>::allowance(@contract_state, __arg_owner, __arg_spender);
    let mut arr = array::array_new();
    // References.
    // Result.
    serde::Serde::<u256>::serialize(@res, ref arr);
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__IERC20__transfer<TContractState, +HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForIERC20<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_recipient = option::OptionTraitImpl::expect(
        serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_amount = option::OptionTraitImpl::expect(
        serde::Serde::<u256>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    IERC20::<TContractState, _, TContractStateDrop>::transfer(ref contract_state, __arg_recipient, __arg_amount);
    let mut arr = array::array_new();
    // References.
    // Result.
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__IERC20__transfer_from<TContractState, +HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForIERC20<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_sender = option::OptionTraitImpl::expect(
        serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_recipient = option::OptionTraitImpl::expect(
        serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    let __arg_amount = option::OptionTraitImpl::expect(
        serde::Serde::<u256>::deserialize(ref data),
        'Failed to deserialize param #3'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    IERC20::<TContractState, _, TContractStateDrop>::transfer_from(ref contract_state, __arg_sender, __arg_recipient, __arg_amount);
    let mut arr = array::array_new();
    // References.
    // Result.
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__IERC20__approve<TContractState, +HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForIERC20<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_spender = option::OptionTraitImpl::expect(
        serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_amount = option::OptionTraitImpl::expect(
        serde::Serde::<u256>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    IERC20::<TContractState, _, TContractStateDrop>::approve(ref contract_state, __arg_spender, __arg_amount);
    let mut arr = array::array_new();
    // References.
    // Result.
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__IERC20__increase_allowance<TContractState, +HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForIERC20<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_spender = option::OptionTraitImpl::expect(
        serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_added_value = option::OptionTraitImpl::expect(
        serde::Serde::<u256>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    IERC20::<TContractState, _, TContractStateDrop>::increase_allowance(ref contract_state, __arg_spender, __arg_added_value);
    let mut arr = array::array_new();
    // References.
    // Result.
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__IERC20__decrease_allowance<TContractState, +HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForIERC20<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_spender = option::OptionTraitImpl::expect(
        serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_subtracted_value = option::OptionTraitImpl::expect(
        serde::Serde::<u256>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    IERC20::<TContractState, _, TContractStateDrop>::decrease_allowance(ref contract_state, __arg_spender, __arg_subtracted_value);
    let mut arr = array::array_new();
    // References.
    // Result.
    array::ArrayTrait::span(@arr)
}



mod __external_IERC20 {
        use super::__wrapper__IERC20__get_name as get_name;
        use super::__wrapper__IERC20__get_symbol as get_symbol;
        use super::__wrapper__IERC20__get_decimals as get_decimals;
        use super::__wrapper__IERC20__get_total_supply as get_total_supply;
        use super::__wrapper__IERC20__balance_of as balance_of;
        use super::__wrapper__IERC20__allowance as allowance;
        use super::__wrapper__IERC20__transfer as transfer;
        use super::__wrapper__IERC20__transfer_from as transfer_from;
        use super::__wrapper__IERC20__approve as approve;
        use super::__wrapper__IERC20__increase_allowance as increase_allowance;
        use super::__wrapper__IERC20__decrease_allowance as decrease_allowance;
}

mod __l1_handler_IERC20 {
}

mod __constructor_IERC20 {
}


component:

#[event]
#[derive(Drop, starknet::Event)]
enum Event {}


    struct ComponentState<TContractState> {
    }
    impl ComponentStateDrop<TContractState> of Drop<ComponentState<TContractState>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TContractState>() -> ComponentState<TContractState> {
        ComponentState::<TContractState> {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TContractState>() -> ComponentState<TContractState> {
        unsafe_new_component_state::<TContractState>()
    }
    

use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait,
};
trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TContractState>, event: S);
}

#[starknet::embeddable]
impl Mint<
            TContractState,
        +HasComponent<TContractState>,
        impl Ownable: super::ownable::HasComponent<TContractState>,
        impl ERC20: super::erc20::HasComponent<TContractState>,
        +Drop<TContractState>

> of super::MintTrait<TContractState> {
    
    fn mint(ref self: TContractState, account: ContractAddress, amount: u256) {
        let mut component = HasComponent::get_component_mut(ref self);
        MintImpl::mint(ref component, account, amount, )
    }
}

impls:

impl EventDrop of Drop::<Event>;


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        Option::None
    }
}



embeddable:

trait UnsafeNewContractStateTraitForMint<TContractState> {
    fn unsafe_new_contract_state() -> TContractState;
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__Mint__mint<TContractState,
        +HasComponent<TContractState>,
        impl Ownable: super::ownable::HasComponent<TContractState>,
        impl ERC20: super::erc20::HasComponent<TContractState>,
        +Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForMint<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_account = option::OptionTraitImpl::expect(
        serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_amount = option::OptionTraitImpl::expect(
        serde::Serde::<u256>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    Mint::<TContractState, _, Ownable, ERC20, _>::mint(ref contract_state, __arg_account, __arg_amount);
    let mut arr = array::array_new();
    // References.
    // Result.
    array::ArrayTrait::span(@arr)
}



mod __external_Mint {
        use super::__wrapper__Mint__mint as mint;
}

mod __l1_handler_Mint {
}

mod __constructor_Mint {
}


contract:



    struct ContractState {
        erc20_storage: super::erc20::ComponentState<ContractState>,
        ownable_storage: super::ownable::ComponentState<ContractState>,
        mintable_storage: super::mintable::ComponentState<ContractState>,
    }
    impl ContractStateDrop of Drop<ContractState> {}
    #[inline(always)]
    fn unsafe_new_contract_state() -> ContractState {
        ContractState {
            erc20_storage: super::erc20::unsafe_new_component_state::<ContractState>(),
            ownable_storage: super::ownable::unsafe_new_component_state::<ContractState>(),
            mintable_storage: super::mintable::unsafe_new_component_state::<ContractState>(),
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn contract_state_for_testing() -> ContractState {
        unsafe_new_contract_state()
    }
    
use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait
};
#[cfg(test)]
const TEST_CLASS_HASH: felt252 = 0x3b7fa15b51a294d39be02128f747e0a4076da77cc1eb87140ee2a1a5b7ace85;

impl ContractStateIERC20 of
    super::erc20::UnsafeNewContractStateTraitForIERC20<ContractState> {
    fn unsafe_new_contract_state() -> ContractState {
        unsafe_new_contract_state()
    }
}
impl ContractStateTransfer of
    super::ownable::UnsafeNewContractStateTraitForTransfer<ContractState> {
    fn unsafe_new_contract_state() -> ContractState {
        unsafe_new_contract_state()
    }
}
impl ContractStateMint of
    super::mintable::UnsafeNewContractStateTraitForMint<ContractState> {
    fn unsafe_new_contract_state() -> ContractState {
        unsafe_new_contract_state()
    }
}
#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__ImplCtor__constructor(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_name = option::OptionTraitImpl::expect(
        serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_symbol = option::OptionTraitImpl::expect(
        serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    let __arg_decimals = option::OptionTraitImpl::expect(
        serde::Serde::<u8>::deserialize(ref data),
        'Failed to deserialize param #3'
    );
    let __arg_initial_supply = option::OptionTraitImpl::expect(
        serde::Serde::<u256>::deserialize(ref data),
        'Failed to deserialize param #4'
    );
    let __arg_recipient = option::OptionTraitImpl::expect(
        serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #5'
    );
    let __arg_owner = option::OptionTraitImpl::expect(
        serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #6'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    ImplCtor::constructor(ref contract_state, __arg_name, __arg_symbol, __arg_decimals, __arg_initial_supply, __arg_recipient, __arg_owner);
    let mut arr = array::array_new();
    // References.
    // Result.
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__ImplGetSupply__get_total_supply_plus_1(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    let res = ImplGetSupply::get_total_supply_plus_1(@contract_state, );
    let mut arr = array::array_new();
    // References.
    // Result.
    serde::Serde::<u256>::serialize(@res, ref arr);
    array::ArrayTrait::span(@arr)
}


    mod __external {
        use super::__wrapper__ImplGetSupply__get_total_supply_plus_1 as get_total_supply_plus_1;
    }

    mod __l1_handler {
    }

    mod __constructor {
        use super::__wrapper__ImplCtor__constructor as constructor;
    }

    impl ContractStateEventEmitter of starknet::event::EventEmitter<
        ContractState, Event
    > {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(
            ref self: ContractState, event: S
        ) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

impl HasComponentImpl_erc20 of super::erc20::HasComponent<ContractState> {
    fn get_component(self: @ContractState) -> @super::erc20::ComponentState<ContractState> {
        self.erc20_storage
    }
    fn get_component_mut(ref self: ContractState) -> super::erc20::ComponentState<ContractState> {
        super::erc20::unsafe_new_component_state::<ContractState>()
    }
    fn get_contract(self: @super::erc20::ComponentState<ContractState>) -> @ContractState {
        @unsafe_new_contract_state()
    }
    fn get_contract_mut(ref self: super::erc20::ComponentState<ContractState>) -> ContractState {
        unsafe_new_contract_state()
    }
    fn emit<S, impl IntoImp: traits::Into<S, super::erc20::Event>>(ref self: super::erc20::ComponentState<ContractState>, event: S) {
        let event: super::erc20::Event = traits::Into::into(event);
        let mut contract = super::erc20::HasComponent::get_contract_mut(ref self);
        ContractStateEventEmitter::emit(ref contract, Event::ERC20(event));
    }
}
impl HasComponentImpl_ownable of super::ownable::HasComponent<ContractState> {
    fn get_component(self: @ContractState) -> @super::ownable::ComponentState<ContractState> {
        self.ownable_storage
    }
    fn get_component_mut(ref self: ContractState) -> super::ownable::ComponentState<ContractState> {
        super::ownable::unsafe_new_component_state::<ContractState>()
    }
    fn get_contract(self: @super::ownable::ComponentState<ContractState>) -> @ContractState {
        @unsafe_new_contract_state()
    }
    fn get_contract_mut(ref self: super::ownable::ComponentState<ContractState>) -> ContractState {
        unsafe_new_contract_state()
    }
    fn emit<S, impl IntoImp: traits::Into<S, super::ownable::Event>>(ref self: super::ownable::ComponentState<ContractState>, event: S) {
        let event: super::ownable::Event = traits::Into::into(event);
        let mut contract = super::ownable::HasComponent::get_contract_mut(ref self);
        ContractStateEventEmitter::emit(ref contract, Event::Ownable(event));
    }
}
impl HasComponentImpl_mintable of super::mintable::HasComponent<ContractState> {
    fn get_component(self: @ContractState) -> @super::mintable::ComponentState<ContractState> {
        self.mintable_storage
    }
    fn get_component_mut(ref self: ContractState) -> super::mintable::ComponentState<ContractState> {
        super::mintable::unsafe_new_component_state::<ContractState>()
    }
    fn get_contract(self: @super::mintable::ComponentState<ContractState>) -> @ContractState {
        @unsafe_new_contract_state()
    }
    fn get_contract_mut(ref self: super::mintable::ComponentState<ContractState>) -> ContractState {
        unsafe_new_contract_state()
    }
    fn emit<S, impl IntoImp: traits::Into<S, super::mintable::Event>>(ref self: super::mintable::ComponentState<ContractState>, event: S) {
        let event: super::mintable::Event = traits::Into::into(event);
        let mut contract = super::mintable::HasComponent::get_contract_mut(ref self);
        ContractStateEventEmitter::emit(ref contract, Event::Mintable(event));
    }
}


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
            Event::ERC20(val) => {
                array::ArrayTrait::append(ref keys, selector!("ERC20"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
            Event::Ownable(val) => {
                array::ArrayTrait::append(ref keys, selector!("Ownable"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
            Event::Mintable(val) => {
                array::ArrayTrait::append(ref keys, selector!("Mintable"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        if selector == selector!("ERC20") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::ERC20(val));
        }
        if selector == selector!("Ownable") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::Ownable(val));
        }
        if selector == selector!("Mintable") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::Mintable(val));
        }
        Option::None
    }
}
impl EventERC20IntoEvent of Into<super::erc20::Event, Event> {
    fn into(self: super::erc20::Event) -> Event {
        Event::ERC20(self)
    }
}
impl EventOwnableIntoEvent of Into<super::ownable::Event, Event> {
    fn into(self: super::ownable::Event) -> Event {
        Event::Ownable(self)
    }
}
impl EventMintableIntoEvent of Into<super::mintable::Event, Event> {
    fn into(self: super::mintable::Event) -> Event {
        Event::Mintable(self)
    }
}



generate_trait:

    trait TraitCtor {
        fn constructor(
            ref self: ContractState,
            name: felt252,
            symbol: felt252,
            decimals: u8,
            initial_supply: u256,
            recipient: ContractAddress,
            owner: ContractAddress,
        );
    }

//! > expected_diagnostics
