//! > Test expansion of StarkNet storage logic.

//! > test_runner_name
ExpandContractTestRunner(expect_diagnostics: warnings_only)

//! > cairo_code
#[starknet::interface]
trait HelloStarknetTrait<TContractState> {
    // Increases the balance by the given amount.
    fn increase_balance(ref self: TContractState, amount: usize);
    // Returns the current balance.
    fn get_balance(self: @TContractState) -> usize;

    fn get_user_balance(self: @TContractState, user_id: usize) -> usize;
    fn set_user_balance(ref self: TContractState, user_id: usize, balance: usize);
    fn get_legacy_user_balance(self: @TContractState, user_id: usize) -> usize;
    fn set_legacy_user_balance(ref self: TContractState, user_id: usize, balance: usize);

    fn get_user_balance_subbalance(
        self: @TContractState, user_id: usize, subbalance_id: usize
    ) -> usize;
    fn get_balance_pair_balance1(self: @TContractState) -> u256;
    fn get_balance_pair_balance2(self: @TContractState) -> felt252;
    fn get_balance_trio_sub_member(self: @TContractState) -> u128;
}

#[starknet::storage_node]
struct BalancePair {
    balance1: u256,
    balance2: felt252,
}

#[derive(Drop, starknet::Store)]
#[starknet::sub_pointers]
struct SlicedBalanceTrio {
    balance1: u256,
    balance12: SlicedBalancePair,
}

#[derive(Drop, starknet::Store)]
#[starknet::sub_pointers]
struct SlicedBalancePair {
    balance1: u256,
    balance2: felt252,
}

#[starknet::contract]
mod hello_starknet {
    use starknet::storage::{StorageAsPointer, StorageAsPath, StoragePathEntry, Map,};
    use super::{BalancePair, SlicedBalancePair, SlicedBalanceTrio};
    #[storage]
    struct Storage {
        balance: usize,
        user_balance: Map<usize, usize>,
        user_balance_subbalance: Map<usize, Map<usize, usize>>,
        legacy_map_balace: LegacyMap<usize, usize>,
        balance_pair: BalancePair,
        sliced_balance_trio: SlicedBalanceTrio,
    }

    #[abi(embed_v0)]
    impl HelloStarknetImpl of super::HelloStarknetTrait<ContractState> {
        fn increase_balance(ref self: ContractState, amount: usize) {
            // Save some computation by getting the pointer once.
            let balance_ptr = self.balance.as_path().as_ptr();
            balance_ptr.write(balance_ptr.read() + amount);
        }
        fn get_balance(self: @ContractState) -> usize {
            self.balance.read()
        }
        fn get_user_balance(self: @ContractState, user_id: usize) -> usize {
            self.user_balance.entry(user_id).read()
        }
        fn get_legacy_user_balance(self: @ContractState, user_id: usize) -> usize {
            self.legacy_map_balace.read(user_id)
        }
        fn set_user_balance(ref self: ContractState, user_id: usize, balance: usize) {
            self.user_balance.as_path().entry(user_id).write(balance);
        }
        fn set_legacy_user_balance(ref self: ContractState, user_id: usize, balance: usize) {
            self.legacy_map_balace.write(user_id, balance);
        }
        fn get_user_balance_subbalance(
            self: @ContractState, user_id: usize, subbalance_id: usize
        ) -> usize {
            self.user_balance_subbalance.as_path().entry(user_id).entry(subbalance_id).read()
        }
        fn get_balance_pair_balance1(self: @ContractState) -> u256 {
            self.balance_pair.balance1.read()
        }
        fn get_balance_pair_balance2(self: @ContractState) -> felt252 {
            self.balance_pair.balance2.read()
        }
        fn get_balance_trio_sub_member(self: @ContractState) -> u128 {
            self.sliced_balance_trio.balance12.balance1.high.read()
        }
    }
}

//! > generated_cairo_code
lib.cairo:

#[starknet::interface]
trait HelloStarknetTrait<TContractState> {
    // Increases the balance by the given amount.
    fn increase_balance(ref self: TContractState, amount: usize);
    // Returns the current balance.
    fn get_balance(self: @TContractState) -> usize;

    fn get_user_balance(self: @TContractState, user_id: usize) -> usize;
    fn set_user_balance(ref self: TContractState, user_id: usize, balance: usize);
    fn get_legacy_user_balance(self: @TContractState, user_id: usize) -> usize;
    fn set_legacy_user_balance(ref self: TContractState, user_id: usize, balance: usize);

    fn get_user_balance_subbalance(
        self: @TContractState, user_id: usize, subbalance_id: usize
    ) -> usize;
    fn get_balance_pair_balance1(self: @TContractState) -> u256;
    fn get_balance_pair_balance2(self: @TContractState) -> felt252;
    fn get_balance_trio_sub_member(self: @TContractState) -> u128;
}

#[starknet::storage_node]
struct BalancePair {
    balance1: u256,
    balance2: felt252,
}

#[derive(Drop, starknet::Store)]
#[starknet::sub_pointers]
struct SlicedBalanceTrio {
    balance1: u256,
    balance12: SlicedBalancePair,
}

#[derive(Drop, starknet::Store)]
#[starknet::sub_pointers]
struct SlicedBalancePair {
    balance1: u256,
    balance2: felt252,
}

#[starknet::contract]
mod hello_starknet {
    use starknet::storage::{StorageAsPointer, StorageAsPath, StoragePathEntry, Map,};
    use super::{BalancePair, SlicedBalancePair, SlicedBalanceTrio};
    #[storage]
    struct Storage {
        balance: usize,
        user_balance: Map<usize, usize>,
        user_balance_subbalance: Map<usize, Map<usize, usize>>,
        legacy_map_balace: LegacyMap<usize, usize>,
        balance_pair: BalancePair,
        sliced_balance_trio: SlicedBalanceTrio,
    }

    #[abi(embed_v0)]
    impl HelloStarknetImpl of super::HelloStarknetTrait<ContractState> {
        fn increase_balance(ref self: ContractState, amount: usize) {
            // Save some computation by getting the pointer once.
            let balance_ptr = self.balance.as_path().as_ptr();
            balance_ptr.write(balance_ptr.read() + amount);
        }
        fn get_balance(self: @ContractState) -> usize {
            self.balance.read()
        }
        fn get_user_balance(self: @ContractState, user_id: usize) -> usize {
            self.user_balance.entry(user_id).read()
        }
        fn get_legacy_user_balance(self: @ContractState, user_id: usize) -> usize {
            self.legacy_map_balace.read(user_id)
        }
        fn set_user_balance(ref self: ContractState, user_id: usize, balance: usize) {
            self.user_balance.as_path().entry(user_id).write(balance);
        }
        fn set_legacy_user_balance(ref self: ContractState, user_id: usize, balance: usize) {
            self.legacy_map_balace.write(user_id, balance);
        }
        fn get_user_balance_subbalance(
            self: @ContractState, user_id: usize, subbalance_id: usize
        ) -> usize {
            self.user_balance_subbalance.as_path().entry(user_id).entry(subbalance_id).read()
        }
        fn get_balance_pair_balance1(self: @ContractState) -> u256 {
            self.balance_pair.balance1.read()
        }
        fn get_balance_pair_balance2(self: @ContractState) -> felt252 {
            self.balance_pair.balance2.read()
        }
        fn get_balance_trio_sub_member(self: @ContractState) -> u128 {
            self.sliced_balance_trio.balance12.balance1.high.read()
        }
    }
}

lib.cairo:1:1
#[starknet::interface]
^********************^
HelloStarknetTraitDispatcherTrait:

trait HelloStarknetTraitDispatcherTrait<T> {
    // Increases the balance by the given amount.
    fn increase_balance(self: T, amount: usize);
    // Returns the current balance.
    fn get_balance(self: T) -> usize;

    fn get_user_balance(self: T, user_id: usize) -> usize;
    fn set_user_balance(self: T, user_id: usize, balance: usize);
    fn get_legacy_user_balance(self: T, user_id: usize) -> usize;
    fn set_legacy_user_balance(self: T, user_id: usize, balance: usize);

    fn get_user_balance_subbalance(
self: T, user_id: usize, subbalance_id: usize
    ) -> usize;
    fn get_balance_pair_balance1(self: T) -> u256;
    fn get_balance_pair_balance2(self: T) -> felt252;
    fn get_balance_trio_sub_member(self: T) -> u128;
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct HelloStarknetTraitDispatcher {
    pub contract_address: starknet::ContractAddress,
}

impl HelloStarknetTraitDispatcherImpl of HelloStarknetTraitDispatcherTrait<HelloStarknetTraitDispatcher> {
    // Increases the balance by the given amount.
    fn increase_balance(self: HelloStarknetTraitDispatcher, amount: usize) {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@amount, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("increase_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        ()
    }
    // Returns the current balance.
    fn get_balance(self: HelloStarknetTraitDispatcher) -> usize {
        let mut __calldata__ = core::traits::Default::default();

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("get_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        core::option::OptionTrait::expect(
            core::serde::Serde::<usize>::deserialize(ref __dispatcher_return_data__),
            'Returned data too short',
        )
    }

    fn get_user_balance(self: HelloStarknetTraitDispatcher, user_id: usize) -> usize {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@user_id, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("get_user_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        core::option::OptionTrait::expect(
            core::serde::Serde::<usize>::deserialize(ref __dispatcher_return_data__),
            'Returned data too short',
        )
    }
    fn set_user_balance(self: HelloStarknetTraitDispatcher, user_id: usize, balance: usize) {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@user_id, ref __calldata__);
        core::serde::Serde::<usize>::serialize(@balance, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("set_user_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        ()
    }
    fn get_legacy_user_balance(self: HelloStarknetTraitDispatcher, user_id: usize) -> usize {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@user_id, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("get_legacy_user_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        core::option::OptionTrait::expect(
            core::serde::Serde::<usize>::deserialize(ref __dispatcher_return_data__),
            'Returned data too short',
        )
    }
    fn set_legacy_user_balance(self: HelloStarknetTraitDispatcher, user_id: usize, balance: usize) {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@user_id, ref __calldata__);
        core::serde::Serde::<usize>::serialize(@balance, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("set_legacy_user_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        ()
    }

    fn get_user_balance_subbalance(
self: HelloStarknetTraitDispatcher, user_id: usize, subbalance_id: usize
    ) -> usize {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@user_id, ref __calldata__);
        core::serde::Serde::<usize
>::serialize(@subbalance_id, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("get_user_balance_subbalance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        core::option::OptionTrait::expect(
            core::serde::Serde::<usize>::deserialize(ref __dispatcher_return_data__),
            'Returned data too short',
        )
    }
    fn get_balance_pair_balance1(self: HelloStarknetTraitDispatcher) -> u256 {
        let mut __calldata__ = core::traits::Default::default();

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("get_balance_pair_balance1"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        core::option::OptionTrait::expect(
            core::serde::Serde::<u256>::deserialize(ref __dispatcher_return_data__),
            'Returned data too short',
        )
    }
    fn get_balance_pair_balance2(self: HelloStarknetTraitDispatcher) -> felt252 {
        let mut __calldata__ = core::traits::Default::default();

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("get_balance_pair_balance2"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        core::option::OptionTrait::expect(
            core::serde::Serde::<felt252>::deserialize(ref __dispatcher_return_data__),
            'Returned data too short',
        )
    }
    fn get_balance_trio_sub_member(self: HelloStarknetTraitDispatcher) -> u128 {
        let mut __calldata__ = core::traits::Default::default();

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("get_balance_trio_sub_member"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        core::option::OptionTrait::expect(
            core::serde::Serde::<u128>::deserialize(ref __dispatcher_return_data__),
            'Returned data too short',
        )
    }

}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct HelloStarknetTraitLibraryDispatcher {
    pub class_hash: starknet::ClassHash,
}

impl HelloStarknetTraitLibraryDispatcherImpl of HelloStarknetTraitDispatcherTrait<HelloStarknetTraitLibraryDispatcher> {
    // Increases the balance by the given amount.
    fn increase_balance(self: HelloStarknetTraitLibraryDispatcher, amount: usize) {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@amount, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("increase_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        ()
    }
    // Returns the current balance.
    fn get_balance(self: HelloStarknetTraitLibraryDispatcher) -> usize {
        let mut __calldata__ = core::traits::Default::default();

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        core::option::OptionTrait::expect(
            core::serde::Serde::<usize>::deserialize(ref __dispatcher_return_data__),
            'Returned data too short',
        )
    }

    fn get_user_balance(self: HelloStarknetTraitLibraryDispatcher, user_id: usize) -> usize {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@user_id, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_user_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        core::option::OptionTrait::expect(
            core::serde::Serde::<usize>::deserialize(ref __dispatcher_return_data__),
            'Returned data too short',
        )
    }
    fn set_user_balance(self: HelloStarknetTraitLibraryDispatcher, user_id: usize, balance: usize) {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@user_id, ref __calldata__);
        core::serde::Serde::<usize>::serialize(@balance, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("set_user_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        ()
    }
    fn get_legacy_user_balance(self: HelloStarknetTraitLibraryDispatcher, user_id: usize) -> usize {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@user_id, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_legacy_user_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        core::option::OptionTrait::expect(
            core::serde::Serde::<usize>::deserialize(ref __dispatcher_return_data__),
            'Returned data too short',
        )
    }
    fn set_legacy_user_balance(self: HelloStarknetTraitLibraryDispatcher, user_id: usize, balance: usize) {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@user_id, ref __calldata__);
        core::serde::Serde::<usize>::serialize(@balance, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("set_legacy_user_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        ()
    }

    fn get_user_balance_subbalance(
self: HelloStarknetTraitLibraryDispatcher, user_id: usize, subbalance_id: usize
    ) -> usize {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@user_id, ref __calldata__);
        core::serde::Serde::<usize
>::serialize(@subbalance_id, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_user_balance_subbalance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        core::option::OptionTrait::expect(
            core::serde::Serde::<usize>::deserialize(ref __dispatcher_return_data__),
            'Returned data too short',
        )
    }
    fn get_balance_pair_balance1(self: HelloStarknetTraitLibraryDispatcher) -> u256 {
        let mut __calldata__ = core::traits::Default::default();

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_balance_pair_balance1"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        core::option::OptionTrait::expect(
            core::serde::Serde::<u256>::deserialize(ref __dispatcher_return_data__),
            'Returned data too short',
        )
    }
    fn get_balance_pair_balance2(self: HelloStarknetTraitLibraryDispatcher) -> felt252 {
        let mut __calldata__ = core::traits::Default::default();

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_balance_pair_balance2"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        core::option::OptionTrait::expect(
            core::serde::Serde::<felt252>::deserialize(ref __dispatcher_return_data__),
            'Returned data too short',
        )
    }
    fn get_balance_trio_sub_member(self: HelloStarknetTraitLibraryDispatcher) -> u128 {
        let mut __calldata__ = core::traits::Default::default();

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_balance_trio_sub_member"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        core::option::OptionTrait::expect(
            core::serde::Serde::<u128>::deserialize(ref __dispatcher_return_data__),
            'Returned data too short',
        )
    }

}

trait HelloStarknetTraitSafeDispatcherTrait<T> {
    #[unstable(feature: "safe_dispatcher")]
    // Increases the balance by the given amount.
    fn increase_balance(self: T, amount: usize) -> starknet::SyscallResult<()>;
    #[unstable(feature: "safe_dispatcher")]
    // Returns the current balance.
    fn get_balance(self: T) -> starknet::SyscallResult<usize>;
    #[unstable(feature: "safe_dispatcher")]

    fn get_user_balance(self: T, user_id: usize) -> starknet::SyscallResult<usize>;
    #[unstable(feature: "safe_dispatcher")]
    fn set_user_balance(self: T, user_id: usize, balance: usize) -> starknet::SyscallResult<()>;
    #[unstable(feature: "safe_dispatcher")]
    fn get_legacy_user_balance(self: T, user_id: usize) -> starknet::SyscallResult<usize>;
    #[unstable(feature: "safe_dispatcher")]
    fn set_legacy_user_balance(self: T, user_id: usize, balance: usize) -> starknet::SyscallResult<()>;
    #[unstable(feature: "safe_dispatcher")]

    fn get_user_balance_subbalance(
self: T, user_id: usize, subbalance_id: usize
    ) -> starknet::SyscallResult<usize>;
    #[unstable(feature: "safe_dispatcher")]
    fn get_balance_pair_balance1(self: T) -> starknet::SyscallResult<u256>;
    #[unstable(feature: "safe_dispatcher")]
    fn get_balance_pair_balance2(self: T) -> starknet::SyscallResult<felt252>;
    #[unstable(feature: "safe_dispatcher")]
    fn get_balance_trio_sub_member(self: T) -> starknet::SyscallResult<u128>;
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct HelloStarknetTraitSafeLibraryDispatcher {
    pub class_hash: starknet::ClassHash,
}

impl HelloStarknetTraitSafeLibraryDispatcherImpl of HelloStarknetTraitSafeDispatcherTrait<HelloStarknetTraitSafeLibraryDispatcher> {
    // Increases the balance by the given amount.
    fn increase_balance(self: HelloStarknetTraitSafeLibraryDispatcher, amount: usize) -> starknet::SyscallResult<()> {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@amount, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("increase_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(())
    }
    // Returns the current balance.
    fn get_balance(self: HelloStarknetTraitSafeLibraryDispatcher) -> starknet::SyscallResult<usize> {
        let mut __calldata__ = core::traits::Default::default();

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(
            core::option::OptionTrait::expect(
                core::serde::Serde::<usize>::deserialize(ref __dispatcher_return_data__),
                'Returned data too short',
            )
        )
    }

    fn get_user_balance(self: HelloStarknetTraitSafeLibraryDispatcher, user_id: usize) -> starknet::SyscallResult<usize> {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@user_id, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_user_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(
            core::option::OptionTrait::expect(
                core::serde::Serde::<usize>::deserialize(ref __dispatcher_return_data__),
                'Returned data too short',
            )
        )
    }
    fn set_user_balance(self: HelloStarknetTraitSafeLibraryDispatcher, user_id: usize, balance: usize) -> starknet::SyscallResult<()> {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@user_id, ref __calldata__);
        core::serde::Serde::<usize>::serialize(@balance, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("set_user_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(())
    }
    fn get_legacy_user_balance(self: HelloStarknetTraitSafeLibraryDispatcher, user_id: usize) -> starknet::SyscallResult<usize> {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@user_id, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_legacy_user_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(
            core::option::OptionTrait::expect(
                core::serde::Serde::<usize>::deserialize(ref __dispatcher_return_data__),
                'Returned data too short',
            )
        )
    }
    fn set_legacy_user_balance(self: HelloStarknetTraitSafeLibraryDispatcher, user_id: usize, balance: usize) -> starknet::SyscallResult<()> {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@user_id, ref __calldata__);
        core::serde::Serde::<usize>::serialize(@balance, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("set_legacy_user_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(())
    }

    fn get_user_balance_subbalance(
self: HelloStarknetTraitSafeLibraryDispatcher, user_id: usize, subbalance_id: usize
    ) -> starknet::SyscallResult<usize> {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@user_id, ref __calldata__);
        core::serde::Serde::<usize
>::serialize(@subbalance_id, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_user_balance_subbalance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(
            core::option::OptionTrait::expect(
                core::serde::Serde::<usize>::deserialize(ref __dispatcher_return_data__),
                'Returned data too short',
            )
        )
    }
    fn get_balance_pair_balance1(self: HelloStarknetTraitSafeLibraryDispatcher) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = core::traits::Default::default();

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_balance_pair_balance1"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(
            core::option::OptionTrait::expect(
                core::serde::Serde::<u256>::deserialize(ref __dispatcher_return_data__),
                'Returned data too short',
            )
        )
    }
    fn get_balance_pair_balance2(self: HelloStarknetTraitSafeLibraryDispatcher) -> starknet::SyscallResult<felt252> {
        let mut __calldata__ = core::traits::Default::default();

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_balance_pair_balance2"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(
            core::option::OptionTrait::expect(
                core::serde::Serde::<felt252>::deserialize(ref __dispatcher_return_data__),
                'Returned data too short',
            )
        )
    }
    fn get_balance_trio_sub_member(self: HelloStarknetTraitSafeLibraryDispatcher) -> starknet::SyscallResult<u128> {
        let mut __calldata__ = core::traits::Default::default();

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_balance_trio_sub_member"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(
            core::option::OptionTrait::expect(
                core::serde::Serde::<u128>::deserialize(ref __dispatcher_return_data__),
                'Returned data too short',
            )
        )
    }

}


#[derive(Copy, Drop, starknet::Store, Serde)]
struct HelloStarknetTraitSafeDispatcher {
    pub contract_address: starknet::ContractAddress,
}

impl HelloStarknetTraitSafeDispatcherImpl of HelloStarknetTraitSafeDispatcherTrait<HelloStarknetTraitSafeDispatcher> {
    // Increases the balance by the given amount.
    fn increase_balance(self: HelloStarknetTraitSafeDispatcher, amount: usize) -> starknet::SyscallResult<()> {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@amount, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("increase_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(())
    }
    // Returns the current balance.
    fn get_balance(self: HelloStarknetTraitSafeDispatcher) -> starknet::SyscallResult<usize> {
        let mut __calldata__ = core::traits::Default::default();

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("get_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(
            core::option::OptionTrait::expect(
                core::serde::Serde::<usize>::deserialize(ref __dispatcher_return_data__),
                'Returned data too short',
            )
        )
    }

    fn get_user_balance(self: HelloStarknetTraitSafeDispatcher, user_id: usize) -> starknet::SyscallResult<usize> {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@user_id, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("get_user_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(
            core::option::OptionTrait::expect(
                core::serde::Serde::<usize>::deserialize(ref __dispatcher_return_data__),
                'Returned data too short',
            )
        )
    }
    fn set_user_balance(self: HelloStarknetTraitSafeDispatcher, user_id: usize, balance: usize) -> starknet::SyscallResult<()> {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@user_id, ref __calldata__);
        core::serde::Serde::<usize>::serialize(@balance, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("set_user_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(())
    }
    fn get_legacy_user_balance(self: HelloStarknetTraitSafeDispatcher, user_id: usize) -> starknet::SyscallResult<usize> {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@user_id, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("get_legacy_user_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(
            core::option::OptionTrait::expect(
                core::serde::Serde::<usize>::deserialize(ref __dispatcher_return_data__),
                'Returned data too short',
            )
        )
    }
    fn set_legacy_user_balance(self: HelloStarknetTraitSafeDispatcher, user_id: usize, balance: usize) -> starknet::SyscallResult<()> {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@user_id, ref __calldata__);
        core::serde::Serde::<usize>::serialize(@balance, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("set_legacy_user_balance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(())
    }

    fn get_user_balance_subbalance(
self: HelloStarknetTraitSafeDispatcher, user_id: usize, subbalance_id: usize
    ) -> starknet::SyscallResult<usize> {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<usize>::serialize(@user_id, ref __calldata__);
        core::serde::Serde::<usize
>::serialize(@subbalance_id, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("get_user_balance_subbalance"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(
            core::option::OptionTrait::expect(
                core::serde::Serde::<usize>::deserialize(ref __dispatcher_return_data__),
                'Returned data too short',
            )
        )
    }
    fn get_balance_pair_balance1(self: HelloStarknetTraitSafeDispatcher) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = core::traits::Default::default();

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("get_balance_pair_balance1"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(
            core::option::OptionTrait::expect(
                core::serde::Serde::<u256>::deserialize(ref __dispatcher_return_data__),
                'Returned data too short',
            )
        )
    }
    fn get_balance_pair_balance2(self: HelloStarknetTraitSafeDispatcher) -> starknet::SyscallResult<felt252> {
        let mut __calldata__ = core::traits::Default::default();

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("get_balance_pair_balance2"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(
            core::option::OptionTrait::expect(
                core::serde::Serde::<felt252>::deserialize(ref __dispatcher_return_data__),
                'Returned data too short',
            )
        )
    }
    fn get_balance_trio_sub_member(self: HelloStarknetTraitSafeDispatcher) -> starknet::SyscallResult<u128> {
        let mut __calldata__ = core::traits::Default::default();

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("get_balance_trio_sub_member"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(
            core::option::OptionTrait::expect(
                core::serde::Serde::<u128>::deserialize(ref __dispatcher_return_data__),
                'Returned data too short',
            )
        )
    }

}


lib.cairo:21:1
#[starknet::storage_node]
^***********************^
storage_node:

#[derive(Drop, Copy)]
struct BalancePairStorageNode {
    balance1: starknet::storage::PendingStoragePath<u256>,
    balance2: starknet::storage::PendingStoragePath<felt252>,
}

impl BalancePairStorageNodeImpl of starknet::storage::StorageNode<BalancePair> {
    type NodeType = BalancePairStorageNode;
       fn storage_node(self: starknet::storage::StoragePath<BalancePair>) -> BalancePairStorageNode {
           
        let balance1_value = starknet::storage::PendingStoragePath { 
            hash_state: self.hash_state,
            pending_key: selector!("balance1") 
        };
        let balance2_value = starknet::storage::PendingStoragePath { 
            hash_state: self.hash_state,
            pending_key: selector!("balance2") 
        };
        BalancePairStorageNode {
           balance1: balance1_value,
           balance2: balance2_value,
        }
    }
}


lib.cairo:26:1

^
impls:

impl SlicedBalanceTrioDrop of core::traits::Drop::<SlicedBalanceTrio>;


lib.cairo:27:16
#[derive(Drop, starknet::Store)]
               ^*************^
starknet_derive:

impl StoreSlicedBalanceTrio of starknet::Store::<SlicedBalanceTrio> {
    fn read(address_domain: u32, base: starknet::storage_access::StorageBaseAddress) -> starknet::SyscallResult<SlicedBalanceTrio> {
        let balance1 = starknet::Store::<u256>::read(address_domain, base)?;
        let mut current_offset = starknet::Store::<u256>::size();
        let balance12 = starknet::Store::<SlicedBalancePair>::read_at_offset(address_domain, base, current_offset)?;
        starknet::SyscallResult::Ok(
            SlicedBalanceTrio {
                balance1,
                balance12,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, value: SlicedBalanceTrio) -> starknet::SyscallResult<()> {
        starknet::Store::<u256>::write(address_domain, base, value.balance1)?;
        let mut current_offset = starknet::Store::<u256>::size();
        starknet::Store::<SlicedBalancePair>::write_at_offset(address_domain, base, current_offset, value.balance12)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<SlicedBalanceTrio> {
        let balance1 = starknet::Store::<u256>::read_at_offset(address_domain, base, offset)?;
        let mut current_offset = offset + starknet::Store::<u256>::size();
        let balance12 = starknet::Store::<SlicedBalancePair>::read_at_offset(address_domain, base, current_offset)?;
        starknet::SyscallResult::Ok(
            SlicedBalanceTrio {
                balance1,
                balance12,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8, value: SlicedBalanceTrio) -> starknet::SyscallResult<()> {
        starknet::Store::<u256>::write_at_offset(address_domain, base, offset, value.balance1)?;
        let mut current_offset = offset + starknet::Store::<u256>::size();
        starknet::Store::<SlicedBalancePair>::write_at_offset(address_domain, base, current_offset, value.balance12)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<u256>::size() +
        starknet::Store::<SlicedBalancePair>::size()
    }
}
#[feature("derive-storage")]
impl DeriveStorageSlicedBalanceTrio of starknet::storage_access::DeriveStorage::<SlicedBalanceTrio> {}


lib.cairo:27:1
#[derive(Drop, starknet::Store)]
^******************************^
storage_node:

#[derive(Drop, Copy)]
struct SlicedBalanceTrioSubPointers {
    balance1: starknet::storage::StoragePointer<u256>,
    balance12: starknet::storage::StoragePointer<SlicedBalancePair>,
}
#[feature("derive-storage")]
impl SlicedBalanceTrioSubPointersImpl<+starknet::storage_access::DeriveStorage<SlicedBalanceTrio>> of starknet::storage::SubPointers<SlicedBalanceTrio> {
    type SubPointersType = SlicedBalanceTrioSubPointers;
       fn sub_pointers(self: starknet::storage::StoragePointer<SlicedBalanceTrio>) -> SlicedBalanceTrioSubPointers {
                   let base_address = self.address;
        let mut current_offset = self.offset;
        let balance1_value = starknet::storage::StoragePointer {
            address: base_address,
            offset: current_offset,
        };
        current_offset = current_offset + starknet::Store::<u256>::size();
        let balance12_value = starknet::storage::StoragePointer {
            address: base_address,
            offset: current_offset,
        };
                SlicedBalanceTrioSubPointers {
           balance1: balance1_value,
           balance12: balance12_value,
        }
    }
}


lib.cairo:33:1

^
impls:

impl SlicedBalancePairDrop of core::traits::Drop::<SlicedBalancePair>;


lib.cairo:34:16
#[derive(Drop, starknet::Store)]
               ^*************^
starknet_derive:

impl StoreSlicedBalancePair of starknet::Store::<SlicedBalancePair> {
    fn read(address_domain: u32, base: starknet::storage_access::StorageBaseAddress) -> starknet::SyscallResult<SlicedBalancePair> {
        let balance1 = starknet::Store::<u256>::read(address_domain, base)?;
        let mut current_offset = starknet::Store::<u256>::size();
        let balance2 = starknet::Store::<felt252>::read_at_offset(address_domain, base, current_offset)?;
        starknet::SyscallResult::Ok(
            SlicedBalancePair {
                balance1,
                balance2,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, value: SlicedBalancePair) -> starknet::SyscallResult<()> {
        starknet::Store::<u256>::write(address_domain, base, value.balance1)?;
        let mut current_offset = starknet::Store::<u256>::size();
        starknet::Store::<felt252>::write_at_offset(address_domain, base, current_offset, value.balance2)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<SlicedBalancePair> {
        let balance1 = starknet::Store::<u256>::read_at_offset(address_domain, base, offset)?;
        let mut current_offset = offset + starknet::Store::<u256>::size();
        let balance2 = starknet::Store::<felt252>::read_at_offset(address_domain, base, current_offset)?;
        starknet::SyscallResult::Ok(
            SlicedBalancePair {
                balance1,
                balance2,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8, value: SlicedBalancePair) -> starknet::SyscallResult<()> {
        starknet::Store::<u256>::write_at_offset(address_domain, base, offset, value.balance1)?;
        let mut current_offset = offset + starknet::Store::<u256>::size();
        starknet::Store::<felt252>::write_at_offset(address_domain, base, current_offset, value.balance2)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<u256>::size() +
        starknet::Store::<felt252>::size()
    }
}
#[feature("derive-storage")]
impl DeriveStorageSlicedBalancePair of starknet::storage_access::DeriveStorage::<SlicedBalancePair> {}


lib.cairo:34:1
#[derive(Drop, starknet::Store)]
^******************************^
storage_node:

#[derive(Drop, Copy)]
struct SlicedBalancePairSubPointers {
    balance1: starknet::storage::StoragePointer<u256>,
    balance2: starknet::storage::StoragePointer<felt252>,
}
#[feature("derive-storage")]
impl SlicedBalancePairSubPointersImpl<+starknet::storage_access::DeriveStorage<SlicedBalancePair>> of starknet::storage::SubPointers<SlicedBalancePair> {
    type SubPointersType = SlicedBalancePairSubPointers;
       fn sub_pointers(self: starknet::storage::StoragePointer<SlicedBalancePair>) -> SlicedBalancePairSubPointers {
                   let base_address = self.address;
        let mut current_offset = self.offset;
        let balance1_value = starknet::storage::StoragePointer {
            address: base_address,
            offset: current_offset,
        };
        current_offset = current_offset + starknet::Store::<u256>::size();
        let balance2_value = starknet::storage::StoragePointer {
            address: base_address,
            offset: current_offset,
        };
                SlicedBalancePairSubPointers {
           balance1: balance1_value,
           balance2: balance2_value,
        }
    }
}


lib.cairo:1:1
#[starknet::interface]
^********************^
impls:

impl HelloStarknetTraitDispatcherCopy of core::traits::Copy::<HelloStarknetTraitDispatcher>;
impl HelloStarknetTraitDispatcherDrop of core::traits::Drop::<HelloStarknetTraitDispatcher>;
impl HelloStarknetTraitDispatcherSerde of core::serde::Serde::<HelloStarknetTraitDispatcher> {
    fn serialize(self: @HelloStarknetTraitDispatcher, ref output: core::array::Array<felt252>) {
        core::serde::Serde::serialize(self.contract_address, ref output)
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<HelloStarknetTraitDispatcher> {
        core::option::Option::Some(HelloStarknetTraitDispatcher {
            contract_address: core::serde::Serde::deserialize(ref serialized)?,
        })
    }
}


lib.cairo:1:1
#[starknet::interface]
^********************^
starknet_derive:

impl StoreHelloStarknetTraitDispatcher of starknet::Store::<HelloStarknetTraitDispatcher> {
    fn read(address_domain: u32, base: starknet::storage_access::StorageBaseAddress) -> starknet::SyscallResult<HelloStarknetTraitDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            HelloStarknetTraitDispatcher {
                contract_address,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, value: HelloStarknetTraitDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write(address_domain, base, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<HelloStarknetTraitDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            HelloStarknetTraitDispatcher {
                contract_address,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8, value: HelloStarknetTraitDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write_at_offset(address_domain, base, offset, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ContractAddress>::size()
    }
}
#[feature("derive-storage")]
impl DeriveStorageHelloStarknetTraitDispatcher of starknet::storage_access::DeriveStorage::<HelloStarknetTraitDispatcher> {}


lib.cairo:1:1
#[starknet::interface]
^********************^
impls:

impl HelloStarknetTraitLibraryDispatcherCopy of core::traits::Copy::<HelloStarknetTraitLibraryDispatcher>;
impl HelloStarknetTraitLibraryDispatcherDrop of core::traits::Drop::<HelloStarknetTraitLibraryDispatcher>;
impl HelloStarknetTraitLibraryDispatcherSerde of core::serde::Serde::<HelloStarknetTraitLibraryDispatcher> {
    fn serialize(self: @HelloStarknetTraitLibraryDispatcher, ref output: core::array::Array<felt252>) {
        core::serde::Serde::serialize(self.class_hash, ref output)
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<HelloStarknetTraitLibraryDispatcher> {
        core::option::Option::Some(HelloStarknetTraitLibraryDispatcher {
            class_hash: core::serde::Serde::deserialize(ref serialized)?,
        })
    }
}


lib.cairo:1:1
#[starknet::interface]
^********************^
starknet_derive:

impl StoreHelloStarknetTraitLibraryDispatcher of starknet::Store::<HelloStarknetTraitLibraryDispatcher> {
    fn read(address_domain: u32, base: starknet::storage_access::StorageBaseAddress) -> starknet::SyscallResult<HelloStarknetTraitLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            HelloStarknetTraitLibraryDispatcher {
                class_hash,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, value: HelloStarknetTraitLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write(address_domain, base, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<HelloStarknetTraitLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            HelloStarknetTraitLibraryDispatcher {
                class_hash,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8, value: HelloStarknetTraitLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write_at_offset(address_domain, base, offset, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ClassHash>::size()
    }
}
#[feature("derive-storage")]
impl DeriveStorageHelloStarknetTraitLibraryDispatcher of starknet::storage_access::DeriveStorage::<HelloStarknetTraitLibraryDispatcher> {}


lib.cairo:1:1
#[starknet::interface]
^********************^
impls:

impl HelloStarknetTraitSafeLibraryDispatcherCopy of core::traits::Copy::<HelloStarknetTraitSafeLibraryDispatcher>;
impl HelloStarknetTraitSafeLibraryDispatcherDrop of core::traits::Drop::<HelloStarknetTraitSafeLibraryDispatcher>;
impl HelloStarknetTraitSafeLibraryDispatcherSerde of core::serde::Serde::<HelloStarknetTraitSafeLibraryDispatcher> {
    fn serialize(self: @HelloStarknetTraitSafeLibraryDispatcher, ref output: core::array::Array<felt252>) {
        core::serde::Serde::serialize(self.class_hash, ref output)
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<HelloStarknetTraitSafeLibraryDispatcher> {
        core::option::Option::Some(HelloStarknetTraitSafeLibraryDispatcher {
            class_hash: core::serde::Serde::deserialize(ref serialized)?,
        })
    }
}


lib.cairo:1:1
#[starknet::interface]
^********************^
starknet_derive:

impl StoreHelloStarknetTraitSafeLibraryDispatcher of starknet::Store::<HelloStarknetTraitSafeLibraryDispatcher> {
    fn read(address_domain: u32, base: starknet::storage_access::StorageBaseAddress) -> starknet::SyscallResult<HelloStarknetTraitSafeLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            HelloStarknetTraitSafeLibraryDispatcher {
                class_hash,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, value: HelloStarknetTraitSafeLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write(address_domain, base, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<HelloStarknetTraitSafeLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            HelloStarknetTraitSafeLibraryDispatcher {
                class_hash,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8, value: HelloStarknetTraitSafeLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write_at_offset(address_domain, base, offset, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ClassHash>::size()
    }
}
#[feature("derive-storage")]
impl DeriveStorageHelloStarknetTraitSafeLibraryDispatcher of starknet::storage_access::DeriveStorage::<HelloStarknetTraitSafeLibraryDispatcher> {}


lib.cairo:1:1
#[starknet::interface]
^********************^
impls:

impl HelloStarknetTraitSafeDispatcherCopy of core::traits::Copy::<HelloStarknetTraitSafeDispatcher>;
impl HelloStarknetTraitSafeDispatcherDrop of core::traits::Drop::<HelloStarknetTraitSafeDispatcher>;
impl HelloStarknetTraitSafeDispatcherSerde of core::serde::Serde::<HelloStarknetTraitSafeDispatcher> {
    fn serialize(self: @HelloStarknetTraitSafeDispatcher, ref output: core::array::Array<felt252>) {
        core::serde::Serde::serialize(self.contract_address, ref output)
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<HelloStarknetTraitSafeDispatcher> {
        core::option::Option::Some(HelloStarknetTraitSafeDispatcher {
            contract_address: core::serde::Serde::deserialize(ref serialized)?,
        })
    }
}


lib.cairo:1:1
#[starknet::interface]
^********************^
starknet_derive:

impl StoreHelloStarknetTraitSafeDispatcher of starknet::Store::<HelloStarknetTraitSafeDispatcher> {
    fn read(address_domain: u32, base: starknet::storage_access::StorageBaseAddress) -> starknet::SyscallResult<HelloStarknetTraitSafeDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            HelloStarknetTraitSafeDispatcher {
                contract_address,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, value: HelloStarknetTraitSafeDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write(address_domain, base, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<HelloStarknetTraitSafeDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            HelloStarknetTraitSafeDispatcher {
                contract_address,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8, value: HelloStarknetTraitSafeDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write_at_offset(address_domain, base, offset, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ContractAddress>::size()
    }
}
#[feature("derive-storage")]
impl DeriveStorageHelloStarknetTraitSafeDispatcher of starknet::storage_access::DeriveStorage::<HelloStarknetTraitSafeDispatcher> {}


lib.cairo:21:1
#[starknet::storage_node]
^***********************^
impls:

impl BalancePairStorageNodeDrop of core::traits::Drop::<BalancePairStorageNode>;
impl BalancePairStorageNodeCopy of core::traits::Copy::<BalancePairStorageNode>;


lib.cairo:27:1
#[derive(Drop, starknet::Store)]
^******************************^
impls:

impl SlicedBalanceTrioSubPointersDrop of core::traits::Drop::<SlicedBalanceTrioSubPointers>;
impl SlicedBalanceTrioSubPointersCopy of core::traits::Copy::<SlicedBalanceTrioSubPointers>;


lib.cairo:34:1
#[derive(Drop, starknet::Store)]
^******************************^
impls:

impl SlicedBalancePairSubPointersDrop of core::traits::Drop::<SlicedBalancePairSubPointers>;
impl SlicedBalancePairSubPointersCopy of core::traits::Copy::<SlicedBalancePairSubPointers>;


lib.cairo:41:1
#[starknet::contract]
^*******************^
contract:

#[event]
#[derive(Drop, starknet::Event)]
pub enum Event {}


pub struct Storage {
          pub balance: usize,
          pub user_balance: Map<usize, usize>,
          pub user_balance_subbalance: Map<usize, Map<usize, usize>>,
          pub legacy_map_balace: LegacyMap<usize, usize>,
          pub balance_pair: BalancePair,
          pub sliced_balance_trio: SlicedBalanceTrio,
}

#[derive(Drop, Copy)]
pub struct ContractStorageBase {
    pub balance: starknet::storage::StorageBase<usize>,
    pub user_balance: starknet::storage::StorageBase<Map<usize, usize>>,
    pub user_balance_subbalance: starknet::storage::StorageBase<Map<usize, Map<usize, usize>>>,
    pub legacy_map_balace: starknet::storage::StorageBase<LegacyMap<usize, usize>>,
    pub balance_pair: starknet::storage::StorageBase<BalancePair>,
    pub sliced_balance_trio: starknet::storage::StorageBase<SlicedBalanceTrio>,
}
#[derive(Drop, Copy)]
pub struct ContractStorageBaseMut {
    pub balance: starknet::storage::StorageBase<starknet::storage::Mutable<usize>>,
    pub user_balance: starknet::storage::StorageBase<starknet::storage::Mutable<Map<usize, usize>>>,
    pub user_balance_subbalance: starknet::storage::StorageBase<starknet::storage::Mutable<Map<usize, Map<usize, usize>>>>,
    pub legacy_map_balace: starknet::storage::StorageBase<starknet::storage::Mutable<LegacyMap<usize, usize>>>,
    pub balance_pair: starknet::storage::StorageBase<starknet::storage::Mutable<BalancePair>>,
    pub sliced_balance_trio: starknet::storage::StorageBase<starknet::storage::Mutable<SlicedBalanceTrio>>,
}
impl StorageBaseImpl of starknet::storage::StorageBaseTrait<ContractState> {
    type BaseType = ContractStorageBase;
    type BaseMutType = ContractStorageBaseMut;
    fn storage_base(self: @ContractState) -> ContractStorageBase {
        ContractStorageBase {
           balance: starknet::storage::StorageBase{ address: selector!("balance") },
           user_balance: starknet::storage::StorageBase{ address: selector!("user_balance") },
           user_balance_subbalance: starknet::storage::StorageBase{ address: selector!("user_balance_subbalance") },
           legacy_map_balace: starknet::storage::StorageBase{ address: selector!("legacy_map_balace") },
           balance_pair: starknet::storage::StorageBase{ address: selector!("balance_pair") },
           sliced_balance_trio: starknet::storage::StorageBase{ address: selector!("sliced_balance_trio") },
        }
    }
    fn storage_base_mut(ref self: ContractState) -> ContractStorageBaseMut {
        ContractStorageBaseMut {
           balance: starknet::storage::StorageBase{ address: selector!("balance") },
           user_balance: starknet::storage::StorageBase{ address: selector!("user_balance") },
           user_balance_subbalance: starknet::storage::StorageBase{ address: selector!("user_balance_subbalance") },
           legacy_map_balace: starknet::storage::StorageBase{ address: selector!("legacy_map_balace") },
           balance_pair: starknet::storage::StorageBase{ address: selector!("balance_pair") },
           sliced_balance_trio: starknet::storage::StorageBase{ address: selector!("sliced_balance_trio") },
        }
    }
}
pub struct ContractState {
}

impl ContractStateDrop of Drop<ContractState> {}
 
impl ContractStateDeref of core::ops::SnapshotDeref<ContractState> {
    type Target = ContractStorageBase;
    fn snapshot_deref(self: @ContractState) -> ContractStorageBase {
        self.storage_base()
    }
}
impl ContractStateDerefMut of core::ops::DerefMut<ContractState> {
    type Target = ContractStorageBaseMut;
    fn deref_mut(ref self: ContractState) -> ContractStorageBaseMut {
        self.storage_base_mut()
    }
}
pub fn unsafe_new_contract_state() -> ContractState {
    ContractState {
    }
}
#[cfg(target: 'test')]
#[inline(always)]
pub fn contract_state_for_testing() -> ContractState {
    unsafe_new_contract_state()
}

// TODO(Gil): This generates duplicate diagnostics because of the plugin system, squash the duplicates into one.
#[deprecated(
    feature: "deprecated_legacy_map",
    note: "Use `starknet::storage::Map` instead."
)]
use starknet::storage::Map as LegacyMap;
#[cfg(target: 'test')]
pub const TEST_CLASS_HASH: felt252 = 0x32ff3e84911eec8e16c1df3121f455d2453bb6d5bc88bac41a586b40804d2d8;

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, core::ec::EcOp, Poseidon, SegmentArena, core::circuit::RangeCheck96, core::circuit::AddMod, core::circuit::MulMod, GasBuiltin, System)]
fn __wrapper__HelloStarknetImpl__increase_balance(mut data: Span::<felt252>) -> Span::<felt252> {
    core::internal::require_implicit::<System>();
    core::internal::revoke_ap_tracking();
    core::option::OptionTraitImpl::expect(core::gas::withdraw_gas(), 'Out of gas');
    let __arg_amount = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<usize>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    assert(core::array::SpanTrait::is_empty(data), 'Input too long for arguments');
    core::option::OptionTraitImpl::expect(
        core::gas::withdraw_gas_all(core::gas::get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    HelloStarknetImpl::increase_balance(ref contract_state, __arg_amount);
    let mut arr = ArrayTrait::new();
    // References.
    // Result.
    core::array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, core::ec::EcOp, Poseidon, SegmentArena, core::circuit::RangeCheck96, core::circuit::AddMod, core::circuit::MulMod, GasBuiltin, System)]
fn __wrapper__HelloStarknetImpl__get_balance(mut data: Span::<felt252>) -> Span::<felt252> {
    core::internal::require_implicit::<System>();
    core::internal::revoke_ap_tracking();
    core::option::OptionTraitImpl::expect(core::gas::withdraw_gas(), 'Out of gas');
    
    assert(core::array::SpanTrait::is_empty(data), 'Input too long for arguments');
    core::option::OptionTraitImpl::expect(
        core::gas::withdraw_gas_all(core::gas::get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    let res = HelloStarknetImpl::get_balance(@contract_state, );
    let mut arr = ArrayTrait::new();
    // References.
    // Result.
    core::serde::Serde::<usize>::serialize(@res, ref arr);
    core::array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, core::ec::EcOp, Poseidon, SegmentArena, core::circuit::RangeCheck96, core::circuit::AddMod, core::circuit::MulMod, GasBuiltin, System)]
fn __wrapper__HelloStarknetImpl__get_user_balance(mut data: Span::<felt252>) -> Span::<felt252> {
    core::internal::require_implicit::<System>();
    core::internal::revoke_ap_tracking();
    core::option::OptionTraitImpl::expect(core::gas::withdraw_gas(), 'Out of gas');
    let __arg_user_id = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<usize>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    assert(core::array::SpanTrait::is_empty(data), 'Input too long for arguments');
    core::option::OptionTraitImpl::expect(
        core::gas::withdraw_gas_all(core::gas::get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    let res = HelloStarknetImpl::get_user_balance(@contract_state, __arg_user_id);
    let mut arr = ArrayTrait::new();
    // References.
    // Result.
    core::serde::Serde::<usize>::serialize(@res, ref arr);
    core::array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, core::ec::EcOp, Poseidon, SegmentArena, core::circuit::RangeCheck96, core::circuit::AddMod, core::circuit::MulMod, GasBuiltin, System)]
fn __wrapper__HelloStarknetImpl__get_legacy_user_balance(mut data: Span::<felt252>) -> Span::<felt252> {
    core::internal::require_implicit::<System>();
    core::internal::revoke_ap_tracking();
    core::option::OptionTraitImpl::expect(core::gas::withdraw_gas(), 'Out of gas');
    let __arg_user_id = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<usize>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    assert(core::array::SpanTrait::is_empty(data), 'Input too long for arguments');
    core::option::OptionTraitImpl::expect(
        core::gas::withdraw_gas_all(core::gas::get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    let res = HelloStarknetImpl::get_legacy_user_balance(@contract_state, __arg_user_id);
    let mut arr = ArrayTrait::new();
    // References.
    // Result.
    core::serde::Serde::<usize>::serialize(@res, ref arr);
    core::array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, core::ec::EcOp, Poseidon, SegmentArena, core::circuit::RangeCheck96, core::circuit::AddMod, core::circuit::MulMod, GasBuiltin, System)]
fn __wrapper__HelloStarknetImpl__set_user_balance(mut data: Span::<felt252>) -> Span::<felt252> {
    core::internal::require_implicit::<System>();
    core::internal::revoke_ap_tracking();
    core::option::OptionTraitImpl::expect(core::gas::withdraw_gas(), 'Out of gas');
    let __arg_user_id = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<usize>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_balance = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<usize>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    assert(core::array::SpanTrait::is_empty(data), 'Input too long for arguments');
    core::option::OptionTraitImpl::expect(
        core::gas::withdraw_gas_all(core::gas::get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    HelloStarknetImpl::set_user_balance(ref contract_state, __arg_user_id, __arg_balance);
    let mut arr = ArrayTrait::new();
    // References.
    // Result.
    core::array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, core::ec::EcOp, Poseidon, SegmentArena, core::circuit::RangeCheck96, core::circuit::AddMod, core::circuit::MulMod, GasBuiltin, System)]
fn __wrapper__HelloStarknetImpl__set_legacy_user_balance(mut data: Span::<felt252>) -> Span::<felt252> {
    core::internal::require_implicit::<System>();
    core::internal::revoke_ap_tracking();
    core::option::OptionTraitImpl::expect(core::gas::withdraw_gas(), 'Out of gas');
    let __arg_user_id = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<usize>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_balance = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<usize>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    assert(core::array::SpanTrait::is_empty(data), 'Input too long for arguments');
    core::option::OptionTraitImpl::expect(
        core::gas::withdraw_gas_all(core::gas::get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    HelloStarknetImpl::set_legacy_user_balance(ref contract_state, __arg_user_id, __arg_balance);
    let mut arr = ArrayTrait::new();
    // References.
    // Result.
    core::array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, core::ec::EcOp, Poseidon, SegmentArena, core::circuit::RangeCheck96, core::circuit::AddMod, core::circuit::MulMod, GasBuiltin, System)]
fn __wrapper__HelloStarknetImpl__get_user_balance_subbalance(mut data: Span::<felt252>) -> Span::<felt252> {
    core::internal::require_implicit::<System>();
    core::internal::revoke_ap_tracking();
    core::option::OptionTraitImpl::expect(core::gas::withdraw_gas(), 'Out of gas');
    let __arg_user_id = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<usize>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_subbalance_id = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<usize>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    assert(core::array::SpanTrait::is_empty(data), 'Input too long for arguments');
    core::option::OptionTraitImpl::expect(
        core::gas::withdraw_gas_all(core::gas::get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    let res = HelloStarknetImpl::get_user_balance_subbalance(@contract_state, __arg_user_id, __arg_subbalance_id);
    let mut arr = ArrayTrait::new();
    // References.
    // Result.
    core::serde::Serde::<usize>::serialize(@res, ref arr);
    core::array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, core::ec::EcOp, Poseidon, SegmentArena, core::circuit::RangeCheck96, core::circuit::AddMod, core::circuit::MulMod, GasBuiltin, System)]
fn __wrapper__HelloStarknetImpl__get_balance_pair_balance1(mut data: Span::<felt252>) -> Span::<felt252> {
    core::internal::require_implicit::<System>();
    core::internal::revoke_ap_tracking();
    core::option::OptionTraitImpl::expect(core::gas::withdraw_gas(), 'Out of gas');
    
    assert(core::array::SpanTrait::is_empty(data), 'Input too long for arguments');
    core::option::OptionTraitImpl::expect(
        core::gas::withdraw_gas_all(core::gas::get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    let res = HelloStarknetImpl::get_balance_pair_balance1(@contract_state, );
    let mut arr = ArrayTrait::new();
    // References.
    // Result.
    core::serde::Serde::<u256>::serialize(@res, ref arr);
    core::array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, core::ec::EcOp, Poseidon, SegmentArena, core::circuit::RangeCheck96, core::circuit::AddMod, core::circuit::MulMod, GasBuiltin, System)]
fn __wrapper__HelloStarknetImpl__get_balance_pair_balance2(mut data: Span::<felt252>) -> Span::<felt252> {
    core::internal::require_implicit::<System>();
    core::internal::revoke_ap_tracking();
    core::option::OptionTraitImpl::expect(core::gas::withdraw_gas(), 'Out of gas');
    
    assert(core::array::SpanTrait::is_empty(data), 'Input too long for arguments');
    core::option::OptionTraitImpl::expect(
        core::gas::withdraw_gas_all(core::gas::get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    let res = HelloStarknetImpl::get_balance_pair_balance2(@contract_state, );
    let mut arr = ArrayTrait::new();
    // References.
    // Result.
    core::serde::Serde::<felt252>::serialize(@res, ref arr);
    core::array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, core::ec::EcOp, Poseidon, SegmentArena, core::circuit::RangeCheck96, core::circuit::AddMod, core::circuit::MulMod, GasBuiltin, System)]
fn __wrapper__HelloStarknetImpl__get_balance_trio_sub_member(mut data: Span::<felt252>) -> Span::<felt252> {
    core::internal::require_implicit::<System>();
    core::internal::revoke_ap_tracking();
    core::option::OptionTraitImpl::expect(core::gas::withdraw_gas(), 'Out of gas');
    
    assert(core::array::SpanTrait::is_empty(data), 'Input too long for arguments');
    core::option::OptionTraitImpl::expect(
        core::gas::withdraw_gas_all(core::gas::get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    let res = HelloStarknetImpl::get_balance_trio_sub_member(@contract_state, );
    let mut arr = ArrayTrait::new();
    // References.
    // Result.
    core::serde::Serde::<u128>::serialize(@res, ref arr);
    core::array::ArrayTrait::span(@arr)
}


pub mod __external {
    pub use super::__wrapper__HelloStarknetImpl__increase_balance as increase_balance;
    pub use super::__wrapper__HelloStarknetImpl__get_balance as get_balance;
    pub use super::__wrapper__HelloStarknetImpl__get_user_balance as get_user_balance;
    pub use super::__wrapper__HelloStarknetImpl__get_legacy_user_balance as get_legacy_user_balance;
    pub use super::__wrapper__HelloStarknetImpl__set_user_balance as set_user_balance;
    pub use super::__wrapper__HelloStarknetImpl__set_legacy_user_balance as set_legacy_user_balance;
    pub use super::__wrapper__HelloStarknetImpl__get_user_balance_subbalance as get_user_balance_subbalance;
    pub use super::__wrapper__HelloStarknetImpl__get_balance_pair_balance1 as get_balance_pair_balance1;
    pub use super::__wrapper__HelloStarknetImpl__get_balance_pair_balance2 as get_balance_pair_balance2;
    pub use super::__wrapper__HelloStarknetImpl__get_balance_trio_sub_member as get_balance_trio_sub_member;
}
pub mod __l1_handler {
}
pub mod __constructor {
}
    impl ContractStateEventEmitter of starknet::event::EventEmitter<
        ContractState, Event
    > {
        fn emit<S, impl IntoImp: core::traits::Into<S, Event>>(
            ref self: ContractState, event: S
        ) {
            let event: Event = core::traits::Into::into(event);
            let mut keys = Default::<core::array::Array>::default();
            let mut data = Default::<core::array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTrait::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    core::array::ArrayTrait::span(@keys),
                    core::array::ArrayTrait::span(@data),
                )
            )
        }
    }



lib.cairo:41:1
#[starknet::contract]
^*******************^
impls:

impl EventDrop of core::traits::Drop::<Event>;


lib.cairo:41:1
#[starknet::contract]
^*******************^
starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let __selector__ = *core::array::SpanTrait::pop_front(ref keys)?;
        Option::None
    }
}



lib.cairo:41:1
#[starknet::contract]
^*******************^
impls:

impl ContractStorageBaseDrop of core::traits::Drop::<ContractStorageBase>;
impl ContractStorageBaseCopy of core::traits::Copy::<ContractStorageBase>;


lib.cairo:41:1
#[starknet::contract]
^*******************^
impls:

impl ContractStorageBaseMutDrop of core::traits::Drop::<ContractStorageBaseMut>;
impl ContractStorageBaseMutCopy of core::traits::Copy::<ContractStorageBaseMut>;

//! > expected_diagnostics
warning: Usage of deprecated feature `"deprecated_legacy_map"` with no `#[feature("deprecated_legacy_map")]` attribute. Note: "Use `starknet::storage::Map` instead."
 --> lib.cairo:50:28
        legacy_map_balace: LegacyMap<usize, usize>,
                           ^*******^

warning: Usage of deprecated feature `"deprecated_legacy_map"` with no `#[feature("deprecated_legacy_map")]` attribute. Note: "Use `starknet::storage::Map` instead."
 --> lib.cairo:50:28
        legacy_map_balace: LegacyMap<usize, usize>,
                           ^*******^

warning: Usage of deprecated feature `"deprecated_legacy_map"` with no `#[feature("deprecated_legacy_map")]` attribute. Note: "Use `starknet::storage::Map` instead."
 --> lib.cairo:50:28
        legacy_map_balace: LegacyMap<usize, usize>,
                           ^*******^
