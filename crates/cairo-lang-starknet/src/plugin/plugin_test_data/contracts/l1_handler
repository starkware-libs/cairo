//! > Test valid expansion of a simple starknet contract.

//! > test_runner_name
ExpandContractTestRunner(allow_diagnostics: false)

//! > cairo_code
#[starknet::contract]
mod test_contract {
    #[storage]
    struct Storage {}

    #[l1_handler]
    fn good_l1_handler(ref self: ContractState, from_address: felt252, arg: felt252) {}

    #[l1_handler]
    fn good_l1_handler_ignored(ref self: ContractState, _from_address: felt252, arg: felt252) {}
}

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod test_contract {
    #[storage]
    struct Storage {}

    #[l1_handler]
    fn good_l1_handler(ref self: ContractState, from_address: felt252, arg: felt252) {}

    #[l1_handler]
    fn good_l1_handler_ignored(ref self: ContractState, _from_address: felt252, arg: felt252) {}
}

contract:

#[event] #[derive(Drop, starknet::Event)] enum Event {}

   impl ContractStateEventEmitter of starknet::event::EventEmitter<ContractState, Event> {
       fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ContractState, event: S) {
           let event: Event = traits::Into::into(event);
           let mut keys = Default::<array::Array>::default();
           let mut data = Default::<array::Array>::default();
           starknet::Event::append_keys_and_data(@event, ref keys, ref data);
           starknet::SyscallResultTraitImpl::unwrap_syscall(
               starknet::syscalls::emit_event_syscall(
                   array::ArrayTrait::span(@keys),
                   array::ArrayTrait::span(@data),
               )
           )
       }
   }

    struct ContractState {
    }
    impl ContractStateDrop of Drop<ContractState> {}
    #[inline(always)]
    fn unsafe_new_contract_state() -> ContractState {
        ContractState {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn contract_state_for_testing() -> ContractState {
        unsafe_new_contract_state()
    }
    
#[cfg(test)]
const TEST_CLASS_HASH: felt252 = 0x32a1956d182625bfe7f9834635d01441624366b326c190ecbf557e699f94b76;

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper_good_l1_handler(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_from_address = option::OptionTraitImpl::expect(
        serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_arg = option::OptionTraitImpl::expect(
        serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    good_l1_handler(ref contract_state, __arg_from_address, __arg_arg);
    let mut arr = array::array_new();
    // References.
    // Result.
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper_good_l1_handler_ignored(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg__from_address = option::OptionTraitImpl::expect(
        serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_arg = option::OptionTraitImpl::expect(
        serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    good_l1_handler_ignored(ref contract_state, __arg__from_address, __arg_arg);
    let mut arr = array::array_new();
    // References.
    // Result.
    array::ArrayTrait::span(@arr)
}


    mod __external {
    }

    mod __l1_handler {
        use super::__wrapper_good_l1_handler as good_l1_handler;
        use super::__wrapper_good_l1_handler_ignored as good_l1_handler_ignored;
    }

    mod __constructor {
    }



impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
        Option::None
    }
}

//! > expected_diagnostics

//! > ==========================================================================

//! > Test erroneous expansion of a simple starknet contract.

//! > test_runner_name
ExpandContractTestRunner(allow_diagnostics: true)

//! > cairo_code
#[starknet::contract]
mod test_contract {
    #[l1_handler]
    fn l1_handler_no_params(ref self: ContractState) {}

    #[l1_handler]
    fn l1_handler_wrong_first_param_name(ref self: ContractState, abc: felt252) {}

    #[l1_handler]
    fn l1_handler_wrong_first_param_type(ref self: ContractState, from_address: u128) {}
}

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod test_contract {
    #[l1_handler]
    fn l1_handler_no_params(ref self: ContractState) {}

    #[l1_handler]
    fn l1_handler_wrong_first_param_name(ref self: ContractState, abc: felt252) {}

    #[l1_handler]
    fn l1_handler_wrong_first_param_type(ref self: ContractState, from_address: u128) {}
}

//! > expected_diagnostics
error: Plugin diagnostic: Contracts must define a 'Storage' struct.
 --> lib.cairo:1:1
#[starknet::contract]
^*******************^

error: Type not found.
 --> lib.cairo:4:39
    fn l1_handler_no_params(ref self: ContractState) {}
                                      ^***********^

error: Type not found.
 --> lib.cairo:7:52
    fn l1_handler_wrong_first_param_name(ref self: ContractState, abc: felt252) {}
                                                   ^***********^

error: Type not found.
 --> lib.cairo:10:52
    fn l1_handler_wrong_first_param_type(ref self: ContractState, from_address: u128) {}
                                                   ^***********^
