//! > Test expansion of a simple starknet contract.

//! > test_runner_name
ExpandContractTestRunner(allow_diagnostics: false)

//! > cairo_code
#[starknet::contract]
mod test_contract {
    use starknet::class_hash::ClassHash;
    use starknet::contract_address::ContractAddress;
    use starknet::storage_access::StorageAddress;

    #[storage]
    struct Storage {}

    fn internal_func() -> felt252 {
        1
    }

    #[external(v0)]
    fn get_something(self: @ContractState, ref arg: felt252, mut num: felt252) -> felt252 {
        num += 1;
        num
    }

    #[external(v0)]
    fn set_something(ref self: ContractState, ref arg: felt252, num: felt252) {}

    #[l1_handler]
    fn l1_handler_func(ref self: ContractState, from_address: felt252, arg: felt252, num: felt252) {}

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        AwesomeEvent: AwesomeEvent,
        BestEventEver: BestEventEver,
    }
    #[derive(Drop, starknet::Event)]
    struct AwesomeEvent {
        x: felt252,
        data: Array::<felt252>,
    }
    #[derive(Drop, starknet::Event)]
    struct BestEventEver {}

    #[external(v0)]
    fn test_serde(
        ref self: ContractState,
        contract_address: ContractAddress,
        class_hash: ClassHash,
        storage_address: StorageAddress,
    ) {}
}

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod test_contract {
    use starknet::class_hash::ClassHash;
    use starknet::contract_address::ContractAddress;
    use starknet::storage_access::StorageAddress;

    #[storage]
    struct Storage {}

    fn internal_func() -> felt252 {
        1
    }

    #[external(v0)]
    fn get_something(self: @ContractState, ref arg: felt252, mut num: felt252) -> felt252 {
        num += 1;
        num
    }

    #[external(v0)]
    fn set_something(ref self: ContractState, ref arg: felt252, num: felt252) {}

    #[l1_handler]
    fn l1_handler_func(ref self: ContractState, from_address: felt252, arg: felt252, num: felt252) {}

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        AwesomeEvent: AwesomeEvent,
        BestEventEver: BestEventEver,
    }
    #[derive(Drop, starknet::Event)]
    struct AwesomeEvent {
        x: felt252,
        data: Array::<felt252>,
    }
    #[derive(Drop, starknet::Event)]
    struct BestEventEver {}

    #[external(v0)]
    fn test_serde(
        ref self: ContractState,
        contract_address: ContractAddress,
        class_hash: ClassHash,
        storage_address: StorageAddress,
    ) {}
}

contract:

use starknet::event::EventEmitter;

    impl ContractStateEventEmitter of EventEmitter<ContractState, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ContractState, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    struct ContractState {
    }
    impl ContractStateDrop of Drop<ContractState> {}
    #[inline(always)]
    fn unsafe_new_contract_state() -> ContractState {
        ContractState {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn contract_state_for_testing() -> ContractState {
        unsafe_new_contract_state()
    }
    
#[cfg(test)]
const TEST_CLASS_HASH: felt252 = 0x23beac7cb7e82c7f5e87d1938f705760cd22de93f3a5ad133f48f1fdbcc14c1;

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper_get_something(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let mut __arg_arg = option::OptionTraitImpl::expect(
        serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_num = option::OptionTraitImpl::expect(
        serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    let res = get_something(@contract_state, ref __arg_arg, __arg_num);
    let mut arr = array::array_new();
    // References.
            serde::Serde::<felt252>::serialize(@__arg_arg, ref arr);
    // Result.
    serde::Serde::<felt252>::serialize(@res, ref arr);
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper_set_something(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let mut __arg_arg = option::OptionTraitImpl::expect(
        serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_num = option::OptionTraitImpl::expect(
        serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    set_something(ref contract_state, ref __arg_arg, __arg_num);
    let mut arr = array::array_new();
    // References.
            serde::Serde::<felt252>::serialize(@__arg_arg, ref arr);
    // Result.
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper_l1_handler_func(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_from_address = option::OptionTraitImpl::expect(
        serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_arg = option::OptionTraitImpl::expect(
        serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    let __arg_num = option::OptionTraitImpl::expect(
        serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #3'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    l1_handler_func(ref contract_state, __arg_from_address, __arg_arg, __arg_num);
    let mut arr = array::array_new();
    // References.
    // Result.
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper_test_serde(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_contract_address = option::OptionTraitImpl::expect(
        serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_class_hash = option::OptionTraitImpl::expect(
        serde::Serde::<ClassHash>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    let __arg_storage_address = option::OptionTraitImpl::expect(
        serde::Serde::<StorageAddress>::deserialize(ref data),
        'Failed to deserialize param #3'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    test_serde(ref contract_state, __arg_contract_address, __arg_class_hash, __arg_storage_address);
    let mut arr = array::array_new();
    // References.
    // Result.
    array::ArrayTrait::span(@arr)
}


    mod __external {
        use super::__wrapper_get_something as get_something;
        use super::__wrapper_set_something as set_something;
        use super::__wrapper_test_serde as test_serde;
    }

    mod __l1_handler {
        use super::__wrapper_l1_handler_func as l1_handler_func;
    }

    mod __constructor {
    }


impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
            Event::AwesomeEvent(val) => {
                array::ArrayTrait::append(ref keys, selector!("AwesomeEvent"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
            Event::BestEventEver(val) => {
                array::ArrayTrait::append(ref keys, selector!("BestEventEver"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
            if selector == selector!("AwesomeEvent") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::AwesomeEvent(val));
            }
            if selector == selector!("BestEventEver") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::BestEventEver(val));
            }
        Option::None
    }
}
impl EventAwesomeEventIntoEvent of Into<AwesomeEvent, Event> {
    fn into(self: AwesomeEvent) -> Event {
        Event::AwesomeEvent(self)
    }
}
impl EventBestEventEverIntoEvent of Into<BestEventEver, Event> {
    fn into(self: BestEventEver) -> Event {
        Event::BestEventEver(self)
    }
}



impls:

impl AwesomeEventDrop of Drop::<AwesomeEvent>;


event_impl:

impl AwesomeEventIsEvent of starknet::Event<AwesomeEvent> {
    fn append_keys_and_data(
        self: @AwesomeEvent, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
                serde::Serde::serialize(self.x, ref data);
                serde::Serde::serialize(self.data, ref data);
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<AwesomeEvent> {
                let x = serde::Serde::deserialize(
                    ref data
                )?;
                let data = serde::Serde::deserialize(
                    ref data
                )?;
        Option::Some(AwesomeEvent {x, data, })
    }
}

impls:

impl BestEventEverDrop of Drop::<BestEventEver>;


event_impl:

impl BestEventEverIsEvent of starknet::Event<BestEventEver> {
    fn append_keys_and_data(
        self: @BestEventEver, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<BestEventEver> {
        Option::Some(BestEventEver {})
    }
}

//! > expected_diagnostics
