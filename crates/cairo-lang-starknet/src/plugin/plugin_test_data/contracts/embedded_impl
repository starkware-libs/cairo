//! > Test expansion of the outside implementations.

//! > test_runner_name
ExpandContractTestRunner(expect_diagnostics: true)

//! > cairo_code
#[starknet::embeddable]
#[generate_trait]
impl OutsideImpl<TContractState> of OutsideTrait<TContractState> {
    fn ret_3(self: @TContractState) -> felt252 {
        3
    }
    fn ret_identity(ref self: TContractState, from_address: felt252, value: felt252) -> felt252 {
        value
    }
}

#[starknet::contract]
mod empty_contract {
    #[storage]
    struct Storage { value: felt252, }

    #[abi(embed_v0)]
    impl WorkingUsage = super::OutsideImpl<ContractState>;
}

//! > generated_cairo_code
lib.cairo:

#[starknet::embeddable]
#[generate_trait]
impl OutsideImpl<TContractState> of OutsideTrait<TContractState> {
    fn ret_3(self: @TContractState) -> felt252 {
        3
    }
    fn ret_identity(ref self: TContractState, from_address: felt252, value: felt252) -> felt252 {
        value
    }
}

#[starknet::contract]
mod empty_contract {
    #[storage]
    struct Storage { value: felt252, }

    #[abi(embed_v0)]
    impl WorkingUsage = super::OutsideImpl<ContractState>;
}

generate_trait:

trait OutsideTrait<TContractState> {
    fn ret_3(self: @TContractState) -> felt252;
    fn ret_identity(ref self: TContractState, from_address: felt252, value: felt252) -> felt252;
}


embeddable:

trait UnsafeNewContractStateTraitForOutsideImpl<
    TContractState
> {
    fn unsafe_new_contract_state() -> TContractState;
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__OutsideImpl__ret_3<TContractState, impl UnsafeNewContractState: UnsafeNewContractStateTraitForOutsideImpl<TContractState>, impl TContractStateDrop: Drop<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    core::internal::require_implicit::<System>();
    core::internal::revoke_ap_tracking();
    core::option::OptionTraitImpl::expect(core::gas::withdraw_gas(), 'Out of gas');
    
    assert(core::array::SpanTrait::is_empty(data), 'Input too long for arguments');
    core::option::OptionTraitImpl::expect(
        core::gas::withdraw_gas_all(core::gas::get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    let res = OutsideImpl::<TContractState>::ret_3(@contract_state, );
    let mut arr = core::array::array_new();
    // References.
    // Result.
    core::serde::Serde::<felt252>::serialize(@res, ref arr);
    core::array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__OutsideImpl__ret_identity<TContractState, impl UnsafeNewContractState: UnsafeNewContractStateTraitForOutsideImpl<TContractState>, impl TContractStateDrop: Drop<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    core::internal::require_implicit::<System>();
    core::internal::revoke_ap_tracking();
    core::option::OptionTraitImpl::expect(core::gas::withdraw_gas(), 'Out of gas');
    let __arg_from_address = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_value = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    assert(core::array::SpanTrait::is_empty(data), 'Input too long for arguments');
    core::option::OptionTraitImpl::expect(
        core::gas::withdraw_gas_all(core::gas::get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    let res = OutsideImpl::<TContractState>::ret_identity(ref contract_state, __arg_from_address, __arg_value);
    let mut arr = core::array::array_new();
    // References.
    // Result.
    core::serde::Serde::<felt252>::serialize(@res, ref arr);
    core::array::ArrayTrait::span(@arr)
}



mod __external_OutsideImpl {
    pub use super::__wrapper__OutsideImpl__ret_3 as ret_3;
    pub use super::__wrapper__OutsideImpl__ret_identity as ret_identity;
}

mod __l1_handler_OutsideImpl {
}

mod __constructor_OutsideImpl {
}


contract:

#[event]
#[derive(Drop, starknet::Event)]
pub enum Event {}


    pub struct ContractState {
        pub value: value::ContractMemberState,
    }
    impl ContractStateDrop of Drop<ContractState> {}
    #[inline(always)]
    pub fn unsafe_new_contract_state() -> ContractState {
        ContractState {
            value: value::ContractMemberState {},
        }
    }
    #[cfg(test)]
    #[inline(always)]
    pub fn contract_state_for_testing() -> ContractState {
        unsafe_new_contract_state()
    }
    
    use value::InternalContractMemberStateTrait as valueContractMemberStateTrait;
    mod value {
        #[derive(Copy, Drop)]
        pub struct ContractMemberState {}
        pub trait InternalContractMemberStateTrait {
            fn address(self: @ContractMemberState) -> starknet::StorageBaseAddress;
            fn read(self: @ContractMemberState) -> felt252;
            fn write(ref self: ContractMemberState, value: felt252);
        }

        impl InternalContractMemberStateImpl of InternalContractMemberStateTrait {
            fn address(self: @ContractMemberState) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_const::<0x1afeeaff0ed5cee7d05a21078399c2f56226b0cd5657062500cef4c4e736f85>()
            }
            fn read(self: @ContractMemberState) -> felt252 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<felt252>::read(
                        address_domain,
                        InternalContractMemberStateImpl::address(self),
                    )
                )
            }
            fn write(ref self: ContractMemberState, value: felt252) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<felt252>::write(
                        address_domain,
                        InternalContractMemberStateImpl::address(@self),
                        value,
                    )
                )
            }
        }
    }
use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait
};
#[cfg(test)]
pub const TEST_CLASS_HASH: felt252 = 0x2642978564a46e618664a6067eb6f36304e4408bd713c2bc8c637d865371013;

impl ContractStateOutsideImpl of
    super::UnsafeNewContractStateTraitForOutsideImpl<ContractState> {
    fn unsafe_new_contract_state() -> ContractState {
        unsafe_new_contract_state()
    }
}

pub mod __external {
}
pub mod __l1_handler {
}
pub mod __constructor {
}
    impl ContractStateEventEmitter of starknet::event::EventEmitter<
        ContractState, Event
    > {
        fn emit<S, impl IntoImp: core::traits::Into<S, Event>>(
            ref self: ContractState, event: S
        ) {
            let event: Event = core::traits::Into::into(event);
            let mut keys = Default::<core::array::Array>::default();
            let mut data = Default::<core::array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    core::array::ArrayTrait::span(@keys),
                    core::array::ArrayTrait::span(@data),
                )
            )
        }
    }



impls:

impl EventDrop of core::traits::Drop::<Event>;


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let __selector__ = *core::array::SpanTrait::pop_front(ref keys)?;
        Option::None
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: Failed to generate ABI: An embedded impl must be an impl of a trait marked with #[starknet::interface].
 --> lib.cairo:12:1
#[starknet::contract]
^*******************^

//! > ==========================================================================

//! > Test diagnostics for supplying disallowed impls.

//! > test_runner_name
ExpandContractTestRunner(expect_diagnostics: true)

//! > cairo_code
#[starknet::embeddable]
#[generate_trait]
impl OutsideImplWithDestruct<
    TContractState,
    impl DisallowedDestruct: Destruct<TContractState>,
> of OutsideTraitWithDestruct<TContractState> {
    fn ret_3(self: @TContractState) -> felt252 {
        3
    }
}

#[starknet::embeddable]
#[generate_trait]
impl OutsideImplWithPanicDestruct<
    TContractState,
    impl DisallowedPanicDestruct: PanicDestruct<TContractState>
> of OutsideTraitWithPanicDestruct<TContractState> {
    fn ret_5(self: @TContractState) -> felt252 {
        5
    }
}

#[starknet::contract]
mod empty_contract {
    #[storage]
    struct Storage {}

    #[abi(embed_v0)]
    impl Usage1 = super::OutsideImplWithDestruct<ContractState>;

    #[abi(embed_v0)]
    impl Usage2 = super::OutsideImplWithPanicDestruct<ContractState>;
}

//! > generated_cairo_code
lib.cairo:

#[starknet::embeddable]
#[generate_trait]
impl OutsideImplWithDestruct<
    TContractState,
    impl DisallowedDestruct: Destruct<TContractState>,
> of OutsideTraitWithDestruct<TContractState> {
    fn ret_3(self: @TContractState) -> felt252 {
        3
    }
}

#[starknet::embeddable]
#[generate_trait]
impl OutsideImplWithPanicDestruct<
    TContractState,
    impl DisallowedPanicDestruct: PanicDestruct<TContractState>
> of OutsideTraitWithPanicDestruct<TContractState> {
    fn ret_5(self: @TContractState) -> felt252 {
        5
    }
}

#[starknet::contract]
mod empty_contract {
    #[storage]
    struct Storage {}

    #[abi(embed_v0)]
    impl Usage1 = super::OutsideImplWithDestruct<ContractState>;

    #[abi(embed_v0)]
    impl Usage2 = super::OutsideImplWithPanicDestruct<ContractState>;
}

generate_trait:

trait OutsideTraitWithDestruct<
    TContractState,
    impl DisallowedDestruct: Destruct<TContractState>,
> {
    fn ret_3(self: @TContractState) -> felt252;
}


embeddable:

trait UnsafeNewContractStateTraitForOutsideImplWithDestruct<
    TContractState
> {
    fn unsafe_new_contract_state() -> TContractState;
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__OutsideImplWithDestruct__ret_3<TContractState,
    impl DisallowedDestruct: Destruct<TContractState>,impl UnsafeNewContractState: UnsafeNewContractStateTraitForOutsideImplWithDestruct<TContractState>, impl TContractStateDrop: Drop<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    core::internal::require_implicit::<System>();
    core::internal::revoke_ap_tracking();
    core::option::OptionTraitImpl::expect(core::gas::withdraw_gas(), 'Out of gas');
    
    assert(core::array::SpanTrait::is_empty(data), 'Input too long for arguments');
    core::option::OptionTraitImpl::expect(
        core::gas::withdraw_gas_all(core::gas::get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    let res = OutsideImplWithDestruct::<TContractState, DisallowedDestruct>::ret_3(@contract_state, );
    let mut arr = core::array::array_new();
    // References.
    // Result.
    core::serde::Serde::<felt252>::serialize(@res, ref arr);
    core::array::ArrayTrait::span(@arr)
}



mod __external_OutsideImplWithDestruct {
    pub use super::__wrapper__OutsideImplWithDestruct__ret_3 as ret_3;
}

mod __l1_handler_OutsideImplWithDestruct {
}

mod __constructor_OutsideImplWithDestruct {
}


generate_trait:

trait OutsideTraitWithPanicDestruct<
    TContractState,
    impl DisallowedPanicDestruct: PanicDestruct<TContractState>
> {
    fn ret_5(self: @TContractState) -> felt252;
}


embeddable:

trait UnsafeNewContractStateTraitForOutsideImplWithPanicDestruct<
    TContractState
> {
    fn unsafe_new_contract_state() -> TContractState;
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__OutsideImplWithPanicDestruct__ret_5<TContractState,
    impl DisallowedPanicDestruct: PanicDestruct<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForOutsideImplWithPanicDestruct<TContractState>, impl TContractStateDrop: Drop<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    core::internal::require_implicit::<System>();
    core::internal::revoke_ap_tracking();
    core::option::OptionTraitImpl::expect(core::gas::withdraw_gas(), 'Out of gas');
    
    assert(core::array::SpanTrait::is_empty(data), 'Input too long for arguments');
    core::option::OptionTraitImpl::expect(
        core::gas::withdraw_gas_all(core::gas::get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    let res = OutsideImplWithPanicDestruct::<TContractState, DisallowedPanicDestruct>::ret_5(@contract_state, );
    let mut arr = core::array::array_new();
    // References.
    // Result.
    core::serde::Serde::<felt252>::serialize(@res, ref arr);
    core::array::ArrayTrait::span(@arr)
}



mod __external_OutsideImplWithPanicDestruct {
    pub use super::__wrapper__OutsideImplWithPanicDestruct__ret_5 as ret_5;
}

mod __l1_handler_OutsideImplWithPanicDestruct {
}

mod __constructor_OutsideImplWithPanicDestruct {
}


contract:

#[event]
#[derive(Drop, starknet::Event)]
pub enum Event {}


    pub struct ContractState {
    }
    impl ContractStateDrop of Drop<ContractState> {}
    #[inline(always)]
    pub fn unsafe_new_contract_state() -> ContractState {
        ContractState {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    pub fn contract_state_for_testing() -> ContractState {
        unsafe_new_contract_state()
    }
    
use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait
};
#[cfg(test)]
pub const TEST_CLASS_HASH: felt252 = 0x2f3505035216cb9786b44e88c45f03e355e52c775f1b6ee6be27556e20667b;

impl ContractStateOutsideImplWithDestruct of
    super::UnsafeNewContractStateTraitForOutsideImplWithDestruct<ContractState> {
    fn unsafe_new_contract_state() -> ContractState {
        unsafe_new_contract_state()
    }
}
impl ContractStateOutsideImplWithPanicDestruct of
    super::UnsafeNewContractStateTraitForOutsideImplWithPanicDestruct<ContractState> {
    fn unsafe_new_contract_state() -> ContractState {
        unsafe_new_contract_state()
    }
}

pub mod __external {
}
pub mod __l1_handler {
}
pub mod __constructor {
}
    impl ContractStateEventEmitter of starknet::event::EventEmitter<
        ContractState, Event
    > {
        fn emit<S, impl IntoImp: core::traits::Into<S, Event>>(
            ref self: ContractState, event: S
        ) {
            let event: Event = core::traits::Into::into(event);
            let mut keys = Default::<core::array::Array>::default();
            let mut data = Default::<core::array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    core::array::ArrayTrait::span(@keys),
                    core::array::ArrayTrait::span(@data),
                )
            )
        }
    }



impls:

impl EventDrop of core::traits::Drop::<Event>;


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let __selector__ = *core::array::SpanTrait::pop_front(ref keys)?;
        Option::None
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: `embeddable` impls can't have impl generic parameters of `Destruct<TContractState>` or `PanicDestruct<TContractState>`.
 --> lib.cairo:5:5
    impl DisallowedDestruct: Destruct<TContractState>,
    ^***********************************************^

error: Plugin diagnostic: `embeddable` impls can't have impl generic parameters of `Destruct<TContractState>` or `PanicDestruct<TContractState>`.
 --> lib.cairo:16:5
    impl DisallowedPanicDestruct: PanicDestruct<TContractState>
    ^*********************************************************^

error: Plugin diagnostic: Failed to generate ABI: An embedded impl must be an impl of a trait marked with #[starknet::interface].
 --> lib.cairo:23:1
#[starknet::contract]
^*******************^

//! > ==========================================================================

//! > Test embeddable impl with exisiting drop impl..

//! > test_runner_name
ExpandContractTestRunner(expect_diagnostics: true)

//! > cairo_code
#[starknet::embeddable]
#[generate_trait]
impl OutsideImplWithDrop<
    TContractState,
    +Drop<TContractState>,
> of OutsideTraitWithDrop<TContractState> {
    fn ret_8(self: @TContractState) -> felt252 {
        8
    }
}

#[starknet::contract]
mod empty_contract {
    #[storage]
    struct Storage {}

    #[abi(embed_v0)]
    impl Usage1 = super::OutsideImplWithDrop<ContractState>;
}

//! > generated_cairo_code
lib.cairo:

#[starknet::embeddable]
#[generate_trait]
impl OutsideImplWithDrop<
    TContractState,
    +Drop<TContractState>,
> of OutsideTraitWithDrop<TContractState> {
    fn ret_8(self: @TContractState) -> felt252 {
        8
    }
}

#[starknet::contract]
mod empty_contract {
    #[storage]
    struct Storage {}

    #[abi(embed_v0)]
    impl Usage1 = super::OutsideImplWithDrop<ContractState>;
}

generate_trait:

trait OutsideTraitWithDrop<
    TContractState,
    +Drop<TContractState>,
> {
    fn ret_8(self: @TContractState) -> felt252;
}


embeddable:

trait UnsafeNewContractStateTraitForOutsideImplWithDrop<
    TContractState
> {
    fn unsafe_new_contract_state() -> TContractState;
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__OutsideImplWithDrop__ret_8<TContractState,
    +Drop<TContractState>,impl UnsafeNewContractState: UnsafeNewContractStateTraitForOutsideImplWithDrop<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    core::internal::require_implicit::<System>();
    core::internal::revoke_ap_tracking();
    core::option::OptionTraitImpl::expect(core::gas::withdraw_gas(), 'Out of gas');
    
    assert(core::array::SpanTrait::is_empty(data), 'Input too long for arguments');
    core::option::OptionTraitImpl::expect(
        core::gas::withdraw_gas_all(core::gas::get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    let res = OutsideImplWithDrop::<TContractState, _>::ret_8(@contract_state, );
    let mut arr = core::array::array_new();
    // References.
    // Result.
    core::serde::Serde::<felt252>::serialize(@res, ref arr);
    core::array::ArrayTrait::span(@arr)
}



mod __external_OutsideImplWithDrop {
    pub use super::__wrapper__OutsideImplWithDrop__ret_8 as ret_8;
}

mod __l1_handler_OutsideImplWithDrop {
}

mod __constructor_OutsideImplWithDrop {
}


contract:

#[event]
#[derive(Drop, starknet::Event)]
pub enum Event {}


    pub struct ContractState {
    }
    impl ContractStateDrop of Drop<ContractState> {}
    #[inline(always)]
    pub fn unsafe_new_contract_state() -> ContractState {
        ContractState {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    pub fn contract_state_for_testing() -> ContractState {
        unsafe_new_contract_state()
    }
    
use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait
};
#[cfg(test)]
pub const TEST_CLASS_HASH: felt252 = 0x7abed9c637e9d7ff4d836f1e5e23fa64efc1ba2169cc22aa5d822ad70fed47;

impl ContractStateOutsideImplWithDrop of
    super::UnsafeNewContractStateTraitForOutsideImplWithDrop<ContractState> {
    fn unsafe_new_contract_state() -> ContractState {
        unsafe_new_contract_state()
    }
}

pub mod __external {
}
pub mod __l1_handler {
}
pub mod __constructor {
}
    impl ContractStateEventEmitter of starknet::event::EventEmitter<
        ContractState, Event
    > {
        fn emit<S, impl IntoImp: core::traits::Into<S, Event>>(
            ref self: ContractState, event: S
        ) {
            let event: Event = core::traits::Into::into(event);
            let mut keys = Default::<core::array::Array>::default();
            let mut data = Default::<core::array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    core::array::ArrayTrait::span(@keys),
                    core::array::ArrayTrait::span(@data),
                )
            )
        }
    }



impls:

impl EventDrop of core::traits::Drop::<Event>;


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let __selector__ = *core::array::SpanTrait::pop_front(ref keys)?;
        Option::None
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: Failed to generate ABI: An embedded impl must be an impl of a trait marked with #[starknet::interface].
 --> lib.cairo:12:1
#[starknet::contract]
^*******************^
