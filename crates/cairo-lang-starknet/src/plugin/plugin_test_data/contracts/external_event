//! > Test expansion of a contract with imported Event.

//! > test_runner_name
ExpandContractTestRunner(allow_diagnostics: false)

//! > cairo_code
#[derive(Drop, starknet::Event)]
enum Event {
    AwesomeEvent: AwesomeEvent,
    BestEventEver: BestEventEver,
}
#[derive(Drop, starknet::Event)]
struct AwesomeEvent {}
#[derive(Drop, starknet::Event)]
struct BestEventEver {}

#[starknet::contract]
mod test_contract {
    #[event]
    use super::Event;

    #[storage]
    struct Storage {}

    fn emit_event(ref self: ContractState) {
        self.emit(Event::AwesomeEvent(super::AwesomeEvent {}));
    }
}

//! > generated_cairo_code
lib.cairo:

#[derive(Drop, starknet::Event)]
enum Event {
    AwesomeEvent: AwesomeEvent,
    BestEventEver: BestEventEver,
}
#[derive(Drop, starknet::Event)]
struct AwesomeEvent {}
#[derive(Drop, starknet::Event)]
struct BestEventEver {}

#[starknet::contract]
mod test_contract {
    #[event]
    use super::Event;

    #[storage]
    struct Storage {}

    fn emit_event(ref self: ContractState) {
        self.emit(Event::AwesomeEvent(super::AwesomeEvent {}));
    }
}

impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
            Event::AwesomeEvent(val) => {
                array::ArrayTrait::append(ref keys, selector!("AwesomeEvent"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
            Event::BestEventEver(val) => {
                array::ArrayTrait::append(ref keys, selector!("BestEventEver"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
            if selector == selector!("AwesomeEvent") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::AwesomeEvent(val));
            }
            if selector == selector!("BestEventEver") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::BestEventEver(val));
            }
        Option::None
    }
}
impl EventAwesomeEventIntoEvent of Into<AwesomeEvent, Event> {
    fn into(self: AwesomeEvent) -> Event {
        Event::AwesomeEvent(self)
    }
}
impl EventBestEventEverIntoEvent of Into<BestEventEver, Event> {
    fn into(self: BestEventEver) -> Event {
        Event::BestEventEver(self)
    }
}



impls:

impl AwesomeEventDrop of Drop::<AwesomeEvent>;


event_impl:

impl AwesomeEventIsEvent of starknet::Event<AwesomeEvent> {
    fn append_keys_and_data(
        self: @AwesomeEvent, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<AwesomeEvent> {
        Option::Some(AwesomeEvent {})
    }
}

impls:

impl BestEventEverDrop of Drop::<BestEventEver>;


event_impl:

impl BestEventEverIsEvent of starknet::Event<BestEventEver> {
    fn append_keys_and_data(
        self: @BestEventEver, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<BestEventEver> {
        Option::Some(BestEventEver {})
    }
}

contract:

use starknet::event::EventEmitter;

    impl ContractStateEventEmitter of EventEmitter<ContractState, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ContractState, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    struct ContractState {
    }
    impl ContractStateDrop of Drop<ContractState> {}
    #[inline(always)]
    fn unsafe_new_contract_state() -> ContractState {
        ContractState {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn contract_state_for_testing() -> ContractState {
        unsafe_new_contract_state()
    }
    
#[cfg(test)]
const TEST_CLASS_HASH: felt252 = 0x32ff02b6abf104297a08971d16f6970b6530be8e49a83bde923ea117b47a37e;


    mod __external {
    }

    mod __l1_handler {
    }

    mod __constructor {
    }

//! > expected_diagnostics
