//! > Test expansion of the hello_starknet contract.

//! > test_runner_name
ExpandContractTestRunner(expect_diagnostics: false)

//! > cairo_code
#[starknet::contract]
mod hello_starknet {
    #[storage]
    struct Storage { balance: felt252, }

    // Increases the balance by the given amount.
    #[external(v0)]
    fn increase_balance(ref self: ContractState, amount: felt252) {
        self.balance.write(self.balance.read() + amount);
    }

    // Returns the current balance.
    #[external(v0)]
    fn get_balance(self: @ContractState) -> felt252 {
        self.balance.read()
    }
}

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod hello_starknet {
    #[storage]
    struct Storage { balance: felt252, }

    // Increases the balance by the given amount.
    #[external(v0)]
    fn increase_balance(ref self: ContractState, amount: felt252) {
        self.balance.write(self.balance.read() + amount);
    }

    // Returns the current balance.
    #[external(v0)]
    fn get_balance(self: @ContractState) -> felt252 {
        self.balance.read()
    }
}

contract:

#[event]
#[derive(Drop, starknet::Event)]
enum Event {}


    struct ContractState {
        balance: balance::ContractMemberState,
    }
    impl ContractStateDrop of Drop<ContractState> {}
    #[inline(always)]
    fn unsafe_new_contract_state() -> ContractState {
        ContractState {
            balance: balance::ContractMemberState {},
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn contract_state_for_testing() -> ContractState {
        unsafe_new_contract_state()
    }
    
    use balance::InternalContractMemberStateTrait as balanceContractMemberStateTrait;
    mod balance {
        #[derive(Copy, Drop)]
        struct ContractMemberState {}
        trait InternalContractMemberStateTrait {
            fn address(self: @ContractMemberState) -> starknet::StorageBaseAddress;
            fn read(self: @ContractMemberState) -> felt252;
            fn write(ref self: ContractMemberState, value: felt252);
        }

        impl InternalContractMemberStateImpl of InternalContractMemberStateTrait {
            fn address(self: @ContractMemberState) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_const::<0x206f38f7e4f15e87567361213c28f235cccdaa1d7fd34c9db1dfe9489c6a091>()
            }
            fn read(self: @ContractMemberState) -> felt252 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<felt252>::read(
                        address_domain,
                        self.address(),
                    )
                )
            }
            fn write(ref self: ContractMemberState, value: felt252) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<felt252>::write(
                        address_domain,
                        self.address(),
                        value,
                    )
                )
            }
        }
    }
use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait
};
#[cfg(test)]
const TEST_CLASS_HASH: felt252 = 0x26fe9125a5d8c4c9324a8d36f6db6556eae6da7c600981e5af5546d55df8222;

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__increase_balance(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_amount = option::OptionTraitImpl::expect(
        serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    increase_balance(ref contract_state, __arg_amount);
    let mut arr = array::array_new();
    // References.
    // Result.
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__get_balance(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    let res = get_balance(@contract_state, );
    let mut arr = array::array_new();
    // References.
    // Result.
    serde::Serde::<felt252>::serialize(@res, ref arr);
    array::ArrayTrait::span(@arr)
}


    mod __external {
        use super::__wrapper__increase_balance as increase_balance;
        use super::__wrapper__get_balance as get_balance;
    }

    mod __l1_handler {
    }

    mod __constructor {
    }

    impl ContractStateEventEmitter of starknet::event::EventEmitter<
        ContractState, Event
    > {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(
            ref self: ContractState, event: S
        ) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }



impls:

impl EventDrop of Drop::<Event>;


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        Option::None
    }
}

//! > expected_diagnostics
