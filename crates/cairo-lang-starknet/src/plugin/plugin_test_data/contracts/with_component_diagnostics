//! > Wrong arguments to component! macro.

//! > test_runner_name
ExpandContractTestRunner(allow_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod test_component {
    #[storage]
    struct Storage {
        data: u32
    }
}

#[starknet::contract]
mod test_contract {
    #[storage]
    struct Storage {}

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        ABC: super::test_component::Event,
    }
    // wrong argument names.
    component!(path1: super::test_component, storage1: test_component_storage, event1: ABC);
    // Unnamed arguments.
    component!(super::test_component, test_component_storage, ABC);
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod test_component {
    #[storage]
    struct Storage {
        data: u32
    }
}

#[starknet::contract]
mod test_contract {
    #[storage]
    struct Storage {}

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        ABC: super::test_component::Event,
    }
    // wrong argument names.
    component!(path1: super::test_component, storage1: test_component_storage, event1: ABC);
    // Unnamed arguments.
    component!(super::test_component, test_component_storage, ABC);
}

component:

use starknet::event::EventEmitter;
#[event] #[derive(Drop, starknet::Event)] enum Event {}

    impl ComponentStateEventEmitter<TCS> of EventEmitter<ComponentState<TCS>, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TCS>, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    struct ComponentState<TCS> {
        data: data::ComponentMemberState,
    }
    impl ComponentStateDrop<TCS> of Drop<ComponentState<TCS>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TCS>() -> ComponentState<TCS> {
        ComponentState::<TCS> {
            data: data::ComponentMemberState {},
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TCS>() -> ComponentState<TCS> {
        unsafe_new_component_state::<TCS>()
    }
    
    use data::InternalComponentMemberStateTrait as dataComponentMemberStateTrait;
    mod data {
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        trait InternalComponentMemberStateTrait {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress;
            fn read(self: @ComponentMemberState) -> u32;
            fn write(ref self: ComponentMemberState, value: u32);
        }

        impl InternalComponentMemberStateImpl of InternalComponentMemberStateTrait {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_const::<0x354f1c2d0eb5771cd5bf67a6689fcd6eed9444d91a39e5ef32a9b4ae5ca14ff>()
            }
            fn read(self: @ComponentMemberState) -> u32 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<u32>::read(
                        address_domain,
                        self.address(),
                    )
                )
            }
            fn write(ref self: ComponentMemberState, value: u32) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<u32>::write(
                        address_domain,
                        self.address(),
                        value,
                    )
                )
            }
        }
    }

trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit(ref self: ComponentState<TContractState>, event: Event);
}



impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
        Option::None
    }
}



contract:

use starknet::event::EventEmitter;

    impl ContractStateEventEmitter of EventEmitter<ContractState, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ContractState, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    struct ContractState {
    }
    impl ContractStateDrop of Drop<ContractState> {}
    #[inline(always)]
    fn unsafe_new_contract_state() -> ContractState {
        ContractState {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn contract_state_for_testing() -> ContractState {
        unsafe_new_contract_state()
    }
    
#[cfg(test)]
const TEST_CLASS_HASH: felt252 = 0x2943e6b272892c78655f823e0abb3da425a1ac0c3f9bdd70869a3f37bc54797;


    mod __external {
    }

    mod __l1_handler {
    }

    mod __constructor {
    }



impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
            Event::ABC(val) => {
                array::ArrayTrait::append(ref keys, selector!("ABC"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
            if selector == selector!("ABC") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::ABC(val));
            }
        Option::None
    }
}
impl EventABCIntoEvent of Into<super::test_component::Event, Event> {
    fn into(self: super::test_component::Event) -> Event {
        Event::ABC(self)
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: Invalid component macro argument. Expected `path: <value>`
 --> lib.cairo:20:16
    component!(path1: super::test_component, storage1: test_component_storage, event1: ABC);
               ^**************************^

error: Plugin diagnostic: Invalid component macro argument. Expected `storage: <value>`
 --> lib.cairo:20:46
    component!(path1: super::test_component, storage1: test_component_storage, event1: ABC);
                                             ^******************************^

error: Plugin diagnostic: Invalid component macro argument. Expected `event: <value>`
 --> lib.cairo:20:80
    component!(path1: super::test_component, storage1: test_component_storage, event1: ABC);
                                                                               ^*********^

error: Plugin diagnostic: Invalid component macro argument. Expected `path: <value>`
 --> lib.cairo:22:16
    component!(super::test_component, test_component_storage, ABC);
               ^*******************^

error: Plugin diagnostic: Invalid component macro argument. Expected `storage: <value>`
 --> lib.cairo:22:39
    component!(super::test_component, test_component_storage, ABC);
                                      ^********************^

error: Plugin diagnostic: Invalid component macro argument. Expected `event: <value>`
 --> lib.cairo:22:63
    component!(super::test_component, test_component_storage, ABC);
                                                              ^*^

//! > ==========================================================================

//! > Non-simple identifiers for storage/event arguments in component! macro.

//! > test_runner_name
ExpandContractTestRunner(allow_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod test_component {
    #[storage]
    struct Storage {
        data: u32
    }
}

#[starknet::contract]
mod test_contract {
    #[storage]
    struct Storage {}

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        ABC: super::test_component::Event,
    }
    component!(path: super::test_component, storage: a::test_component_storage, event: b::ABC);
    component!(path: super::test_component, storage: test_component_storage::<a>, event: ABC::<b>);
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod test_component {
    #[storage]
    struct Storage {
        data: u32
    }
}

#[starknet::contract]
mod test_contract {
    #[storage]
    struct Storage {}

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        ABC: super::test_component::Event,
    }
    component!(path: super::test_component, storage: a::test_component_storage, event: b::ABC);
    component!(path: super::test_component, storage: test_component_storage::<a>, event: ABC::<b>);
}

component:

use starknet::event::EventEmitter;
#[event] #[derive(Drop, starknet::Event)] enum Event {}

    impl ComponentStateEventEmitter<TCS> of EventEmitter<ComponentState<TCS>, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TCS>, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    struct ComponentState<TCS> {
        data: data::ComponentMemberState,
    }
    impl ComponentStateDrop<TCS> of Drop<ComponentState<TCS>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TCS>() -> ComponentState<TCS> {
        ComponentState::<TCS> {
            data: data::ComponentMemberState {},
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TCS>() -> ComponentState<TCS> {
        unsafe_new_component_state::<TCS>()
    }
    
    use data::InternalComponentMemberStateTrait as dataComponentMemberStateTrait;
    mod data {
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        trait InternalComponentMemberStateTrait {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress;
            fn read(self: @ComponentMemberState) -> u32;
            fn write(ref self: ComponentMemberState, value: u32);
        }

        impl InternalComponentMemberStateImpl of InternalComponentMemberStateTrait {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_const::<0x354f1c2d0eb5771cd5bf67a6689fcd6eed9444d91a39e5ef32a9b4ae5ca14ff>()
            }
            fn read(self: @ComponentMemberState) -> u32 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<u32>::read(
                        address_domain,
                        self.address(),
                    )
                )
            }
            fn write(ref self: ComponentMemberState, value: u32) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<u32>::write(
                        address_domain,
                        self.address(),
                        value,
                    )
                )
            }
        }
    }

trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit(ref self: ComponentState<TContractState>, event: Event);
}



impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
        Option::None
    }
}



contract:

use starknet::event::EventEmitter;

    impl ContractStateEventEmitter of EventEmitter<ContractState, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ContractState, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    struct ContractState {
    }
    impl ContractStateDrop of Drop<ContractState> {}
    #[inline(always)]
    fn unsafe_new_contract_state() -> ContractState {
        ContractState {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn contract_state_for_testing() -> ContractState {
        unsafe_new_contract_state()
    }
    
#[cfg(test)]
const TEST_CLASS_HASH: felt252 = 0xe61d99740f46b06b2ccd91d014bc9f9acc438fec59d79dd30fd0d852e5210;


    mod __external {
    }

    mod __l1_handler {
    }

    mod __constructor {
    }



impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
            Event::ABC(val) => {
                array::ArrayTrait::append(ref keys, selector!("ABC"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
            if selector == selector!("ABC") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::ABC(val));
            }
        Option::None
    }
}
impl EventABCIntoEvent of Into<super::test_component::Event, Event> {
    fn into(self: super::test_component::Event) -> Event {
        Event::ABC(self)
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: Component macro argument `storage` must be a simple identifier.
 --> lib.cairo:19:54
    component!(path: super::test_component, storage: a::test_component_storage, event: b::ABC);
                                                     ^***********************^

error: Plugin diagnostic: Component macro argument `event` must be a simple identifier.
 --> lib.cairo:19:88
    component!(path: super::test_component, storage: a::test_component_storage, event: b::ABC);
                                                                                       ^****^

error: Plugin diagnostic: Component macro argument `storage` must be a simple identifier.
 --> lib.cairo:20:54
    component!(path: super::test_component, storage: test_component_storage::<a>, event: ABC::<b>);
                                                     ^*************************^

error: Plugin diagnostic: Component macro argument `event` must be a simple identifier.
 --> lib.cairo:20:90
    component!(path: super::test_component, storage: test_component_storage::<a>, event: ABC::<b>);
                                                                                         ^******^

//! > ==========================================================================

//! > Non-path arguments in component! macro.

//! > test_runner_name
ExpandContractTestRunner(allow_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod test_component {
    #[storage]
    struct Storage {
        data: u32
    }
}

#[starknet::contract]
mod test_contract {
    #[storage]
    struct Storage {}

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        ABC: super::test_component::Event,
    }
    component!(path: a + b, storage: c + d, event: e + f);
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod test_component {
    #[storage]
    struct Storage {
        data: u32
    }
}

#[starknet::contract]
mod test_contract {
    #[storage]
    struct Storage {}

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        ABC: super::test_component::Event,
    }
    component!(path: a + b, storage: c + d, event: e + f);
}

component:

use starknet::event::EventEmitter;
#[event] #[derive(Drop, starknet::Event)] enum Event {}

    impl ComponentStateEventEmitter<TCS> of EventEmitter<ComponentState<TCS>, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TCS>, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    struct ComponentState<TCS> {
        data: data::ComponentMemberState,
    }
    impl ComponentStateDrop<TCS> of Drop<ComponentState<TCS>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TCS>() -> ComponentState<TCS> {
        ComponentState::<TCS> {
            data: data::ComponentMemberState {},
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TCS>() -> ComponentState<TCS> {
        unsafe_new_component_state::<TCS>()
    }
    
    use data::InternalComponentMemberStateTrait as dataComponentMemberStateTrait;
    mod data {
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        trait InternalComponentMemberStateTrait {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress;
            fn read(self: @ComponentMemberState) -> u32;
            fn write(ref self: ComponentMemberState, value: u32);
        }

        impl InternalComponentMemberStateImpl of InternalComponentMemberStateTrait {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_const::<0x354f1c2d0eb5771cd5bf67a6689fcd6eed9444d91a39e5ef32a9b4ae5ca14ff>()
            }
            fn read(self: @ComponentMemberState) -> u32 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<u32>::read(
                        address_domain,
                        self.address(),
                    )
                )
            }
            fn write(ref self: ComponentMemberState, value: u32) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<u32>::write(
                        address_domain,
                        self.address(),
                        value,
                    )
                )
            }
        }
    }

trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit(ref self: ComponentState<TContractState>, event: Event);
}



impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
        Option::None
    }
}



contract:

use starknet::event::EventEmitter;

    impl ContractStateEventEmitter of EventEmitter<ContractState, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ContractState, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    struct ContractState {
    }
    impl ContractStateDrop of Drop<ContractState> {}
    #[inline(always)]
    fn unsafe_new_contract_state() -> ContractState {
        ContractState {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn contract_state_for_testing() -> ContractState {
        unsafe_new_contract_state()
    }
    
#[cfg(test)]
const TEST_CLASS_HASH: felt252 = 0x14aaf6de6aff44d64b4c3609768860615e979fdd851d125bbdfc10597a50a1d;


    mod __external {
    }

    mod __l1_handler {
    }

    mod __constructor {
    }



impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
            Event::ABC(val) => {
                array::ArrayTrait::append(ref keys, selector!("ABC"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
            if selector == selector!("ABC") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::ABC(val));
            }
        Option::None
    }
}
impl EventABCIntoEvent of Into<super::test_component::Event, Event> {
    fn into(self: super::test_component::Event) -> Event {
        Event::ABC(self)
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: Component macro argument `path` must be a path expression.
 --> lib.cairo:19:22
    component!(path: a + b, storage: c + d, event: e + f);
                     ^***^

error: Plugin diagnostic: Component macro argument `storage` must be a path expression.
 --> lib.cairo:19:38
    component!(path: a + b, storage: c + d, event: e + f);
                                     ^***^

error: Plugin diagnostic: Component macro argument `event` must be a path expression.
 --> lib.cairo:19:52
    component!(path: a + b, storage: c + d, event: e + f);
                                                   ^***^

//! > ==========================================================================

//! > Invalid component! macro.

//! > test_runner_name
ExpandContractTestRunner(allow_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod test_component {
    #[storage]
    struct Storage {
        data: u32
    }
}

#[starknet::contract]
mod test_contract {
    #[storage]
    struct Storage {}

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        ABC: super::test_component::Event,
    }
    // [] instead of ().
    component![path: super::test_component, storage: test_component_storage, event: ABC];
    // {} instead of ().
    component!{path: super::test_component, storage: test_component_storage, event: ABC};
    // Too many arguments.
    component!(path: super::test_component, storage: test_component_storage, event: ABC, another: x);
    // Too few arguments.
    component!(path: super::test_component, storage: test_component_storage);
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod test_component {
    #[storage]
    struct Storage {
        data: u32
    }
}

#[starknet::contract]
mod test_contract {
    #[storage]
    struct Storage {}

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        ABC: super::test_component::Event,
    }
    // [] instead of ().
    component![path: super::test_component, storage: test_component_storage, event: ABC];
    // {} instead of ().
    component!{path: super::test_component, storage: test_component_storage, event: ABC};
    // Too many arguments.
    component!(path: super::test_component, storage: test_component_storage, event: ABC, another: x);
    // Too few arguments.
    component!(path: super::test_component, storage: test_component_storage);
}

component:

use starknet::event::EventEmitter;
#[event] #[derive(Drop, starknet::Event)] enum Event {}

    impl ComponentStateEventEmitter<TCS> of EventEmitter<ComponentState<TCS>, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TCS>, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    struct ComponentState<TCS> {
        data: data::ComponentMemberState,
    }
    impl ComponentStateDrop<TCS> of Drop<ComponentState<TCS>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TCS>() -> ComponentState<TCS> {
        ComponentState::<TCS> {
            data: data::ComponentMemberState {},
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TCS>() -> ComponentState<TCS> {
        unsafe_new_component_state::<TCS>()
    }
    
    use data::InternalComponentMemberStateTrait as dataComponentMemberStateTrait;
    mod data {
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        trait InternalComponentMemberStateTrait {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress;
            fn read(self: @ComponentMemberState) -> u32;
            fn write(ref self: ComponentMemberState, value: u32);
        }

        impl InternalComponentMemberStateImpl of InternalComponentMemberStateTrait {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_const::<0x354f1c2d0eb5771cd5bf67a6689fcd6eed9444d91a39e5ef32a9b4ae5ca14ff>()
            }
            fn read(self: @ComponentMemberState) -> u32 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<u32>::read(
                        address_domain,
                        self.address(),
                    )
                )
            }
            fn write(ref self: ComponentMemberState, value: u32) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<u32>::write(
                        address_domain,
                        self.address(),
                        value,
                    )
                )
            }
        }
    }

trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit(ref self: ComponentState<TContractState>, event: Event);
}



impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
        Option::None
    }
}



contract:

use starknet::event::EventEmitter;

    impl ContractStateEventEmitter of EventEmitter<ContractState, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ContractState, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    struct ContractState {
    }
    impl ContractStateDrop of Drop<ContractState> {}
    #[inline(always)]
    fn unsafe_new_contract_state() -> ContractState {
        ContractState {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn contract_state_for_testing() -> ContractState {
        unsafe_new_contract_state()
    }
    
#[cfg(test)]
const TEST_CLASS_HASH: felt252 = 0x2cffa3f882c4d652a366356180352e5af2bb4ea9b0e50532f2a0f11f077643a;


    mod __external {
    }

    mod __l1_handler {
    }

    mod __constructor {
    }



impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
            Event::ABC(val) => {
                array::ArrayTrait::append(ref keys, selector!("ABC"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
            if selector == selector!("ABC") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::ABC(val));
            }
        Option::None
    }
}
impl EventABCIntoEvent of Into<super::test_component::Event, Event> {
    fn into(self: super::test_component::Event) -> Event {
        Event::ABC(self)
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: Invalid component macro, expected `component!(name: "<component_name>", storage: "<storage_name>", event: "<event_name>");`
 --> lib.cairo:20:5
    component![path: super::test_component, storage: test_component_storage, event: ABC];
    ^***********************************************************************************^

error: Plugin diagnostic: Invalid component macro, expected `component!(name: "<component_name>", storage: "<storage_name>", event: "<event_name>");`
 --> lib.cairo:22:5
    component!{path: super::test_component, storage: test_component_storage, event: ABC};
    ^***********************************************************************************^

error: Plugin diagnostic: Invalid component macro, expected `component!(name: "<component_name>", storage: "<storage_name>", event: "<event_name>");`
 --> lib.cairo:24:5
    component!(path: super::test_component, storage: test_component_storage, event: ABC, another: x);
    ^***********************************************************************************************^

error: Plugin diagnostic: Invalid component macro, expected `component!(name: "<component_name>", storage: "<storage_name>", event: "<event_name>");`
 --> lib.cairo:26:5
    component!(path: super::test_component, storage: test_component_storage);
    ^***********************************************************************^

//! > ==========================================================================

//! > Illegal nested storage members.

//! > test_runner_name
ExpandContractTestRunner(allow_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod test_component {
    #[storage]
    struct Storage {
        data: u32
    }
}

#[starknet::contract]
mod test_contract {
    component!(path: super::test_component, storage: test_component_storage, event: ABC);
    #[storage]
    struct Storage {
        #[nested(v0)]
        non_path_type: (usize, usize),
        #[nested(v0)]
        non_component: usize,
        // non-v0 nested member.
        #[nested]
        test_component_storage: super::test_component::Storage,
    }

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        ABC: super::test_component::Event,
    }
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod test_component {
    #[storage]
    struct Storage {
        data: u32
    }
}

#[starknet::contract]
mod test_contract {
    component!(path: super::test_component, storage: test_component_storage, event: ABC);
    #[storage]
    struct Storage {
        #[nested(v0)]
        non_path_type: (usize, usize),
        #[nested(v0)]
        non_component: usize,
        // non-v0 nested member.
        #[nested]
        test_component_storage: super::test_component::Storage,
    }

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        ABC: super::test_component::Event,
    }
}

component:

use starknet::event::EventEmitter;
#[event] #[derive(Drop, starknet::Event)] enum Event {}

    impl ComponentStateEventEmitter<TCS> of EventEmitter<ComponentState<TCS>, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TCS>, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    struct ComponentState<TCS> {
        data: data::ComponentMemberState,
    }
    impl ComponentStateDrop<TCS> of Drop<ComponentState<TCS>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TCS>() -> ComponentState<TCS> {
        ComponentState::<TCS> {
            data: data::ComponentMemberState {},
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TCS>() -> ComponentState<TCS> {
        unsafe_new_component_state::<TCS>()
    }
    
    use data::InternalComponentMemberStateTrait as dataComponentMemberStateTrait;
    mod data {
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        trait InternalComponentMemberStateTrait {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress;
            fn read(self: @ComponentMemberState) -> u32;
            fn write(ref self: ComponentMemberState, value: u32);
        }

        impl InternalComponentMemberStateImpl of InternalComponentMemberStateTrait {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_const::<0x354f1c2d0eb5771cd5bf67a6689fcd6eed9444d91a39e5ef32a9b4ae5ca14ff>()
            }
            fn read(self: @ComponentMemberState) -> u32 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<u32>::read(
                        address_domain,
                        self.address(),
                    )
                )
            }
            fn write(ref self: ComponentMemberState, value: u32) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<u32>::write(
                        address_domain,
                        self.address(),
                        value,
                    )
                )
            }
        }
    }

trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit(ref self: ComponentState<TContractState>, event: Event);
}



impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
        Option::None
    }
}



contract:

use starknet::event::EventEmitter;

    impl ContractStateEventEmitter of EventEmitter<ContractState, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ContractState, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    struct ContractState {
        test_component_storage: super::test_component::ComponentState::<ContractState>,
    }
    impl ContractStateDrop of Drop<ContractState> {}
    #[inline(always)]
    fn unsafe_new_contract_state() -> ContractState {
        ContractState {
            test_component_storage: super::test_component::unsafe_new_component_state::<ContractState>(),
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn contract_state_for_testing() -> ContractState {
        unsafe_new_contract_state()
    }
    
#[cfg(test)]
const TEST_CLASS_HASH: felt252 = 0x1f94e0473876f4a847f49fbb8b6322c40bbca56818da7f3936ec6653a7bdab6;


    mod __external {
    }

    mod __l1_handler {
    }

    mod __constructor {
    }

impl HasComponentImpl_test_component of super::test_component::HasComponent<ContractState> {
    fn get_component(self: @ContractState) -> @super::test_component::ComponentState<ContractState> {
        self.test_component_storage
    }
    fn get_component_mut(ref self: ContractState) -> super::test_component::ComponentState<ContractState> {
        super::test_component::unsafe_new_component_state::<ContractState>()
    }
    fn get_contract(self: @super::test_component::ComponentState<ContractState>) -> @ContractState {
        @unsafe_new_contract_state()
    }
    fn get_contract_mut(ref self: super::test_component::ComponentState<ContractState>) -> ContractState {
        unsafe_new_contract_state()
    }
    fn emit(ref self: super::test_component::ComponentState<ContractState>, event: super::test_component::Event) {
        let mut contract = super::test_component::HasComponent::get_contract_mut(ref self);
        contract.emit(Event::ABC(event));
    }
}

impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
            Event::ABC(val) => {
                array::ArrayTrait::append(ref keys, selector!("ABC"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
            if selector == selector!("ABC") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::ABC(val));
            }
        Option::None
    }
}
impl EventABCIntoEvent of Into<super::test_component::Event, Event> {
    fn into(self: super::test_component::Event) -> Event {
        Event::ABC(self)
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: `nested` attribute is only allowed for members of type [some_path::]Storage`
 --> lib.cairo:14:9
        #[nested(v0)]
        ^***********^

error: Plugin diagnostic: `nested` attribute is only allowed for members of type [some_path::]Storage`
 --> lib.cairo:16:9
        #[nested(v0)]
        ^***********^

error: Plugin diagnostic: Only #[nested(v0)] is supported.
 --> lib.cairo:19:9
        #[nested]
        ^*******^
