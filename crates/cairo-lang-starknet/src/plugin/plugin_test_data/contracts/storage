//! > Test expansion of StarkNet storage logic.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
// TODO(ilya): update format.
#[starknet::contract]
mod test_contract {
    #[storage]
    struct Storage {
        var_felt252: felt252,
        var_u8: u8,
        var_u16: u16,
        var_u32: u32,
        var_u64: u64,
        var_u128: u128,
        var_bool: bool,
        felt252_to_u128: LegacyMap::<felt252, u128>,
        u128_to_bool: LegacyMap::<u128, bool>,
        bool_to_felt252: LegacyMap::<bool, felt252>,
    }
}

//! > generated_cairo_code
lib.cairo:

// TODO(ilya): update format.
#[starknet::contract]
mod test_contract {
    #[storage]
    struct Storage {
        var_felt252: felt252,
        var_u8: u8,
        var_u16: u16,
        var_u32: u32,
        var_u64: u64,
        var_u128: u128,
        var_bool: bool,
        felt252_to_u128: LegacyMap::<felt252, u128>,
        u128_to_bool: LegacyMap::<u128, bool>,
        bool_to_felt252: LegacyMap::<bool, felt252>,
    }
}

contract:

#[cfg(test)]
const TEST_CLASS_HASH: felt252 = 0xdf00ddc8940a9ebc2f8665e989d2652203dabc0967e7b9cbce7d6a201564d3;
use starknet::event::EventEmitter;
#[derive(Drop)]
    struct ContractState {
        var_felt252: ContractStateMembervar_felt252,
        var_u8: ContractStateMembervar_u8,
        var_u16: ContractStateMembervar_u16,
        var_u32: ContractStateMembervar_u32,
        var_u64: ContractStateMembervar_u64,
        var_u128: ContractStateMembervar_u128,
        var_bool: ContractStateMembervar_bool,
        felt252_to_u128: ContractStateMemberfelt252_to_u128,
        u128_to_bool: ContractStateMemberu128_to_bool,
        bool_to_felt252: ContractStateMemberbool_to_felt252,
    }
    #[inline(always)]
    fn unsafe_new_contract_state() -> ContractState {
        ContractState {
            var_felt252: ContractStateMembervar_felt252{},
            var_u8: ContractStateMembervar_u8{},
            var_u16: ContractStateMembervar_u16{},
            var_u32: ContractStateMembervar_u32{},
            var_u64: ContractStateMembervar_u64{},
            var_u128: ContractStateMembervar_u128{},
            var_bool: ContractStateMembervar_bool{},
            felt252_to_u128: ContractStateMemberfelt252_to_u128{},
            u128_to_bool: ContractStateMemberu128_to_bool{},
            bool_to_felt252: ContractStateMemberbool_to_felt252{},
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn contract_state_for_testing() -> ContractState {
        unsafe_new_contract_state()
    }


    #[event] #[derive(Drop, starknet::Event)] enum Event {}

    impl ContractStateEventEmitter of EventEmitter<ContractState, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ContractState, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    #[derive(Copy, Drop)]
    struct ContractStateMembervar_felt252 {}
    trait __InternalContractStateMembervar_felt252Trait {
        fn address(self: @ContractStateMembervar_felt252) -> starknet::StorageBaseAddress;
        fn read(self: @ContractStateMembervar_felt252) -> felt252;
        fn write(ref self: ContractStateMembervar_felt252, value: felt252);
    }

    impl __InternalContractStateMembervar_felt252Impl of
         __InternalContractStateMembervar_felt252Trait {
        fn address(self: @ContractStateMembervar_felt252) -> starknet::StorageBaseAddress {
            starknet::storage_base_address_const::<0xaa97ff6377ea4c71d88150f635730828734fd5bfd6f834e2ae92d29676846c>()
        }
        fn read(self: @ContractStateMembervar_felt252) -> felt252 {
            // Only address_domain 0 is currently supported.
            let address_domain = 0_u32;
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::Store::<felt252>::read(
                    address_domain,
                    self.address(),
                )
            )
        }
        fn write(ref self: ContractStateMembervar_felt252, value: felt252) {
            // Only address_domain 0 is currently supported.
            let address_domain = 0_u32;
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::Store::<felt252>::write(
                    address_domain,
                    self.address(),
                    value,
                )
            )
        }
    }
    #[derive(Copy, Drop)]
    struct ContractStateMembervar_u8 {}
    trait __InternalContractStateMembervar_u8Trait {
        fn address(self: @ContractStateMembervar_u8) -> starknet::StorageBaseAddress;
        fn read(self: @ContractStateMembervar_u8) -> u8;
        fn write(ref self: ContractStateMembervar_u8, value: u8);
    }

    impl __InternalContractStateMembervar_u8Impl of
         __InternalContractStateMembervar_u8Trait {
        fn address(self: @ContractStateMembervar_u8) -> starknet::StorageBaseAddress {
            starknet::storage_base_address_const::<0x2c1cc4c68869a16c4afd31a765927ce369b8ef4b1208114ea00e820ea36fc23>()
        }
        fn read(self: @ContractStateMembervar_u8) -> u8 {
            // Only address_domain 0 is currently supported.
            let address_domain = 0_u32;
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::Store::<u8>::read(
                    address_domain,
                    self.address(),
                )
            )
        }
        fn write(ref self: ContractStateMembervar_u8, value: u8) {
            // Only address_domain 0 is currently supported.
            let address_domain = 0_u32;
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::Store::<u8>::write(
                    address_domain,
                    self.address(),
                    value,
                )
            )
        }
    }
    #[derive(Copy, Drop)]
    struct ContractStateMembervar_u16 {}
    trait __InternalContractStateMembervar_u16Trait {
        fn address(self: @ContractStateMembervar_u16) -> starknet::StorageBaseAddress;
        fn read(self: @ContractStateMembervar_u16) -> u16;
        fn write(ref self: ContractStateMembervar_u16, value: u16);
    }

    impl __InternalContractStateMembervar_u16Impl of
         __InternalContractStateMembervar_u16Trait {
        fn address(self: @ContractStateMembervar_u16) -> starknet::StorageBaseAddress {
            starknet::storage_base_address_const::<0xf3b2ea0485e7fdfaec3d3e519eeedf3d5dc3434b4f9c8858c217ca6a8b1d45>()
        }
        fn read(self: @ContractStateMembervar_u16) -> u16 {
            // Only address_domain 0 is currently supported.
            let address_domain = 0_u32;
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::Store::<u16>::read(
                    address_domain,
                    self.address(),
                )
            )
        }
        fn write(ref self: ContractStateMembervar_u16, value: u16) {
            // Only address_domain 0 is currently supported.
            let address_domain = 0_u32;
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::Store::<u16>::write(
                    address_domain,
                    self.address(),
                    value,
                )
            )
        }
    }
    #[derive(Copy, Drop)]
    struct ContractStateMembervar_u32 {}
    trait __InternalContractStateMembervar_u32Trait {
        fn address(self: @ContractStateMembervar_u32) -> starknet::StorageBaseAddress;
        fn read(self: @ContractStateMembervar_u32) -> u32;
        fn write(ref self: ContractStateMembervar_u32, value: u32);
    }

    impl __InternalContractStateMembervar_u32Impl of
         __InternalContractStateMembervar_u32Trait {
        fn address(self: @ContractStateMembervar_u32) -> starknet::StorageBaseAddress {
            starknet::storage_base_address_const::<0x19490a04fdf74ff92d2d73deff1f53be2aa23274d5a6896a509931d308ffa2d>()
        }
        fn read(self: @ContractStateMembervar_u32) -> u32 {
            // Only address_domain 0 is currently supported.
            let address_domain = 0_u32;
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::Store::<u32>::read(
                    address_domain,
                    self.address(),
                )
            )
        }
        fn write(ref self: ContractStateMembervar_u32, value: u32) {
            // Only address_domain 0 is currently supported.
            let address_domain = 0_u32;
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::Store::<u32>::write(
                    address_domain,
                    self.address(),
                    value,
                )
            )
        }
    }
    #[derive(Copy, Drop)]
    struct ContractStateMembervar_u64 {}
    trait __InternalContractStateMembervar_u64Trait {
        fn address(self: @ContractStateMembervar_u64) -> starknet::StorageBaseAddress;
        fn read(self: @ContractStateMembervar_u64) -> u64;
        fn write(ref self: ContractStateMembervar_u64, value: u64);
    }

    impl __InternalContractStateMembervar_u64Impl of
         __InternalContractStateMembervar_u64Trait {
        fn address(self: @ContractStateMembervar_u64) -> starknet::StorageBaseAddress {
            starknet::storage_base_address_const::<0x2b58a04fca59322572a3335b3f8e9a63dd34db1b715eaaae3ab367afa90a194>()
        }
        fn read(self: @ContractStateMembervar_u64) -> u64 {
            // Only address_domain 0 is currently supported.
            let address_domain = 0_u32;
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::Store::<u64>::read(
                    address_domain,
                    self.address(),
                )
            )
        }
        fn write(ref self: ContractStateMembervar_u64, value: u64) {
            // Only address_domain 0 is currently supported.
            let address_domain = 0_u32;
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::Store::<u64>::write(
                    address_domain,
                    self.address(),
                    value,
                )
            )
        }
    }
    #[derive(Copy, Drop)]
    struct ContractStateMembervar_u128 {}
    trait __InternalContractStateMembervar_u128Trait {
        fn address(self: @ContractStateMembervar_u128) -> starknet::StorageBaseAddress;
        fn read(self: @ContractStateMembervar_u128) -> u128;
        fn write(ref self: ContractStateMembervar_u128, value: u128);
    }

    impl __InternalContractStateMembervar_u128Impl of
         __InternalContractStateMembervar_u128Trait {
        fn address(self: @ContractStateMembervar_u128) -> starknet::StorageBaseAddress {
            starknet::storage_base_address_const::<0x1ba472df0f88c033d4e0c12eb95fd291de570db0f2df241297c6ebf905889a>()
        }
        fn read(self: @ContractStateMembervar_u128) -> u128 {
            // Only address_domain 0 is currently supported.
            let address_domain = 0_u32;
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::Store::<u128>::read(
                    address_domain,
                    self.address(),
                )
            )
        }
        fn write(ref self: ContractStateMembervar_u128, value: u128) {
            // Only address_domain 0 is currently supported.
            let address_domain = 0_u32;
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::Store::<u128>::write(
                    address_domain,
                    self.address(),
                    value,
                )
            )
        }
    }
    #[derive(Copy, Drop)]
    struct ContractStateMembervar_bool {}
    trait __InternalContractStateMembervar_boolTrait {
        fn address(self: @ContractStateMembervar_bool) -> starknet::StorageBaseAddress;
        fn read(self: @ContractStateMembervar_bool) -> bool;
        fn write(ref self: ContractStateMembervar_bool, value: bool);
    }

    impl __InternalContractStateMembervar_boolImpl of
         __InternalContractStateMembervar_boolTrait {
        fn address(self: @ContractStateMembervar_bool) -> starknet::StorageBaseAddress {
            starknet::storage_base_address_const::<0x379caae8ce359ad2da9b1cd83d4df406d959c199192b9c9e787595a50e0db27>()
        }
        fn read(self: @ContractStateMembervar_bool) -> bool {
            // Only address_domain 0 is currently supported.
            let address_domain = 0_u32;
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::Store::<bool>::read(
                    address_domain,
                    self.address(),
                )
            )
        }
        fn write(ref self: ContractStateMembervar_bool, value: bool) {
            // Only address_domain 0 is currently supported.
            let address_domain = 0_u32;
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::Store::<bool>::write(
                    address_domain,
                    self.address(),
                    value,
                )
            )
        }
    }
    #[derive(Copy, Drop)]
    struct ContractStateMemberfelt252_to_u128 {}
    trait __InternalContractStateMemberfelt252_to_u128Trait {
        fn address(
            self: @ContractStateMemberfelt252_to_u128, key: felt252
        ) -> starknet::StorageBaseAddress;
        fn read(self: @ContractStateMemberfelt252_to_u128, key: felt252) -> u128;
        fn write(
            ref self: ContractStateMemberfelt252_to_u128, key: felt252, value: u128);
    }
    impl __InternalContractStateMemberfelt252_to_u128Impl of
         __InternalContractStateMemberfelt252_to_u128Trait {
        fn address(
            self: @ContractStateMemberfelt252_to_u128, key: felt252
        ) -> starknet::StorageBaseAddress {
            starknet::storage_base_address_from_felt252(
                hash::LegacyHash::<felt252>::hash(0x22ccfa174c52d0acc1e51ed6102f40f9e270cefc9a906ff2ee9a366c52db7bc, key))
        }
        fn read(self: @ContractStateMemberfelt252_to_u128, key: felt252) -> u128 {
            // Only address_domain 0 is currently supported.
            let address_domain = 0_u32;
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::Store::<u128>::read(
                    address_domain,
                    self.address(key),
                )
            )
        }
        fn write(
            ref self: ContractStateMemberfelt252_to_u128, key: felt252, value: u128
        ) {
            // Only address_domain 0 is currently supported.
            let address_domain = 0_u32;
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::Store::<u128>::write(
                    address_domain,
                    self.address(key),
                    value,
                )
            )
        }
    }
    #[derive(Copy, Drop)]
    struct ContractStateMemberu128_to_bool {}
    trait __InternalContractStateMemberu128_to_boolTrait {
        fn address(
            self: @ContractStateMemberu128_to_bool, key: u128
        ) -> starknet::StorageBaseAddress;
        fn read(self: @ContractStateMemberu128_to_bool, key: u128) -> bool;
        fn write(
            ref self: ContractStateMemberu128_to_bool, key: u128, value: bool);
    }
    impl __InternalContractStateMemberu128_to_boolImpl of
         __InternalContractStateMemberu128_to_boolTrait {
        fn address(
            self: @ContractStateMemberu128_to_bool, key: u128
        ) -> starknet::StorageBaseAddress {
            starknet::storage_base_address_from_felt252(
                hash::LegacyHash::<u128>::hash(0xaef662bd0e6cbe2fe1d8a16c45579f35b9c40069d967c414f98cd2e1975d7a, key))
        }
        fn read(self: @ContractStateMemberu128_to_bool, key: u128) -> bool {
            // Only address_domain 0 is currently supported.
            let address_domain = 0_u32;
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::Store::<bool>::read(
                    address_domain,
                    self.address(key),
                )
            )
        }
        fn write(
            ref self: ContractStateMemberu128_to_bool, key: u128, value: bool
        ) {
            // Only address_domain 0 is currently supported.
            let address_domain = 0_u32;
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::Store::<bool>::write(
                    address_domain,
                    self.address(key),
                    value,
                )
            )
        }
    }
    #[derive(Copy, Drop)]
    struct ContractStateMemberbool_to_felt252 {}
    trait __InternalContractStateMemberbool_to_felt252Trait {
        fn address(
            self: @ContractStateMemberbool_to_felt252, key: bool
        ) -> starknet::StorageBaseAddress;
        fn read(self: @ContractStateMemberbool_to_felt252, key: bool) -> felt252;
        fn write(
            ref self: ContractStateMemberbool_to_felt252, key: bool, value: felt252);
    }
    impl __InternalContractStateMemberbool_to_felt252Impl of
         __InternalContractStateMemberbool_to_felt252Trait {
        fn address(
            self: @ContractStateMemberbool_to_felt252, key: bool
        ) -> starknet::StorageBaseAddress {
            starknet::storage_base_address_from_felt252(
                hash::LegacyHash::<bool>::hash(0x11ddb648d7a85d8ff1f89f86feb50fd8bd26a25e6837cff5c3c38d8c3a0bb93, key))
        }
        fn read(self: @ContractStateMemberbool_to_felt252, key: bool) -> felt252 {
            // Only address_domain 0 is currently supported.
            let address_domain = 0_u32;
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::Store::<felt252>::read(
                    address_domain,
                    self.address(key),
                )
            )
        }
        fn write(
            ref self: ContractStateMemberbool_to_felt252, key: bool, value: felt252
        ) {
            // Only address_domain 0 is currently supported.
            let address_domain = 0_u32;
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::Store::<felt252>::write(
                    address_domain,
                    self.address(key),
                    value,
                )
            )
        }
    }




mod __external {
}

mod __l1_handler {
}

mod __constructor {
}


impls:

impl ContractStateDrop of Drop::<ContractState>;


impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
        Option::None
    }
}



impls:

impl ContractStateMembervar_felt252Copy of Copy::<ContractStateMembervar_felt252>;
impl ContractStateMembervar_felt252Drop of Drop::<ContractStateMembervar_felt252>;


impls:

impl ContractStateMembervar_u8Copy of Copy::<ContractStateMembervar_u8>;
impl ContractStateMembervar_u8Drop of Drop::<ContractStateMembervar_u8>;


impls:

impl ContractStateMembervar_u16Copy of Copy::<ContractStateMembervar_u16>;
impl ContractStateMembervar_u16Drop of Drop::<ContractStateMembervar_u16>;


impls:

impl ContractStateMembervar_u32Copy of Copy::<ContractStateMembervar_u32>;
impl ContractStateMembervar_u32Drop of Drop::<ContractStateMembervar_u32>;


impls:

impl ContractStateMembervar_u64Copy of Copy::<ContractStateMembervar_u64>;
impl ContractStateMembervar_u64Drop of Drop::<ContractStateMembervar_u64>;


impls:

impl ContractStateMembervar_u128Copy of Copy::<ContractStateMembervar_u128>;
impl ContractStateMembervar_u128Drop of Drop::<ContractStateMembervar_u128>;


impls:

impl ContractStateMembervar_boolCopy of Copy::<ContractStateMembervar_bool>;
impl ContractStateMembervar_boolDrop of Drop::<ContractStateMembervar_bool>;


impls:

impl ContractStateMemberfelt252_to_u128Copy of Copy::<ContractStateMemberfelt252_to_u128>;
impl ContractStateMemberfelt252_to_u128Drop of Drop::<ContractStateMemberfelt252_to_u128>;


impls:

impl ContractStateMemberu128_to_boolCopy of Copy::<ContractStateMemberu128_to_bool>;
impl ContractStateMemberu128_to_boolDrop of Drop::<ContractStateMemberu128_to_bool>;


impls:

impl ContractStateMemberbool_to_felt252Copy of Copy::<ContractStateMemberbool_to_felt252>;
impl ContractStateMemberbool_to_felt252Drop of Drop::<ContractStateMemberbool_to_felt252>;

//! > expected_diagnostics
