//! > Test expansion of StarkNet storage logic.

//! > test_runner_name
ExpandContractTestRunner(expect_diagnostics: false)

//! > cairo_code
#[derive(Drop, starknet::Store, Hash)]
struct OuterType {
    x: u32,
}

// TODO(ilya): update format.
#[starknet::contract]
mod test_contract {
    #[storage]
    struct Storage {
        var_felt252: felt252,
        var_u8: u8,
        var_u16: u16,
        var_u32: u32,
        var_u64: u64,
        var_u128: u128,
        var_bool: bool,
        felt252_to_u128: LegacyMap::<felt252, u128>,
        u128_to_bool: LegacyMap::<u128, bool>,
        bool_to_felt252: LegacyMap::<bool, felt252>,
        outer_type_var: super::OuterType,
        outer_type_to_outer_type: LegacyMap::<super::OuterType, super::OuterType>,
        inner_type_var: inner::InnerType,
        inner_type_to_inner_type: LegacyMap::<inner::InnerType, inner::InnerType>,
    }

    mod inner {
        #[derive(Drop, starknet::Store, Hash)]
        struct InnerType {
            x: u32,
        }
    }
}

//! > generated_cairo_code
lib.cairo:

#[derive(Drop, starknet::Store, Hash)]
struct OuterType {
    x: u32,
}

// TODO(ilya): update format.
#[starknet::contract]
mod test_contract {
    #[storage]
    struct Storage {
        var_felt252: felt252,
        var_u8: u8,
        var_u16: u16,
        var_u32: u32,
        var_u64: u64,
        var_u128: u128,
        var_bool: bool,
        felt252_to_u128: LegacyMap::<felt252, u128>,
        u128_to_bool: LegacyMap::<u128, bool>,
        bool_to_felt252: LegacyMap::<bool, felt252>,
        outer_type_var: super::OuterType,
        outer_type_to_outer_type: LegacyMap::<super::OuterType, super::OuterType>,
        inner_type_var: inner::InnerType,
        inner_type_to_inner_type: LegacyMap::<inner::InnerType, inner::InnerType>,
    }

    mod inner {
        #[derive(Drop, starknet::Store, Hash)]
        struct InnerType {
            x: u32,
        }
    }
}

impls:

impl OuterTypeDrop of Drop::<OuterType>;
impl OuterTypeHash<
    __State,
    impl __SHashState: hash::HashStateTrait<__State>,
    impl SDrop: Drop<__State>
> of hash::Hash<OuterType, __State, __SHashState> {
    #[inline(always)]
    fn update_state(state: __State, value: OuterType) -> __State {
        let state = hash::Hash::update_state(state, value.x);
        state
    }
}


starknet_derive:

impl StoreOuterType of starknet::Store::<OuterType> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<OuterType> {
        let x = starknet::Store::<u32>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            OuterType {
                x,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: OuterType) -> starknet::SyscallResult<()> {
        starknet::Store::<u32>::write(address_domain, base, value.x)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<OuterType> {
        let x = starknet::Store::<u32>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            OuterType {
                x,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: OuterType) -> starknet::SyscallResult<()> {
        starknet::Store::<u32>::write_at_offset(address_domain, base, offset, value.x)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<u32>::size()
    }
}

contract:

#[event]
#[derive(Drop, starknet::Event)]
enum Event {}


    struct ContractState {
        var_felt252: var_felt252::ContractMemberState,
        var_u8: var_u8::ContractMemberState,
        var_u16: var_u16::ContractMemberState,
        var_u32: var_u32::ContractMemberState,
        var_u64: var_u64::ContractMemberState,
        var_u128: var_u128::ContractMemberState,
        var_bool: var_bool::ContractMemberState,
        felt252_to_u128: felt252_to_u128::ContractMemberState,
        u128_to_bool: u128_to_bool::ContractMemberState,
        bool_to_felt252: bool_to_felt252::ContractMemberState,
        outer_type_var: outer_type_var::ContractMemberState,
        outer_type_to_outer_type: outer_type_to_outer_type::ContractMemberState,
        inner_type_var: inner_type_var::ContractMemberState,
        inner_type_to_inner_type: inner_type_to_inner_type::ContractMemberState,
    }
    impl ContractStateDrop of Drop<ContractState> {}
    #[inline(always)]
    fn unsafe_new_contract_state() -> ContractState {
        ContractState {
            var_felt252: var_felt252::ContractMemberState {},
            var_u8: var_u8::ContractMemberState {},
            var_u16: var_u16::ContractMemberState {},
            var_u32: var_u32::ContractMemberState {},
            var_u64: var_u64::ContractMemberState {},
            var_u128: var_u128::ContractMemberState {},
            var_bool: var_bool::ContractMemberState {},
            felt252_to_u128: felt252_to_u128::ContractMemberState {},
            u128_to_bool: u128_to_bool::ContractMemberState {},
            bool_to_felt252: bool_to_felt252::ContractMemberState {},
            outer_type_var: outer_type_var::ContractMemberState {},
            outer_type_to_outer_type: outer_type_to_outer_type::ContractMemberState {},
            inner_type_var: inner_type_var::ContractMemberState {},
            inner_type_to_inner_type: inner_type_to_inner_type::ContractMemberState {},
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn contract_state_for_testing() -> ContractState {
        unsafe_new_contract_state()
    }
    
    use starknet::storage::old::StorageMemberStateTrait as var_felt252ContractMemberStateTrait;
    mod var_felt252 {
        use super::inner;
        #[derive(Copy, Drop)]
        struct ContractMemberState {}
        impl StorageContractMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ContractMemberState, felt252> {
            fn address(self: @ContractMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0xaa97ff6377ea4c71d88150f635730828734fd5bfd6f834e2ae92d29676846c>()
            }
        }
    }
    use starknet::storage::old::StorageMemberStateTrait as var_u8ContractMemberStateTrait;
    mod var_u8 {
        use super::inner;
        #[derive(Copy, Drop)]
        struct ContractMemberState {}
        impl StorageContractMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ContractMemberState, u8> {
            fn address(self: @ContractMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0x2c1cc4c68869a16c4afd31a765927ce369b8ef4b1208114ea00e820ea36fc23>()
            }
        }
    }
    use starknet::storage::old::StorageMemberStateTrait as var_u16ContractMemberStateTrait;
    mod var_u16 {
        use super::inner;
        #[derive(Copy, Drop)]
        struct ContractMemberState {}
        impl StorageContractMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ContractMemberState, u16> {
            fn address(self: @ContractMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0xf3b2ea0485e7fdfaec3d3e519eeedf3d5dc3434b4f9c8858c217ca6a8b1d45>()
            }
        }
    }
    use starknet::storage::old::StorageMemberStateTrait as var_u32ContractMemberStateTrait;
    mod var_u32 {
        use super::inner;
        #[derive(Copy, Drop)]
        struct ContractMemberState {}
        impl StorageContractMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ContractMemberState, u32> {
            fn address(self: @ContractMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0x19490a04fdf74ff92d2d73deff1f53be2aa23274d5a6896a509931d308ffa2d>()
            }
        }
    }
    use starknet::storage::old::StorageMemberStateTrait as var_u64ContractMemberStateTrait;
    mod var_u64 {
        use super::inner;
        #[derive(Copy, Drop)]
        struct ContractMemberState {}
        impl StorageContractMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ContractMemberState, u64> {
            fn address(self: @ContractMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0x2b58a04fca59322572a3335b3f8e9a63dd34db1b715eaaae3ab367afa90a194>()
            }
        }
    }
    use starknet::storage::old::StorageMemberStateTrait as var_u128ContractMemberStateTrait;
    mod var_u128 {
        use super::inner;
        #[derive(Copy, Drop)]
        struct ContractMemberState {}
        impl StorageContractMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ContractMemberState, u128> {
            fn address(self: @ContractMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0x1ba472df0f88c033d4e0c12eb95fd291de570db0f2df241297c6ebf905889a>()
            }
        }
    }
    use starknet::storage::old::StorageMemberStateTrait as var_boolContractMemberStateTrait;
    mod var_bool {
        use super::inner;
        #[derive(Copy, Drop)]
        struct ContractMemberState {}
        impl StorageContractMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ContractMemberState, bool> {
            fn address(self: @ContractMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0x379caae8ce359ad2da9b1cd83d4df406d959c199192b9c9e787595a50e0db27>()
            }
        }
    }
    use starknet::storage::old::StorageMapMemberStateTrait as felt252_to_u128ContractMemberStateTrait;
    mod felt252_to_u128 {
        use super::inner;
        #[derive(Copy, Drop)]
        struct ContractMemberState {}

        impl StorageMapContractMemberStateImpl of starknet::storage::StorageMapMemberAddressTrait<ContractMemberState, felt252, u128> {
            fn address(self: @ContractMemberState, key: felt252) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_from_felt252(
                    hash::LegacyHash::<felt252>::hash(0x22ccfa174c52d0acc1e51ed6102f40f9e270cefc9a906ff2ee9a366c52db7bc, key))
            }
        }
    }
    use starknet::storage::old::StorageMapMemberStateTrait as u128_to_boolContractMemberStateTrait;
    mod u128_to_bool {
        use super::inner;
        #[derive(Copy, Drop)]
        struct ContractMemberState {}

        impl StorageMapContractMemberStateImpl of starknet::storage::StorageMapMemberAddressTrait<ContractMemberState, u128, bool> {
            fn address(self: @ContractMemberState, key: u128) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_from_felt252(
                    hash::LegacyHash::<u128>::hash(0xaef662bd0e6cbe2fe1d8a16c45579f35b9c40069d967c414f98cd2e1975d7a, key))
            }
        }
    }
    use starknet::storage::old::StorageMapMemberStateTrait as bool_to_felt252ContractMemberStateTrait;
    mod bool_to_felt252 {
        use super::inner;
        #[derive(Copy, Drop)]
        struct ContractMemberState {}

        impl StorageMapContractMemberStateImpl of starknet::storage::StorageMapMemberAddressTrait<ContractMemberState, bool, felt252> {
            fn address(self: @ContractMemberState, key: bool) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_from_felt252(
                    hash::LegacyHash::<bool>::hash(0x11ddb648d7a85d8ff1f89f86feb50fd8bd26a25e6837cff5c3c38d8c3a0bb93, key))
            }
        }
    }
    use starknet::storage::old::StorageMemberStateTrait as outer_type_varContractMemberStateTrait;
    mod outer_type_var {
        use super::inner;
        #[derive(Copy, Drop)]
        struct ContractMemberState {}
        impl StorageContractMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ContractMemberState, super::super::OuterType> {
            fn address(self: @ContractMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0x3106af1c2d86e8b1cb851a79386ce0a8769e17e9d35faaac2d358e2ab15b47e>()
            }
        }
    }
    use starknet::storage::old::StorageMapMemberStateTrait as outer_type_to_outer_typeContractMemberStateTrait;
    mod outer_type_to_outer_type {
        use super::inner;
        #[derive(Copy, Drop)]
        struct ContractMemberState {}

        impl StorageMapContractMemberStateImpl of starknet::storage::StorageMapMemberAddressTrait<ContractMemberState, super::super::OuterType, super::super::OuterType> {
            fn address(self: @ContractMemberState, key: super::super::OuterType) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_from_felt252(
                    hash::LegacyHash::<super::super::OuterType>::hash(0x35c41176ed396a1aefee30c295c954b0e7fd2f58e270016196d6751c199ad54, key))
            }
        }
    }
    use starknet::storage::old::StorageMemberStateTrait as inner_type_varContractMemberStateTrait;
    mod inner_type_var {
        use super::inner;
        #[derive(Copy, Drop)]
        struct ContractMemberState {}
        impl StorageContractMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ContractMemberState, inner::InnerType> {
            fn address(self: @ContractMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0x13116abdf53a8bc21fa319084c612c78d3d632bf1a48cf7f221c343f1a7b51e>()
            }
        }
    }
    use starknet::storage::old::StorageMapMemberStateTrait as inner_type_to_inner_typeContractMemberStateTrait;
    mod inner_type_to_inner_type {
        use super::inner;
        #[derive(Copy, Drop)]
        struct ContractMemberState {}

        impl StorageMapContractMemberStateImpl of starknet::storage::StorageMapMemberAddressTrait<ContractMemberState, inner::InnerType, inner::InnerType> {
            fn address(self: @ContractMemberState, key: inner::InnerType) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_from_felt252(
                    hash::LegacyHash::<inner::InnerType>::hash(0x3ab3286e5324e5e72225cf3acbcb086eb63bceab39847ca070c7aa92140de4b, key))
            }
        }
    }
use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait
};
#[cfg(test)]
const TEST_CLASS_HASH: felt252 = 0x33d119d7988d8f3251d554948b07e3215c9d66cf56f21bc80a6e513ea8e536;


    mod __external {
    }

    mod __l1_handler {
    }

    mod __constructor {
    }

    impl ContractStateEventEmitter of starknet::event::EventEmitter<
        ContractState, Event
    > {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(
            ref self: ContractState, event: S
        ) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }



impls:

impl EventDrop of Drop::<Event>;


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
        Option::None
    }
}

//! > expected_diagnostics
