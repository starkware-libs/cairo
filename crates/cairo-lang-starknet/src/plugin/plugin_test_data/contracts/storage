//! > Test expansion of StarkNet storage logic.

//! > test_runner_name
ExpandContractTestRunner(expect_diagnostics: warnings_only)

//! > cairo_code
#[derive(Drop, starknet::Store, Hash)]
struct OuterType {
    x: u32,
}

// TODO(ilya): update format.
#[starknet::contract]
mod test_contract {
    #[storage]
    struct Storage {
        var_felt252: felt252,
        var_u8: u8,
        var_u16: u16,
        var_u32: u32,
        var_u64: u64,
        var_u128: u128,
        var_bool: bool,
        felt252_to_u128: LegacyMap::<felt252, u128>,
        u128_to_bool: LegacyMap::<u128, bool>,
        bool_to_felt252: LegacyMap::<bool, felt252>,
        outer_type_var: super::OuterType,
        outer_type_to_outer_type: LegacyMap::<super::OuterType, super::OuterType>,
        inner_type_var: inner::InnerType,
        inner_type_to_inner_type: LegacyMap::<inner::InnerType, inner::InnerType>,
    }

    mod inner {
        #[derive(Drop, starknet::Store, Hash)]
        struct InnerType {
            x: u32,
        }
    }
}

//! > generated_cairo_code
lib.cairo:

#[derive(Drop, starknet::Store, Hash)]
struct OuterType {
    x: u32,
}

// TODO(ilya): update format.
#[starknet::contract]
mod test_contract {
    #[storage]
    struct Storage {
        var_felt252: felt252,
        var_u8: u8,
        var_u16: u16,
        var_u32: u32,
        var_u64: u64,
        var_u128: u128,
        var_bool: bool,
        felt252_to_u128: LegacyMap::<felt252, u128>,
        u128_to_bool: LegacyMap::<u128, bool>,
        bool_to_felt252: LegacyMap::<bool, felt252>,
        outer_type_var: super::OuterType,
        outer_type_to_outer_type: LegacyMap::<super::OuterType, super::OuterType>,
        inner_type_var: inner::InnerType,
        inner_type_to_inner_type: LegacyMap::<inner::InnerType, inner::InnerType>,
    }

    mod inner {
        #[derive(Drop, starknet::Store, Hash)]
        struct InnerType {
            x: u32,
        }
    }
}

impls:

impl OuterTypeDrop of core::traits::Drop::<OuterType>;
impl OuterTypeHash<
    __State,
    impl __SHashState: core::hash::HashStateTrait<__State>,
    +Drop<__State>
> of core::hash::Hash<OuterType, __State, __SHashState> {
    #[inline(always)]
    fn update_state(state: __State, value: OuterType) -> __State {
        let state = core::hash::Hash::update_state(state, value.x);
        state
    }
}


starknet_derive:

impl StoreOuterType of starknet::Store::<OuterType> {
    fn read(address_domain: u32, base: starknet::storage_access::StorageBaseAddress) -> starknet::SyscallResult<OuterType> {
        let x = starknet::Store::<u32>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            OuterType {
                x,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, value: OuterType) -> starknet::SyscallResult<()> {
        starknet::Store::<u32>::write(address_domain, base, value.x)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<OuterType> {
        let x = starknet::Store::<u32>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            OuterType {
                x,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8, value: OuterType) -> starknet::SyscallResult<()> {
        starknet::Store::<u32>::write_at_offset(address_domain, base, offset, value.x)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<u32>::size()
    }
}

#[derive(Drop, Copy)]
struct OuterTypeSubPointers {
    x: starknet::storage::StoragePointer<u32>,
}
impl OuterTypeSubPointersImpl of starknet::storage::SubPointers<OuterType> {
type SubPointersType = OuterTypeSubPointers;
   fn sub_pointers(self: starknet::storage::StoragePointer<OuterType>) -> OuterTypeSubPointers {
               let base_address = self.address;
        let mut current_offset = self.offset;
        let x_value = starknet::storage::StoragePointer {
            address: base_address,
            offset: current_offset,
        };
                OuterTypeSubPointers {
           x: x_value,
        }
    }
}
#[derive(Drop, Copy)]
struct MutableOuterTypeSubPointers {
    x: starknet::storage::StoragePointer<starknet::storage::Mutable::<u32>>,
}
impl MutableOuterTypeSubPointersImpl of starknet::storage::MutableSubPointers<OuterType> {
type SubPointersType = MutableOuterTypeSubPointers;
   fn sub_pointers_mut(self: starknet::storage::StoragePointer<starknet::storage::Mutable::<OuterType>>) -> MutableOuterTypeSubPointers {
               let base_address = self.address;
        let mut current_offset = self.offset;
        let x_value = starknet::storage::StoragePointer {
            address: base_address,
            offset: current_offset,
        };
                MutableOuterTypeSubPointers {
           x: x_value,
        }
    }
}


impls:

impl OuterTypeSubPointersDrop of core::traits::Drop::<OuterTypeSubPointers>;
impl OuterTypeSubPointersCopy of core::traits::Copy::<OuterTypeSubPointers>;


impls:

impl MutableOuterTypeSubPointersDrop of core::traits::Drop::<MutableOuterTypeSubPointers>;
impl MutableOuterTypeSubPointersCopy of core::traits::Copy::<MutableOuterTypeSubPointers>;


contract:

#[event]
#[derive(Drop, starknet::Event)]
pub enum Event {}


#[phantom]
pub struct Storage {
          pub var_felt252: felt252,
          pub var_u8: u8,
          pub var_u16: u16,
          pub var_u32: u32,
          pub var_u64: u64,
          pub var_u128: u128,
          pub var_bool: bool,
          pub felt252_to_u128: LegacyMap::<felt252, u128>,
          pub u128_to_bool: LegacyMap::<u128, bool>,
          pub bool_to_felt252: LegacyMap::<bool, felt252>,
          pub outer_type_var: super::OuterType,
          pub outer_type_to_outer_type: LegacyMap::<super::OuterType, super::OuterType>,
          pub inner_type_var: inner::InnerType,
          pub inner_type_to_inner_type: LegacyMap::<inner::InnerType, inner::InnerType>,
}

#[derive(Drop, Copy)]
pub struct ContractStorageBase {
    pub var_felt252: starknet::storage::StorageBase<felt252>,
    pub var_u8: starknet::storage::StorageBase<u8>,
    pub var_u16: starknet::storage::StorageBase<u16>,
    pub var_u32: starknet::storage::StorageBase<u32>,
    pub var_u64: starknet::storage::StorageBase<u64>,
    pub var_u128: starknet::storage::StorageBase<u128>,
    pub var_bool: starknet::storage::StorageBase<bool>,
    pub felt252_to_u128: starknet::storage::StorageBase<LegacyMap::<felt252, u128>>,
    pub u128_to_bool: starknet::storage::StorageBase<LegacyMap::<u128, bool>>,
    pub bool_to_felt252: starknet::storage::StorageBase<LegacyMap::<bool, felt252>>,
    pub outer_type_var: starknet::storage::StorageBase<super::OuterType>,
    pub outer_type_to_outer_type: starknet::storage::StorageBase<LegacyMap::<super::OuterType, super::OuterType>>,
    pub inner_type_var: starknet::storage::StorageBase<inner::InnerType>,
    pub inner_type_to_inner_type: starknet::storage::StorageBase<LegacyMap::<inner::InnerType, inner::InnerType>>,
}
#[derive(Drop, Copy)]
pub struct ContractStorageBaseMut {
    pub var_felt252: starknet::storage::StorageBase<starknet::storage::Mutable<felt252>>,
    pub var_u8: starknet::storage::StorageBase<starknet::storage::Mutable<u8>>,
    pub var_u16: starknet::storage::StorageBase<starknet::storage::Mutable<u16>>,
    pub var_u32: starknet::storage::StorageBase<starknet::storage::Mutable<u32>>,
    pub var_u64: starknet::storage::StorageBase<starknet::storage::Mutable<u64>>,
    pub var_u128: starknet::storage::StorageBase<starknet::storage::Mutable<u128>>,
    pub var_bool: starknet::storage::StorageBase<starknet::storage::Mutable<bool>>,
    pub felt252_to_u128: starknet::storage::StorageBase<starknet::storage::Mutable<LegacyMap::<felt252, u128>>>,
    pub u128_to_bool: starknet::storage::StorageBase<starknet::storage::Mutable<LegacyMap::<u128, bool>>>,
    pub bool_to_felt252: starknet::storage::StorageBase<starknet::storage::Mutable<LegacyMap::<bool, felt252>>>,
    pub outer_type_var: starknet::storage::StorageBase<starknet::storage::Mutable<super::OuterType>>,
    pub outer_type_to_outer_type: starknet::storage::StorageBase<starknet::storage::Mutable<LegacyMap::<super::OuterType, super::OuterType>>>,
    pub inner_type_var: starknet::storage::StorageBase<starknet::storage::Mutable<inner::InnerType>>,
    pub inner_type_to_inner_type: starknet::storage::StorageBase<starknet::storage::Mutable<LegacyMap::<inner::InnerType, inner::InnerType>>>,
}
impl StorageBaseImpl of starknet::storage::StorageTrait<Storage> {
    type BaseType = ContractStorageBase;
    fn storage(self: starknet::storage::FlattenedStorage<Storage>) -> ContractStorageBase {
        ContractStorageBase {
           var_felt252: starknet::storage::StorageBase{ address: selector!("var_felt252") },
           var_u8: starknet::storage::StorageBase{ address: selector!("var_u8") },
           var_u16: starknet::storage::StorageBase{ address: selector!("var_u16") },
           var_u32: starknet::storage::StorageBase{ address: selector!("var_u32") },
           var_u64: starknet::storage::StorageBase{ address: selector!("var_u64") },
           var_u128: starknet::storage::StorageBase{ address: selector!("var_u128") },
           var_bool: starknet::storage::StorageBase{ address: selector!("var_bool") },
           felt252_to_u128: starknet::storage::StorageBase{ address: selector!("felt252_to_u128") },
           u128_to_bool: starknet::storage::StorageBase{ address: selector!("u128_to_bool") },
           bool_to_felt252: starknet::storage::StorageBase{ address: selector!("bool_to_felt252") },
           outer_type_var: starknet::storage::StorageBase{ address: selector!("outer_type_var") },
           outer_type_to_outer_type: starknet::storage::StorageBase{ address: selector!("outer_type_to_outer_type") },
           inner_type_var: starknet::storage::StorageBase{ address: selector!("inner_type_var") },
           inner_type_to_inner_type: starknet::storage::StorageBase{ address: selector!("inner_type_to_inner_type") },
        }
    }
}
impl MutableStorageBaseImpl of starknet::storage::MutableStorageTrait<Storage> {
    type BaseType = ContractStorageBaseMut;
    fn storage_mut(self: starknet::storage::FlattenedStorage<starknet::storage::Mutable<Storage>>) -> ContractStorageBaseMut {
        ContractStorageBaseMut {
           var_felt252: starknet::storage::StorageBase{ address: selector!("var_felt252") },
           var_u8: starknet::storage::StorageBase{ address: selector!("var_u8") },
           var_u16: starknet::storage::StorageBase{ address: selector!("var_u16") },
           var_u32: starknet::storage::StorageBase{ address: selector!("var_u32") },
           var_u64: starknet::storage::StorageBase{ address: selector!("var_u64") },
           var_u128: starknet::storage::StorageBase{ address: selector!("var_u128") },
           var_bool: starknet::storage::StorageBase{ address: selector!("var_bool") },
           felt252_to_u128: starknet::storage::StorageBase{ address: selector!("felt252_to_u128") },
           u128_to_bool: starknet::storage::StorageBase{ address: selector!("u128_to_bool") },
           bool_to_felt252: starknet::storage::StorageBase{ address: selector!("bool_to_felt252") },
           outer_type_var: starknet::storage::StorageBase{ address: selector!("outer_type_var") },
           outer_type_to_outer_type: starknet::storage::StorageBase{ address: selector!("outer_type_to_outer_type") },
           inner_type_var: starknet::storage::StorageBase{ address: selector!("inner_type_var") },
           inner_type_to_inner_type: starknet::storage::StorageBase{ address: selector!("inner_type_to_inner_type") },
        }
    }
 }
//  impl FlattenedStorageDeref of core::ops::Deref<starknet::storage::FlattenedStorage<Storage>> {
//     type Target = ContractStorageBase;
//     fn deref(self: starknet::storage::FlattenedStorage<Storage>) -> //  ContractStorageBase {
//             self.storage()
//     }
// }
// impl MutableFlattenedStorageDeref of //  core::ops::Deref<starknet::storage::FlattenedStorage<starknet::storage::Mutable<Storage>>> //  {
//     type Target = ContractStorageBaseMut;
//     fn deref(self: //  starknet::storage::FlattenedStorage<starknet::storage::Mutable<Storage>>) -> //  ContractStorageBaseMut {
//             self.storage_mut()
//     }
// }

pub struct ContractState {
}

impl ContractStateDrop of Drop<ContractState> {}
 
impl ContractStateDeref of core::ops::SnapshotDeref<ContractState> {
    type Target = starknet::storage::FlattenedStorage<Storage>;
    fn snapshot_deref(self: @ContractState) -> starknet::storage::FlattenedStorage<Storage> {
        starknet::storage::FlattenedStorage {}
    }
}
impl ContractStateDerefMut of core::ops::DerefMut<ContractState> {
    type Target = starknet::storage::FlattenedStorage<starknet::storage::Mutable<Storage>> ;
    fn deref_mut(ref self: ContractState) -> starknet::storage::FlattenedStorage<starknet::storage::Mutable<Storage>> {
        starknet::storage::FlattenedStorage {}
    }
}
pub fn unsafe_new_contract_state() -> ContractState {
    ContractState {
    }
}
#[cfg(target: 'test')]
#[inline(always)]
pub fn contract_state_for_testing() -> ContractState {
    unsafe_new_contract_state()
}

// TODO(Gil): This generates duplicate diagnostics because of the plugin system, squash the duplicates into one.
#[deprecated(
    feature: "deprecated_legacy_map",
    note: "Use `starknet::storage::Map` instead."
)]
use starknet::storage::Map as LegacyMap;
#[cfg(target: 'test')]
pub const TEST_CLASS_HASH: felt252 = 0x33d119d7988d8f3251d554948b07e3215c9d66cf56f21bc80a6e513ea8e536;


pub mod __external {
}
pub mod __l1_handler {
}
pub mod __constructor {
}
    impl ContractStateEventEmitter of starknet::event::EventEmitter<
        ContractState, Event
    > {
        fn emit<S, impl IntoImp: core::traits::Into<S, Event>>(
            ref self: ContractState, event: S
        ) {
            let event: Event = core::traits::Into::into(event);
            let mut keys = Default::<core::array::Array>::default();
            let mut data = Default::<core::array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTrait::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    core::array::ArrayTrait::span(@keys),
                    core::array::ArrayTrait::span(@data),
                )
            )
        }
    }



impls:

impl EventDrop of core::traits::Drop::<Event>;


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let __selector__ = *core::array::SpanTrait::pop_front(ref keys)?;
        Option::None
    }
}



impls:

impl ContractStorageBaseDrop of core::traits::Drop::<ContractStorageBase>;
impl ContractStorageBaseCopy of core::traits::Copy::<ContractStorageBase>;


impls:

impl ContractStorageBaseMutDrop of core::traits::Drop::<ContractStorageBaseMut>;
impl ContractStorageBaseMutCopy of core::traits::Copy::<ContractStorageBaseMut>;

//! > expected_diagnostics
warning: Usage of deprecated feature `"deprecated_legacy_map"` with no `#[feature("deprecated_legacy_map")]` attribute. Note: "Use `starknet::storage::Map` instead."
 --> lib.cairo[contract]:15:32
          pub felt252_to_u128: LegacyMap::<felt252, u128>,
                               ^*******^

warning: Usage of deprecated feature `"deprecated_legacy_map"` with no `#[feature("deprecated_legacy_map")]` attribute. Note: "Use `starknet::storage::Map` instead."
 --> lib.cairo[contract]:16:29
          pub u128_to_bool: LegacyMap::<u128, bool>,
                            ^*******^

warning: Usage of deprecated feature `"deprecated_legacy_map"` with no `#[feature("deprecated_legacy_map")]` attribute. Note: "Use `starknet::storage::Map` instead."
 --> lib.cairo[contract]:17:32
          pub bool_to_felt252: LegacyMap::<bool, felt252>,
                               ^*******^

warning: Usage of deprecated feature `"deprecated_legacy_map"` with no `#[feature("deprecated_legacy_map")]` attribute. Note: "Use `starknet::storage::Map` instead."
 --> lib.cairo[contract]:19:41
          pub outer_type_to_outer_type: LegacyMap::<super::OuterType, super::OuterType>,
                                        ^*******^

warning: Usage of deprecated feature `"deprecated_legacy_map"` with no `#[feature("deprecated_legacy_map")]` attribute. Note: "Use `starknet::storage::Map` instead."
 --> lib.cairo[contract]:21:41
          pub inner_type_to_inner_type: LegacyMap::<inner::InnerType, inner::InnerType>,
                                        ^*******^

warning: Usage of deprecated feature `"deprecated_legacy_map"` with no `#[feature("deprecated_legacy_map")]` attribute. Note: "Use `starknet::storage::Map` instead."
 --> lib.cairo[contract]:33:57
    pub felt252_to_u128: starknet::storage::StorageBase<LegacyMap::<felt252, u128>>,
                                                        ^*******^

warning: Usage of deprecated feature `"deprecated_legacy_map"` with no `#[feature("deprecated_legacy_map")]` attribute. Note: "Use `starknet::storage::Map` instead."
 --> lib.cairo[contract]:34:54
    pub u128_to_bool: starknet::storage::StorageBase<LegacyMap::<u128, bool>>,
                                                     ^*******^

warning: Usage of deprecated feature `"deprecated_legacy_map"` with no `#[feature("deprecated_legacy_map")]` attribute. Note: "Use `starknet::storage::Map` instead."
 --> lib.cairo[contract]:35:57
    pub bool_to_felt252: starknet::storage::StorageBase<LegacyMap::<bool, felt252>>,
                                                        ^*******^

warning: Usage of deprecated feature `"deprecated_legacy_map"` with no `#[feature("deprecated_legacy_map")]` attribute. Note: "Use `starknet::storage::Map` instead."
 --> lib.cairo[contract]:37:66
    pub outer_type_to_outer_type: starknet::storage::StorageBase<LegacyMap::<super::OuterType, super::OuterType>>,
                                                                 ^*******^

warning: Usage of deprecated feature `"deprecated_legacy_map"` with no `#[feature("deprecated_legacy_map")]` attribute. Note: "Use `starknet::storage::Map` instead."
 --> lib.cairo[contract]:39:66
    pub inner_type_to_inner_type: starknet::storage::StorageBase<LegacyMap::<inner::InnerType, inner::InnerType>>,
                                                                 ^*******^

warning: Usage of deprecated feature `"deprecated_legacy_map"` with no `#[feature("deprecated_legacy_map")]` attribute. Note: "Use `starknet::storage::Map` instead."
 --> lib.cairo[contract]:50:84
    pub felt252_to_u128: starknet::storage::StorageBase<starknet::storage::Mutable<LegacyMap::<felt252, u128>>>,
                                                                                   ^*******^

warning: Usage of deprecated feature `"deprecated_legacy_map"` with no `#[feature("deprecated_legacy_map")]` attribute. Note: "Use `starknet::storage::Map` instead."
 --> lib.cairo[contract]:51:81
    pub u128_to_bool: starknet::storage::StorageBase<starknet::storage::Mutable<LegacyMap::<u128, bool>>>,
                                                                                ^*******^

warning: Usage of deprecated feature `"deprecated_legacy_map"` with no `#[feature("deprecated_legacy_map")]` attribute. Note: "Use `starknet::storage::Map` instead."
 --> lib.cairo[contract]:52:84
    pub bool_to_felt252: starknet::storage::StorageBase<starknet::storage::Mutable<LegacyMap::<bool, felt252>>>,
                                                                                   ^*******^

warning: Usage of deprecated feature `"deprecated_legacy_map"` with no `#[feature("deprecated_legacy_map")]` attribute. Note: "Use `starknet::storage::Map` instead."
 --> lib.cairo[contract]:54:93
    pub outer_type_to_outer_type: starknet::storage::StorageBase<starknet::storage::Mutable<LegacyMap::<super::OuterType, super::OuterType>>>,
                                                                                            ^*******^

warning: Usage of deprecated feature `"deprecated_legacy_map"` with no `#[feature("deprecated_legacy_map")]` attribute. Note: "Use `starknet::storage::Map` instead."
 --> lib.cairo[contract]:56:93
    pub inner_type_to_inner_type: starknet::storage::StorageBase<starknet::storage::Mutable<LegacyMap::<inner::InnerType, inner::InnerType>>>,
                                                                                            ^*******^
