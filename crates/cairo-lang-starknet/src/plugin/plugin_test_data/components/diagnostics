//! > Test `embeddable_as` attribute with no arguments.

//! > test_runner_name
ExpandContractTestRunner(allow_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod component {
    use super::MyTrait;
    // TODO(gil): this is temporary, until this trait is generated by the plugin.
    trait HasComponent<TContractState> {
        fn get_component(self: @TContractState) -> ComponentState<TContractState>;
        fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    }

    #[storage]
    struct Storage {}

    #[embeddable_as]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing(self: @ComponentState<TContractState>) {
        }
    }
}
trait MyTrait<T> {
    fn do_nothing(self: @T);
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod component {
    use super::MyTrait;
    // TODO(gil): this is temporary, until this trait is generated by the plugin.
    trait HasComponent<TContractState> {
        fn get_component(self: @TContractState) -> ComponentState<TContractState>;
        fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    }

    #[storage]
    struct Storage {}

    #[embeddable_as]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing(self: @ComponentState<TContractState>) {
        }
    }
}
trait MyTrait<T> {
    fn do_nothing(self: @T);
}

component:

use starknet::event::EventEmitter;
#[event] #[derive(Drop, starknet::Event)] enum Event {}

    impl ComponentStateEventEmitter<TCS> of EventEmitter<ComponentState<TCS>, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TCS>, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    struct ComponentState<TCS> {
    }
    impl ComponentStateDrop<TCS> of Drop<ComponentState<TCS>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TCS>() -> ComponentState<TCS> {
        ComponentState::<TCS> {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TCS>() -> ComponentState<TCS> {
        unsafe_new_component_state<TCS>()
    }
    


impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
        Option::None
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: `embeddable_as` attribute must have a single unnamed argument for the generated impl name, e.g.: #[embeddable_as(MyImpl)].
 --> lib.cairo:13:5
    #[embeddable_as]
    ^**************^

//! > ==========================================================================

//! > Test `embeddable_as` attribute with too many arguments.

//! > test_runner_name
ExpandContractTestRunner(allow_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod component {
    use super::MyTrait;
    // TODO(gil): this is temporary, until this trait is generated by the plugin.
    trait HasComponent<TContractState> {
        fn get_component(self: @TContractState) -> ComponentState<TContractState>;
        fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    }

    #[storage]
    struct Storage {}

    #[embeddable_as(X, Y)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing(self: @ComponentState<TContractState>) {
        }
    }
}
trait MyTrait<T> {
    fn do_nothing(self: @T);
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod component {
    use super::MyTrait;
    // TODO(gil): this is temporary, until this trait is generated by the plugin.
    trait HasComponent<TContractState> {
        fn get_component(self: @TContractState) -> ComponentState<TContractState>;
        fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    }

    #[storage]
    struct Storage {}

    #[embeddable_as(X, Y)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing(self: @ComponentState<TContractState>) {
        }
    }
}
trait MyTrait<T> {
    fn do_nothing(self: @T);
}

component:

use starknet::event::EventEmitter;
#[event] #[derive(Drop, starknet::Event)] enum Event {}

    impl ComponentStateEventEmitter<TCS> of EventEmitter<ComponentState<TCS>, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TCS>, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    struct ComponentState<TCS> {
    }
    impl ComponentStateDrop<TCS> of Drop<ComponentState<TCS>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TCS>() -> ComponentState<TCS> {
        ComponentState::<TCS> {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TCS>() -> ComponentState<TCS> {
        unsafe_new_component_state<TCS>()
    }
    


impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
        Option::None
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: `embeddable_as` attribute must have a single unnamed argument for the generated impl name, e.g.: #[embeddable_as(MyImpl)].
 --> lib.cairo:13:5
    #[embeddable_as(X, Y)]
    ^********************^

//! > ==========================================================================

//! > Test `embeddable_as` attribute with named argument.

//! > test_runner_name
ExpandContractTestRunner(allow_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod component {
    use super::MyTrait;
    // TODO(gil): this is temporary, until this trait is generated by the plugin.
    trait HasComponent<TContractState> {
        fn get_component(self: @TContractState) -> ComponentState<TContractState>;
        fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    }

    #[storage]
    struct Storage {}

    #[embeddable_as(name: MyImpl)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing(self: @ComponentState<TContractState>) {
        }
    }
}
trait MyTrait<T> {
    fn do_nothing(self: @T);
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod component {
    use super::MyTrait;
    // TODO(gil): this is temporary, until this trait is generated by the plugin.
    trait HasComponent<TContractState> {
        fn get_component(self: @TContractState) -> ComponentState<TContractState>;
        fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    }

    #[storage]
    struct Storage {}

    #[embeddable_as(name: MyImpl)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing(self: @ComponentState<TContractState>) {
        }
    }
}
trait MyTrait<T> {
    fn do_nothing(self: @T);
}

component:

use starknet::event::EventEmitter;
#[event] #[derive(Drop, starknet::Event)] enum Event {}

    impl ComponentStateEventEmitter<TCS> of EventEmitter<ComponentState<TCS>, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TCS>, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    struct ComponentState<TCS> {
    }
    impl ComponentStateDrop<TCS> of Drop<ComponentState<TCS>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TCS>() -> ComponentState<TCS> {
        ComponentState::<TCS> {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TCS>() -> ComponentState<TCS> {
        unsafe_new_component_state<TCS>()
    }
    


impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
        Option::None
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: `embeddable_as` attribute must have a single unnamed argument for the generated impl name, e.g.: #[embeddable_as(MyImpl)].
 --> lib.cairo:13:5
    #[embeddable_as(name: MyImpl)]
    ^****************************^

//! > ==========================================================================

//! > Test `embeddable_as` with no generic parameters.

//! > test_runner_name
ExpandContractTestRunner(allow_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod component {
    use super::MyTrait;
    // TODO(gil): this is temporary, until this trait is generated by the plugin.
    trait HasComponent<TContractState> {
        fn get_component(self: @TContractState) -> ComponentState<TContractState>;
        fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    }

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl of MyTrait<ComponentState<usize>> {
        fn do_nothing() {}
    }
}
trait MyTrait<T> {
    fn do_nothing();
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod component {
    use super::MyTrait;
    // TODO(gil): this is temporary, until this trait is generated by the plugin.
    trait HasComponent<TContractState> {
        fn get_component(self: @TContractState) -> ComponentState<TContractState>;
        fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    }

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl of MyTrait<ComponentState<usize>> {
        fn do_nothing() {}
    }
}
trait MyTrait<T> {
    fn do_nothing();
}

component:

use starknet::event::EventEmitter;
#[event] #[derive(Drop, starknet::Event)] enum Event {}

    impl ComponentStateEventEmitter<TCS> of EventEmitter<ComponentState<TCS>, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TCS>, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    struct ComponentState<TCS> {
    }
    impl ComponentStateDrop<TCS> of Drop<ComponentState<TCS>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TCS>() -> ComponentState<TCS> {
        ComponentState::<TCS> {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TCS>() -> ComponentState<TCS> {
        unsafe_new_component_state<TCS>()
    }
    


impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
        Option::None
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: The first generic parameter of an impl with #[embeddable_as] should be `TContractState`.
 --> lib.cairo:14:10
    impl MyInnerImpl of MyTrait<ComponentState<usize>> {
         ^*********^

//! > ==========================================================================

//! > Test `embeddable_as` with empty generic parameters list.

//! > test_runner_name
ExpandContractTestRunner(allow_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod component {
    use super::MyTrait;
    // TODO(gil): this is temporary, until this trait is generated by the plugin.
    trait HasComponent<TContractState> {
        fn get_component(self: @TContractState) -> ComponentState<TContractState>;
        fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    }

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<> of MyTrait<ComponentState<usize>> {
        fn do_nothing() {}
    }
}
trait MyTrait<T> {
    fn do_nothing();
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod component {
    use super::MyTrait;
    // TODO(gil): this is temporary, until this trait is generated by the plugin.
    trait HasComponent<TContractState> {
        fn get_component(self: @TContractState) -> ComponentState<TContractState>;
        fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    }

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<> of MyTrait<ComponentState<usize>> {
        fn do_nothing() {}
    }
}
trait MyTrait<T> {
    fn do_nothing();
}

component:

use starknet::event::EventEmitter;
#[event] #[derive(Drop, starknet::Event)] enum Event {}

    impl ComponentStateEventEmitter<TCS> of EventEmitter<ComponentState<TCS>, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TCS>, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    struct ComponentState<TCS> {
    }
    impl ComponentStateDrop<TCS> of Drop<ComponentState<TCS>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TCS>() -> ComponentState<TCS> {
        ComponentState::<TCS> {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TCS>() -> ComponentState<TCS> {
        unsafe_new_component_state<TCS>()
    }
    


impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
        Option::None
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: The first generic parameter of an impl with #[embeddable_as] should be `TContractState`.
 --> lib.cairo:14:21
    impl MyInnerImpl<> of MyTrait<ComponentState<usize>> {
                    ^^

//! > ==========================================================================

//! > Test `embeddable_as` with wrong first generic parameter.

//! > test_runner_name
ExpandContractTestRunner(allow_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod component {
    use super::MyTrait;
    // TODO(gil): this is temporary, until this trait is generated by the plugin.
    trait HasComponent<TContractState> {
        fn get_component(self: @TContractState) -> ComponentState<TContractState>;
        fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    }

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<impl X: HasComponent<TContractState>, TContractState> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing() {}
    }
}
trait MyTrait<T> {
    fn do_nothing();
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod component {
    use super::MyTrait;
    // TODO(gil): this is temporary, until this trait is generated by the plugin.
    trait HasComponent<TContractState> {
        fn get_component(self: @TContractState) -> ComponentState<TContractState>;
        fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    }

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<impl X: HasComponent<TContractState>, TContractState> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing() {}
    }
}
trait MyTrait<T> {
    fn do_nothing();
}

component:

use starknet::event::EventEmitter;
#[event] #[derive(Drop, starknet::Event)] enum Event {}

    impl ComponentStateEventEmitter<TCS> of EventEmitter<ComponentState<TCS>, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TCS>, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    struct ComponentState<TCS> {
    }
    impl ComponentStateDrop<TCS> of Drop<ComponentState<TCS>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TCS>() -> ComponentState<TCS> {
        ComponentState::<TCS> {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TCS>() -> ComponentState<TCS> {
        unsafe_new_component_state<TCS>()
    }
    


impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
        Option::None
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: The first generic parameter of an impl with #[embeddable_as] should be `TContractState`.
 --> lib.cairo:14:21
    impl MyInnerImpl<impl X: HasComponent<TContractState>, TContractState> of MyTrait<ComponentState<TContractState>> {
                    ^****************************************************^

//! > ==========================================================================

//! > Test `embeddable_as` with no generic parameter that is an impl of HasComponent<TContractState>.

//! > test_runner_name
ExpandContractTestRunner(allow_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod component {
    use super::MyTrait;
    // TODO(gil): this is temporary, until this trait is generated by the plugin.
    trait HasComponent<TContractState> {
        fn get_component(self: @TContractState) -> ComponentState<TContractState>;
        fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    }

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<TContractState> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing() {}
    }
}
trait MyTrait<T> {
    fn do_nothing();
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod component {
    use super::MyTrait;
    // TODO(gil): this is temporary, until this trait is generated by the plugin.
    trait HasComponent<TContractState> {
        fn get_component(self: @TContractState) -> ComponentState<TContractState>;
        fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    }

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<TContractState> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing() {}
    }
}
trait MyTrait<T> {
    fn do_nothing();
}

component:

use starknet::event::EventEmitter;
#[event] #[derive(Drop, starknet::Event)] enum Event {}

    impl ComponentStateEventEmitter<TCS> of EventEmitter<ComponentState<TCS>, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TCS>, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    struct ComponentState<TCS> {
    }
    impl ComponentStateDrop<TCS> of Drop<ComponentState<TCS>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TCS>() -> ComponentState<TCS> {
        ComponentState::<TCS> {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TCS>() -> ComponentState<TCS> {
        unsafe_new_component_state<TCS>()
    }
    


impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
        Option::None
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: An impl with #[embeddable_as] should have a generic parameter which is an impl of `HasComponent<TContractState>`.
 --> lib.cairo:14:21
    impl MyInnerImpl<TContractState> of MyTrait<ComponentState<TContractState>> {
                    ^**************^

//! > ==========================================================================

//! > Test `embeddable_as` impl with empty body.

//! > test_runner_name
ExpandContractTestRunner(allow_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod component {
    use super::MyTrait;
    // TODO(gil): this is temporary, until this trait is generated by the plugin.
    trait HasComponent<TContractState> {
        fn get_component(self: @TContractState) -> ComponentState<TContractState>;
        fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    }

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>>;
}
trait MyTrait<T>;

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod component {
    use super::MyTrait;
    // TODO(gil): this is temporary, until this trait is generated by the plugin.
    trait HasComponent<TContractState> {
        fn get_component(self: @TContractState) -> ComponentState<TContractState>;
        fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    }

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>>;
}
trait MyTrait<T>;

component:

use starknet::event::EventEmitter;
#[event] #[derive(Drop, starknet::Event)] enum Event {}

    impl ComponentStateEventEmitter<TCS> of EventEmitter<ComponentState<TCS>, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TCS>, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    struct ComponentState<TCS> {
    }
    impl ComponentStateDrop<TCS> of Drop<ComponentState<TCS>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TCS>() -> ComponentState<TCS> {
        ComponentState::<TCS> {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TCS>() -> ComponentState<TCS> {
        unsafe_new_component_state<TCS>()
    }
    


impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
        Option::None
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: `embeddable_as` attribute is not supported for empty impls.
 --> lib.cairo:14:118
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>>;
                                                                                                                     ^

//! > ==========================================================================

//! > Test `embeddable_as` with function with no/wrong `self` parameter.

//! > test_runner_name
ExpandContractTestRunner(allow_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod component {
    use super::MyTrait;
    // TODO(gil): this is temporary, until this trait is generated by the plugin.
    trait HasComponent<TContractState> {
        fn get_component(self: @TContractState) -> ComponentState<TContractState>;
        fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    }

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
        fn no_self() {}
        fn self_of_wrong_type(self: ComponentState<TContractState>) {}
    }
}
trait MyTrait<T> {
    fn no_self();
    fn self_of_wrong_type(self: T);
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod component {
    use super::MyTrait;
    // TODO(gil): this is temporary, until this trait is generated by the plugin.
    trait HasComponent<TContractState> {
        fn get_component(self: @TContractState) -> ComponentState<TContractState>;
        fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    }

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
        fn no_self() {}
        fn self_of_wrong_type(self: ComponentState<TContractState>) {}
    }
}
trait MyTrait<T> {
    fn no_self();
    fn self_of_wrong_type(self: T);
}

component:

use starknet::event::EventEmitter;
#[event] #[derive(Drop, starknet::Event)] enum Event {}

    impl ComponentStateEventEmitter<TCS> of EventEmitter<ComponentState<TCS>, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TCS>, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    struct ComponentState<TCS> {
    }
    impl ComponentStateDrop<TCS> of Drop<ComponentState<TCS>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TCS>() -> ComponentState<TCS> {
        ComponentState::<TCS> {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TCS>() -> ComponentState<TCS> {
        unsafe_new_component_state<TCS>()
    }
    
trait MyInnerImplTrait<TContractState> {
}

#[starknet::embeddable]
impl MyImpl<TContractState, impl X: HasComponent<TContractState>, impl TContractStatePanicDestruct: PanicDestruct<TContractState>> of MyInnerImplTrait<TContractState> {
}

impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
        Option::None
    }
}



embeddable:

trait UnsafeNewContractStateTraitForMyImpl<TContractState> {
    fn unsafe_new_contract_state() -> TContractState;
}



mod __external_MyImpl {
}

mod __l1_handler_MyImpl {
}

mod __constructor_MyImpl {
}

//! > expected_diagnostics
error: Plugin diagnostic: A function in an #[embeddable_as] impl in a component must have a first `self` parameter.
 --> lib.cairo:15:20
        fn no_self() {}
                   ^

error: Plugin diagnostic: The first parameter of a function in an #[embeddable_as] impl in a component must be either `self: @TContractState` (for view functions) or `ref self: TContractState` (for external functions).
 --> lib.cairo:16:31
        fn self_of_wrong_type(self: ComponentState<TContractState>) {}
                              ^**********************************^
