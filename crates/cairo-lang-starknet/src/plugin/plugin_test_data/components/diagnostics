//! > Test `embeddable_as` attribute with no arguments.

//! > test_runner_name
ExpandContractTestRunner(expect_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod component {
    use super::MyTrait;

    #[storage]
    struct Storage {}

    #[embeddable_as]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing(self: @ComponentState<TContractState>) {
        }
    }
}
trait MyTrait<T> {
    fn do_nothing(self: @T);
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod component {
    use super::MyTrait;

    #[storage]
    struct Storage {}

    #[embeddable_as]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing(self: @ComponentState<TContractState>) {
        }
    }
}
trait MyTrait<T> {
    fn do_nothing(self: @T);
}

component:

#[event]
#[derive(Drop, starknet::Event)]
enum Event {}


    struct ComponentState<TContractState> {
    }
    impl ComponentStateDrop<TContractState> of Drop<ComponentState<TContractState>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TContractState>() -> ComponentState<TContractState> {
        ComponentState::<TContractState> {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TContractState>() -> ComponentState<TContractState> {
        unsafe_new_component_state::<TContractState>()
    }
    

use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait,
};
trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TContractState>, event: S);
}



impls:

impl EventDrop of Drop::<Event>;


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        Option::None
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: `embeddable_as` attribute must have a single unnamed argument for the generated impl name, e.g.: #[embeddable_as(MyImpl)].
 --> lib.cairo:8:5
    #[embeddable_as]
    ^**************^

//! > ==========================================================================

//! > Test `embeddable_as` attribute with too many arguments.

//! > test_runner_name
ExpandContractTestRunner(expect_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod component {
    use super::MyTrait;

    #[storage]
    struct Storage {}

    #[embeddable_as(X, Y)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing(self: @ComponentState<TContractState>) {
        }
    }
}
trait MyTrait<T> {
    fn do_nothing(self: @T);
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod component {
    use super::MyTrait;

    #[storage]
    struct Storage {}

    #[embeddable_as(X, Y)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing(self: @ComponentState<TContractState>) {
        }
    }
}
trait MyTrait<T> {
    fn do_nothing(self: @T);
}

component:

#[event]
#[derive(Drop, starknet::Event)]
enum Event {}


    struct ComponentState<TContractState> {
    }
    impl ComponentStateDrop<TContractState> of Drop<ComponentState<TContractState>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TContractState>() -> ComponentState<TContractState> {
        ComponentState::<TContractState> {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TContractState>() -> ComponentState<TContractState> {
        unsafe_new_component_state::<TContractState>()
    }
    

use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait,
};
trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TContractState>, event: S);
}



impls:

impl EventDrop of Drop::<Event>;


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        Option::None
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: `embeddable_as` attribute must have a single unnamed argument for the generated impl name, e.g.: #[embeddable_as(MyImpl)].
 --> lib.cairo:8:5
    #[embeddable_as(X, Y)]
    ^********************^

//! > ==========================================================================

//! > Test `embeddable_as` attribute with named argument.

//! > test_runner_name
ExpandContractTestRunner(expect_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod component {
    use super::MyTrait;

    #[storage]
    struct Storage {}

    #[embeddable_as(name: MyImpl)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing(self: @ComponentState<TContractState>) {
        }
    }
}
trait MyTrait<T> {
    fn do_nothing(self: @T);
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod component {
    use super::MyTrait;

    #[storage]
    struct Storage {}

    #[embeddable_as(name: MyImpl)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing(self: @ComponentState<TContractState>) {
        }
    }
}
trait MyTrait<T> {
    fn do_nothing(self: @T);
}

component:

#[event]
#[derive(Drop, starknet::Event)]
enum Event {}


    struct ComponentState<TContractState> {
    }
    impl ComponentStateDrop<TContractState> of Drop<ComponentState<TContractState>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TContractState>() -> ComponentState<TContractState> {
        ComponentState::<TContractState> {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TContractState>() -> ComponentState<TContractState> {
        unsafe_new_component_state::<TContractState>()
    }
    

use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait,
};
trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TContractState>, event: S);
}



impls:

impl EventDrop of Drop::<Event>;


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        Option::None
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: `embeddable_as` attribute must have a single unnamed argument for the generated impl name, e.g.: #[embeddable_as(MyImpl)].
 --> lib.cairo:8:5
    #[embeddable_as(name: MyImpl)]
    ^****************************^

//! > ==========================================================================

//! > Test `embeddable_as` with no generic parameters.

//! > test_runner_name
ExpandContractTestRunner(expect_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod component {
    use super::MyTrait;

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl of MyTrait<ComponentState<usize>> {
        fn do_nothing() {}
    }
}
trait MyTrait<T> {
    fn do_nothing();
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod component {
    use super::MyTrait;

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl of MyTrait<ComponentState<usize>> {
        fn do_nothing() {}
    }
}
trait MyTrait<T> {
    fn do_nothing();
}

component:

#[event]
#[derive(Drop, starknet::Event)]
enum Event {}


    struct ComponentState<TContractState> {
    }
    impl ComponentStateDrop<TContractState> of Drop<ComponentState<TContractState>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TContractState>() -> ComponentState<TContractState> {
        ComponentState::<TContractState> {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TContractState>() -> ComponentState<TContractState> {
        unsafe_new_component_state::<TContractState>()
    }
    

use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait,
};
trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TContractState>, event: S);
}



impls:

impl EventDrop of Drop::<Event>;


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        Option::None
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: The first generic parameter of an impl with #[embeddable_as] should be `TContractState`.
 --> lib.cairo:9:10
    impl MyInnerImpl of MyTrait<ComponentState<usize>> {
         ^*********^

//! > ==========================================================================

//! > Test `embeddable_as` with empty generic parameters list.

//! > test_runner_name
ExpandContractTestRunner(expect_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod component {
    use super::MyTrait;

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<> of MyTrait<ComponentState<usize>> {
        fn do_nothing() {}
    }
}
trait MyTrait<T> {
    fn do_nothing();
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod component {
    use super::MyTrait;

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<> of MyTrait<ComponentState<usize>> {
        fn do_nothing() {}
    }
}
trait MyTrait<T> {
    fn do_nothing();
}

component:

#[event]
#[derive(Drop, starknet::Event)]
enum Event {}


    struct ComponentState<TContractState> {
    }
    impl ComponentStateDrop<TContractState> of Drop<ComponentState<TContractState>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TContractState>() -> ComponentState<TContractState> {
        ComponentState::<TContractState> {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TContractState>() -> ComponentState<TContractState> {
        unsafe_new_component_state::<TContractState>()
    }
    

use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait,
};
trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TContractState>, event: S);
}



impls:

impl EventDrop of Drop::<Event>;


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        Option::None
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: The first generic parameter of an impl with #[embeddable_as] should be `TContractState`.
 --> lib.cairo:9:21
    impl MyInnerImpl<> of MyTrait<ComponentState<usize>> {
                    ^^

//! > ==========================================================================

//! > Test `embeddable_as` with wrong first generic parameter.

//! > test_runner_name
ExpandContractTestRunner(expect_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod component {
    use super::MyTrait;

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<impl X: HasComponent<TContractState>, TContractState> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing() {}
    }
}
trait MyTrait<T> {
    fn do_nothing();
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod component {
    use super::MyTrait;

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<impl X: HasComponent<TContractState>, TContractState> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing() {}
    }
}
trait MyTrait<T> {
    fn do_nothing();
}

component:

#[event]
#[derive(Drop, starknet::Event)]
enum Event {}


    struct ComponentState<TContractState> {
    }
    impl ComponentStateDrop<TContractState> of Drop<ComponentState<TContractState>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TContractState>() -> ComponentState<TContractState> {
        ComponentState::<TContractState> {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TContractState>() -> ComponentState<TContractState> {
        unsafe_new_component_state::<TContractState>()
    }
    

use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait,
};
trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TContractState>, event: S);
}



impls:

impl EventDrop of Drop::<Event>;


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        Option::None
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: The first generic parameter of an impl with #[embeddable_as] should be `TContractState`.
 --> lib.cairo:9:21
    impl MyInnerImpl<impl X: HasComponent<TContractState>, TContractState> of MyTrait<ComponentState<TContractState>> {
                    ^****************************************************^

//! > ==========================================================================

//! > Test `embeddable_as` with no generic parameter that is an impl of HasComponent<TContractState>.

//! > test_runner_name
ExpandContractTestRunner(expect_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod component {
    use super::MyTrait;

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<TContractState> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing() {}
    }
}
trait MyTrait<T> {
    fn do_nothing();
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod component {
    use super::MyTrait;

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<TContractState> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing() {}
    }
}
trait MyTrait<T> {
    fn do_nothing();
}

component:

#[event]
#[derive(Drop, starknet::Event)]
enum Event {}


    struct ComponentState<TContractState> {
    }
    impl ComponentStateDrop<TContractState> of Drop<ComponentState<TContractState>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TContractState>() -> ComponentState<TContractState> {
        ComponentState::<TContractState> {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TContractState>() -> ComponentState<TContractState> {
        unsafe_new_component_state::<TContractState>()
    }
    

use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait,
};
trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TContractState>, event: S);
}



impls:

impl EventDrop of Drop::<Event>;


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        Option::None
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: An impl with #[embeddable_as] should have a generic parameter which is an impl of `HasComponent<TContractState>`.
 --> lib.cairo:9:21
    impl MyInnerImpl<TContractState> of MyTrait<ComponentState<TContractState>> {
                    ^**************^

//! > ==========================================================================

//! > Test `embeddable_as` impl with empty body.

//! > test_runner_name
ExpandContractTestRunner(expect_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod component {
    use super::MyTrait;

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>>;
}
trait MyTrait<T>;

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod component {
    use super::MyTrait;

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>>;
}
trait MyTrait<T>;

component:

#[event]
#[derive(Drop, starknet::Event)]
enum Event {}


    struct ComponentState<TContractState> {
    }
    impl ComponentStateDrop<TContractState> of Drop<ComponentState<TContractState>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TContractState>() -> ComponentState<TContractState> {
        ComponentState::<TContractState> {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TContractState>() -> ComponentState<TContractState> {
        unsafe_new_component_state::<TContractState>()
    }
    

use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait,
};
trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TContractState>, event: S);
}



impls:

impl EventDrop of Drop::<Event>;


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        Option::None
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: `embeddable_as` attribute is not supported for empty impls.
 --> lib.cairo:9:118
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>>;
                                                                                                                     ^

//! > ==========================================================================

//! > Test `embeddable_as` with function with no/wrong `self` parameter.

//! > test_runner_name
ExpandContractTestRunner(expect_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod component {
    use super::MyTrait;

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
        fn no_self() {}
        fn self_of_wrong_type(self: ComponentState<TContractState>) {}
    }
}
trait MyTrait<T> {
    fn no_self();
    fn self_of_wrong_type(self: T);
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod component {
    use super::MyTrait;

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
        fn no_self() {}
        fn self_of_wrong_type(self: ComponentState<TContractState>) {}
    }
}
trait MyTrait<T> {
    fn no_self();
    fn self_of_wrong_type(self: T);
}

component:

#[event]
#[derive(Drop, starknet::Event)]
enum Event {}


    struct ComponentState<TContractState> {
    }
    impl ComponentStateDrop<TContractState> of Drop<ComponentState<TContractState>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TContractState>() -> ComponentState<TContractState> {
        ComponentState::<TContractState> {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TContractState>() -> ComponentState<TContractState> {
        unsafe_new_component_state::<TContractState>()
    }
    

use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait,
};
trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TContractState>, event: S);
}

#[starknet::embeddable]
impl MyImpl<
    TContractState, impl X: HasComponent<TContractState>, impl TContractStateDrop: Drop<TContractState>
> of MyTrait<TContractState> {
}

impls:

impl EventDrop of Drop::<Event>;


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        Option::None
    }
}



embeddable:

trait UnsafeNewContractStateTraitForMyImpl<TContractState> {
    fn unsafe_new_contract_state() -> TContractState;
}



mod __external_MyImpl {
}

mod __l1_handler_MyImpl {
}

mod __constructor_MyImpl {
}

//! > expected_diagnostics
error: Plugin diagnostic: A function in an #[embeddable_as] impl in a component must have a first `self` parameter.
 --> lib.cairo:10:20
        fn no_self() {}
                   ^

error: Plugin diagnostic: The first parameter of a function in an #[embeddable_as] impl in a component must be either `self: @ComponentState<TContractState>` (for view functions) or `ref self: ComponentState<TContractState>` (for external functions).
 --> lib.cairo:11:31
        fn self_of_wrong_type(self: ComponentState<TContractState>) {}
                              ^**********************************^

error: Plugin diagnostic: Not all trait items are implemented. Missing: 'no_self', 'self_of_wrong_type'.
 --> lib.cairo:8:21
    #[embeddable_as(MyImpl)]
                    ^****^

//! > ==========================================================================

//! > Test `embeddable_as` with Destruct<TContractState>.

//! > test_runner_name
ExpandContractTestRunner(expect_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod component {
    use super::MyTrait;

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>, +Destruct<TContractState>> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing(self: @ComponentState<TContractState>) {
        }
    }
}
trait MyTrait<T> {
    fn do_nothing(self: @T);
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod component {
    use super::MyTrait;

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>, +Destruct<TContractState>> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing(self: @ComponentState<TContractState>) {
        }
    }
}
trait MyTrait<T> {
    fn do_nothing(self: @T);
}

component:

#[event]
#[derive(Drop, starknet::Event)]
enum Event {}


    struct ComponentState<TContractState> {
    }
    impl ComponentStateDrop<TContractState> of Drop<ComponentState<TContractState>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TContractState>() -> ComponentState<TContractState> {
        ComponentState::<TContractState> {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TContractState>() -> ComponentState<TContractState> {
        unsafe_new_component_state::<TContractState>()
    }
    

use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait,
};
trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TContractState>, event: S);
}

#[starknet::embeddable]
impl MyImpl<
    TContractState, impl X: HasComponent<TContractState>, +Destruct<TContractState>, impl TContractStateDrop: Drop<TContractState>
> of MyTrait<TContractState> {
    
    fn do_nothing(self: @TContractState) {
        let component = HasComponent::get_component(self);
        MyInnerImpl::do_nothing(component, )
    }
}

impls:

impl EventDrop of Drop::<Event>;


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        Option::None
    }
}



embeddable:

trait UnsafeNewContractStateTraitForMyImpl<TContractState> {
    fn unsafe_new_contract_state() -> TContractState;
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__MyImpl__do_nothing<TContractState, impl X: HasComponent<TContractState>, +Destruct<TContractState>, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForMyImpl<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    MyImpl::<TContractState, X, _, TContractStateDrop>::do_nothing(@contract_state, );
    let mut arr = array::array_new();
    // References.
    // Result.
    array::ArrayTrait::span(@arr)
}



mod __external_MyImpl {
        use super::__wrapper__MyImpl__do_nothing as do_nothing;
}

mod __l1_handler_MyImpl {
}

mod __constructor_MyImpl {
}

//! > expected_diagnostics
error: Plugin diagnostic: Plugin diagnostic: Embeddable impl can't have impl generic params of `Destruct<TContractState>` or `PanicDestruct<TContractState>`.
 --> lib.cairo:9:76
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>, +Destruct<TContractState>> of MyTrait<ComponentState<TContractState>> {
                                                                           ^***********************^

error: Plugin diagnostic: Trait `core::traits::Destruct::<TContractState>` has multiple implementations, in: GenericParamImpl(test::component::MyImpl::_), core::traits::DestructFromDrop::<TContractState, GenericParamImpl(test::component::MyImpl::TContractStateDrop)>
 --> lib.cairo:9:10
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>, +Destruct<TContractState>> of MyTrait<ComponentState<TContractState>> {
         ^*********^

error: Plugin diagnostic: Trait `core::traits::Destruct::<TContractState>` has multiple implementations, in: GenericParamImpl(test::component::__wrapper__MyImpl__do_nothing::_), core::traits::DestructFromDrop::<TContractState, GenericParamImpl(test::component::__wrapper__MyImpl__do_nothing::TContractStateDrop)>
 --> lib.cairo:8:21
    #[embeddable_as(MyImpl)]
                    ^****^

//! > ==========================================================================

//! > Test `embeddable_as` with PanicDestruct<TContractState>.

//! > test_runner_name
ExpandContractTestRunner(expect_diagnostics: true)

//! > cairo_code
#[starknet::component]
mod component {
    use super::MyTrait;

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>, +PanicDestruct<TContractState>> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing(self: @ComponentState<TContractState>) {
        }
    }
}
trait MyTrait<T> {
    fn do_nothing(self: @T);
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod component {
    use super::MyTrait;

    #[storage]
    struct Storage {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>, +PanicDestruct<TContractState>> of MyTrait<ComponentState<TContractState>> {
        fn do_nothing(self: @ComponentState<TContractState>) {
        }
    }
}
trait MyTrait<T> {
    fn do_nothing(self: @T);
}

component:

#[event]
#[derive(Drop, starknet::Event)]
enum Event {}


    struct ComponentState<TContractState> {
    }
    impl ComponentStateDrop<TContractState> of Drop<ComponentState<TContractState>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TContractState>() -> ComponentState<TContractState> {
        ComponentState::<TContractState> {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TContractState>() -> ComponentState<TContractState> {
        unsafe_new_component_state::<TContractState>()
    }
    

use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait,
};
trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TContractState>, event: S);
}

#[starknet::embeddable]
impl MyImpl<
    TContractState, impl X: HasComponent<TContractState>, +PanicDestruct<TContractState>, impl TContractStateDrop: Drop<TContractState>
> of MyTrait<TContractState> {
    
    fn do_nothing(self: @TContractState) {
        let component = HasComponent::get_component(self);
        MyInnerImpl::do_nothing(component, )
    }
}

impls:

impl EventDrop of Drop::<Event>;


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        Option::None
    }
}



embeddable:

trait UnsafeNewContractStateTraitForMyImpl<TContractState> {
    fn unsafe_new_contract_state() -> TContractState;
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__MyImpl__do_nothing<TContractState, impl X: HasComponent<TContractState>, +PanicDestruct<TContractState>, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForMyImpl<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    MyImpl::<TContractState, X, _, TContractStateDrop>::do_nothing(@contract_state, );
    let mut arr = array::array_new();
    // References.
    // Result.
    array::ArrayTrait::span(@arr)
}



mod __external_MyImpl {
        use super::__wrapper__MyImpl__do_nothing as do_nothing;
}

mod __l1_handler_MyImpl {
}

mod __constructor_MyImpl {
}

//! > expected_diagnostics
error: Plugin diagnostic: Plugin diagnostic: Embeddable impl can't have impl generic params of `Destruct<TContractState>` or `PanicDestruct<TContractState>`.
 --> lib.cairo:9:76
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>, +PanicDestruct<TContractState>> of MyTrait<ComponentState<TContractState>> {
                                                                           ^****************************^

error: Plugin diagnostic: Trait `core::traits::PanicDestruct::<TContractState>` has multiple implementations, in: GenericParamImpl(test::component::MyImpl::_), core::traits::PanicDestructForDestruct::<TContractState, core::traits::DestructFromDrop::<TContractState, GenericParamImpl(test::component::MyImpl::TContractStateDrop)>>
 --> lib.cairo:9:10
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>, +PanicDestruct<TContractState>> of MyTrait<ComponentState<TContractState>> {
         ^*********^

error: Plugin diagnostic: Trait `core::traits::PanicDestruct::<TContractState>` has multiple implementations, in: GenericParamImpl(test::component::__wrapper__MyImpl__do_nothing::_), core::traits::PanicDestructForDestruct::<TContractState, core::traits::DestructFromDrop::<TContractState, GenericParamImpl(test::component::__wrapper__MyImpl__do_nothing::TContractStateDrop)>>
 --> lib.cairo:8:21
    #[embeddable_as(MyImpl)]
                    ^****^
