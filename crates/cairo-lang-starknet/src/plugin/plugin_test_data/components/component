//! > Test expansion of a basic component.

//! > test_runner_name
ExpandContractTestRunner(expect_diagnostics: false)

//! > cairo_code
#[derive(Drop, starknet::Store)]
struct MyType {
    x: u32,
}

#[starknet::component]
mod component {
    use starknet::ContractAddress;
    use super::MyTrait;

    #[storage]
    struct Storage {
        data: u32,
        map: LegacyMap<u32, u32>,
        my_type_var: super::MyType,
    }

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        Log: Log,
    }
    #[derive(Drop, starknet::Event)]
    struct Log {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
        #[external]
        fn get(self: @ComponentState<TContractState>, addr: ContractAddress) -> u32 {
            self.data.read() + self.map.read(10)
        }
        #[external]
        fn set(ref self: ComponentState<TContractState>, addr: ContractAddress, value: u32) {
            self.map.write(10, value);
            self.data.write(value);
            self.emit(Log{});
        }
    }
}
use starknet::ContractAddress;
trait MyTrait<T> {
    fn get(self: @T, addr: ContractAddress) -> u32;
    fn set(ref self: T, addr: ContractAddress, value: u32);
}

//! > generated_cairo_code
lib.cairo:

#[derive(Drop, starknet::Store)]
struct MyType {
    x: u32,
}

#[starknet::component]
mod component {
    use starknet::ContractAddress;
    use super::MyTrait;

    #[storage]
    struct Storage {
        data: u32,
        map: LegacyMap<u32, u32>,
        my_type_var: super::MyType,
    }

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        Log: Log,
    }
    #[derive(Drop, starknet::Event)]
    struct Log {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
        #[external]
        fn get(self: @ComponentState<TContractState>, addr: ContractAddress) -> u32 {
            self.data.read() + self.map.read(10)
        }
        #[external]
        fn set(ref self: ComponentState<TContractState>, addr: ContractAddress, value: u32) {
            self.map.write(10, value);
            self.data.write(value);
            self.emit(Log{});
        }
    }
}
use starknet::ContractAddress;
trait MyTrait<T> {
    fn get(self: @T, addr: ContractAddress) -> u32;
    fn set(ref self: T, addr: ContractAddress, value: u32);
}

impls:

impl MyTypeDrop of Drop::<MyType>;


starknet_derive:

impl StoreMyType of starknet::Store::<MyType> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<MyType> {
        let x = starknet::Store::<u32>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            MyType {
                x,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: MyType) -> starknet::SyscallResult<()> {
        starknet::Store::<u32>::write(address_domain, base, value.x)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<MyType> {
        let x = starknet::Store::<u32>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            MyType {
                x,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: MyType) -> starknet::SyscallResult<()> {
        starknet::Store::<u32>::write_at_offset(address_domain, base, offset, value.x)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<u32>::size()
    }
}

component:



    struct ComponentState<TContractState> {
        data: data::ComponentMemberState,
        map: map::ComponentMemberState,
        my_type_var: my_type_var::ComponentMemberState,
    }
    impl ComponentStateDrop<TContractState> of Drop<ComponentState<TContractState>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TContractState>() -> ComponentState<TContractState> {
        ComponentState::<TContractState> {
            data: data::ComponentMemberState {},
            map: map::ComponentMemberState {},
            my_type_var: my_type_var::ComponentMemberState {},
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TContractState>() -> ComponentState<TContractState> {
        unsafe_new_component_state::<TContractState>()
    }
    
    mod data {
        use super::ContractAddress;
        use super::MyTrait;
        use super::Event;
        use super::Log;
        use super::MyInnerImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        impl StorageComponentMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ComponentMemberState, u32> {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0x354f1c2d0eb5771cd5bf67a6689fcd6eed9444d91a39e5ef32a9b4ae5ca14ff>()
            }
        }
    }
    mod map {
        use super::ContractAddress;
        use super::MyTrait;
        use super::Event;
        use super::Log;
        use super::MyInnerImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}

        impl StorageMapComponentMemberStateImpl of starknet::storage::StorageMapMemberAddressTrait<ComponentMemberState, u32, u32> {
            fn address(self: @ComponentMemberState, key: u32) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_from_felt252(
                    hash::LegacyHash::<u32>::hash(0x1af9e30ee4fed507d9432e0f1308eb5bd12221bef97071a48d86951102231be, key))
            }
        }
    }
    mod my_type_var {
        use super::ContractAddress;
        use super::MyTrait;
        use super::Event;
        use super::Log;
        use super::MyInnerImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        impl StorageComponentMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ComponentMemberState, super::super::MyType> {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0x1d7ac842e8e2a1c4fd94662d0a812cd378294e5156fee62dafbd49a010246c7>()
            }
        }
    }

use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait,
};
trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TContractState>, event: S);
}

#[starknet::embeddable]
impl MyImpl<
    TContractState, impl X: HasComponent<TContractState>, impl TContractStateDrop: Drop<TContractState>
> of MyTrait<TContractState> {
    #[external]
    fn get(self: @TContractState, addr: ContractAddress) -> u32 {
        let component = self.get_component();
        component.get(addr, )
    }
    #[external]
    fn set(ref self: TContractState, addr: ContractAddress, value: u32) {
        let mut component = self.get_component_mut();
        component.set(addr, value, )
    }
}

impls:

impl EventDrop of Drop::<Event>;


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
            Event::Log(val) => {
                array::ArrayTrait::append(ref keys, selector!("Log"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
            if selector == selector!("Log") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::Log(val));
            }
        Option::None
    }
}
impl EventLogIntoEvent of Into<Log, Event> {
    fn into(self: Log) -> Event {
        Event::Log(self)
    }
}



impls:

impl LogDrop of Drop::<Log>;


starknet_derive:

impl LogIsEvent of starknet::Event<Log> {
    fn append_keys_and_data(
        self: @Log, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Log> {
        Option::Some(Log {})
    }
}

embeddable:

trait UnsafeNewContractStateTraitForMyImpl<TContractState> {
    fn unsafe_new_contract_state() -> TContractState;
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper_get<TContractState, impl X: HasComponent<TContractState>, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForMyImpl<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_addr = option::OptionTraitImpl::expect(
        serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    let res = MyImpl::<TContractState, X, TContractStateDrop>::get(@contract_state, __arg_addr);
    let mut arr = array::array_new();
    // References.
    // Result.
    serde::Serde::<u32>::serialize(@res, ref arr);
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper_set<TContractState, impl X: HasComponent<TContractState>, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForMyImpl<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_addr = option::OptionTraitImpl::expect(
        serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_value = option::OptionTraitImpl::expect(
        serde::Serde::<u32>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    MyImpl::<TContractState, X, TContractStateDrop>::set(ref contract_state, __arg_addr, __arg_value);
    let mut arr = array::array_new();
    // References.
    // Result.
    array::ArrayTrait::span(@arr)
}



mod __external_MyImpl {
        use super::__wrapper_get as get;
        use super::__wrapper_set as set;
}

mod __l1_handler_MyImpl {
}

mod __constructor_MyImpl {
}

//! > expected_diagnostics
