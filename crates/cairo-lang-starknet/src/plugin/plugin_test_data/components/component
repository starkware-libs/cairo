//! > Test expansion of a basic component.

//! > test_runner_name
ExpandContractTestRunner(expect_diagnostics: warnings_only)

//! > cairo_code
#[derive(Drop, starknet::Store)]
struct MyType {
    x: u32,
}

#[starknet::component]
mod component {
    use starknet::ContractAddress;
    use super::MyTrait;

    #[storage]
    struct Storage {
        data: u32,
        map: LegacyMap<u32, u32>,
        my_type_var: super::MyType,
    }

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        Log: Log,
    }
    #[derive(Drop, starknet::Event)]
    struct Log {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<
        TContractState, impl X: HasComponent<TContractState>
    > of MyTrait<ComponentState<TContractState>> {
        fn get(self: @ComponentState<TContractState>, addr: ContractAddress) -> u32 {
            self.data.read() + self.map.read(10)
        }
        fn set(ref self: ComponentState<TContractState>, addr: ContractAddress, value: u32) {
            self.map.write(10, value);
            self.data.write(value);
            self.emit(Log {});
        }
    }
}
use starknet::ContractAddress;
#[starknet::interface]
trait MyTrait<T> {
    fn get(self: @T, addr: ContractAddress) -> u32;
    fn set(ref self: T, addr: ContractAddress, value: u32);
}

//! > generated_cairo_code
lib.cairo:

#[derive(Drop, starknet::Store)]
struct MyType {
    x: u32,
}

#[starknet::component]
mod component {
    use starknet::ContractAddress;
    use super::MyTrait;

    #[storage]
    struct Storage {
        data: u32,
        map: LegacyMap<u32, u32>,
        my_type_var: super::MyType,
    }

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        Log: Log,
    }
    #[derive(Drop, starknet::Event)]
    struct Log {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<
        TContractState, impl X: HasComponent<TContractState>
    > of MyTrait<ComponentState<TContractState>> {
        fn get(self: @ComponentState<TContractState>, addr: ContractAddress) -> u32 {
            self.data.read() + self.map.read(10)
        }
        fn set(ref self: ComponentState<TContractState>, addr: ContractAddress, value: u32) {
            self.map.write(10, value);
            self.data.write(value);
            self.emit(Log {});
        }
    }
}
use starknet::ContractAddress;
#[starknet::interface]
trait MyTrait<T> {
    fn get(self: @T, addr: ContractAddress) -> u32;
    fn set(ref self: T, addr: ContractAddress, value: u32);
}

lib.cairo:1:1
#[derive(Drop, starknet::Store)]
^******************************^
impls:

impl MyTypeDrop of core::traits::Drop::<MyType>;


lib.cairo:1:16
#[derive(Drop, starknet::Store)]
               ^*************^
starknet_derive:

impl StoreMyType of starknet::Store::<MyType> {
    fn read(address_domain: u32, base: starknet::storage_access::StorageBaseAddress) -> starknet::SyscallResult<MyType> {
        let x = starknet::Store::<u32>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            MyType {
                x,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, value: MyType) -> starknet::SyscallResult<()> {
        starknet::Store::<u32>::write(address_domain, base, value.x)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<MyType> {
        let x = starknet::Store::<u32>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            MyType {
                x,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8, value: MyType) -> starknet::SyscallResult<()> {
        starknet::Store::<u32>::write_at_offset(address_domain, base, offset, value.x)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<u32>::size()
    }
}

#[derive(Drop, Copy)]
struct MyTypeSubPointers {
    x: starknet::storage::StoragePointer<u32>,
}
impl MyTypeSubPointersImpl of starknet::storage::SubPointers<MyType> {
type SubPointersType = MyTypeSubPointers;
   fn sub_pointers(self: starknet::storage::StoragePointer<MyType>) -> MyTypeSubPointers {
               let base_address = self.address;
        let mut current_offset = self.offset;
        let x_value = starknet::storage::StoragePointer {
            address: base_address,
            offset: current_offset,
        };
                MyTypeSubPointers {
           x: x_value,
        }
    }
}
#[derive(Drop, Copy)]
struct MutableMyTypeSubPointers {
    x: starknet::storage::StoragePointer<starknet::storage::Mutable::<u32>>,
}
impl MutableMyTypeSubPointersImpl of starknet::storage::MutableSubPointers<MyType> {
type SubPointersType = MutableMyTypeSubPointers;
   fn mutable_sub_pointers(self: starknet::storage::StoragePointer<starknet::storage::Mutable::<MyType>>) -> MutableMyTypeSubPointers {
               let base_address = self.address;
        let mut current_offset = self.offset;
        let x_value = starknet::storage::StoragePointer {
            address: base_address,
            offset: current_offset,
        };
                MutableMyTypeSubPointers {
           x: x_value,
        }
    }
}


lib.cairo:41:1
#[starknet::interface]
^********************^
MyTraitDispatcherTrait:

trait MyTraitDispatcherTrait<T> {
    fn get(self: T, addr: ContractAddress) -> u32;
    fn set(self: T, addr: ContractAddress, value: u32);
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct MyTraitDispatcher {
    pub contract_address: starknet::ContractAddress,
}

impl MyTraitDispatcherImpl of MyTraitDispatcherTrait<MyTraitDispatcher> {
    fn get(self: MyTraitDispatcher, addr: ContractAddress) -> u32 {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<ContractAddress>::serialize(@addr, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("get"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        core::option::OptionTrait::expect(
            core::serde::Serde::<u32>::deserialize(ref __dispatcher_return_data__),
            'Returned data too short',
        )
    }
    fn set(self: MyTraitDispatcher, addr: ContractAddress, value: u32) {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<ContractAddress>::serialize(@addr, ref __calldata__);
        core::serde::Serde::<u32>::serialize(@value, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("set"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        ()
    }

}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct MyTraitLibraryDispatcher {
    pub class_hash: starknet::ClassHash,
}

impl MyTraitLibraryDispatcherImpl of MyTraitDispatcherTrait<MyTraitLibraryDispatcher> {
    fn get(self: MyTraitLibraryDispatcher, addr: ContractAddress) -> u32 {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<ContractAddress>::serialize(@addr, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        core::option::OptionTrait::expect(
            core::serde::Serde::<u32>::deserialize(ref __dispatcher_return_data__),
            'Returned data too short',
        )
    }
    fn set(self: MyTraitLibraryDispatcher, addr: ContractAddress, value: u32) {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<ContractAddress>::serialize(@addr, ref __calldata__);
        core::serde::Serde::<u32>::serialize(@value, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("set"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = starknet::SyscallResultTrait::unwrap_syscall(__dispatcher_return_data__);
        ()
    }

}

trait MyTraitSafeDispatcherTrait<T> {
    #[unstable(feature: "safe_dispatcher")]
    fn get(self: T, addr: ContractAddress) -> starknet::SyscallResult<u32>;
    #[unstable(feature: "safe_dispatcher")]
    fn set(self: T, addr: ContractAddress, value: u32) -> starknet::SyscallResult<()>;
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct MyTraitSafeLibraryDispatcher {
    pub class_hash: starknet::ClassHash,
}

impl MyTraitSafeLibraryDispatcherImpl of MyTraitSafeDispatcherTrait<MyTraitSafeLibraryDispatcher> {
    fn get(self: MyTraitSafeLibraryDispatcher, addr: ContractAddress) -> starknet::SyscallResult<u32> {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<ContractAddress>::serialize(@addr, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(
            core::option::OptionTrait::expect(
                core::serde::Serde::<u32>::deserialize(ref __dispatcher_return_data__),
                'Returned data too short',
            )
        )
    }
    fn set(self: MyTraitSafeLibraryDispatcher, addr: ContractAddress, value: u32) -> starknet::SyscallResult<()> {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<ContractAddress>::serialize(@addr, ref __calldata__);
        core::serde::Serde::<u32>::serialize(@value, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("set"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(())
    }

}


#[derive(Copy, Drop, starknet::Store, Serde)]
struct MyTraitSafeDispatcher {
    pub contract_address: starknet::ContractAddress,
}

impl MyTraitSafeDispatcherImpl of MyTraitSafeDispatcherTrait<MyTraitSafeDispatcher> {
    fn get(self: MyTraitSafeDispatcher, addr: ContractAddress) -> starknet::SyscallResult<u32> {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<ContractAddress>::serialize(@addr, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("get"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(
            core::option::OptionTrait::expect(
                core::serde::Serde::<u32>::deserialize(ref __dispatcher_return_data__),
                'Returned data too short',
            )
        )
    }
    fn set(self: MyTraitSafeDispatcher, addr: ContractAddress, value: u32) -> starknet::SyscallResult<()> {
        let mut __calldata__ = core::traits::Default::default();
        core::serde::Serde::<ContractAddress>::serialize(@addr, ref __calldata__);
        core::serde::Serde::<u32>::serialize(@value, ref __calldata__);

        let mut __dispatcher_return_data__ = starknet::syscalls::call_contract_syscall(
            self.contract_address,
            selector!("set"),
            core::array::ArrayTrait::span(@__calldata__),
        );
        let mut __dispatcher_return_data__ = __dispatcher_return_data__?;
        Result::Ok(())
    }

}


lib.cairo:1:16
#[derive(Drop, starknet::Store)]
               ^*************^
impls:

impl MyTypeSubPointersDrop of core::traits::Drop::<MyTypeSubPointers>;
impl MyTypeSubPointersCopy of core::traits::Copy::<MyTypeSubPointers>;


lib.cairo:1:16
#[derive(Drop, starknet::Store)]
               ^*************^
impls:

impl MutableMyTypeSubPointersDrop of core::traits::Drop::<MutableMyTypeSubPointers>;
impl MutableMyTypeSubPointersCopy of core::traits::Copy::<MutableMyTypeSubPointers>;


lib.cairo:41:1
#[starknet::interface]
^********************^
impls:

impl MyTraitDispatcherCopy of core::traits::Copy::<MyTraitDispatcher>;
impl MyTraitDispatcherDrop of core::traits::Drop::<MyTraitDispatcher>;
impl MyTraitDispatcherSerde of core::serde::Serde::<MyTraitDispatcher> {
    fn serialize(self: @MyTraitDispatcher, ref output: core::array::Array<felt252>) {
        core::serde::Serde::serialize(self.contract_address, ref output)
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<MyTraitDispatcher> {
        core::option::Option::Some(MyTraitDispatcher {
            contract_address: core::serde::Serde::deserialize(ref serialized)?,
        })
    }
}


lib.cairo:41:1
#[starknet::interface]
^********************^
starknet_derive:

impl StoreMyTraitDispatcher of starknet::Store::<MyTraitDispatcher> {
    fn read(address_domain: u32, base: starknet::storage_access::StorageBaseAddress) -> starknet::SyscallResult<MyTraitDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            MyTraitDispatcher {
                contract_address,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, value: MyTraitDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write(address_domain, base, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<MyTraitDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            MyTraitDispatcher {
                contract_address,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8, value: MyTraitDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write_at_offset(address_domain, base, offset, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ContractAddress>::size()
    }
}

#[derive(Drop, Copy)]
struct MyTraitDispatcherSubPointers {
    contract_address: starknet::storage::StoragePointer<starknet::ContractAddress>,
}
impl MyTraitDispatcherSubPointersImpl of starknet::storage::SubPointers<MyTraitDispatcher> {
type SubPointersType = MyTraitDispatcherSubPointers;
   fn sub_pointers(self: starknet::storage::StoragePointer<MyTraitDispatcher>) -> MyTraitDispatcherSubPointers {
               let base_address = self.address;
        let mut current_offset = self.offset;
        let contract_address_value = starknet::storage::StoragePointer {
            address: base_address,
            offset: current_offset,
        };
                MyTraitDispatcherSubPointers {
           contract_address: contract_address_value,
        }
    }
}
#[derive(Drop, Copy)]
struct MutableMyTraitDispatcherSubPointers {
    contract_address: starknet::storage::StoragePointer<starknet::storage::Mutable::<starknet::ContractAddress>>,
}
impl MutableMyTraitDispatcherSubPointersImpl of starknet::storage::MutableSubPointers<MyTraitDispatcher> {
type SubPointersType = MutableMyTraitDispatcherSubPointers;
   fn mutable_sub_pointers(self: starknet::storage::StoragePointer<starknet::storage::Mutable::<MyTraitDispatcher>>) -> MutableMyTraitDispatcherSubPointers {
               let base_address = self.address;
        let mut current_offset = self.offset;
        let contract_address_value = starknet::storage::StoragePointer {
            address: base_address,
            offset: current_offset,
        };
                MutableMyTraitDispatcherSubPointers {
           contract_address: contract_address_value,
        }
    }
}


lib.cairo:41:1
#[starknet::interface]
^********************^
impls:

impl MyTraitLibraryDispatcherCopy of core::traits::Copy::<MyTraitLibraryDispatcher>;
impl MyTraitLibraryDispatcherDrop of core::traits::Drop::<MyTraitLibraryDispatcher>;
impl MyTraitLibraryDispatcherSerde of core::serde::Serde::<MyTraitLibraryDispatcher> {
    fn serialize(self: @MyTraitLibraryDispatcher, ref output: core::array::Array<felt252>) {
        core::serde::Serde::serialize(self.class_hash, ref output)
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<MyTraitLibraryDispatcher> {
        core::option::Option::Some(MyTraitLibraryDispatcher {
            class_hash: core::serde::Serde::deserialize(ref serialized)?,
        })
    }
}


lib.cairo:41:1
#[starknet::interface]
^********************^
starknet_derive:

impl StoreMyTraitLibraryDispatcher of starknet::Store::<MyTraitLibraryDispatcher> {
    fn read(address_domain: u32, base: starknet::storage_access::StorageBaseAddress) -> starknet::SyscallResult<MyTraitLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            MyTraitLibraryDispatcher {
                class_hash,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, value: MyTraitLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write(address_domain, base, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<MyTraitLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            MyTraitLibraryDispatcher {
                class_hash,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8, value: MyTraitLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write_at_offset(address_domain, base, offset, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ClassHash>::size()
    }
}

#[derive(Drop, Copy)]
struct MyTraitLibraryDispatcherSubPointers {
    class_hash: starknet::storage::StoragePointer<starknet::ClassHash>,
}
impl MyTraitLibraryDispatcherSubPointersImpl of starknet::storage::SubPointers<MyTraitLibraryDispatcher> {
type SubPointersType = MyTraitLibraryDispatcherSubPointers;
   fn sub_pointers(self: starknet::storage::StoragePointer<MyTraitLibraryDispatcher>) -> MyTraitLibraryDispatcherSubPointers {
               let base_address = self.address;
        let mut current_offset = self.offset;
        let class_hash_value = starknet::storage::StoragePointer {
            address: base_address,
            offset: current_offset,
        };
                MyTraitLibraryDispatcherSubPointers {
           class_hash: class_hash_value,
        }
    }
}
#[derive(Drop, Copy)]
struct MutableMyTraitLibraryDispatcherSubPointers {
    class_hash: starknet::storage::StoragePointer<starknet::storage::Mutable::<starknet::ClassHash>>,
}
impl MutableMyTraitLibraryDispatcherSubPointersImpl of starknet::storage::MutableSubPointers<MyTraitLibraryDispatcher> {
type SubPointersType = MutableMyTraitLibraryDispatcherSubPointers;
   fn mutable_sub_pointers(self: starknet::storage::StoragePointer<starknet::storage::Mutable::<MyTraitLibraryDispatcher>>) -> MutableMyTraitLibraryDispatcherSubPointers {
               let base_address = self.address;
        let mut current_offset = self.offset;
        let class_hash_value = starknet::storage::StoragePointer {
            address: base_address,
            offset: current_offset,
        };
                MutableMyTraitLibraryDispatcherSubPointers {
           class_hash: class_hash_value,
        }
    }
}


lib.cairo:41:1
#[starknet::interface]
^********************^
impls:

impl MyTraitSafeLibraryDispatcherCopy of core::traits::Copy::<MyTraitSafeLibraryDispatcher>;
impl MyTraitSafeLibraryDispatcherDrop of core::traits::Drop::<MyTraitSafeLibraryDispatcher>;
impl MyTraitSafeLibraryDispatcherSerde of core::serde::Serde::<MyTraitSafeLibraryDispatcher> {
    fn serialize(self: @MyTraitSafeLibraryDispatcher, ref output: core::array::Array<felt252>) {
        core::serde::Serde::serialize(self.class_hash, ref output)
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<MyTraitSafeLibraryDispatcher> {
        core::option::Option::Some(MyTraitSafeLibraryDispatcher {
            class_hash: core::serde::Serde::deserialize(ref serialized)?,
        })
    }
}


lib.cairo:41:1
#[starknet::interface]
^********************^
starknet_derive:

impl StoreMyTraitSafeLibraryDispatcher of starknet::Store::<MyTraitSafeLibraryDispatcher> {
    fn read(address_domain: u32, base: starknet::storage_access::StorageBaseAddress) -> starknet::SyscallResult<MyTraitSafeLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            MyTraitSafeLibraryDispatcher {
                class_hash,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, value: MyTraitSafeLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write(address_domain, base, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<MyTraitSafeLibraryDispatcher> {
        let class_hash = starknet::Store::<starknet::ClassHash>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            MyTraitSafeLibraryDispatcher {
                class_hash,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8, value: MyTraitSafeLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ClassHash>::write_at_offset(address_domain, base, offset, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ClassHash>::size()
    }
}

#[derive(Drop, Copy)]
struct MyTraitSafeLibraryDispatcherSubPointers {
    class_hash: starknet::storage::StoragePointer<starknet::ClassHash>,
}
impl MyTraitSafeLibraryDispatcherSubPointersImpl of starknet::storage::SubPointers<MyTraitSafeLibraryDispatcher> {
type SubPointersType = MyTraitSafeLibraryDispatcherSubPointers;
   fn sub_pointers(self: starknet::storage::StoragePointer<MyTraitSafeLibraryDispatcher>) -> MyTraitSafeLibraryDispatcherSubPointers {
               let base_address = self.address;
        let mut current_offset = self.offset;
        let class_hash_value = starknet::storage::StoragePointer {
            address: base_address,
            offset: current_offset,
        };
                MyTraitSafeLibraryDispatcherSubPointers {
           class_hash: class_hash_value,
        }
    }
}
#[derive(Drop, Copy)]
struct MutableMyTraitSafeLibraryDispatcherSubPointers {
    class_hash: starknet::storage::StoragePointer<starknet::storage::Mutable::<starknet::ClassHash>>,
}
impl MutableMyTraitSafeLibraryDispatcherSubPointersImpl of starknet::storage::MutableSubPointers<MyTraitSafeLibraryDispatcher> {
type SubPointersType = MutableMyTraitSafeLibraryDispatcherSubPointers;
   fn mutable_sub_pointers(self: starknet::storage::StoragePointer<starknet::storage::Mutable::<MyTraitSafeLibraryDispatcher>>) -> MutableMyTraitSafeLibraryDispatcherSubPointers {
               let base_address = self.address;
        let mut current_offset = self.offset;
        let class_hash_value = starknet::storage::StoragePointer {
            address: base_address,
            offset: current_offset,
        };
                MutableMyTraitSafeLibraryDispatcherSubPointers {
           class_hash: class_hash_value,
        }
    }
}


lib.cairo:41:1
#[starknet::interface]
^********************^
impls:

impl MyTraitSafeDispatcherCopy of core::traits::Copy::<MyTraitSafeDispatcher>;
impl MyTraitSafeDispatcherDrop of core::traits::Drop::<MyTraitSafeDispatcher>;
impl MyTraitSafeDispatcherSerde of core::serde::Serde::<MyTraitSafeDispatcher> {
    fn serialize(self: @MyTraitSafeDispatcher, ref output: core::array::Array<felt252>) {
        core::serde::Serde::serialize(self.contract_address, ref output)
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<MyTraitSafeDispatcher> {
        core::option::Option::Some(MyTraitSafeDispatcher {
            contract_address: core::serde::Serde::deserialize(ref serialized)?,
        })
    }
}


lib.cairo:41:1
#[starknet::interface]
^********************^
starknet_derive:

impl StoreMyTraitSafeDispatcher of starknet::Store::<MyTraitSafeDispatcher> {
    fn read(address_domain: u32, base: starknet::storage_access::StorageBaseAddress) -> starknet::SyscallResult<MyTraitSafeDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            MyTraitSafeDispatcher {
                contract_address,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, value: MyTraitSafeDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write(address_domain, base, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<MyTraitSafeDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            MyTraitSafeDispatcher {
                contract_address,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::storage_access::StorageBaseAddress, offset: u8, value: MyTraitSafeDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write_at_offset(address_domain, base, offset, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ContractAddress>::size()
    }
}

#[derive(Drop, Copy)]
struct MyTraitSafeDispatcherSubPointers {
    contract_address: starknet::storage::StoragePointer<starknet::ContractAddress>,
}
impl MyTraitSafeDispatcherSubPointersImpl of starknet::storage::SubPointers<MyTraitSafeDispatcher> {
type SubPointersType = MyTraitSafeDispatcherSubPointers;
   fn sub_pointers(self: starknet::storage::StoragePointer<MyTraitSafeDispatcher>) -> MyTraitSafeDispatcherSubPointers {
               let base_address = self.address;
        let mut current_offset = self.offset;
        let contract_address_value = starknet::storage::StoragePointer {
            address: base_address,
            offset: current_offset,
        };
                MyTraitSafeDispatcherSubPointers {
           contract_address: contract_address_value,
        }
    }
}
#[derive(Drop, Copy)]
struct MutableMyTraitSafeDispatcherSubPointers {
    contract_address: starknet::storage::StoragePointer<starknet::storage::Mutable::<starknet::ContractAddress>>,
}
impl MutableMyTraitSafeDispatcherSubPointersImpl of starknet::storage::MutableSubPointers<MyTraitSafeDispatcher> {
type SubPointersType = MutableMyTraitSafeDispatcherSubPointers;
   fn mutable_sub_pointers(self: starknet::storage::StoragePointer<starknet::storage::Mutable::<MyTraitSafeDispatcher>>) -> MutableMyTraitSafeDispatcherSubPointers {
               let base_address = self.address;
        let mut current_offset = self.offset;
        let contract_address_value = starknet::storage::StoragePointer {
            address: base_address,
            offset: current_offset,
        };
                MutableMyTraitSafeDispatcherSubPointers {
           contract_address: contract_address_value,
        }
    }
}


lib.cairo:41:1
#[starknet::interface]
^********************^
impls:

impl MyTraitDispatcherSubPointersDrop of core::traits::Drop::<MyTraitDispatcherSubPointers>;
impl MyTraitDispatcherSubPointersCopy of core::traits::Copy::<MyTraitDispatcherSubPointers>;


lib.cairo:41:1
#[starknet::interface]
^********************^
impls:

impl MutableMyTraitDispatcherSubPointersDrop of core::traits::Drop::<MutableMyTraitDispatcherSubPointers>;
impl MutableMyTraitDispatcherSubPointersCopy of core::traits::Copy::<MutableMyTraitDispatcherSubPointers>;


lib.cairo:41:1
#[starknet::interface]
^********************^
impls:

impl MyTraitLibraryDispatcherSubPointersDrop of core::traits::Drop::<MyTraitLibraryDispatcherSubPointers>;
impl MyTraitLibraryDispatcherSubPointersCopy of core::traits::Copy::<MyTraitLibraryDispatcherSubPointers>;


lib.cairo:41:1
#[starknet::interface]
^********************^
impls:

impl MutableMyTraitLibraryDispatcherSubPointersDrop of core::traits::Drop::<MutableMyTraitLibraryDispatcherSubPointers>;
impl MutableMyTraitLibraryDispatcherSubPointersCopy of core::traits::Copy::<MutableMyTraitLibraryDispatcherSubPointers>;


lib.cairo:41:1
#[starknet::interface]
^********************^
impls:

impl MyTraitSafeLibraryDispatcherSubPointersDrop of core::traits::Drop::<MyTraitSafeLibraryDispatcherSubPointers>;
impl MyTraitSafeLibraryDispatcherSubPointersCopy of core::traits::Copy::<MyTraitSafeLibraryDispatcherSubPointers>;


lib.cairo:41:1
#[starknet::interface]
^********************^
impls:

impl MutableMyTraitSafeLibraryDispatcherSubPointersDrop of core::traits::Drop::<MutableMyTraitSafeLibraryDispatcherSubPointers>;
impl MutableMyTraitSafeLibraryDispatcherSubPointersCopy of core::traits::Copy::<MutableMyTraitSafeLibraryDispatcherSubPointers>;


lib.cairo:41:1
#[starknet::interface]
^********************^
impls:

impl MyTraitSafeDispatcherSubPointersDrop of core::traits::Drop::<MyTraitSafeDispatcherSubPointers>;
impl MyTraitSafeDispatcherSubPointersCopy of core::traits::Copy::<MyTraitSafeDispatcherSubPointers>;


lib.cairo:41:1
#[starknet::interface]
^********************^
impls:

impl MutableMyTraitSafeDispatcherSubPointersDrop of core::traits::Drop::<MutableMyTraitSafeDispatcherSubPointers>;
impl MutableMyTraitSafeDispatcherSubPointersCopy of core::traits::Copy::<MutableMyTraitSafeDispatcherSubPointers>;


lib.cairo:6:1
#[starknet::component]
^********************^
component:



#[phantom]
pub struct Storage {
          pub data: u32,
          pub map: LegacyMap<u32, u32>,
          pub my_type_var: super::MyType,
}

#[derive(Drop, Copy)]
pub struct ComponentStorageBase {
    pub data: starknet::storage::StorageBase<u32>,
    pub map: starknet::storage::StorageBase<LegacyMap<u32, u32>>,
    pub my_type_var: starknet::storage::StorageBase<super::MyType>,
}
#[derive(Drop, Copy)]
pub struct ComponentStorageBaseMut {
    pub data: starknet::storage::StorageBase<starknet::storage::Mutable<u32>>,
    pub map: starknet::storage::StorageBase<starknet::storage::Mutable<LegacyMap<u32, u32>>>,
    pub my_type_var: starknet::storage::StorageBase<starknet::storage::Mutable<super::MyType>>,
}
impl StorageBaseImpl<TContractState> of starknet::storage::StorageBaseTrait<ComponentState<TContractState>> {
    type BaseType = ComponentStorageBase;
    type BaseMutType = ComponentStorageBaseMut;
    fn storage_base(self: @ComponentState<TContractState>) -> ComponentStorageBase {
        ComponentStorageBase {
           data: starknet::storage::StorageBase{ address: selector!("data") },
           map: starknet::storage::StorageBase{ address: selector!("map") },
           my_type_var: starknet::storage::StorageBase{ address: selector!("my_type_var") },
        }
    }
    fn storage_base_mut(ref self: ComponentState<TContractState>) -> ComponentStorageBaseMut {
        ComponentStorageBaseMut {
           data: starknet::storage::StorageBase{ address: selector!("data") },
           map: starknet::storage::StorageBase{ address: selector!("map") },
           my_type_var: starknet::storage::StorageBase{ address: selector!("my_type_var") },
        }
    }
}
pub struct ComponentState<TContractState> {
}

impl ComponentStateDrop<TContractState> of Drop<ComponentState<TContractState>> {}
 
impl ComponentStateDeref<TContractState> of core::ops::SnapshotDeref<ComponentState<TContractState>> {
    type Target = ComponentStorageBase;
    fn snapshot_deref(self: @ComponentState<TContractState>) -> ComponentStorageBase {
        self.storage_base()
    }
}
impl ComponentStateDerefMut<TContractState> of core::ops::DerefMut<ComponentState<TContractState>> {
    type Target = ComponentStorageBaseMut;
    fn deref_mut(ref self: ComponentState<TContractState>) -> ComponentStorageBaseMut {
        self.storage_base_mut()
    }
}
pub fn unsafe_new_component_state<TContractState>() -> ComponentState<TContractState> {
    ComponentState::<TContractState> {
    }
}
#[cfg(target: 'test')]
#[inline(always)]
pub fn component_state_for_testing<TContractState>() -> ComponentState<TContractState> {
    unsafe_new_component_state::<TContractState>()
}


// TODO(Gil): This generates duplicate diagnostics because of the plugin system, squash the duplicates into one.
#[deprecated(
    feature: "deprecated_legacy_map",
    note: "Use `starknet::storage::Map` instead."
)]
use starknet::storage::Map as LegacyMap;
pub trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit<S, impl IntoImp: core::traits::Into<S, Event>>(ref self: ComponentState<TContractState>, event: S);
}

#[starknet::embeddable]
pub impl MyImpl<
            TContractState, impl X: HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>
> of MyTrait<TContractState> {
    
    fn get(self: @TContractState, addr: ContractAddress) -> u32 {
        let component = HasComponent::get_component(self);
        MyInnerImpl::get(component, addr)
    }
    
    fn set(ref self: TContractState, addr: ContractAddress, value: u32) {
        let mut component = HasComponent::get_component_mut(ref self);
        MyInnerImpl::set(ref component, addr, value)
    }
}

lib.cairo:17:1

^
impls:

impl EventDrop of core::traits::Drop::<Event>;


lib.cairo:19:20
    #[derive(Drop, starknet::Event)]
                   ^*************^
starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
            Event::Log(val) => {
                core::array::ArrayTrait::append(ref keys, selector!("Log"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let __selector__ = *core::array::SpanTrait::pop_front(ref keys)?;
        if __selector__ == selector!("Log") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::Log(val));
        }
        Option::None
    }
}
impl EventLogIntoEvent of Into<Log, Event> {
    fn into(self: Log) -> Event {
        Event::Log(self)
    }
}



lib.cairo:23:1
    #[derive(Drop, starknet::Event)]
^**********************************^
impls:

impl LogDrop of core::traits::Drop::<Log>;


lib.cairo:23:20
    #[derive(Drop, starknet::Event)]
                   ^*************^
starknet_derive:

impl LogIsEvent of starknet::Event<Log> {
    fn append_keys_and_data(
        self: @Log, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Log> {
        Option::Some(Log {})
    }
}


lib.cairo:6:1
#[starknet::component]
^********************^
impls:

impl ComponentStorageBaseDrop of core::traits::Drop::<ComponentStorageBase>;
impl ComponentStorageBaseCopy of core::traits::Copy::<ComponentStorageBase>;


lib.cairo:6:1
#[starknet::component]
^********************^
impls:

impl ComponentStorageBaseMutDrop of core::traits::Drop::<ComponentStorageBaseMut>;
impl ComponentStorageBaseMutCopy of core::traits::Copy::<ComponentStorageBaseMut>;


lib.cairo:26:5
    #[embeddable_as(MyImpl)]
    ^**********************^
embeddable:

pub trait UnsafeNewContractStateTraitForMyImpl<
    TContractState
> {
    fn unsafe_new_contract_state() -> TContractState;
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, core::ec::EcOp, Poseidon, SegmentArena, core::circuit::RangeCheck96, core::circuit::AddMod, core::circuit::MulMod, GasBuiltin, System)]
fn __wrapper__MyImpl__get<TContractState, impl X: HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForMyImpl<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    core::internal::require_implicit::<System>();
    core::internal::revoke_ap_tracking();
    core::option::OptionTraitImpl::expect(core::gas::withdraw_gas(), 'Out of gas');
    let __arg_addr = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    assert(core::array::SpanTrait::is_empty(data), 'Input too long for arguments');
    core::option::OptionTraitImpl::expect(
        core::gas::withdraw_gas_all(core::gas::get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    let res = MyImpl::<TContractState, X, TContractStateDrop>::get(@contract_state, __arg_addr);
    let mut arr = ArrayTrait::new();
    // References.
    // Result.
    core::serde::Serde::<u32>::serialize(@res, ref arr);
    core::array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, core::ec::EcOp, Poseidon, SegmentArena, core::circuit::RangeCheck96, core::circuit::AddMod, core::circuit::MulMod, GasBuiltin, System)]
fn __wrapper__MyImpl__set<TContractState, impl X: HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForMyImpl<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    core::internal::require_implicit::<System>();
    core::internal::revoke_ap_tracking();
    core::option::OptionTraitImpl::expect(core::gas::withdraw_gas(), 'Out of gas');
    let __arg_addr = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_value = core::option::OptionTraitImpl::expect(
        core::serde::Serde::<u32>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    assert(core::array::SpanTrait::is_empty(data), 'Input too long for arguments');
    core::option::OptionTraitImpl::expect(
        core::gas::withdraw_gas_all(core::gas::get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    MyImpl::<TContractState, X, TContractStateDrop>::set(ref contract_state, __arg_addr, __arg_value);
    let mut arr = ArrayTrait::new();
    // References.
    // Result.
    core::array::ArrayTrait::span(@arr)
}



pub mod __external_MyImpl {
    pub use super::__wrapper__MyImpl__get as get;
    pub use super::__wrapper__MyImpl__set as set;
}

pub mod __l1_handler_MyImpl {
}

pub mod __constructor_MyImpl {
}

//! > expected_diagnostics
warning: Usage of deprecated feature `"deprecated_legacy_map"` with no `#[feature("deprecated_legacy_map")]` attribute. Note: "Use `starknet::storage::Map` instead."
 --> lib.cairo:14:14
        map: LegacyMap<u32, u32>,
             ^*******^

warning: Usage of deprecated feature `"deprecated_legacy_map"` with no `#[feature("deprecated_legacy_map")]` attribute. Note: "Use `starknet::storage::Map` instead."
 --> lib.cairo:14:14
        map: LegacyMap<u32, u32>,
             ^*******^

warning: Usage of deprecated feature `"deprecated_legacy_map"` with no `#[feature("deprecated_legacy_map")]` attribute. Note: "Use `starknet::storage::Map` instead."
 --> lib.cairo:14:14
        map: LegacyMap<u32, u32>,
             ^*******^
