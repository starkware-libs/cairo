//! > Test expansion of a basic component.

//! > test_runner_name
ExpandContractTestRunner(allow_diagnostics: false)

//! > cairo_code
#[starknet::component]
mod component {
    use starknet::ContractAddress;
    use super::MyTrait;

    // TODO(gil): this is temporary, until this trait is generated by the plugin.
    trait HasComponent<TContractState> {
        fn get_component(self: @TContractState) -> ComponentState<TContractState>;
        fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    }

    #[storage]
    struct Storage {
        data: u32,
        map: LegacyMap<u32, u32>
    }

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        Log: Log,
    }
    #[derive(Drop, starknet::Event)]
    struct Log {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
        #[external]
        fn get_data(self: @ComponentState<TContractState>, addr: ContractAddress) -> u32 {
            self.data.read()
        }
        #[external]
        fn set_data(ref self: ComponentState<TContractState>, addr: ContractAddress, value: u32) {
            self.data.write(value);
        }
    }
}
use starknet::ContractAddress;
trait MyTrait<T> {
    fn get_data(self: @T, addr: ContractAddress) -> u32;
    fn set_data(ref self: T, addr: ContractAddress, value: u32);
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod component {
    use starknet::ContractAddress;
    use super::MyTrait;

    // TODO(gil): this is temporary, until this trait is generated by the plugin.
    trait HasComponent<TContractState> {
        fn get_component(self: @TContractState) -> ComponentState<TContractState>;
        fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    }

    #[storage]
    struct Storage {
        data: u32,
        map: LegacyMap<u32, u32>
    }

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        Log: Log,
    }
    #[derive(Drop, starknet::Event)]
    struct Log {}

    #[embeddable_as(MyImpl)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
        #[external]
        fn get_data(self: @ComponentState<TContractState>, addr: ContractAddress) -> u32 {
            self.data.read()
        }
        #[external]
        fn set_data(ref self: ComponentState<TContractState>, addr: ContractAddress, value: u32) {
            self.data.write(value);
        }
    }
}
use starknet::ContractAddress;
trait MyTrait<T> {
    fn get_data(self: @T, addr: ContractAddress) -> u32;
    fn set_data(ref self: T, addr: ContractAddress, value: u32);
}

component:

use starknet::event::EventEmitter;

    impl ComponentStateEventEmitter<TCS> of EventEmitter<ComponentState<TCS>, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TCS>, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    struct ComponentState<TCS> {
        data: data::ComponentMemberState,
        map: map::ComponentMemberState,
    }
    impl ComponentStateDrop<TCS> of Drop<ComponentState<TCS>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TCS>() -> ComponentState<TCS> {
        ComponentState::<TCS> {
            data: data::ComponentMemberState{},
            map: map::ComponentMemberState{},
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TCS>() -> ComponentState<TCS> {
        unsafe_new_component_state<TCS>()
    }
    
    use data::InternalComponentMemberStateTrait as dataComponentMemberStateTrait;
    mod data {
        use super::ContractAddress;
        use super::MyTrait;
        use super::Event;
        use super::Log;
        use super::MyInnerImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        trait InternalComponentMemberStateTrait {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress;
            fn read(self: @ComponentMemberState) -> u32;
            fn write(ref self: ComponentMemberState, value: u32);
        }

        impl InternalComponentMemberStateImpl of InternalComponentMemberStateTrait {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_const::<0x354f1c2d0eb5771cd5bf67a6689fcd6eed9444d91a39e5ef32a9b4ae5ca14ff>()
            }
            fn read(self: @ComponentMemberState) -> u32 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<u32>::read(
                        address_domain,
                        self.address(),
                    )
                )
            }
            fn write(ref self: ComponentMemberState, value: u32) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<u32>::write(
                        address_domain,
                        self.address(),
                        value,
                    )
                )
            }
        }
    }
    use map::InternalComponentMemberStateTrait as mapComponentMemberStateTrait;
    mod map {
        use super::ContractAddress;
        use super::MyTrait;
        use super::Event;
        use super::Log;
        use super::MyInnerImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        trait InternalComponentMemberStateTrait {
            fn address(self: @ComponentMemberState, key: u32) -> starknet::StorageBaseAddress;
            fn read(self: @ComponentMemberState, key: u32) -> u32;
            fn write(ref self: ComponentMemberState, key: u32, value: u32);
        }

        impl InternalComponentMemberStateImpl of InternalComponentMemberStateTrait {
            fn address(self: @ComponentMemberState, key: u32) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_from_felt252(
                    hash::LegacyHash::<u32>::hash(0x1af9e30ee4fed507d9432e0f1308eb5bd12221bef97071a48d86951102231be, key))
            }
            fn read(self: @ComponentMemberState, key: u32) -> u32 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<u32>::read(
                        address_domain,
                        self.address(key),
                    )
                )
            }
            fn write(ref self: ComponentMemberState, key: u32, value: u32) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<u32>::write(
                        address_domain,
                        self.address(key),
                        value,
                    )
                )
            }
        }
    }
trait MyInnerImplTrait<TContractState> {
    #[external]
    fn get_data(self: @TContractState, addr: ContractAddress) -> u32;
    #[external]
    fn set_data(ref self: TContractState, addr: ContractAddress, value: u32);
}

#[starknet::embeddable]
impl MyImpl<TContractState, impl X: HasComponent<TContractState>, impl TContractStatePanicDestruct: PanicDestruct<TContractState>> of MyInnerImplTrait<TContractState> {
    #[external]
    fn get_data(self: @TContractState, addr: ContractAddress) -> u32 {
        let component = self.get_component();
        component.get_data(addr, )
    }
    #[external]
    fn set_data(ref self: TContractState, addr: ContractAddress, value: u32) {
        let mut component = self.get_component_mut();
        component.set_data(addr, value, )
    }
}

impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
            Event::Log(val) => {
                array::ArrayTrait::append(ref keys, selector!("Log"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
            if selector == selector!("Log") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::Log(val));
            }
        Option::None
    }
}
impl EventLogIntoEvent of Into<Log, Event> {
    fn into(self: Log) -> Event {
        Event::Log(self)
    }
}



impls:

impl LogDrop of Drop::<Log>;


event_impl:

impl LogIsEvent of starknet::Event<Log> {
    fn append_keys_and_data(
        self: @Log, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Log> {
        Option::Some(Log {})
    }
}

embeddable:

trait UnsafeNewContractStateTraitForMyImpl<TContractState> {
    fn unsafe_new_contract_state() -> TContractState;
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper_get_data<TContractState, impl X: HasComponent<TContractState>, impl TContractStatePanicDestruct: PanicDestruct<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForMyImpl<TContractState>, impl TContractStateDrop: Drop<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_addr = option::OptionTraitImpl::expect(
        serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    let res = MyImpl::<TContractState, X, TContractStatePanicDestruct>::get_data(@contract_state, __arg_addr);
    let mut arr = array::array_new();
    // References.
    // Result.
    serde::Serde::<u32>::serialize(@res, ref arr);
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper_set_data<TContractState, impl X: HasComponent<TContractState>, impl TContractStatePanicDestruct: PanicDestruct<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForMyImpl<TContractState>, impl TContractStateDrop: Drop<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_addr = option::OptionTraitImpl::expect(
        serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_value = option::OptionTraitImpl::expect(
        serde::Serde::<u32>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    MyImpl::<TContractState, X, TContractStatePanicDestruct>::set_data(ref contract_state, __arg_addr, __arg_value);
    let mut arr = array::array_new();
    // References.
    // Result.
    array::ArrayTrait::span(@arr)
}



mod __external_MyImpl {
        use super::__wrapper_get_data as get_data;
        use super::__wrapper_set_data as set_data;
}

mod __l1_handler_MyImpl {
}

mod __constructor_MyImpl {
}

//! > expected_diagnostics
