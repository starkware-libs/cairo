//! > Test expansion of a simple starknet contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    use array::ArrayTrait;

    struct Storage {}

    #[external]
    #[raw_output]
    fn test_raw_output(ref self: Storage) -> Span::<felt252> {
        ArrayTrait::new().span()
    }

    #[external]
    #[raw_output]
    fn test_raw_output_with_spaces(ref self: Storage) -> Span     ::   < felt252  > {
        ArrayTrait::new().span()
    }
}

//! > generated_cairo_code
mod TestContract {
    use starknet::SyscallResultTrait;
    use starknet::SyscallResultTraitImpl;

    use array::ArrayTrait;

    #[external]
    #[raw_output]
    fn test_raw_output(ref self: Storage) -> Span::<felt252> {
        ArrayTrait::new().span()
    }

    #[external]
    #[raw_output]
    fn test_raw_output_with_spaces(ref self: Storage) -> Span     ::   < felt252  > {
        ArrayTrait::new().span()
    }

    const TEST_CLASS_HASH: felt252 = 1339165980233523099851075588163436815009148690352863090501154762239887732138;
    #[derive(Copy, Drop)]
    struct Storage {
    }
    #[inline(always)]
    fn unsafe_new_storage() -> Storage {
        Storage {
        }
    }



    

    trait __abi {
        #[external]
        fn test_raw_output(ref self: Storage) -> Span::<felt252>;
        #[external]
        fn test_raw_output_with_spaces(ref self: Storage) -> Span     ::   < felt252  >;
        
        
    }

    mod __external {
        use super::ArrayTrait;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

        #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn test_raw_output(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut storage = super::unsafe_new_storage();
            super::test_raw_output(ref storage, )
        }
        #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn test_raw_output_with_spaces(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut storage = super::unsafe_new_storage();
            super::test_raw_output_with_spaces(ref storage, )
        }
        
    }

    mod __l1_handler {
        use super::ArrayTrait;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

        
    }

    mod __constructor {
        use super::ArrayTrait;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

        
    }
}

//! > expected_diagnostics
