//! > Test expansion of a simple starknet contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[starknet::contract]
mod test_contract {
    use array::ArrayTrait;

    #[storage]
    struct Storage {}

    #[external(v0)]
    #[raw_output]
    fn test_raw_output(ref self: ContractState) -> Span::<felt252> {
        Default::<Array<felt252>>::default().span()
    }

    #[external(v0)]
    #[raw_output]
    fn test_raw_output_with_spaces(ref self: ContractState) -> Span     ::   < felt252  > {
        Default::<Array<felt252>>::default().span()
    }
}

//! > generated_cairo_code
lib.cairo:

#[starknet::contract]
mod test_contract {
    use array::ArrayTrait;

    #[storage]
    struct Storage {}

    #[external(v0)]
    #[raw_output]
    fn test_raw_output(ref self: ContractState) -> Span::<felt252> {
        Default::<Array<felt252>>::default().span()
    }

    #[external(v0)]
    #[raw_output]
    fn test_raw_output_with_spaces(ref self: ContractState) -> Span     ::   < felt252  > {
        Default::<Array<felt252>>::default().span()
    }
}

contract:

use starknet::SyscallResultTrait;
use starknet::SyscallResultTraitImpl;

#[cfg(test)]
const TEST_CLASS_HASH: felt252 = 876434993571142883350487723206857627809544242047179747265251009258990971924;
use starknet::event::EventEmitter;
#[derive(Drop)]
    struct ContractState {
    }
    #[inline(always)]
    fn unsafe_new_contract_state() -> ContractState {
        ContractState {
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn contract_state_for_testing() -> ContractState {
        unsafe_new_contract_state()
    }


    #[event] #[derive(Drop, starknet::Event)] enum Event {}

    impl ContractStateEventEmitter of EventEmitter<ContractState, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ContractState, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::syscalls::emit_event_syscall(
                array::ArrayTrait::span(@keys),
                array::ArrayTrait::span(@data),
            ).unwrap_syscall()
        }
    }





trait __abi<ContractState> {
    #[external]
        fn test_raw_output(ref self: ContractState) -> Span::<felt252>;
        #[external]
        fn test_raw_output_with_spaces(ref self: ContractState) -> Span     ::   < felt252  >;
        
    
}

mod __external {
        use super::ArrayTrait;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn test_raw_output(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut contract_state = super::unsafe_new_contract_state();
            super::test_raw_output(ref contract_state, )
        }
        #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn test_raw_output_with_spaces(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut contract_state = super::unsafe_new_contract_state();
            super::test_raw_output_with_spaces(ref contract_state, )
        }
        
}

mod __l1_handler {
        use super::ArrayTrait;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __constructor {
        use super::ArrayTrait;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}


impls:

impl ContractStateDrop<> of Drop::<ContractState<>>;


impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
        Option::None
    }
}

//! > expected_diagnostics
