//! > Two functions, no consts.

//! > test_runner_name
BytecodeSegmentLengthTest

//! > sierra
type felt252 = felt252;
type NonZeroFelt252 = NonZero<felt252>;

libfunc felt252_const_0 = felt252_const<0>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc jump = jump;
libfunc store_temp_felt252 = store_temp<felt252>;
libfunc branch_align = branch_align;
libfunc drop_felt252 = drop<felt252>;
libfunc disable_ap_tracking = disable_ap_tracking;
libfunc drop_non_zero_felt252 = drop<NonZeroFelt252>;

disable_ap_tracking() -> (); // 0
felt252_const_0() -> (zero0);  // 1
felt252_const_0() -> (zero1);  // 2
drop_felt252(zero1) -> ();  // 3
store_temp_felt252(zero0) -> (zero0);  // 4
felt252_is_zero(zero0) { fallthrough() if_branch0(zero0) };  // 5
branch_align() -> ();  // 6
felt252_const_0() -> (zero2);  // 7
felt252_const_0() -> (zero3);  // 8
drop_felt252(zero2) -> ();  // 9
drop_felt252(zero3) -> ();  // 10
jump() { jump_label() };  // 11

if_branch0:
branch_align() -> ();  // 12
drop_non_zero_felt252(zero0) -> ();  // 13
felt252_const_0() -> (zero4);  // 14
felt252_const_0() -> (zero5);  // 15
felt252_const_0() -> (zero6);  // 16
felt252_const_0() -> (zero7);  // 17
felt252_const_0() -> (zero8);  // 18
felt252_const_0() -> (zero9);  // 19
drop_felt252(zero4) -> ();  // 20
drop_felt252(zero5) -> ();  // 21
drop_felt252(zero6) -> ();  // 22
drop_felt252(zero7) -> ();  // 23
drop_felt252(zero8) -> ();  // 24
drop_felt252(zero9) -> ();  // 25
jump_label:
felt252_const_0() -> (zero10);  // 26
felt252_const_0() -> (zero11);  // 27
drop_felt252(zero10) -> ();  // 28
drop_felt252(zero11) -> ();  // 29
return();  // 30

function1:
felt252_const_0() -> (zero);  // 31
drop_felt252(zero) -> ();  // 32
return();  // 33

// Order is reversed to check the sorting.
function1@31() -> ();
function0@0() -> ();

//! > cairo_program
CairoProgram { instructions: [Instruction { body: AssertEq(AssertEqInstruction { a: CellRef { register: AP, offset: 0 }, b: Immediate(BigIntAsHex { value: 0 }) }), inc_ap: true, hints: [] }, Instruction { body: Jnz(JnzInstruction { jump_offset: Immediate(BigIntAsHex { value: 4 }), condition: CellRef { register: AP, offset: -1 } }), inc_ap: false, hints: [] }, Instruction { body: Jump(JumpInstruction { target: Immediate(BigIntAsHex { value: 2 }), relative: true }), inc_ap: false, hints: [] }, Instruction { body: Ret(RetInstruction), inc_ap: false, hints: [] }, Instruction { body: Ret(RetInstruction), inc_ap: false, hints: [] }], debug_info: CairoProgramDebugInfo { sierra_statement_info: [SierraStatementDebugInfo { code_offset: 0, instruction_idx: 0 }, SierraStatementDebugInfo { code_offset: 0, instruction_idx: 0 }, SierraStatementDebugInfo { code_offset: 0, instruction_idx: 0 }, SierraStatementDebugInfo { code_offset: 0, instruction_idx: 0 }, SierraStatementDebugInfo { code_offset: 0, instruction_idx: 0 }, SierraStatementDebugInfo { code_offset: 2, instruction_idx: 1 }, SierraStatementDebugInfo { code_offset: 4, instruction_idx: 2 }, SierraStatementDebugInfo { code_offset: 4, instruction_idx: 2 }, SierraStatementDebugInfo { code_offset: 4, instruction_idx: 2 }, SierraStatementDebugInfo { code_offset: 4, instruction_idx: 2 }, SierraStatementDebugInfo { code_offset: 4, instruction_idx: 2 }, SierraStatementDebugInfo { code_offset: 4, instruction_idx: 2 }, SierraStatementDebugInfo { code_offset: 6, instruction_idx: 3 }, SierraStatementDebugInfo { code_offset: 6, instruction_idx: 3 }, SierraStatementDebugInfo { code_offset: 6, instruction_idx: 3 }, SierraStatementDebugInfo { code_offset: 6, instruction_idx: 3 }, SierraStatementDebugInfo { code_offset: 6, instruction_idx: 3 }, SierraStatementDebugInfo { code_offset: 6, instruction_idx: 3 }, SierraStatementDebugInfo { code_offset: 6, instruction_idx: 3 }, SierraStatementDebugInfo { code_offset: 6, instruction_idx: 3 }, SierraStatementDebugInfo { code_offset: 6, instruction_idx: 3 }, SierraStatementDebugInfo { code_offset: 6, instruction_idx: 3 }, SierraStatementDebugInfo { code_offset: 6, instruction_idx: 3 }, SierraStatementDebugInfo { code_offset: 6, instruction_idx: 3 }, SierraStatementDebugInfo { code_offset: 6, instruction_idx: 3 }, SierraStatementDebugInfo { code_offset: 6, instruction_idx: 3 }, SierraStatementDebugInfo { code_offset: 6, instruction_idx: 3 }, SierraStatementDebugInfo { code_offset: 6, instruction_idx: 3 }, SierraStatementDebugInfo { code_offset: 6, instruction_idx: 3 }, SierraStatementDebugInfo { code_offset: 6, instruction_idx: 3 }, SierraStatementDebugInfo { code_offset: 6, instruction_idx: 3 }, SierraStatementDebugInfo { code_offset: 7, instruction_idx: 4 }, SierraStatementDebugInfo { code_offset: 7, instruction_idx: 4 }, SierraStatementDebugInfo { code_offset: 7, instruction_idx: 4 }, SierraStatementDebugInfo { code_offset: 8, instruction_idx: 5 }] }, const_segment_info: ConstSegmentInfo { const_allocations: OrderedHashMap({}), const_segment_size: 0 } }

//! > function_segments
Ok([0, 31])

//! > bytecode_lengths
Ok(Node([Leaf(7), Leaf(1)]))

//! > ==========================================================================

//! > One function with simple consts.

//! > test_runner_name
BytecodeSegmentLengthTest

//! > sierra
type felt252 = felt252;
type const<felt252, 5> = const<felt252, 5>;
type const<felt252, 17> = const<felt252, 17>;
type BoxFelt252 = Box<felt252>;


libfunc const_as_box<const<felt252, 5>> = const_as_box<const<felt252, 5>>;
libfunc const_as_box<const<felt252, 17>> = const_as_box<const<felt252, 17>>;
libfunc unbox<felt252> = unbox<felt252>;
libfunc store_temp_felt252 = store_temp<felt252>;
libfunc drop<felt252> = drop<felt252>;


const_as_box<const<felt252, 5>>() -> ([1]); // 0
const_as_box<const<felt252, 17>>() -> ([2]); // 1
const_as_box<const<felt252, 5>>() -> ([3]); // 2
unbox<felt252>([1]) -> ([1]); // 3
unbox<felt252>([2]) -> ([2]); // 4
unbox<felt252>([3]) -> ([3]); // 5
store_temp_felt252([1]) -> ([1]); // 6
drop<felt252>([1]) -> (); // 7
store_temp_felt252([2]) -> ([2]); // 8
drop<felt252>([2]) -> (); // 9
store_temp_felt252([3]) -> ([3]); // 10
return([3]); // 11


test_program@0() -> (felt252);

//! > cairo_program
CairoProgram { instructions: [Instruction { body: Call(CallInstruction { target: Immediate(BigIntAsHex { value: 16 }), relative: true }), inc_ap: false, hints: [] }, Instruction { body: AssertEq(AssertEqInstruction { a: CellRef { register: AP, offset: 0 }, b: BinOp(BinOpOperand { op: Add, a: CellRef { register: AP, offset: -1 }, b: Immediate(BigIntAsHex { value: 15 }) }) }), inc_ap: true, hints: [] }, Instruction { body: Call(CallInstruction { target: Immediate(BigIntAsHex { value: 14 }), relative: true }), inc_ap: false, hints: [] }, Instruction { body: AssertEq(AssertEqInstruction { a: CellRef { register: AP, offset: 0 }, b: BinOp(BinOpOperand { op: Add, a: CellRef { register: AP, offset: -1 }, b: Immediate(BigIntAsHex { value: 13 }) }) }), inc_ap: true, hints: [] }, Instruction { body: Call(CallInstruction { target: Immediate(BigIntAsHex { value: 8 }), relative: true }), inc_ap: false, hints: [] }, Instruction { body: AssertEq(AssertEqInstruction { a: CellRef { register: AP, offset: 0 }, b: BinOp(BinOpOperand { op: Add, a: CellRef { register: AP, offset: -1 }, b: Immediate(BigIntAsHex { value: 7 }) }) }), inc_ap: true, hints: [] }, Instruction { body: AssertEq(AssertEqInstruction { a: CellRef { register: AP, offset: 0 }, b: DoubleDeref(CellRef { register: AP, offset: -7 }, 0) }), inc_ap: true, hints: [] }, Instruction { body: AssertEq(AssertEqInstruction { a: CellRef { register: AP, offset: 0 }, b: DoubleDeref(CellRef { register: AP, offset: -5 }, 0) }), inc_ap: true, hints: [] }, Instruction { body: AssertEq(AssertEqInstruction { a: CellRef { register: AP, offset: 0 }, b: DoubleDeref(CellRef { register: AP, offset: -3 }, 0) }), inc_ap: true, hints: [] }, Instruction { body: Ret(RetInstruction), inc_ap: false, hints: [] }], debug_info: CairoProgramDebugInfo { sierra_statement_info: [SierraStatementDebugInfo { code_offset: 0, instruction_idx: 0 }, SierraStatementDebugInfo { code_offset: 4, instruction_idx: 2 }, SierraStatementDebugInfo { code_offset: 8, instruction_idx: 4 }, SierraStatementDebugInfo { code_offset: 12, instruction_idx: 6 }, SierraStatementDebugInfo { code_offset: 12, instruction_idx: 6 }, SierraStatementDebugInfo { code_offset: 12, instruction_idx: 6 }, SierraStatementDebugInfo { code_offset: 12, instruction_idx: 6 }, SierraStatementDebugInfo { code_offset: 13, instruction_idx: 7 }, SierraStatementDebugInfo { code_offset: 13, instruction_idx: 7 }, SierraStatementDebugInfo { code_offset: 14, instruction_idx: 8 }, SierraStatementDebugInfo { code_offset: 14, instruction_idx: 8 }, SierraStatementDebugInfo { code_offset: 15, instruction_idx: 9 }, SierraStatementDebugInfo { code_offset: 16, instruction_idx: 10 }] }, const_segment_info: ConstSegmentInfo { const_allocations: OrderedHashMap({ConcreteTypeId { id: 6014431602630300265, debug_name: Some("const<felt252, 5>") }: ConstAllocation { offset: 0, values: [5] }, ConcreteTypeId { id: 6576784210054315956, debug_name: Some("const<felt252, 17>") }: ConstAllocation { offset: 2, values: [17] }}), const_segment_size: 4 } }

//! > function_segments
Ok([0])

//! > bytecode_lengths
Ok(Node([Leaf(16), Leaf(2), Leaf(2)]))

//! > ==========================================================================

//! > Two functions, with complex consts.

//! > test_runner_name
BytecodeSegmentLengthTest

//! > sierra
type felt252 = felt252;
type Tuple<felt252, felt252> = Struct<ut@Tuple, felt252, felt252>;
type const<felt252, 5> = const<felt252, 5>;
type const<felt252, 17> = const<felt252, 17>;
type const<
    Tuple<felt252, felt252>, 
    const<felt252, 5>, 
    const<felt252, 17>
> = const<
    Tuple<felt252, felt252>, 
    const<felt252, 5>, 
    const<felt252, 17>
>; 
type Box<Tuple<felt252, felt252>> = Box<Tuple<felt252, felt252>>;
type MyEnum = Enum<ut@MyEnum, felt252, felt252>;
type const<MyEnum, 0, const<felt252, 5>> = const<MyEnum, 0, const<felt252, 5>>;
type Box<MyEnum> = Box<MyEnum>;

libfunc const_as_box<
    const<
        Tuple<felt252, felt252>, 
        const<felt252, 5>, 
        const<felt252, 17>
    >
> = const_as_box<
    const<
        Tuple<felt252, felt252>, 
        const<felt252, 5>, 
        const<felt252, 17>
    >
>;
libfunc unbox<Tuple<felt252, felt252>> = unbox<Tuple<felt252, felt252>>;
libfunc store_temp<Tuple<felt252, felt252>> = store_temp<Tuple<felt252, felt252>>;
libfunc drop<Tuple<felt252, felt252>> = drop<Tuple<felt252, felt252>>;
libfunc const_as_box<
    const<MyEnum, 0, const<felt252, 5>>
> = const_as_box<
    const<MyEnum, 0, const<felt252, 5>>
>;
libfunc unbox<MyEnum> = unbox<MyEnum>;
libfunc store_temp<MyEnum> = store_temp<MyEnum>;
libfunc drop<MyEnum> = drop<MyEnum>;


const_as_box<const<Tuple<felt252, felt252>, const<felt252, 5>, const<felt252, 17>>>() -> ([1]); // 0
unbox<Tuple<felt252, felt252>>([1]) -> ([1]); // 1
store_temp<Tuple<felt252, felt252>>([1]) -> ([1]); // 2
drop<Tuple<felt252, felt252>>([1]) -> (); // 3
return(); // 4
const_as_box<const<MyEnum, 0, const<felt252, 5>>>() -> ([2]); // 5
unbox<MyEnum>([2]) -> ([2]); // 6
store_temp<MyEnum>([2]) -> ([2]); // 7
drop<MyEnum>([2]) -> (); // 8
return(); // 9

test_const_struct@0() -> ();
test_const_enum@5() -> ();

//! > cairo_program
CairoProgram { instructions: [Instruction { body: Call(CallInstruction { target: Immediate(BigIntAsHex { value: 14 }), relative: true }), inc_ap: false, hints: [] }, Instruction { body: AssertEq(AssertEqInstruction { a: CellRef { register: AP, offset: 0 }, b: BinOp(BinOpOperand { op: Add, a: CellRef { register: AP, offset: -1 }, b: Immediate(BigIntAsHex { value: 13 }) }) }), inc_ap: true, hints: [] }, Instruction { body: AssertEq(AssertEqInstruction { a: CellRef { register: AP, offset: 0 }, b: DoubleDeref(CellRef { register: AP, offset: -1 }, 0) }), inc_ap: true, hints: [] }, Instruction { body: AssertEq(AssertEqInstruction { a: CellRef { register: AP, offset: 0 }, b: DoubleDeref(CellRef { register: AP, offset: -2 }, 1) }), inc_ap: true, hints: [] }, Instruction { body: Ret(RetInstruction), inc_ap: false, hints: [] }, Instruction { body: Call(CallInstruction { target: Immediate(BigIntAsHex { value: 10 }), relative: true }), inc_ap: false, hints: [] }, Instruction { body: AssertEq(AssertEqInstruction { a: CellRef { register: AP, offset: 0 }, b: BinOp(BinOpOperand { op: Add, a: CellRef { register: AP, offset: -1 }, b: Immediate(BigIntAsHex { value: 9 }) }) }), inc_ap: true, hints: [] }, Instruction { body: AssertEq(AssertEqInstruction { a: CellRef { register: AP, offset: 0 }, b: DoubleDeref(CellRef { register: AP, offset: -1 }, 0) }), inc_ap: true, hints: [] }, Instruction { body: AssertEq(AssertEqInstruction { a: CellRef { register: AP, offset: 0 }, b: DoubleDeref(CellRef { register: AP, offset: -2 }, 1) }), inc_ap: true, hints: [] }, Instruction { body: Ret(RetInstruction), inc_ap: false, hints: [] }], debug_info: CairoProgramDebugInfo { sierra_statement_info: [SierraStatementDebugInfo { code_offset: 0, instruction_idx: 0 }, SierraStatementDebugInfo { code_offset: 4, instruction_idx: 2 }, SierraStatementDebugInfo { code_offset: 4, instruction_idx: 2 }, SierraStatementDebugInfo { code_offset: 6, instruction_idx: 4 }, SierraStatementDebugInfo { code_offset: 6, instruction_idx: 4 }, SierraStatementDebugInfo { code_offset: 7, instruction_idx: 5 }, SierraStatementDebugInfo { code_offset: 11, instruction_idx: 7 }, SierraStatementDebugInfo { code_offset: 11, instruction_idx: 7 }, SierraStatementDebugInfo { code_offset: 13, instruction_idx: 9 }, SierraStatementDebugInfo { code_offset: 13, instruction_idx: 9 }, SierraStatementDebugInfo { code_offset: 14, instruction_idx: 10 }] }, const_segment_info: ConstSegmentInfo { const_allocations: OrderedHashMap({ConcreteTypeId { id: 13594735192944841167, debug_name: Some("const<Tuple<felt252, felt252>, const<felt252, 5>, const<felt252, 17>>") }: ConstAllocation { offset: 0, values: [5, 17] }, ConcreteTypeId { id: 9988102476684004377, debug_name: Some("const<MyEnum, 0, const<felt252, 5>>") }: ConstAllocation { offset: 3, values: [0, 5] }}), const_segment_size: 6 } }

//! > function_segments
Ok([0, 5])

//! > bytecode_lengths
Ok(Node([Leaf(7), Leaf(7), Leaf(3), Leaf(3)]))

//! > ==========================================================================

//! > No function start at zero

//! > test_runner_name
BytecodeSegmentLengthTest

//! > sierra
type felt252 = felt252;

libfunc felt252_const_0 = felt252_const<0>;

return();  // 0

function1:
return();  // 1

function1@1() -> ();

//! > cairo_program
Casm compilation failed.

//! > function_segments
Err(NoFunctionStartAtZero)

//! > bytecode_lengths
Casm compilation failed.

//! > ==========================================================================

//! > jump outside function (fallthrough)

//! > test_runner_name
BytecodeSegmentLengthTest

//! > sierra
type felt252 = felt252;

libfunc felt252_const_0 = felt252_const<0>;

felt252_const_0() -> (zero);  // 0
// Falls through to function1.
felt252_const_0() -> (zero);  // 1

function1:
felt252_const_0() -> (zero);  // 2
felt252_const_0() -> (zero);  // 3
return();  // 4

function0@0() -> ();
function1@2() -> ();

//! > cairo_program
Casm compilation failed.

//! > function_segments
Err(JumpOutsideFunction(StatementIdx(1)))

//! > bytecode_lengths
Casm compilation failed.

//! > ==========================================================================

//! > jump outside function (after)

//! > test_runner_name
BytecodeSegmentLengthTest

//! > sierra
type felt252 = felt252;

libfunc felt252_const_0 = felt252_const<0>;

function0:
felt252_const_0() -> (zero); // 0
jump() { function1() };  // 1
return();  // 2

function1:
felt252_const_0() -> (zero);  // 3
return();  // 4

function0@0() -> ();
function1@3() -> ();

//! > cairo_program
Casm compilation failed.

//! > function_segments
Err(JumpOutsideFunction(StatementIdx(1)))

//! > bytecode_lengths
Casm compilation failed.

//! > ==========================================================================

//! > jump outside function (before)

//! > test_runner_name
BytecodeSegmentLengthTest

//! > sierra
type felt252 = felt252;

libfunc felt252_const_0 = felt252_const<0>;

function0:
felt252_const_0() -> (zero);  // 0
return();  // 1

function1:
felt252_const_0() -> (zero); // 2
jump() { function0() };  // 3
return();  // 4

function0@0() -> ();
function1@2() -> ();

//! > cairo_program
Casm compilation failed.

//! > function_segments
Err(JumpOutsideFunction(StatementIdx(3)))

//! > bytecode_lengths
Casm compilation failed.
