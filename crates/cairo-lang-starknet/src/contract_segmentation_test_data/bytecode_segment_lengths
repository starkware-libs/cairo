//! > Two functions, no consts.

//! > test_runner_name
BytecodeSegmentLengthTest

//! > sierra
type felt252 = felt252;

libfunc felt252_add_3 = felt252_add_const<3>;
libfunc felt252_add_4 = felt252_add_const<4>;
libfunc store_temp_felt252 = store_temp<felt252>;
libfunc drop<felt252> = drop<felt252>;

felt252_add_3([0]) -> ([1]); // 0
store_temp_felt252([1]) -> ([1]); // 1
drop<felt252>([1]) -> (); // 2
return(); // 3

felt252_add_3([0]) -> ([1]); // 4
store_temp_felt252([1]) -> ([1]); // 5
felt252_add_4([1]) -> ([2]); // 6
store_temp_felt252([2]) -> ([2]); // 7
drop<felt252>([2]) -> (); // 8
return(); // 9

// Order is reversed to check the sorting.
function1@4([0]: felt252) -> ();
function0@0([0]: felt252) -> ();

//! > cairo_program
[ap + 0] = [fp + -3] + 3, ap++;
ret;
[ap + 0] = [fp + -3] + 3, ap++;
[ap + 0] = [ap + -1] + 4, ap++;
ret;

//! > bytecode_lengths
Ok(Node([Leaf(3), Leaf(5)]))

//! > ==========================================================================

//! > One function with simple consts.

//! > test_runner_name
BytecodeSegmentLengthTest

//! > sierra
type felt252 = felt252;
type const<felt252, 5> = const<felt252, 5>;
type const<felt252, 17> = const<felt252, 17>;
type BoxFelt252 = Box<felt252>;


libfunc const_as_box<const<felt252, 5>> = const_as_box<const<felt252, 5>>;
libfunc const_as_box<const<felt252, 17>> = const_as_box<const<felt252, 17>>;
libfunc unbox<felt252> = unbox<felt252>;
libfunc store_temp_felt252 = store_temp<felt252>;
libfunc drop<felt252> = drop<felt252>;


const_as_box<const<felt252, 5>>() -> ([1]); // 0
const_as_box<const<felt252, 17>>() -> ([2]); // 1
const_as_box<const<felt252, 5>>() -> ([3]); // 2
unbox<felt252>([1]) -> ([1]); // 3
unbox<felt252>([2]) -> ([2]); // 4
unbox<felt252>([3]) -> ([3]); // 5
store_temp_felt252([1]) -> ([1]); // 6
drop<felt252>([1]) -> (); // 7
store_temp_felt252([2]) -> ([2]); // 8
drop<felt252>([2]) -> (); // 9
store_temp_felt252([3]) -> ([3]); // 10
return([3]); // 11


test_program@0() -> (felt252);

//! > cairo_program
call rel 16;
[ap + 0] = [ap + -1] + 15, ap++;
call rel 14;
[ap + 0] = [ap + -1] + 13, ap++;
call rel 8;
[ap + 0] = [ap + -1] + 7, ap++;
[ap + 0] = [[ap + -7] + 0], ap++;
[ap + 0] = [[ap + -5] + 0], ap++;
[ap + 0] = [[ap + -3] + 0], ap++;
ret;
ret;
dw 5;
ret;
dw 17;

//! > bytecode_lengths
Ok(Node([Leaf(16), Leaf(2), Leaf(2)]))

//! > ==========================================================================

//! > Two functions, with complex consts.

//! > test_runner_name
BytecodeSegmentLengthTest

//! > sierra
type felt252 = felt252;
type Tuple<felt252, felt252> = Struct<ut@Tuple, felt252, felt252>;
type const<felt252, 5> = const<felt252, 5>;
type const<felt252, 17> = const<felt252, 17>;
type const<
    Tuple<felt252, felt252>, 
    const<felt252, 5>, 
    const<felt252, 17>
> = const<
    Tuple<felt252, felt252>, 
    const<felt252, 5>, 
    const<felt252, 17>
>; 
type Box<Tuple<felt252, felt252>> = Box<Tuple<felt252, felt252>>;
type MyEnum = Enum<ut@MyEnum, felt252, felt252>;
type const<MyEnum, 0, const<felt252, 5>> = const<MyEnum, 0, const<felt252, 5>>;
type Box<MyEnum> = Box<MyEnum>;

libfunc const_as_box<
    const<
        Tuple<felt252, felt252>, 
        const<felt252, 5>, 
        const<felt252, 17>
    >
> = const_as_box<
    const<
        Tuple<felt252, felt252>, 
        const<felt252, 5>, 
        const<felt252, 17>
    >
>;
libfunc unbox<Tuple<felt252, felt252>> = unbox<Tuple<felt252, felt252>>;
libfunc store_temp<Tuple<felt252, felt252>> = store_temp<Tuple<felt252, felt252>>;
libfunc drop<Tuple<felt252, felt252>> = drop<Tuple<felt252, felt252>>;
libfunc const_as_box<
    const<MyEnum, 0, const<felt252, 5>>
> = const_as_box<
    const<MyEnum, 0, const<felt252, 5>>
>;
libfunc unbox<MyEnum> = unbox<MyEnum>;
libfunc store_temp<MyEnum> = store_temp<MyEnum>;
libfunc drop<MyEnum> = drop<MyEnum>;


const_as_box<const<Tuple<felt252, felt252>, const<felt252, 5>, const<felt252, 17>>>() -> ([1]); // 0
unbox<Tuple<felt252, felt252>>([1]) -> ([1]); // 1
store_temp<Tuple<felt252, felt252>>([1]) -> ([1]); // 2
drop<Tuple<felt252, felt252>>([1]) -> (); // 3
return(); // 4
const_as_box<const<MyEnum, 0, const<felt252, 5>>>() -> ([2]); // 5
unbox<MyEnum>([2]) -> ([2]); // 6
store_temp<MyEnum>([2]) -> ([2]); // 7
drop<MyEnum>([2]) -> (); // 8
return(); // 9

test_const_struct@0() -> ();
test_const_enum@5() -> ();

//! > cairo_program
call rel 14;
[ap + 0] = [ap + -1] + 13, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -2] + 1], ap++;
ret;
call rel 10;
[ap + 0] = [ap + -1] + 9, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -2] + 1], ap++;
ret;
ret;
dw 5;
dw 17;
ret;
dw 0;
dw 5;

//! > bytecode_lengths
Ok(Node([Leaf(7), Leaf(7), Leaf(3), Leaf(3)]))
