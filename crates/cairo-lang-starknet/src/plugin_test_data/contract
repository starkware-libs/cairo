//! > Test expansion of a simple starknet contract.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[contract]
mod TestContract {
    fn internal_func() -> felt {
        1
    }

    #[view]
    fn get_something(ref arg: felt, num: felt) -> felt {
        1
    }

    #[external]
    fn set_something(ref arg: felt, num: felt) {
    }

    #[event]
    fn awesome_event(x: felt, y: u128) {
    }
    
    #[event]
    fn best_event_ever() {
    }
}

//! > generated_cairo_code
#[generated_contract]
mod TestContract {
    use starknet::SyscallResultTrait;
    use starknet::SyscallResultTraitImpl;

    fn internal_func() -> felt {
        1
    }

    #[view]
    fn get_something(ref arg: felt, num: felt) -> felt {
        1
    }

    #[external]
    fn set_something(ref arg: felt, num: felt) {
    }

    

    
    #[event]
    fn awesome_event(x: felt, y: u128) {
        let mut keys = array_new();
        array_append(ref keys, 0x3f66514f0940883a8bcde801c111c08423c480e3964ca2fe8059875ffe2f185);
        let mut data = array_new();
        serde::Serde::<felt>::serialize(ref data, x);
        serde::Serde::<u128>::serialize(ref data, y);
        
        starknet::emit_event_syscall(keys, data).unwrap_syscall()
    }
            
    #[event]
    fn best_event_ever() {
        let mut keys = array_new();
        array_append(ref keys, 0x29b3fe9ff633bec5975af85435def23fd937c48169dcbc8718cbdfb5efdd46f);
        let mut data = array_new();
        
        starknet::emit_event_syscall(keys, data).unwrap_syscall()
    }
            

    trait __abi {
        #[view]
        fn get_something(ref arg: felt, num: felt) -> felt;
        #[external]
        fn set_something(ref arg: felt, num: felt);
        
        #[event]
        fn awesome_event(x: felt, y: u128);
        #[event]
        fn best_event_ever();
        
    }

    mod __external {
        fn get_something(mut data: Array::<felt>) -> Array::<felt> {
            internal::revoke_ap_tracking();
            match get_gas() {
                Option::Some(_) => {
                },
                Option::None(_) => {
                    let mut err_data = array_new();
                    array_append(ref err_data, 'Out of gas');
                    panic(err_data)
                },
            }
            
            let mut __arg_arg =
                match serde::Serde::<felt>::deserialize(ref data) {
                    Option::Some(x) => x,
                    Option::None(()) => {
                        let mut err_data = array_new();
                        array_append(ref err_data, 'Input too short for arguments');
                        panic(err_data)
                    },
                };

            let __arg_num =
                match serde::Serde::<felt>::deserialize(ref data) {
                    Option::Some(x) => x,
                    Option::None(()) => {
                        let mut err_data = array_new();
                        array_append(ref err_data, 'Input too short for arguments');
                        panic(err_data)
                    },
                };
            if array_len(ref data) != 0_usize {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array_new();
                array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            match get_gas_all(get_builtin_costs()) {
                Option::Some(_) => {
                },
                Option::None(_) => {
                    let mut err_data = array_new();
                    array_append(ref err_data, 'Out of gas');
                    panic(err_data)
                },
            }
            
            let res = super::get_something(ref __arg_arg, __arg_num);
            let mut arr = array_new();
            // References.
            serde::Serde::<felt>::serialize(ref arr, __arg_arg);
            // Result.
            serde::Serde::<felt>::serialize(ref arr, res)
            arr
        }
        fn set_something(mut data: Array::<felt>) -> Array::<felt> {
            internal::revoke_ap_tracking();
            match get_gas() {
                Option::Some(_) => {
                },
                Option::None(_) => {
                    let mut err_data = array_new();
                    array_append(ref err_data, 'Out of gas');
                    panic(err_data)
                },
            }
            
            let mut __arg_arg =
                match serde::Serde::<felt>::deserialize(ref data) {
                    Option::Some(x) => x,
                    Option::None(()) => {
                        let mut err_data = array_new();
                        array_append(ref err_data, 'Input too short for arguments');
                        panic(err_data)
                    },
                };

            let __arg_num =
                match serde::Serde::<felt>::deserialize(ref data) {
                    Option::Some(x) => x,
                    Option::None(()) => {
                        let mut err_data = array_new();
                        array_append(ref err_data, 'Input too short for arguments');
                        panic(err_data)
                    },
                };
            if array_len(ref data) != 0_usize {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array_new();
                array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            match get_gas_all(get_builtin_costs()) {
                Option::Some(_) => {
                },
                Option::None(_) => {
                    let mut err_data = array_new();
                    array_append(ref err_data, 'Out of gas');
                    panic(err_data)
                },
            }
            super::set_something(ref __arg_arg, __arg_num);
            let mut arr = array_new();
            // References.
            serde::Serde::<felt>::serialize(ref arr, __arg_arg);
            // Result.
            arr
        }
        
    }

    mod __constructor {
        
    }
}

//! > expected_diagnostics
