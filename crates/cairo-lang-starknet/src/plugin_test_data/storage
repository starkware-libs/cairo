//! > Test expansion of StarkNet storage logic.

//! > test_function_name
test_expand_contract

//! > cairo_code
// TODO(ilya): update format.
#[contract]
mod TestContract {
    struct Storage {
        var_felt: felt,
        var_u128: u128,
        var_bool: bool,
    }
}

//! > generated_cairo_code
#[generated_contract]
mod TestContract {
    struct Storage {
        var_felt: felt,
        var_u128: u128,
        var_bool: bool,
    }

    
    mod var_felt {
        fn read() -> felt {
            // Only address_domain 0 is currently supported.
            let address_domain = 0;
            match starknet::storage_read_syscall(
                address_domain,
                starknet::storage_address_const::<0x10a7472546cff66beb36d7b4e019221087eee8337c7bfc1dc1aac20a10c024d>(),
            ) {
                Result::Ok(value) => value,
                Result::Err(revert_reason) => {
                    let mut err_data = array_new::<felt>();
                    array_append::<felt>(err_data, revert_reason);
                    panic(err_data)
                },
            }
        }
        fn write(value: felt) {
            // Only address_domain 0 is currently supported.
            let address_domain = 0;
            match starknet::storage_write_syscall(
                address_domain,
                starknet::storage_address_const::<0x10a7472546cff66beb36d7b4e019221087eee8337c7bfc1dc1aac20a10c024d>(),
                value,
            ) {
                Result::Ok(()) => {},
                Result::Err(revert_reason) => {
                    let mut err_data = array_new::<felt>();
                    array_append::<felt>(err_data, revert_reason);
                    panic(err_data)
                },
            }
        }
    }
    mod var_u128 {
        fn read() -> u128 {
            // Only address_domain 0 is currently supported.
            let address_domain = 0;
            match starknet::storage_read_syscall(
                address_domain,
                starknet::storage_address_const::<0x1ba472df0f88c033d4e0c12eb95fd291de570db0f2df241297c6ebf905889a>(),
            ) {
                Result::Ok(value) => u128_from_felt(value),
                Result::Err(revert_reason) => {
                    let mut err_data = array_new::<felt>();
                    array_append::<felt>(err_data, revert_reason);
                    panic(err_data)
                },
            }
        }
        fn write(value: u128) {
            // Only address_domain 0 is currently supported.
            let address_domain = 0;
            match starknet::storage_write_syscall(
                address_domain,
                starknet::storage_address_const::<0x1ba472df0f88c033d4e0c12eb95fd291de570db0f2df241297c6ebf905889a>(),
                u128_to_felt(value),
            ) {
                Result::Ok(()) => {},
                Result::Err(revert_reason) => {
                    let mut err_data = array_new::<felt>();
                    array_append::<felt>(err_data, revert_reason);
                    panic(err_data)
                },
            }
        }
    }
    mod var_bool {
        fn read() -> bool {
            // Only address_domain 0 is currently supported.
            let address_domain = 0;
            match starknet::storage_read_syscall(
                address_domain,
                starknet::storage_address_const::<0x379caae8ce359ad2da9b1cd83d4df406d959c199192b9c9e787595a50e0db27>(),
            ) {
                Result::Ok(value) => if value == 0 { false } else { true },
                Result::Err(revert_reason) => {
                    let mut err_data = array_new::<felt>();
                    array_append::<felt>(err_data, revert_reason);
                    panic(err_data)
                },
            }
        }
        fn write(value: bool) {
            // Only address_domain 0 is currently supported.
            let address_domain = 0;
            match starknet::storage_write_syscall(
                address_domain,
                starknet::storage_address_const::<0x379caae8ce359ad2da9b1cd83d4df406d959c199192b9c9e787595a50e0db27>(),
                if value { 0 } else { 1 },
            ) {
                Result::Ok(()) => {},
                Result::Err(revert_reason) => {
                    let mut err_data = array_new::<felt>();
                    array_append::<felt>(err_data, revert_reason);
                    panic(err_data)
                },
            }
        }
    }
    trait __abi {
        
    }

    mod __external {
        
    }
}

//! > expected_diagnostics
