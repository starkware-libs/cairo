//! > Test diagnostics from invalid contract.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[contract]
mod TestContract;

//! > generated_cairo_code

//! > expected_diagnostics
error: Contracts without body are not supported.
 --> dummy_file.cairo:2:17
mod TestContract;
                ^

//! > ==========================================================================

//! > Test diagnostics of non-serializable parameter in entry point.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[contract]
mod TestContract {
    #[external]
    fn foo(x: (felt, felt)) {
    }
}

//! > generated_cairo_code
#[generated_contract]
mod TestContract {
    #[external]
    fn foo(x: (felt, felt)) {
    }

    
    trait __abi {
        #[external]
        fn foo(x: (felt, felt));
        
        
    }

    mod __external {
        fn foo(mut data: Array::<felt>) -> Array::<felt> {
            match get_gas() {
                Option::Some(_) => {
                },
                Option::None(_) => {
                    let mut err_data = array_new();
                    array_append(ref err_data, 'Out of gas');
                    panic(err_data);
                },
            }
            
            let __arg_x =
                match serde::Serde::<(felt, felt)>::deserialize(ref data) {
                    Option::Some(x) => x,
                    Option::None(()) => {
                        let mut err_data = array_new();
                        array_append(ref err_data, 'Input too short for arguments');
                        panic(err_data)
                    },
                };
            if array_len(ref data) != 0_u128 {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array_new();
                array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            match get_gas_all(get_builtin_costs()) {
                Option::Some(_) => {
                },
                Option::None(_) => {
                    let mut err_data = array_new();
                    array_append(ref err_data, 'Out of gas');
                    panic(err_data)
                },
            }
            super::foo(__arg_x);
            let mut arr = array_new();
            // References.
            // Result.
            arr
        }
        
        
    }
}

//! > expected_diagnostics

//! > ==========================================================================

//! > Test diagnostics of non-serializable return type in entry point.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[contract]
mod TestContract {
    #[external]
    fn foo() -> (felt, felt) {
    }
}

//! > generated_cairo_code
#[generated_contract]
mod TestContract {
    #[external]
    fn foo() -> (felt, felt) {
    }

    
    trait __abi {
        #[external]
        fn foo() -> (felt, felt);
        
        
    }

    mod __external {
        fn foo(mut data: Array::<felt>) -> Array::<felt> {
            match get_gas() {
                Option::Some(_) => {
                },
                Option::None(_) => {
                    let mut err_data = array_new();
                    array_append(ref err_data, 'Out of gas');
                    panic(err_data);
                },
            }
            
            if array_len(ref data) != 0_u128 {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array_new();
                array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            match get_gas_all(get_builtin_costs()) {
                Option::Some(_) => {
                },
                Option::None(_) => {
                    let mut err_data = array_new();
                    array_append(ref err_data, 'Out of gas');
                    panic(err_data)
                },
            }
            
            let res = super::foo();
            let mut arr = array_new();
            // References.
            // Result.
            serde::Serde::<(felt, felt)>::serialize(ref arr, res)
            arr
        }
        
        
    }
}

//! > expected_diagnostics

//! > ==========================================================================

//! > Test multiple diagnostics from entry point.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[contract]
mod TestContract {
    #[external]
    fn foo(x: (felt, felt), y: (felt, felt)) -> (felt, felt) {
    }
}

//! > generated_cairo_code
#[generated_contract]
mod TestContract {
    #[external]
    fn foo(x: (felt, felt), y: (felt, felt)) -> (felt, felt) {
    }

    
    trait __abi {
        #[external]
        fn foo(x: (felt, felt), y: (felt, felt)) -> (felt, felt);
        
        
    }

    mod __external {
        fn foo(mut data: Array::<felt>) -> Array::<felt> {
            match get_gas() {
                Option::Some(_) => {
                },
                Option::None(_) => {
                    let mut err_data = array_new();
                    array_append(ref err_data, 'Out of gas');
                    panic(err_data);
                },
            }
            
            let __arg_x =
                match serde::Serde::<(felt, felt)>::deserialize(ref data) {
                    Option::Some(x) => x,
                    Option::None(()) => {
                        let mut err_data = array_new();
                        array_append(ref err_data, 'Input too short for arguments');
                        panic(err_data)
                    },
                };

            let __arg_y =
                match serde::Serde::<(felt, felt)>::deserialize(ref data) {
                    Option::Some(x) => x,
                    Option::None(()) => {
                        let mut err_data = array_new();
                        array_append(ref err_data, 'Input too short for arguments');
                        panic(err_data)
                    },
                };
            if array_len(ref data) != 0_u128 {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array_new();
                array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            match get_gas_all(get_builtin_costs()) {
                Option::Some(_) => {
                },
                Option::None(_) => {
                    let mut err_data = array_new();
                    array_append(ref err_data, 'Out of gas');
                    panic(err_data)
                },
            }
            
            let res = super::foo(__arg_x, __arg_y);
            let mut arr = array_new();
            // References.
            // Result.
            serde::Serde::<(felt, felt)>::serialize(ref arr, res)
            arr
        }
        
        
    }
}

//! > expected_diagnostics

//! > ==========================================================================

//! > Test diagnostics from event with nonempty body.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[contract]
mod TestContract {
    #[event]
    fn nonempty_body() {
        let x = 1;
    }
}

//! > generated_cairo_code
#[generated_contract]
mod TestContract {

    
    trait __abi {
        
        
    }

    mod __external {
        
        
    }
}

//! > expected_diagnostics
error: Event function body must be empty.
 --> dummy_file.cairo:5:9
        let x = 1;
        ^********^

//! > ==========================================================================

//! > Test diagnostics from event with ref params.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[contract]
mod TestContract {
    #[event]
    fn with_ref_param(ref x: felt, y: u128) {
    }
}

//! > generated_cairo_code
#[generated_contract]
mod TestContract {

    
    trait __abi {
        
        
    }

    mod __external {
        
        
    }
}

//! > expected_diagnostics
error: `ref` parameters are not supported in contract events.
 --> dummy_file.cairo:4:23
    fn with_ref_param(ref x: felt, y: u128) {
                      ^*^

//! > ==========================================================================

//! > Test diagnostics from event with non-unit return type.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[contract]
mod TestContract {
    #[event]
    fn nonunit_ret_type() -> felt {
    }
}

//! > generated_cairo_code
#[generated_contract]
mod TestContract {

    
    trait __abi {
        
        
    }

    mod __external {
        
        
    }
}

//! > expected_diagnostics
error: Event functions must not return a value.
 --> dummy_file.cairo:4:27
    fn nonunit_ret_type() -> felt {
                          ^*****^

//! > ==========================================================================

//! > Test diagnostics from event with a non-serializable type.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[contract]
mod TestContract {
    #[event]
    fn bad_event(x: (felt, felt)) {
    }
}

//! > generated_cairo_code
#[generated_contract]
mod TestContract {

    
    trait __abi {
        
        #[event]
        fn bad_event(x: (felt, felt));
        
    }

    mod __external {
        
        
        #[event]
        fn bad_event(x: (felt, felt)) {
            let mut keys = array_new();
            array_append(ref keys, 0x24588e9be27cb91356e7dba75bcae8d487891c93e2c1696ab6437f2700aed26);
            let mut data = array_new();
            serde::Serde::<(felt, felt)>::serialize(ref data, x);
            
            starknet::emit_event_syscall(keys, data);
        }
            
    }
}

//! > expected_diagnostics

//! > ==========================================================================

//! > Test multiple diagnostics from event.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[contract]
mod TestContract {
    #[event]
    fn bad_event(ref x: felt, ref y: felt, z: (felt, felt)) -> felt {
        3
    }
}

//! > generated_cairo_code
#[generated_contract]
mod TestContract {

    
    trait __abi {
        
        
    }

    mod __external {
        
        
    }
}

//! > expected_diagnostics
error: Event functions must not return a value.
 --> dummy_file.cairo:4:61
    fn bad_event(ref x: felt, ref y: felt, z: (felt, felt)) -> felt {
                                                            ^*****^

error: `ref` parameters are not supported in contract events.
 --> dummy_file.cairo:4:18
    fn bad_event(ref x: felt, ref y: felt, z: (felt, felt)) -> felt {
                 ^*^

error: `ref` parameters are not supported in contract events.
 --> dummy_file.cairo:4:31
    fn bad_event(ref x: felt, ref y: felt, z: (felt, felt)) -> felt {
                              ^*^

error: Event function body must be empty.
 --> dummy_file.cairo:5:9
        3
        ^
