//! > Test diagnostics from invalid contract.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[contract]
mod TestContract;

//! > generated_cairo_code

//! > expected_diagnostics
error: Contracts without body are not supported.
 --> dummy_file.cairo:2:17
mod TestContract;
                ^

//! > ==========================================================================

//! > Test diagnostics of non-serializable parameter in entry point.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[contract]
mod TestContract {
    #[external]
    fn foo(x: (felt, felt)) {
    }
}

//! > generated_cairo_code
#[generated_contract]
mod TestContract {
    #[external]
    fn foo(x: (felt, felt)) {
    }

    
    trait __abi {
        #[external]
        fn foo(x: (felt, felt));
        
        
    }

    mod __external {
        
        
    }
}

//! > expected_diagnostics
error: Could not find serialization for type `(felt, felt)`
 --> dummy_file.cairo:4:15
    fn foo(x: (felt, felt)) {
              ^**********^

//! > ==========================================================================

//! > Test diagnostics of non-serializable return type in entry point.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[contract]
mod TestContract {
    #[external]
    fn foo() -> (felt, felt) {
    }
}

//! > generated_cairo_code
#[generated_contract]
mod TestContract {
    #[external]
    fn foo() -> (felt, felt) {
    }

    
    trait __abi {
        #[external]
        fn foo() -> (felt, felt);
        
        
    }

    mod __external {
        
        
    }
}

//! > expected_diagnostics
error: Could not find serialization for type `(felt, felt)`
 --> dummy_file.cairo:4:17
    fn foo() -> (felt, felt) {
                ^**********^

//! > ==========================================================================

//! > Test multiple diagnostics from entry point.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[contract]
mod TestContract {
    #[external]
    fn foo(x: (felt, felt), y: (felt, felt)) -> (felt, felt) {
    }
}

//! > generated_cairo_code
#[generated_contract]
mod TestContract {
    #[external]
    fn foo(x: (felt, felt), y: (felt, felt)) -> (felt, felt) {
    }

    
    trait __abi {
        #[external]
        fn foo(x: (felt, felt), y: (felt, felt)) -> (felt, felt);
        
        
    }

    mod __external {
        
        
    }
}

//! > expected_diagnostics
error: Could not find serialization for type `(felt, felt)`
 --> dummy_file.cairo:4:15
    fn foo(x: (felt, felt), y: (felt, felt)) -> (felt, felt) {
              ^**********^

error: Could not find serialization for type `(felt, felt)`
 --> dummy_file.cairo:4:32
    fn foo(x: (felt, felt), y: (felt, felt)) -> (felt, felt) {
                               ^**********^

error: Could not find serialization for type `(felt, felt)`
 --> dummy_file.cairo:4:49
    fn foo(x: (felt, felt), y: (felt, felt)) -> (felt, felt) {
                                                ^**********^

//! > ==========================================================================

//! > Test diagnostics from event with nonempty body.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[contract]
mod TestContract {
    #[event]
    fn nonempty_body() {
        let x = 1;
    }
}

//! > generated_cairo_code
#[generated_contract]
mod TestContract {

    
    trait __abi {
        
        
    }

    mod __external {
        
        
    }
}

//! > expected_diagnostics
error: Event function body must be empty.
 --> dummy_file.cairo:5:9
        let x = 1;
        ^********^

//! > ==========================================================================

//! > Test diagnostics from event with ref params.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[contract]
mod TestContract {
    #[event]
    fn with_ref_param(ref x: felt, y: u128) {
    }
}

//! > generated_cairo_code
#[generated_contract]
mod TestContract {

    
    trait __abi {
        
        
    }

    mod __external {
        
        
    }
}

//! > expected_diagnostics
error: `ref` parameters are not supported in contract events.
 --> dummy_file.cairo:4:23
    fn with_ref_param(ref x: felt, y: u128) {
                      ^*^

//! > ==========================================================================

//! > Test diagnostics from event with non-unit return type.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[contract]
mod TestContract {
    #[event]
    fn nonunit_ret_type() -> felt {
    }
}

//! > generated_cairo_code
#[generated_contract]
mod TestContract {

    
    trait __abi {
        
        
    }

    mod __external {
        
        
    }
}

//! > expected_diagnostics
error: Event functions must not return a value.
 --> dummy_file.cairo:4:27
    fn nonunit_ret_type() -> felt {
                          ^*****^

//! > ==========================================================================

//! > Test diagnostics from event with a non-serializable type.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[contract]
mod TestContract {
    #[event]
    fn bad_event(x: (felt, felt)) {
    }
}

//! > generated_cairo_code
#[generated_contract]
mod TestContract {

    
    trait __abi {
        
        
    }

    mod __external {
        
        
    }
}

//! > expected_diagnostics
error: Could not find serialization for type `(felt, felt)`
 --> dummy_file.cairo:4:21
    fn bad_event(x: (felt, felt)) {
                    ^**********^

//! > ==========================================================================

//! > Test multiple diagnostics from event.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[contract]
mod TestContract {
    #[event]
    fn bad_event(ref x: felt, ref y: felt, z: (felt, felt)) -> felt {
        3
    }
}

//! > generated_cairo_code
#[generated_contract]
mod TestContract {

    
    trait __abi {
        
        
    }

    mod __external {
        
        
    }
}

//! > expected_diagnostics
error: Event functions must not return a value.
 --> dummy_file.cairo:4:61
    fn bad_event(ref x: felt, ref y: felt, z: (felt, felt)) -> felt {
                                                            ^*****^

error: `ref` parameters are not supported in contract events.
 --> dummy_file.cairo:4:18
    fn bad_event(ref x: felt, ref y: felt, z: (felt, felt)) -> felt {
                 ^*^

error: `ref` parameters are not supported in contract events.
 --> dummy_file.cairo:4:31
    fn bad_event(ref x: felt, ref y: felt, z: (felt, felt)) -> felt {
                              ^*^

error: Could not find serialization for type `(felt, felt)`
 --> dummy_file.cairo:4:47
    fn bad_event(ref x: felt, ref y: felt, z: (felt, felt)) -> felt {
                                              ^**********^

error: Event function body must be empty.
 --> dummy_file.cairo:5:9
        3
        ^
