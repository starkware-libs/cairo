//! > Test expansion of the hello_starknet contract.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[contract]
mod HelloStarknet {
    struct Storage { balance: felt, }

    // Increases the balance by the given amount.
    #[external]
    fn increase_balance(amount: felt) {
        let res = balance::read();
        balance::write(res + amount);
    }

    // Returns the current balance.
    #[view]
    fn get_balance() -> felt {
        balance::read()
    }
}

//! > generated_cairo_code
#[generated_contract]
mod HelloStarknet {

    // Increases the balance by the given amount.
    #[external]
    fn increase_balance(amount: felt) {
        let res = balance::read();
        balance::write(res + amount);
    }

    // Returns the current balance.
    #[view]
    fn get_balance() -> felt {
        balance::read()
    }

    
    mod balance {
        fn address() -> starknet::StorageAddress {
            starknet::storage_address_const::<0x206f38f7e4f15e87567361213c28f235cccdaa1d7fd34c9db1dfe9489c6a091>()
        }
        fn read() -> felt {
            // Only address_domain 0 is currently supported.
            let address_domain = 0;
            match starknet::storage_read_syscall(address_domain, address()) {
                Result::Ok(value) => value,
                Result::Err(revert_reason) => {
                    let mut err_data = array_new::<felt>();
                    array_append::<felt>(err_data, revert_reason);
                    panic(err_data)
                },
            }
        }
        fn write(value: felt) {
            // Only address_domain 0 is currently supported.
            let address_domain = 0;
            match starknet::storage_write_syscall(address_domain, address(), value) {
                Result::Ok(()) => {},
                Result::Err(revert_reason) => {
                    let mut err_data = array_new::<felt>();
                    array_append::<felt>(err_data, revert_reason);
                    panic(err_data)
                },
            }
        }
    }
    trait __abi {
        fn increase_balance(amount: felt);
        fn get_balance() -> felt;
        
    }

    mod __external {
        fn increase_balance(mut data: Array::<felt>) -> Array::<felt> {
            match get_gas() {
                Option::Some(_) => {
                },
                Option::None(_) => {
                    let mut err_data = array_new::<felt>();
                    array_append::<felt>(err_data, 'Out of gas');
                    panic(err_data);
                },
            }
            
            let __arg_amount = match serde::deserialize_felt(data) {
                Option::Some(x) => x,
                Option::None(()) => {
                    let mut err_data = array_new::<felt>();
                    array_append::<felt>(err_data, 'Input too short for arguments');
                    panic(err_data)
                },
            };
            if array_len::<felt>(data) != 0_u128 {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array_new::<felt>();
                array_append::<felt>(err_data, 'Input too long for arguments');
                panic(err_data);
            }
            super::increase_balance(__arg_amount);
            let mut arr = array_new::<felt>();
            // References.
            // Result.
            arr
        }
        fn get_balance(mut data: Array::<felt>) -> Array::<felt> {
            match get_gas() {
                Option::Some(_) => {
                },
                Option::None(_) => {
                    let mut err_data = array_new::<felt>();
                    array_append::<felt>(err_data, 'Out of gas');
                    panic(err_data);
                },
            }
            
            if array_len::<felt>(data) != 0_u128 {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array_new::<felt>();
                array_append::<felt>(err_data, 'Input too long for arguments');
                panic(err_data);
            }
            
            let res = super::get_balance();
            let mut arr = array_new::<felt>();
            // References.
            // Result.
            serde::serialize_felt(arr, res)
            arr
        }
        
    }
}

//! > expected_diagnostics
