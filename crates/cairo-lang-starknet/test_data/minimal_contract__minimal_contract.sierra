type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::array::Span::<core::felt252> = Struct<ut@[782572820229152792105145177694740816763001980856532159945905090893343825762], Snapshot<Array<felt252>>> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<core::array::Span::<core::felt252>> = Struct<ut@[1325343513152088812341467750635149026053683136611136091911357178651207272643], core::array::Span::<core::felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@[1325343513152088812341467750635149026053683136611136091911357178651207272643]> [storable: true, drop: true, dup: true, zero_sized: true];
type cairo_level_tests::contracts::minimal_contract::minimal_contract::ContractState = Struct<ut@[1223120574780935717470737749329807619549781166213122588752729638981143389984]> [storable: true, drop: true, dup: true, zero_sized: true];
type BuiltinCosts = BuiltinCosts [storable: true, drop: true, dup: true, zero_sized: false];
type System = System [storable: true, drop: false, dup: false, zero_sized: false];
type core::panics::Panic = Struct<ut@[640126984585624630990013944782631102820301644699864366139839615702772668018]> [storable: true, drop: true, dup: true, zero_sized: true];
type Tuple<core::panics::Panic, Array<felt252>> = Struct<ut@[1325343513152088812341467750635149026053683136611136091911357178651207272643], core::panics::Panic, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type core::panics::PanicResult::<(core::array::Span::<core::felt252>,)> = Enum<ut@[270671131472959732993844072583327084608513343873724697777364695367457417702], Tuple<core::array::Span::<core::felt252>>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc withdraw_gas = withdraw_gas;
libfunc branch_align = branch_align;
libfunc struct_deconstruct<core::array::Span::<core::felt252>> = struct_deconstruct<core::array::Span::<core::felt252>>;
libfunc array_len<felt252> = array_len<felt252>;
libfunc snapshot_take<u32> = snapshot_take<u32>;
libfunc drop<u32> = drop<u32>;
libfunc u32_const<0> = u32_const<0>;
libfunc rename<u32> = rename<u32>;
libfunc store_temp<u32> = store_temp<u32>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc u32_eq = u32_eq;
libfunc array_new<felt252> = array_new<felt252>;
libfunc felt252_const<7733229381460288120802334208475838166080759535023995805565484692595> = felt252_const<7733229381460288120802334208475838166080759535023995805565484692595>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc array_append<felt252> = array_append<felt252>;
libfunc struct_construct<core::panics::Panic> = struct_construct<core::panics::Panic>;
libfunc struct_construct<Tuple<core::panics::Panic, Array<felt252>>> = struct_construct<Tuple<core::panics::Panic, Array<felt252>>>;
libfunc enum_init<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>, 1> = enum_init<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>, 1>;
libfunc redeposit_gas = redeposit_gas;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<System> = store_temp<System>;
libfunc store_temp<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>> = store_temp<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>>;
libfunc get_builtin_costs = get_builtin_costs;
libfunc store_temp<BuiltinCosts> = store_temp<BuiltinCosts>;
libfunc withdraw_gas_all = withdraw_gas_all;
libfunc struct_construct<cairo_level_tests::contracts::minimal_contract::minimal_contract::ContractState> = struct_construct<cairo_level_tests::contracts::minimal_contract::minimal_contract::ContractState>;
libfunc function_call<user@cairo_level_tests::contracts::minimal_contract::minimal_contract::empty> = function_call<user@cairo_level_tests::contracts::minimal_contract::minimal_contract::empty>;
libfunc drop<cairo_level_tests::contracts::minimal_contract::minimal_contract::ContractState> = drop<cairo_level_tests::contracts::minimal_contract::minimal_contract::ContractState>;
libfunc drop<Unit> = drop<Unit>;
libfunc snapshot_take<Array<felt252>> = snapshot_take<Array<felt252>>;
libfunc drop<Array<felt252>> = drop<Array<felt252>>;
libfunc struct_construct<core::array::Span::<core::felt252>> = struct_construct<core::array::Span::<core::felt252>>;
libfunc struct_construct<Tuple<core::array::Span::<core::felt252>>> = struct_construct<Tuple<core::array::Span::<core::felt252>>>;
libfunc enum_init<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>, 0> = enum_init<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>, 0>;
libfunc felt252_const<375233589013918064796019> = felt252_const<375233589013918064796019>;
libfunc drop<core::array::Span::<core::felt252>> = drop<core::array::Span::<core::felt252>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;

revoke_ap_tracking() -> (); // 0
withdraw_gas([0], [1]) { fallthrough([4], [5]) 64([6], [7]) }; // 1
branch_align() -> (); // 2
struct_deconstruct<core::array::Span::<core::felt252>>([3]) -> ([8]); // 3
array_len<felt252>([8]) -> ([9]); // 4
snapshot_take<u32>([9]) -> ([10], [11]); // 5
drop<u32>([10]) -> (); // 6
u32_const<0>() -> ([12]); // 7
snapshot_take<u32>([12]) -> ([13], [14]); // 8
drop<u32>([13]) -> (); // 9
rename<u32>([11]) -> ([15]); // 10
rename<u32>([14]) -> ([16]); // 11
store_temp<u32>([15]) -> ([15]); // 12
store_temp<RangeCheck>([4]) -> ([4]); // 13
u32_eq([15], [16]) { fallthrough() 29() }; // 14
branch_align() -> (); // 15
array_new<felt252>() -> ([17]); // 16
felt252_const<7733229381460288120802334208475838166080759535023995805565484692595>() -> ([18]); // 17
store_temp<felt252>([18]) -> ([18]); // 18
array_append<felt252>([17], [18]) -> ([19]); // 19
struct_construct<core::panics::Panic>() -> ([20]); // 20
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([20], [19]) -> ([21]); // 21
enum_init<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>, 1>([21]) -> ([22]); // 22
redeposit_gas([5]) -> ([5]); // 23
store_temp<RangeCheck>([4]) -> ([4]); // 24
store_temp<GasBuiltin>([5]) -> ([5]); // 25
store_temp<System>([2]) -> ([2]); // 26
store_temp<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>>([22]) -> ([22]); // 27
return([4], [5], [2], [22]); // 28
branch_align() -> (); // 29
get_builtin_costs() -> ([23]); // 30
store_temp<BuiltinCosts>([23]) -> ([23]); // 31
withdraw_gas_all([4], [5], [23]) { fallthrough([24], [25]) 50([26], [27]) }; // 32
branch_align() -> (); // 33
struct_construct<cairo_level_tests::contracts::minimal_contract::minimal_contract::ContractState>() -> ([28]); // 34
function_call<user@cairo_level_tests::contracts::minimal_contract::minimal_contract::empty>([28]) -> ([29], [30]); // 35
drop<cairo_level_tests::contracts::minimal_contract::minimal_contract::ContractState>([29]) -> (); // 36
drop<Unit>([30]) -> (); // 37
array_new<felt252>() -> ([31]); // 38
snapshot_take<Array<felt252>>([31]) -> ([32], [33]); // 39
drop<Array<felt252>>([32]) -> (); // 40
struct_construct<core::array::Span::<core::felt252>>([33]) -> ([34]); // 41
struct_construct<Tuple<core::array::Span::<core::felt252>>>([34]) -> ([35]); // 42
enum_init<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>, 0>([35]) -> ([36]); // 43
redeposit_gas([25]) -> ([25]); // 44
store_temp<RangeCheck>([24]) -> ([24]); // 45
store_temp<GasBuiltin>([25]) -> ([25]); // 46
store_temp<System>([2]) -> ([2]); // 47
store_temp<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>>([36]) -> ([36]); // 48
return([24], [25], [2], [36]); // 49
branch_align() -> (); // 50
array_new<felt252>() -> ([37]); // 51
felt252_const<375233589013918064796019>() -> ([38]); // 52
store_temp<felt252>([38]) -> ([38]); // 53
array_append<felt252>([37], [38]) -> ([39]); // 54
struct_construct<core::panics::Panic>() -> ([40]); // 55
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([40], [39]) -> ([41]); // 56
enum_init<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>, 1>([41]) -> ([42]); // 57
redeposit_gas([27]) -> ([27]); // 58
store_temp<RangeCheck>([26]) -> ([26]); // 59
store_temp<GasBuiltin>([27]) -> ([27]); // 60
store_temp<System>([2]) -> ([2]); // 61
store_temp<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>>([42]) -> ([42]); // 62
return([26], [27], [2], [42]); // 63
branch_align() -> (); // 64
drop<core::array::Span::<core::felt252>>([3]) -> (); // 65
array_new<felt252>() -> ([43]); // 66
felt252_const<375233589013918064796019>() -> ([44]); // 67
store_temp<felt252>([44]) -> ([44]); // 68
array_append<felt252>([43], [44]) -> ([45]); // 69
struct_construct<core::panics::Panic>() -> ([46]); // 70
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([46], [45]) -> ([47]); // 71
enum_init<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>, 1>([47]) -> ([48]); // 72
store_temp<RangeCheck>([6]) -> ([6]); // 73
store_temp<GasBuiltin>([7]) -> ([7]); // 74
store_temp<System>([2]) -> ([2]); // 75
store_temp<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>>([48]) -> ([48]); // 76
return([6], [7], [2], [48]); // 77
struct_construct<Unit>() -> ([1]); // 78
return([0], [1]); // 79

cairo_level_tests::contracts::minimal_contract::minimal_contract::__wrapper__empty@0([0]: RangeCheck, [1]: GasBuiltin, [2]: System, [3]: core::array::Span::<core::felt252>) -> (RangeCheck, GasBuiltin, System, core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>);
cairo_level_tests::contracts::minimal_contract::minimal_contract::empty@78([0]: cairo_level_tests::contracts::minimal_contract::minimal_contract::ContractState) -> (cairo_level_tests::contracts::minimal_contract::minimal_contract::ContractState, Unit);
