{
  "prime": "0x800000000000011000000000000000000000000000000000000000000000001",
  "compiler_version": "1.0.0",
  "bytecode": [
    "0x163",
    "0x40780017fff7fff",
    "0x5",
    "0xa0680017fff8000",
    "0x7",
    "0x482680017ffa8000",
    "0xffffffffffffffffffffffffffff8ed6",
    "0x400280007ff97fff",
    "0x10780017fff7fff",
    "0xb2",
    "0x4825800180007ffa",
    "0x712a",
    "0x480a7ffc7fff8000",
    "0x480a7ffd7fff8000",
    "0x1104800180018000",
    "0x315",
    "0x482680017ff98000",
    "0x1",
    "0x40137fee7fff8004",
    "0x40137fff7fff8003",
    "0x20680017fff7ffd",
    "0x97",
    "0x48127ffb7fff8000",
    "0x30b",
    "0x40137fee7fff8002",
    "0x20680017fff7ffe",
    "0x82",
    "0x48127ffc7fff8000",
    "0x304",
    "0x40137fef7fff8001",
    "0x6d",
    "0x48307ffc80007ffd",
    "0x40137ffe7fff8000",
    "0x4824800180007fff",
    "0x0",
    "0x20680017fff7fff",
    "0x4",
    "0x6",
    "0x480680017fff8000",
    "0x48307ffe80007fff",
    "0x49",
    "0x642",
    "0x482480017fff8000",
    "0x641",
    "0x480080007fff8000",
    "0x9",
    "0x4825800180008004",
    "0x100000000000000000000000000000000",
    "0x4002800080037fff",
    "0x2c",
    "0x48127fff7fff8000",
    "0x480a7ffb7fff8000",
    "0x480a80027fff8000",
    "0x480a80017fff8000",
    "0x480a80007fff8000",
    "0x2fd",
    "0x4826800180038000",
    "0x20680017fff7ffc",
    "0x16",
    "0x48127ffe7fff8000",
    "0x48127ffa7fff8000",
    "0x318",
    "0x48127ff47fff8000",
    "0x313",
    "0x48127ff07fff8000",
    "0x48127fea7fff8000",
    "0x208b7fff7fff7ffe",
    "0x48127ff97fff8000",
    "0x4f7574206f6620676173",
    "0x400080007ffe7fff",
    "0x480a80047fff8000",
    "0x482480017ff98000",
    "0x2f6",
    "0x496e70757420746f6f206c6f6e6720666f7220617267756d656e7473",
    "0x480a80037fff8000",
    "0x496e70757420746f6f2073686f727420666f7220617267756d656e7473",
    "0x480a7ffa7fff8000",
    "0xffffffffffffffffffffffffffff9d40",
    "0x98",
    "0x62c0",
    "0x29f",
    "0x40137fdf7fff8003",
    "0x7e",
    "0x2d0",
    "0x40137fdf7fff8001",
    "0x40137ffb7fff8002",
    "0x67",
    "0x43",
    "0x580",
    "0x57f",
    "0x4825800180008003",
    "0x4002800080027fff",
    "0x26",
    "0x4826800180028000",
    "0x2e1",
    "0x11",
    "0x2f2",
    "0x48127feb7fff8000",
    "0x23a",
    "0x3",
    "0xffffffffffffffffffffffffffffae84",
    "0x81",
    "0x517c",
    "0x22a",
    "0x40137fdf7fff8002",
    "0x40137ffb7fff8001",
    "0x66",
    "0x42",
    "0x4da",
    "0x4d9",
    "0x4825800180008002",
    "0x4002800080017fff",
    "0x25",
    "0x4826800180018000",
    "0x25e",
    "0x24d",
    "0x195",
    "0x2",
    "0xfffffffffffffffffffffffffffff1be",
    "0x400280007ff87fff",
    "0x5f",
    "0xe42",
    "0x48297ffc80007ffd",
    "0x482680017ff88000",
    "0x40137ffd7fff8001",
    "0x40137fff7fff8000",
    "0x4824800180007ffe",
    "0x34",
    "0x44a",
    "0x449",
    "0x4825800180008001",
    "0x4002800080007fff",
    "0x4826800180008000",
    "0x480a7ff97fff8000",
    "0x48127ffd7fff8000",
    "0x1ea",
    "0x482480017ff88000",
    "0x113",
    "0x8a",
    "0x92",
    "0x40137fee7fff8003",
    "0x40137fff7fff8002",
    "0x6f",
    "0x88",
    "0x40137fee7fff8000",
    "0x5a",
    "0x40137ffe7fff8001",
    "0x36",
    "0x3c6",
    "0x3c5",
    "0x19",
    "0x17e",
    "0xa3",
    "0x48127ff17fff8000",
    "0x8d",
    "0xa",
    "0x482680017ffc8000",
    "0x8",
    "0x480080007ffd8000",
    "0xfa",
    "0x482480017ffd8000",
    "0x123",
    "0x482480017fe68000",
    "0x18",
    "0x48127fe37fff8000",
    "0x400380007ffc7ffd",
    "0x800000000000010ffffffffffffffffffffffffffffffffffffffffffffffab",
    "0x2b",
    "0xa0680017fff8004",
    "0xe",
    "0x4824800180047ffe",
    "0x800000000000000000000000000000000000000000000000000000000000000",
    "0x484480017ffe8000",
    "0x110000000000000000",
    "0x48307ffe7fff8002",
    "0x480280007ffb7ffc",
    "0x480280017ffb7ffc",
    "0x402480017ffb7ffd",
    "0xffffffffffffffeeffffffffffffffff",
    "0x400280027ffb7ffd",
    "0x14",
    "0x484480017fff8001",
    "0x8000000000000000000000000000000",
    "0x48307fff80007ffd",
    "0x480280007ffb7ffd",
    "0x480280017ffb7ffd",
    "0x402480017ffc7ffe",
    "0xf8000000000000000000000000000000",
    "0x400280027ffb7ffe",
    "0x482680017ffb8000",
    "0x48127ff57fff8000",
    "0x480080007ffc8000",
    "0x17",
    "0xd7",
    "0x48127fee7fff8000",
    "0xd",
    "0xdc",
    "0xb",
    "0x800000000000010ffffffffffffffffffffffffffffffffffffffffffffff63",
    "0x10d",
    "0x48027ffd7ffc8000",
    "0x48027ffe7ffc8000",
    "0x48027fff7ffc8000",
    "0x400280007ffc7ffd",
    "0x482480017ffe8000",
    "0x400280017ffc7fff",
    "0x400280027ffc7ffe",
    "0x484480017ffd8000",
    "0x48307fff7ffb8000",
    "0x13c",
    "0x1275130f95dda36bcbb6e9d28796c1d7e10b6e9fd5ed083e0ede4b12f613528",
    "0x53746f7261676552656164",
    "0x400280007ffd7fff",
    "0x400380017ffd7ffc",
    "0x400280027ffd7ffd",
    "0x400280037ffd7ffe",
    "0x480280057ffd8000",
    "0xc",
    "0x480280047ffd8000",
    "0x482680017ffd8000",
    "0x480280067ffd8000",
    "0x480280077ffd8000",
    "0x1ee",
    "0x48127ff67fff8000",
    "0x53746f726167655772697465",
    "0x400280007ffc7fff",
    "0x400380017ffc7ffb",
    "0x400280027ffc7ffd",
    "0x400280037ffc7ffe",
    "0x400380047ffc7ffd",
    "0x480280067ffc8000",
    "0x480280057ffc8000",
    "0x480280077ffc8000",
    "0x480280087ffc8000",
    "0x1c8",
    "0x480280007ffc8003",
    "0x480280017ffc8003",
    "0x4844800180017ffe",
    "0x483180017ffd7ffd",
    "0x482480017fff7ffd",
    "0x800000000000010fffffffffffffffff7ffffffffffffef0000000000000001",
    "0x402480017fff7ffd",
    "0xffffffffffffffffffffffffffffffff",
    "0x402480017ffe7ffd",
    "0xf7ffffffffffffef0000000000000000",
    "0x402780017fff7fff",
    "0x800000000000010ffffffffffffffffffffffffffffffffffffffffffffff35",
    "0x1b1a0649752af1b28b3dc29a1556eee781e4a4c3a1f7f53f90fa834de098c4d",
    "0x43616c6c436f6e7472616374",
    "0x400280007ffb7fff",
    "0x400380017ffb7ffa",
    "0x400380027ffb7ffc",
    "0x400280037ffb7ffc",
    "0x400280047ffb7ffd",
    "0x400280057ffb7ffe",
    "0x480280077ffb8000",
    "0x480280067ffb8000",
    "0x480280087ffb8000",
    "0x480280097ffb8000",
    "0x175",
    "0x22",
    "0x800000000000010fffffffffffffffffffffffffffffffffffffffffffffeb2",
    "0x48127fd37fff8000",
    "0x48127ff87fff8000",
    "0x52657475726e6564206461746120746f6f2073686f7274",
    "0x48127fd87fff8000",
    "0x800000000000010fffffffffffffffffffffffffffffffffffffffffffffee1",
    "0x4c69627261727943616c6c",
    "0x121",
    "0x800000000000010fffffffffffffffffffffffffffffffffffffffffffffe5e",
    "0xcc",
    "0x480b7ffb7fff8002",
    "0x40037ffd7ffc8003",
    "0x48037ffe7ffc8004",
    "0x48037fff7ffc8005",
    "0x400380007ffa8000",
    "0x4828800080007fff",
    "0x400280017ffa7fff",
    "0x4846800180008000",
    "0x48327fff80038000",
    "0x400180027fff8005",
    "0x400180017fff7ffd",
    "0x400380007ffc8003",
    "0x400380017ffc8004",
    "0x4826800180058000",
    "0x400280027ffc7fff",
    "0x480080007ffe8000",
    "0x40337fff80017ffd",
    "0xf",
    "0x48317fff80008001",
    "0x4844800180007fff",
    "0x484480017fff8000",
    "0x1720",
    "0x48327ffe80028000",
    "0x48127ff77fff8000",
    "0x482b7ffb80007ffc",
    "0x20780017fff8000",
    "0x4845800180008000",
    "0xa0780017fff8002",
    "0x400380007ffa8001",
    "0x402680017ffa7fff",
    "0x400a7ffa7fff7fff",
    "0x4825800180007ffc",
    "0x480280007ff78002",
    "0x4844800180018002",
    "0x483280017ff88004",
    "0x4800800280038004",
    "0x482680017ff78004",
    "0x4801800080017ffa",
    "0x480380007ffc7ffa",
    "0x480080017fff7ffd",
    "0x480280017ffc7ffc",
    "0x400680017fff7ffb",
    "0x48307fff7ffa8001",
    "0x4800800180007ffa",
    "0x480080027fff8000",
    "0x480180007ffe7ffa",
    "0x402480017ff87fff",
    "0x800000000000010fffffffffffffffffffffffffffffffffffffffffffffff6",
    "0x48317ffd80007ff9",
    "0x48287ff780007ffe",
    "0x400280027ffc7ffc",
    "0x40337fff80067ffb",
    "0x20780017fff8006",
    "0x20780017fff7ffd",
    "0x48317fff80008005",
    "0x400080017ffb7fff",
    "0x402580017ffb8000",
    "0x400b7ff87fff8001",
    "0x400b7ff97fff8002",
    "0x400b80057fff8003",
    "0x400b80067fff8004",
    "0x35",
    "0x4829800580007ffa",
    "0xa0680017fff7fff",
    "0x480280007ff78000",
    "0x480280017ff78000",
    "0x4000000000000088000000000000001",
    "0x48307fff7ffd8000",
    "0x480280027ff78000",
    "0x480280037ff78000",
    "0x2aaaaaaaaaaaab05555555555555556",
    "0x48507ffe7ffa8000",
    "0x484480017ff48000",
    "0x800000000000011000000000000000000000000000000000000000000000000",
    "0x402480017fff7ffc",
    "0x4828800580007ff3",
    "0x40507fff7ffe7ffb",
    "0x4846800180058000",
    "0x40307fff7ff17ffa",
    "0x40507fff7ff17ffb",
    "0x480a80057fff7ffc",
    "0x48317ff280008005",
    "0x402780017ff78000",
    "0x800000000000010ffffffffffffffffffffffffffffffffffffffffffffff8e",
    "0x20780017fff7ffb",
    "0x679",
    "0x39ddf36852798d098c5b80df21c230b7e83fcb2caf4306e0027189214a469",
    "0x5ee7d42e9e06f995537d4421c5315008aa0246591eae6cb6d781b2335e1a0",
    "0x863511efcc17c34153f5d20accb6a83811b5ba6ba6850a25070a5370827f8",
    "0x9d68b061a9f286a7494ba4828b49920b168b96a4e7a7556bc73078b56a2e7",
    "0x24ef98576c315dc71adadc6be108fc74314f8004142c8488b002d4da6ce4e",
    "0x5583fe67d087df1574b895113256d53ded557b1d29554b3a133001c0b2bf9",
    "0x4d82ce3b16ba586a1afe33b3db2c6643e3a661743967a0fe60d4a3a1a975",
    "0x47c1f69cbf6eee7ddf28424ab2baaafd3548cc6319288f81562baa687907c",
    "0xd00ec61d613cd2abbadb85b38ffce6feb2decd7e7657bb873403ffae88ace",
    "0x8894c0a660b659e3170c39778753d4f83d5ae996523140b8cccee0e46524f",
    "0x24efbebeba8eea7df377b66815b760296fac3c327a84a197918ad5f107998",
    "0x5583fe67d087df1574b89569b2ae3b99993ee49569a16f5b66718667935a0",
    "0x5410c9618425576fe414e7da4d6a52aa9c9ab248b8e73e0e5cfdaebe5147",
    "0x4c6b4c17c4c2f90877b1afd2d8252a2fefdc1396cb8b4babaa76348a57a96",
    "0x85fe967883164fd0be1de2cd0fb4eb7f5e39dca175d6892ca861406dbd331",
    "0x966e9ba2f5dc9c02985608e8d3fc995fd202cad1b070f20bbd3852c28565c",
    "0x884d30c752cb3a08ff5e93552225f0f515d36513557195941f8ad57532f1f",
    "0x884d30e07c685d07aa0f8e4fc8c17a5f6620ef43cbb48b93f921b2957c568",
    "0x105fcc1af33f6544a0c6f3d221988b9ed559e5e2a33abf4ef0510715274e3",
    "0x133e0e93e17412676c397d59a81c9f4fa33b2a62d4f96202fcd95fa1c11c7c",
    "0x9627626b7d7eae0513227f9db647d31f323e47dcc9b807121d211d12780b9",
    "0x55bcf1e5d9135df80b6d2413c8ab00e8a76eb245760c8898f17244b279aa3",
    "0x309db005fa17008cc379c931543d28e7c238e56bb4f203ceb2dab692b344c",
    "0x6439a81095e6d6ebd027721330491ae36d4507fad5ace95b412f7977540d2",
    "0x4c6b5d639915ec27bf1125e38474366d845c516403b676b85eecfb549b238",
    "0x30f3d42734758e8371961aca2e40c1b0d9581ec76f41089df3c4cc02a9263",
    "0x55bcef393bcc526323705608a9ef59f71095254e64f452eb3ef8920b5da5d",
    "0x557d694d6c709e569e7cc024f98cc1ee2bd684843d7934d4d619bf30792b6",
    "0x4c6b342fc21fb8ca14d2b213b41618bdfb794b775b1ee61efdc63d62caec8",
    "0x309d1a0764bde28f597fad198f9b14955818325b7a6954e94c5d1b3a33c09",
    "0x18e29d33f06d4f850b13c7685e4692a6eea8f07f56faf40ca4a3363834892e",
    "0x1b4eea22a88ed765a32eb7adef02270fb092cebc7a65d37c2081e57e1df38e",
    "0x16828c86a375c9d82ee2bec501c356c8a32b5a6aae9145b6b832abaa5b49e5",
    "0x1be640b1decd63941ea33ba1ad1ae3ede0d866bfafc46c7fee169e802000dd",
    "0x1e16738e80b13792768687ef3dc87347948a6dc7bb5d1028339445da2c57d",
    "0xad8e25ea2ec99e0175cf51afdedab8e821a579bfa3a81fd680bee5e7af549",
    "0x1d14bf2c367bde339f078120d8a2fe209b4a128d061e0dc8d8c35bf8de4f11",
    "0x1eac2d29ee4358517ad89fb31a89e842f071ab879e27e68e8832f298a72a1a",
    "0x56dbf4e8f7b0732e7405c2e2c5c77e2229bdd0bf48447cc3581ea16c47af5",
    "0x7eff889755f2021e1e2228f22ea2626b11e266beb459feea7c55937e5ea4",
    "0x200e48214ea4346212619889a0affbfcc14d7562d6f3ebfd8a4fd9a4684f10",
    "0x17ab081163c09a1bebe6c45a1c52ba76894766a0af478de4683cf87e45bcc4",
    "0x23a6c422bc39d9eed0065c1eaff94d6925a19aa71a599d2b6c2e97d0fb3e8e",
    "0x2560258be2b4876cc9825ac872b2f22fdf0aabf859a75d219d66b5338cc448",
    "0x884d3197985b065b36eb223cbbbd784db807060c80119351a360b14e29de4",
    "0x242ba93390aaaaa85c657c332e12c0357ad86cfc1714e39142e9fc2b6b6bec",
    "0x133e31f141b007435a04dab8aa68fc393fec00709926794987e3b57589cca4",
    "0x9627145e3744d6cc54cf41b47fe04d1e946dbaa8fc9b9c497bd72c5aa09bb",
    "0x27ee99ca63194570ad927aee3b633a77d822136faf51f37a3f12f6e1d8ac17",
    "0x2a501ddffb0b283b89f43c378bec9feee021d67504219b834fa68b2c2d2bcf",
    "0x26e26c05bdf0c4c80cbf35361d0708f3dd47db493578fe927022d975e5f03",
    "0x2cff0b317f549377be7ecf3fe2b3201af421f66c1cfe85c601c2c80eac534f",
    "0x2ea0b554409c15e5dc829154fa13c8ca37e5e9e4f3aa0d570eafd0dde6aa9c",
    "0x29fa70b00fa31612898f3bee45207560b894810cfdcb61c59d8498e5cdc4dd",
    "0x327ed73f1f1b371b2d1483bf84100a62da859e4b1f27a8ea65eca9c67e7140",
    "0x4c6b48981a52113292dcaab993409d7a3ee05cd5ad60ea91cfcefdffecfbc",
    "0x55d59e2b994654fb1eb8aeb1c15910f08a507af5841dce8332a533036ac0c",
    "0xad6c1ab8"
  ],
  "hints": [
    [
      2,
      [
        {
          "TestLessThanOrEqual": {
            "lhs": {
              "Immediate": "0x712a"
            },
            "rhs": {
              "Deref": {
                "register": "FP",
                "offset": -6
              }
            },
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      60,
      [
        {
          "TestLessThanOrEqual": {
            "lhs": {
              "Immediate": "0x0"
            },
            "rhs": {
              "Deref": {
                "register": "FP",
                "offset": 4
              }
            },
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      83,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      111,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      129,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      143,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      157,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      171,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      185,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      202,
      [
        {
          "TestLessThanOrEqual": {
            "lhs": {
              "Immediate": "0x62c0"
            },
            "rhs": {
              "Deref": {
                "register": "FP",
                "offset": -6
              }
            },
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      254,
      [
        {
          "TestLessThanOrEqual": {
            "lhs": {
              "Immediate": "0x0"
            },
            "rhs": {
              "Deref": {
                "register": "FP",
                "offset": 3
              }
            },
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      276,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      299,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      317,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      331,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      345,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      359,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      376,
      [
        {
          "TestLessThanOrEqual": {
            "lhs": {
              "Immediate": "0x517c"
            },
            "rhs": {
              "Deref": {
                "register": "FP",
                "offset": -6
              }
            },
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      420,
      [
        {
          "TestLessThanOrEqual": {
            "lhs": {
              "Immediate": "0x0"
            },
            "rhs": {
              "Deref": {
                "register": "FP",
                "offset": 2
              }
            },
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      441,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      464,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      482,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      496,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      510,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      527,
      [
        {
          "TestLessThanOrEqual": {
            "lhs": {
              "Immediate": "0xe42"
            },
            "rhs": {
              "Deref": {
                "register": "FP",
                "offset": -6
              }
            },
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      564,
      [
        {
          "TestLessThanOrEqual": {
            "lhs": {
              "Immediate": "0x0"
            },
            "rhs": {
              "Deref": {
                "register": "FP",
                "offset": 1
              }
            },
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      582,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      593,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      612,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      627,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      645,
      [
        {
          "TestLessThanOrEqual": {
            "lhs": {
              "Immediate": "0x0"
            },
            "rhs": {
              "Deref": {
                "register": "FP",
                "offset": -6
              }
            },
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      696,
      [
        {
          "TestLessThanOrEqual": {
            "lhs": {
              "Immediate": "0x0"
            },
            "rhs": {
              "Deref": {
                "register": "FP",
                "offset": 3
              }
            },
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      712,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      728,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      746,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      760,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      774,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      788,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      893,
      [
        {
          "TestLessThan": {
            "lhs": {
              "Deref": {
                "register": "AP",
                "offset": -1
              }
            },
            "rhs": {
              "Immediate": "0x800000000000000000000000000000000000000000000000000000000000000"
            },
            "dst": {
              "register": "AP",
              "offset": 4
            }
          }
        }
      ]
    ],
    [
      897,
      [
        {
          "LinearSplit": {
            "value": {
              "Deref": {
                "register": "AP",
                "offset": 3
              }
            },
            "scalar": {
              "Immediate": "0x110000000000000000"
            },
            "max_x": {
              "Immediate": "0xffffffffffffffffffffffffffffffff"
            },
            "x": {
              "register": "AP",
              "offset": -2
            },
            "y": {
              "register": "AP",
              "offset": -1
            }
          }
        }
      ]
    ],
    [
      907,
      [
        {
          "LinearSplit": {
            "value": {
              "Deref": {
                "register": "AP",
                "offset": -2
              }
            },
            "scalar": {
              "Immediate": "0x8000000000000000000000000000000"
            },
            "max_x": {
              "Immediate": "0xffffffffffffffffffffffffffffffff"
            },
            "x": {
              "register": "AP",
              "offset": -1
            },
            "y": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      1070,
      [
        {
          "AllocFelt252Dict": {
            "segment_arena_ptr": {
              "Deref": {
                "register": "FP",
                "offset": -4
              }
            }
          }
        }
      ]
    ],
    [
      1104,
      [
        {
          "SystemCall": {
            "system": {
              "Deref": {
                "register": "FP",
                "offset": -3
              }
            }
          }
        }
      ]
    ],
    [
      1154,
      [
        {
          "SystemCall": {
            "system": {
              "Deref": {
                "register": "FP",
                "offset": -4
              }
            }
          }
        }
      ]
    ],
    [
      1195,
      [
        {
          "TestLessThan": {
            "lhs": {
              "Deref": {
                "register": "FP",
                "offset": -3
              }
            },
            "rhs": {
              "Immediate": "0x100000000000000000000000000000000"
            },
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      1197,
      [
        {
          "DivMod": {
            "lhs": {
              "Deref": {
                "register": "FP",
                "offset": -3
              }
            },
            "rhs": {
              "Immediate": "0x100000000000000000000000000000000"
            },
            "quotient": {
              "register": "AP",
              "offset": 3
            },
            "remainder": {
              "register": "AP",
              "offset": 4
            }
          }
        }
      ]
    ],
    [
      1234,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      1253,
      [
        {
          "SystemCall": {
            "system": {
              "Deref": {
                "register": "FP",
                "offset": -5
              }
            }
          }
        }
      ]
    ],
    [
      1294,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      1318,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      1337,
      [
        {
          "SystemCall": {
            "system": {
              "Deref": {
                "register": "FP",
                "offset": -5
              }
            }
          }
        }
      ]
    ],
    [
      1378,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      1413,
      [
        {
          "GetSegmentArenaIndex": {
            "dict_end_ptr": {
              "Deref": {
                "register": "FP",
                "offset": -3
              }
            },
            "dict_index": {
              "register": "FP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      1454,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "FP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      1474,
      [
        {
          "InitSquashData": {
            "dict_accesses": {
              "Deref": {
                "register": "FP",
                "offset": -5
              }
            },
            "ptr_diff": {
              "Deref": {
                "register": "FP",
                "offset": 0
              }
            },
            "n_accesses": {
              "Deref": {
                "register": "AP",
                "offset": -1
              }
            },
            "big_keys": {
              "register": "FP",
              "offset": 2
            },
            "first_key": {
              "register": "FP",
              "offset": 1
            }
          }
        }
      ]
    ],
    [
      1496,
      [
        {
          "GetCurrentAccessIndex": {
            "range_check_ptr": {
              "Deref": {
                "register": "FP",
                "offset": -9
              }
            }
          }
        }
      ]
    ],
    [
      1509,
      [
        {
          "ShouldSkipSquashLoop": {
            "should_skip_loop": {
              "register": "AP",
              "offset": -4
            }
          }
        }
      ]
    ],
    [
      1511,
      [
        {
          "GetCurrentAccessDelta": {
            "index_delta_minus1": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      1522,
      [
        {
          "ShouldContinueSquashLoop": {
            "should_continue": {
              "register": "AP",
              "offset": -4
            }
          }
        }
      ]
    ],
    [
      1524,
      [
        "AssertCurrentAccessIndicesIsEmpty"
      ]
    ],
    [
      1527,
      [
        {
          "AssertAllAccessesUsed": {
            "n_used_accesses": {
              "register": "AP",
              "offset": -1
            }
          }
        }
      ]
    ],
    [
      1531,
      [
        "AssertAllKeysUsed"
      ]
    ],
    [
      1536,
      [
        {
          "GetNextDictKey": {
            "next_key": {
              "register": "FP",
              "offset": 5
            }
          }
        }
      ]
    ],
    [
      1550,
      [
        {
          "AssertLtAssertValidInput": {
            "a": {
              "Deref": {
                "register": "FP",
                "offset": -6
              }
            },
            "b": {
              "Deref": {
                "register": "FP",
                "offset": 5
              }
            }
          }
        }
      ]
    ],
    [
      1558,
      [
        {
          "AssertLeFindSmallArcs": {
            "range_check_ptr": {
              "Deref": {
                "register": "FP",
                "offset": -9
              }
            },
            "a": {
              "Deref": {
                "register": "AP",
                "offset": -1
              }
            },
            "b": {
              "Deref": {
                "register": "FP",
                "offset": 5
              }
            }
          }
        }
      ]
    ],
    [
      1570,
      [
        {
          "AssertLeIsFirstArcExcluded": {
            "skip_exclude_a_flag": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      1582,
      [
        {
          "AssertLeIsSecondArcExcluded": {
            "skip_exclude_b_minus_a": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      1592,
      [
        "AssertLeAssertThirdArcExcluded"
      ]
    ]
  ],
  "pythonic_hints": [
    [
      2,
      [
        "memory[ap + 0] = 28970 <= memory[fp + -6]"
      ]
    ],
    [
      60,
      [
        "memory[ap + 0] = 0 <= memory[fp + 4]"
      ]
    ],
    [
      83,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      111,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      129,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      143,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      157,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      171,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      185,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      202,
      [
        "memory[ap + 0] = 25280 <= memory[fp + -6]"
      ]
    ],
    [
      254,
      [
        "memory[ap + 0] = 0 <= memory[fp + 3]"
      ]
    ],
    [
      276,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      299,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      317,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      331,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      345,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      359,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      376,
      [
        "memory[ap + 0] = 20860 <= memory[fp + -6]"
      ]
    ],
    [
      420,
      [
        "memory[ap + 0] = 0 <= memory[fp + 2]"
      ]
    ],
    [
      441,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      464,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      482,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      496,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      510,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      527,
      [
        "memory[ap + 0] = 3650 <= memory[fp + -6]"
      ]
    ],
    [
      564,
      [
        "memory[ap + 0] = 0 <= memory[fp + 1]"
      ]
    ],
    [
      582,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      593,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      612,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      627,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      645,
      [
        "memory[ap + 0] = 0 <= memory[fp + -6]"
      ]
    ],
    [
      696,
      [
        "memory[ap + 0] = 0 <= memory[fp + 3]"
      ]
    ],
    [
      712,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      728,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      746,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      760,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      774,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      788,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      893,
      [
        "memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248"
      ]
    ],
    [
      897,
      [
        "\n(value, scalar) = (memory[ap + 3], 313594649253062377472)\nx = min(value // scalar, 340282366920938463463374607431768211455)\ny = value - x * scalar\nmemory[ap + -2] = x\nmemory[ap + -1] = y\n"
      ]
    ],
    [
      907,
      [
        "\n(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)\nx = min(value // scalar, 340282366920938463463374607431768211455)\ny = value - x * scalar\nmemory[ap + -1] = x\nmemory[ap + 0] = y\n"
      ]
    ],
    [
      1070,
      [
        "\nif '__dict_manager' not in globals():\n    from starkware.cairo.common.dict import DictManager\n    __dict_manager = DictManager()\n\nif '__segment_index_to_arena_index' not in globals():\n    # A map from the relocatable value segment index to the index in the\n    # arena.\n    __segment_index_to_arena_index = {}\n\n# memory[fp + -4] is the address of the next SegmentArenaBuiltin.\n# memory[memory[fp + -4] - 2] is the number of allocated segments.\nindex = memory[memory[fp + -4] - 2]\n\nsegment_start = __dict_manager.new_default_dict(\n    segments, 0, temp_segment=index > 0\n)\n\n# Update '__segment_index_to_arena_index'.\n__segment_index_to_arena_index[segment_start.segment_index] = index\n\n# Update 'SegmentInfo::start'.\n# memory[memory[fp + -4] - 3] is the address of the segment arena infos\n# segment. index * 3 is added to get the address of the new SegmentInfo.\nmemory[memory[memory[fp + -4] - 3] + index * 3] = segment_start\n"
      ]
    ],
    [
      1104,
      [
        "syscall_handler.syscall(syscall_ptr=memory[fp + -3])"
      ]
    ],
    [
      1154,
      [
        "syscall_handler.syscall(syscall_ptr=memory[fp + -4])"
      ]
    ],
    [
      1195,
      [
        "memory[ap + 0] = memory[fp + -3] < 340282366920938463463374607431768211456"
      ]
    ],
    [
      1197,
      [
        "(memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -3], 340282366920938463463374607431768211456)"
      ]
    ],
    [
      1234,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      1253,
      [
        "syscall_handler.syscall(syscall_ptr=memory[fp + -5])"
      ]
    ],
    [
      1294,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      1318,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      1337,
      [
        "syscall_handler.syscall(syscall_ptr=memory[fp + -5])"
      ]
    ],
    [
      1378,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      1413,
      [
        "\nmemory[fp + 0] = __segment_index_to_arena_index[\n    memory[fp + -3].segment_index\n]\n"
      ]
    ],
    [
      1454,
      [
        "memory[fp + 0] = segments.add()"
      ]
    ],
    [
      1474,
      [
        "\ndict_access_size = 3\naddress = memory[fp + -5]\nassert memory[fp + 0] % dict_access_size == 0, 'Accesses array size must be divisible by DictAccess.SIZE'\nn_accesses = memory[ap + -1]\nif '__squash_dict_max_size' in globals():\n    assert n_accesses <= __squash_dict_max_size, f'squash_dict() can only be used with n_accesses<={__squash_dict_max_size}. ' f'Got: n_accesses={n_accesses}.'\n# A map from key to the list of indices accessing it.\naccess_indices = {}\nfor i in range(n_accesses):\n    key = memory[address + dict_access_size * i]\n    access_indices.setdefault(key, []).append(i)\n# Descending list of keys.\nkeys = sorted(access_indices.keys(), reverse=True)\n# Are the keys used bigger than range_check bound.\nmemory[fp + 2] = 1 if keys[0] >= range_check_builtin.bound else 0\nmemory[fp + 1] = key = keys.pop()\n"
      ]
    ],
    [
      1496,
      [
        "\ncurrent_access_indices = sorted(access_indices[key])[::-1]\ncurrent_access_index = current_access_indices.pop()\nmemory[memory[fp + -9]] = current_access_index\n"
      ]
    ],
    [
      1509,
      [
        "memory[ap + -4] = 0 if current_access_indices else 1"
      ]
    ],
    [
      1511,
      [
        "\nnew_access_index = current_access_indices.pop()\nmemory[ap + 0] = new_access_index - current_access_index - 1\ncurrent_access_index = new_access_index\n"
      ]
    ],
    [
      1522,
      [
        "memory[ap + -4] = 1 if current_access_indices else 0"
      ]
    ],
    [
      1524,
      [
        "assert len(current_access_indices) == 0"
      ]
    ],
    [
      1527,
      [
        "assert memory[ap + -1] == len(access_indices[key])"
      ]
    ],
    [
      1531,
      [
        "assert len(keys) == 0"
      ]
    ],
    [
      1536,
      [
        "assert len(keys) > 0, 'No keys left but remaining_accesses > 0.'\nmemory[fp + 5] = key = keys.pop()\n"
      ]
    ],
    [
      1550,
      [
        "\nfrom starkware.cairo.common.math_utils import assert_integer\nassert_integer(memory[fp + -6])\nassert_integer(memory[fp + 5])\nassert (memory[fp + -6] % PRIME) < (memory[fp + 5] % PRIME), f'a = {memory[fp + -6] % PRIME} is not less than b = {memory[fp + 5] % PRIME}.'\n"
      ]
    ],
    [
      1558,
      [
        "\nimport itertools\n\nfrom starkware.cairo.common.math_utils import assert_integer\nassert_integer(memory[ap + -1])\nassert_integer(memory[fp + 5])\na = memory[ap + -1] % PRIME\nb = memory[fp + 5] % PRIME\nassert a <= b, f'a = {a} is not less than or equal to b = {b}.'\n\n# Find an arc less than PRIME / 3, and another less than PRIME / 2.\nlengths_and_indices = [(a, 0), (b - a, 1), (PRIME - 1 - b, 2)]\nlengths_and_indices.sort()\nassert lengths_and_indices[0][0] <= PRIME // 3 and lengths_and_indices[1][0] <= PRIME // 2\nexcluded = lengths_and_indices[2][1]\n\nmemory[memory[fp + -9] + 1], memory[memory[fp + -9] + 0] = (\n    divmod(lengths_and_indices[0][0], 3544607988759775765608368578435044694))\nmemory[memory[fp + -9] + 3], memory[memory[fp + -9] + 2] = (\n    divmod(lengths_and_indices[1][0], 5316911983139663648412552867652567041))\n"
      ]
    ],
    [
      1570,
      [
        "memory[ap + 0] = 1 if excluded != 0 else 0"
      ]
    ],
    [
      1582,
      [
        "memory[ap + 0] = 1 if excluded != 1 else 0"
      ]
    ],
    [
      1592,
      [
        "assert excluded == 2"
      ]
    ]
  ],
  "entry_points_by_type": {
    "EXTERNAL": [
      {
        "selector": "0x22ff5f21f0b81b113e63f7db6da94fedef11b2119b4088b89664fb9a3cb658",
        "offset": 0,
        "builtins": [
          "range_check"
        ]
      },
      {
        "selector": "0x10d2fede95e3ec06a875a67219425c27c5bd734d57f1b221d729a2337b6b556",
        "offset": 525,
        "builtins": [
          "range_check",
          "segment_arena"
        ]
      },
      {
        "selector": "0x24102d0bc2635dfdb19daf0fad1912bfce02dfe86e62d1185444f3e1dd5e37b",
        "offset": 374,
        "builtins": [
          "range_check"
        ]
      },
      {
        "selector": "0x3d778356014c91effae9863ee4a8c2663d8fa2e9f0c4145c1e01f5435ced0be",
        "offset": 200,
        "builtins": [
          "range_check"
        ]
      }
    ],
    "L1_HANDLER": [
      {
        "selector": "0x39edbbb129ad752107a94d40c3873cae369a46fd2fc578d075679aa67e85d12",
        "offset": 643,
        "builtins": [
          "range_check"
        ]
      }
    ],
    "CONSTRUCTOR": []
  }
}
