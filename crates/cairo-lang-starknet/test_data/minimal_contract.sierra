type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type felt252 = felt252;
type Array<felt252> = Array<felt252>;
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>>;
type core::array::Span::<core::felt252> = Struct<ut@[782572820229152792105145177694740816763001980856532159945905090893343825762], Snapshot<Array<felt252>>>;
type u32 = u32;
type core::panics::Panic = Struct<ut@[640126984585624630990013944782631102820301644699864366139839615702772668018]>;
type Tuple<core::panics::Panic, Array<felt252>> = Struct<ut@[1325343513152088812341467750635149026053683136611136091911357178651207272643], core::panics::Panic, Array<felt252>>;
type Tuple<core::array::Span::<core::felt252>> = Struct<ut@[1325343513152088812341467750635149026053683136611136091911357178651207272643], core::array::Span::<core::felt252>>;
type core::panics::PanicResult::<(core::array::Span::<core::felt252>,)> = Enum<ut@[270671131472959732993844072583327084608513343873724697777364695367457417702], Tuple<core::array::Span::<core::felt252>>, Tuple<core::panics::Panic, Array<felt252>>>;
type System = System;
type BuiltinCosts = BuiltinCosts;
type test::minimal_contract::ContractState = Struct<ut@[144707854378061475948697704853533750245088309591370491401716504567896014137]>;
type Unit = Struct<ut@[1325343513152088812341467750635149026053683136611136091911357178651207272643]>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc withdraw_gas = withdraw_gas;
libfunc branch_align = branch_align;
libfunc struct_deconstruct<core::array::Span::<core::felt252>> = struct_deconstruct<core::array::Span::<core::felt252>>;
libfunc array_len<felt252> = array_len<felt252>;
libfunc snapshot_take<u32> = snapshot_take<u32>;
libfunc drop<u32> = drop<u32>;
libfunc u32_const<0> = u32_const<0>;
libfunc rename<u32> = rename<u32>;
libfunc store_temp<u32> = store_temp<u32>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc u32_eq = u32_eq;
libfunc array_new<felt252> = array_new<felt252>;
libfunc felt252_const<7733229381460288120802334208475838166080759535023995805565484692595> = felt252_const<7733229381460288120802334208475838166080759535023995805565484692595>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc array_append<felt252> = array_append<felt252>;
libfunc struct_construct<core::panics::Panic> = struct_construct<core::panics::Panic>;
libfunc struct_construct<Tuple<core::panics::Panic, Array<felt252>>> = struct_construct<Tuple<core::panics::Panic, Array<felt252>>>;
libfunc enum_init<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>, 1> = enum_init<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>, 1>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<System> = store_temp<System>;
libfunc store_temp<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>> = store_temp<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>>;
libfunc get_builtin_costs = get_builtin_costs;
libfunc store_temp<BuiltinCosts> = store_temp<BuiltinCosts>;
libfunc withdraw_gas_all = withdraw_gas_all;
libfunc struct_construct<test::minimal_contract::ContractState> = struct_construct<test::minimal_contract::ContractState>;
libfunc store_temp<test::minimal_contract::ContractState> = store_temp<test::minimal_contract::ContractState>;
libfunc function_call<user@test::minimal_contract::empty> = function_call<user@test::minimal_contract::empty>;
libfunc drop<test::minimal_contract::ContractState> = drop<test::minimal_contract::ContractState>;
libfunc drop<Unit> = drop<Unit>;
libfunc snapshot_take<Array<felt252>> = snapshot_take<Array<felt252>>;
libfunc drop<Array<felt252>> = drop<Array<felt252>>;
libfunc struct_construct<core::array::Span::<core::felt252>> = struct_construct<core::array::Span::<core::felt252>>;
libfunc struct_construct<Tuple<core::array::Span::<core::felt252>>> = struct_construct<Tuple<core::array::Span::<core::felt252>>>;
libfunc enum_init<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>, 0> = enum_init<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>, 0>;
libfunc felt252_const<375233589013918064796019> = felt252_const<375233589013918064796019>;
libfunc drop<core::array::Span::<core::felt252>> = drop<core::array::Span::<core::felt252>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;

revoke_ap_tracking() -> ();
withdraw_gas([0], [1]) { fallthrough([4], [5]) 62([6], [7]) };
branch_align() -> ();
struct_deconstruct<core::array::Span::<core::felt252>>([3]) -> ([8]);
array_len<felt252>([8]) -> ([9]);
snapshot_take<u32>([9]) -> ([10], [11]);
drop<u32>([10]) -> ();
u32_const<0>() -> ([12]);
snapshot_take<u32>([12]) -> ([13], [14]);
drop<u32>([13]) -> ();
rename<u32>([11]) -> ([15]);
rename<u32>([14]) -> ([16]);
store_temp<u32>([15]) -> ([15]);
store_temp<RangeCheck>([4]) -> ([4]);
u32_eq([15], [16]) { fallthrough() 28() };
branch_align() -> ();
array_new<felt252>() -> ([17]);
felt252_const<7733229381460288120802334208475838166080759535023995805565484692595>() -> ([18]);
store_temp<felt252>([18]) -> ([18]);
array_append<felt252>([17], [18]) -> ([19]);
struct_construct<core::panics::Panic>() -> ([20]);
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([20], [19]) -> ([21]);
enum_init<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>, 1>([21]) -> ([22]);
store_temp<RangeCheck>([4]) -> ([23]);
store_temp<GasBuiltin>([5]) -> ([24]);
store_temp<System>([2]) -> ([25]);
store_temp<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>>([22]) -> ([26]);
return([23], [24], [25], [26]);
branch_align() -> ();
get_builtin_costs() -> ([27]);
store_temp<BuiltinCosts>([27]) -> ([27]);
withdraw_gas_all([4], [5], [27]) { fallthrough([28], [29]) 49([30], [31]) };
branch_align() -> ();
struct_construct<test::minimal_contract::ContractState>() -> ([32]);
store_temp<test::minimal_contract::ContractState>([32]) -> ([35]);
function_call<user@test::minimal_contract::empty>([35]) -> ([33], [34]);
drop<test::minimal_contract::ContractState>([33]) -> ();
drop<Unit>([34]) -> ();
array_new<felt252>() -> ([36]);
snapshot_take<Array<felt252>>([36]) -> ([37], [38]);
drop<Array<felt252>>([37]) -> ();
struct_construct<core::array::Span::<core::felt252>>([38]) -> ([39]);
struct_construct<Tuple<core::array::Span::<core::felt252>>>([39]) -> ([40]);
enum_init<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>, 0>([40]) -> ([41]);
store_temp<RangeCheck>([28]) -> ([42]);
store_temp<GasBuiltin>([29]) -> ([43]);
store_temp<System>([2]) -> ([44]);
store_temp<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>>([41]) -> ([45]);
return([42], [43], [44], [45]);
branch_align() -> ();
array_new<felt252>() -> ([46]);
felt252_const<375233589013918064796019>() -> ([47]);
store_temp<felt252>([47]) -> ([47]);
array_append<felt252>([46], [47]) -> ([48]);
struct_construct<core::panics::Panic>() -> ([49]);
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([49], [48]) -> ([50]);
enum_init<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>, 1>([50]) -> ([51]);
store_temp<RangeCheck>([30]) -> ([52]);
store_temp<GasBuiltin>([31]) -> ([53]);
store_temp<System>([2]) -> ([54]);
store_temp<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>>([51]) -> ([55]);
return([52], [53], [54], [55]);
branch_align() -> ();
drop<core::array::Span::<core::felt252>>([3]) -> ();
array_new<felt252>() -> ([56]);
felt252_const<375233589013918064796019>() -> ([57]);
store_temp<felt252>([57]) -> ([57]);
array_append<felt252>([56], [57]) -> ([58]);
struct_construct<core::panics::Panic>() -> ([59]);
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([59], [58]) -> ([60]);
enum_init<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>, 1>([60]) -> ([61]);
store_temp<RangeCheck>([6]) -> ([62]);
store_temp<GasBuiltin>([7]) -> ([63]);
store_temp<System>([2]) -> ([64]);
store_temp<core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>>([61]) -> ([65]);
return([62], [63], [64], [65]);
struct_construct<Unit>() -> ([1]);
store_temp<test::minimal_contract::ContractState>([0]) -> ([2]);
store_temp<Unit>([1]) -> ([3]);
return([2], [3]);

test::minimal_contract::__external::empty@0([0]: RangeCheck, [1]: GasBuiltin, [2]: System, [3]: core::array::Span::<core::felt252>) -> (RangeCheck, GasBuiltin, System, core::panics::PanicResult::<(core::array::Span::<core::felt252>,)>);
test::minimal_contract::empty@76([0]: test::minimal_contract::ContractState) -> (test::minimal_contract::ContractState, Unit);
