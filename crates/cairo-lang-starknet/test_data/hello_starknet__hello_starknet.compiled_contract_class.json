{
  "prime": "0x800000000000011000000000000000000000000000000000000000000000001",
  "compiler_version": "2.6.0",
  "bytecode": [
    "0xa0680017fff8000",
    "0x7",
    "0x482680017ffa8000",
    "0x100000000000000000000000000000000",
    "0x400280007ff97fff",
    "0x10780017fff7fff",
    "0x98",
    "0x4825800180007ffa",
    "0x0",
    "0x400280007ff97fff",
    "0x482680017ff98000",
    "0x1",
    "0x48297ffc80007ffd",
    "0x20680017fff7fff",
    "0x4",
    "0x10780017fff7fff",
    "0xa",
    "0x482680017ffc8000",
    "0x1",
    "0x480a7ffd7fff8000",
    "0x480680017fff8000",
    "0x0",
    "0x480a7ffc7fff8000",
    "0x10780017fff7fff",
    "0x8",
    "0x480a7ffc7fff8000",
    "0x480a7ffd7fff8000",
    "0x480680017fff8000",
    "0x1",
    "0x480680017fff8000",
    "0x0",
    "0x20680017fff7ffe",
    "0x6d",
    "0x480080007fff8000",
    "0xa0680017fff8000",
    "0x12",
    "0x4824800180007ffe",
    "0x100000000",
    "0x4844800180008002",
    "0x8000000000000110000000000000000",
    "0x4830800080017ffe",
    "0x480080007ff57fff",
    "0x482480017ffe8000",
    "0xefffffffffffffde00000000ffffffff",
    "0x480080017ff37fff",
    "0x400080027ff27ffb",
    "0x402480017fff7ffb",
    "0xffffffffffffffffffffffffffffffff",
    "0x20680017fff7fff",
    "0x58",
    "0x402780017fff7fff",
    "0x1",
    "0x400080007ff87ffe",
    "0x482480017ffe8000",
    "0xffffffffffffffffffffffff00000000",
    "0x400080017ff77fff",
    "0x482480017ff78000",
    "0x2",
    "0x48307ff880007ff9",
    "0x20680017fff7fff",
    "0x4",
    "0x10780017fff7fff",
    "0x10",
    "0x40780017fff7fff",
    "0x1",
    "0x480680017fff8000",
    "0x496e70757420746f6f206c6f6e6720666f7220617267756d656e7473",
    "0x400080007ffe7fff",
    "0x48127ffc7fff8000",
    "0x48127ff17fff8000",
    "0x480a7ffb7fff8000",
    "0x480680017fff8000",
    "0x1",
    "0x48127ffa7fff8000",
    "0x482480017ff98000",
    "0x1",
    "0x208b7fff7fff7ffe",
    "0x1104800180018000",
<<<<<<< HEAD
    "0x17f",
||||||| a1f2f2396
    "0x1f4",
=======
    "0x168",
>>>>>>> origin/main
    "0x482480017fff8000",
<<<<<<< HEAD
    "0x17e",
||||||| a1f2f2396
    "0x1f3",
=======
    "0x167",
>>>>>>> origin/main
    "0x480080007fff8000",
    "0xa0680017fff8000",
    "0x9",
<<<<<<< HEAD
    "0x4824800180007fef",
    "0x47d6",
||||||| a1f2f2396
    "0x4824800180007fe5",
    "0x6de2",
=======
    "0x4824800180007fef",
    "0x5050",
>>>>>>> origin/main
    "0x482480017fff8000",
    "0x100000000000000000000000000000000",
    "0x400080007ff77fff",
    "0x10780017fff7fff",
    "0x20",
<<<<<<< HEAD
    "0x4824800180007fef",
    "0x47d6",
    "0x400080007ff87fff",
    "0x482480017ff88000",
||||||| a1f2f2396
    "0x4824800180007fe5",
    "0x6de2",
    "0x400080007ff67fff",
    "0x482480017ff68000",
=======
    "0x4824800180007fef",
    "0x5050",
    "0x400080007ff87fff",
    "0x482480017ff88000",
>>>>>>> origin/main
    "0x1",
    "0x48127ffe7fff8000",
    "0x480a7ffb7fff8000",
    "0x48127ff27fff8000",
    "0x1104800180018000",
<<<<<<< HEAD
    "0xe5",
||||||| a1f2f2396
    "0xd7",
=======
    "0xb3",
>>>>>>> origin/main
    "0x20680017fff7ffd",
    "0xc",
    "0x40780017fff7fff",
    "0x1",
    "0x48127ff97fff8000",
    "0x48127ff97fff8000",
    "0x48127ff97fff8000",
    "0x480680017fff8000",
    "0x0",
    "0x48127ffb7fff8000",
    "0x48127ffa7fff8000",
    "0x208b7fff7fff7ffe",
    "0x48127ffa7fff8000",
    "0x48127ffa7fff8000",
    "0x48127ffa7fff8000",
    "0x480680017fff8000",
    "0x1",
    "0x48127ffa7fff8000",
    "0x48127ffa7fff8000",
    "0x208b7fff7fff7ffe",
    "0x40780017fff7fff",
    "0x1",
    "0x480680017fff8000",
    "0x4f7574206f6620676173",
    "0x400080007ffe7fff",
    "0x482480017ff58000",
    "0x1",
    "0x48127fea7fff8000",
    "0x480a7ffb7fff8000",
    "0x480680017fff8000",
    "0x1",
    "0x48127ffa7fff8000",
    "0x482480017ff98000",
    "0x1",
    "0x208b7fff7fff7ffe",
    "0x482480017ff28000",
    "0x3",
    "0x10780017fff7fff",
    "0x5",
    "0x40780017fff7fff",
    "0x8",
    "0x48127ff27fff8000",
    "0x40780017fff7fff",
    "0x1",
    "0x480680017fff8000",
    "0x4661696c656420746f20646573657269616c697a6520706172616d202331",
    "0x400080007ffe7fff",
    "0x48127ffd7fff8000",
    "0x48127fed7fff8000",
    "0x480a7ffb7fff8000",
    "0x480680017fff8000",
    "0x1",
    "0x48127ffa7fff8000",
    "0x482480017ff98000",
    "0x1",
    "0x208b7fff7fff7ffe",
    "0x40780017fff7fff",
    "0x1",
    "0x480680017fff8000",
    "0x4f7574206f6620676173",
    "0x400080007ffe7fff",
    "0x482680017ff98000",
    "0x1",
    "0x480a7ffa7fff8000",
    "0x480a7ffb7fff8000",
    "0x480680017fff8000",
    "0x1",
    "0x48127ffa7fff8000",
    "0x482480017ff98000",
    "0x1",
    "0x208b7fff7fff7ffe",
    "0xa0680017fff8000",
    "0x7",
    "0x482680017ffa8000",
    "0x100000000000000000000000000000000",
    "0x400280007ff97fff",
    "0x10780017fff7fff",
    "0x88",
    "0x4825800180007ffa",
    "0x0",
    "0x400280007ff97fff",
    "0x482680017ff98000",
    "0x1",
    "0x48297ffc80007ffd",
    "0x20680017fff7fff",
    "0x4",
    "0x10780017fff7fff",
    "0x10",
    "0x40780017fff7fff",
    "0x1",
    "0x480680017fff8000",
    "0x496e70757420746f6f206c6f6e6720666f7220617267756d656e7473",
    "0x400080007ffe7fff",
    "0x48127ffc7fff8000",
    "0x48127ffa7fff8000",
    "0x480a7ffb7fff8000",
    "0x480680017fff8000",
    "0x1",
    "0x48127ffa7fff8000",
    "0x482480017ff98000",
    "0x1",
    "0x208b7fff7fff7ffe",
    "0x1104800180018000",
<<<<<<< HEAD
    "0x101",
||||||| a1f2f2396
    "0x177",
=======
    "0xea",
>>>>>>> origin/main
    "0x482480017fff8000",
<<<<<<< HEAD
    "0x100",
||||||| a1f2f2396
    "0x176",
=======
    "0xe9",
>>>>>>> origin/main
    "0x480080007fff8000",
    "0xa0680017fff8000",
    "0x9",
    "0x4824800180007ff8",
<<<<<<< HEAD
    "0x1356",
||||||| a1f2f2396
    "0x2102",
=======
    "0x186a",
>>>>>>> origin/main
    "0x482480017fff8000",
    "0x100000000000000000000000000000000",
    "0x400080007ff77fff",
    "0x10780017fff7fff",
    "0x53",
    "0x4824800180007ff8",
<<<<<<< HEAD
    "0x1356",
||||||| a1f2f2396
    "0x2102",
=======
    "0x186a",
>>>>>>> origin/main
    "0x400080007ff87fff",
    "0x480680017fff8000",
    "0x0",
    "0x480680017fff8000",
    "0x206f38f7e4f15e87567361213c28f235cccdaa1d7fd34c9db1dfe9489c6a091",
    "0x482480017ff68000",
    "0x1",
<<<<<<< HEAD
    "0x480680017fff8000",
    "0x53746f7261676552656164",
    "0x400280007ffb7fff",
    "0x400280017ffb7ffb",
    "0x400280027ffb7ffc",
    "0x400280037ffb7ffd",
    "0x480280057ffb8000",
    "0x20680017fff7fff",
    "0x38",
    "0x480280067ffb8000",
    "0x480280047ffb8000",
    "0x482680017ffb8000",
    "0x7",
    "0xa0680017fff8000",
    "0x12",
    "0x4824800180007ffc",
    "0x100000000",
    "0x4844800180008002",
    "0x8000000000000110000000000000000",
    "0x4830800080017ffe",
    "0x480080007ff67fff",
    "0x482480017ffe8000",
    "0xefffffffffffffde00000000ffffffff",
    "0x480080017ff47fff",
    "0x400080027ff37ffb",
    "0x402480017fff7ffb",
    "0xffffffffffffffffffffffffffffffff",
    "0x20680017fff7fff",
    "0x15",
    "0x402780017fff7fff",
    "0x1",
    "0x400080007ff97ffc",
    "0x482480017ffc8000",
    "0xffffffffffffffffffffffff00000000",
    "0x400080017ff87fff",
||||||| a1f2f2396
    "0x48127ffe7fff8000",
    "0x480a7ffb7fff8000",
    "0x1104800180018000",
    "0x96",
    "0x20680017fff7ffd",
    "0xe",
=======
    "0x48127ffe7fff8000",
    "0x480a7ffb7fff8000",
    "0x1104800180018000",
    "0x88",
    "0x20680017fff7ffd",
    "0xe",
>>>>>>> origin/main
    "0x40780017fff7fff",
    "0x1",
    "0x400080007fff7ffa",
    "0x482480017ff78000",
    "0x2",
    "0x48127ffa7fff8000",
    "0x48127ffa7fff8000",
    "0x480680017fff8000",
    "0x0",
    "0x48127ffb7fff8000",
    "0x482480017ffa8000",
    "0x1",
    "0x208b7fff7fff7ffe",
    "0x40780017fff7fff",
    "0x1",
    "0x480680017fff8000",
    "0x53746f7265553332202d206e6f6e20753332",
    "0x400080007ffe7fff",
    "0x482480017ff18000",
    "0x3",
    "0x48127ff47fff8000",
    "0x48127ff47fff8000",
    "0x480680017fff8000",
    "0x1",
    "0x48127ffa7fff8000",
    "0x482480017ff98000",
    "0x1",
    "0x208b7fff7fff7ffe",
    "0x48127ffd7fff8000",
    "0x480280047ffb8000",
    "0x482680017ffb8000",
    "0x8",
    "0x480680017fff8000",
    "0x1",
    "0x480280067ffb8000",
    "0x480280077ffb8000",
    "0x208b7fff7fff7ffe",
    "0x40780017fff7fff",
    "0x1",
    "0x480680017fff8000",
    "0x4f7574206f6620676173",
    "0x400080007ffe7fff",
    "0x482480017ff58000",
    "0x1",
    "0x48127ff37fff8000",
    "0x480a7ffb7fff8000",
    "0x480680017fff8000",
    "0x1",
    "0x48127ffa7fff8000",
    "0x482480017ff98000",
    "0x1",
    "0x208b7fff7fff7ffe",
    "0x40780017fff7fff",
    "0x1",
    "0x480680017fff8000",
    "0x4f7574206f6620676173",
    "0x400080007ffe7fff",
    "0x482680017ff98000",
    "0x1",
    "0x480a7ffa7fff8000",
    "0x480a7ffb7fff8000",
    "0x480680017fff8000",
    "0x1",
    "0x48127ffa7fff8000",
    "0x482480017ff98000",
    "0x1",
    "0x208b7fff7fff7ffe",
<<<<<<< HEAD
    "0x480680017fff8000",
    "0x0",
    "0x480680017fff8000",
    "0x206f38f7e4f15e87567361213c28f235cccdaa1d7fd34c9db1dfe9489c6a091",
    "0x480680017fff8000",
    "0x53746f7261676552656164",
    "0x400280007ffc7fff",
    "0x400380017ffc7ffb",
    "0x400280027ffc7ffd",
    "0x400280037ffc7ffe",
    "0x480280057ffc8000",
    "0x20680017fff7fff",
    "0x6e",
    "0x480280067ffc8000",
    "0x480280047ffc8000",
    "0x482680017ffc8000",
    "0x7",
||||||| a1f2f2396
=======
    "0x480a7ffa7fff8000",
    "0x480a7ffb7fff8000",
    "0x480a7ffc7fff8000",
    "0x1104800180018000",
    "0x4f",
    "0x20680017fff7ffd",
    "0x43",
>>>>>>> origin/main
    "0xa0680017fff8000",
<<<<<<< HEAD
    "0x12",
    "0x4824800180007ffc",
||||||| a1f2f2396
    "0x12",
    "0x4825800180007ffd",
=======
    "0x8",
    "0x48287ffd7ffe8000",
    "0x4824800180007fff",
>>>>>>> origin/main
    "0x100000000",
<<<<<<< HEAD
    "0x4844800180008002",
    "0x8000000000000110000000000000000",
    "0x4830800080017ffe",
    "0x480280007ffa7fff",
    "0x482480017ffe8000",
    "0xefffffffffffffde00000000ffffffff",
    "0x480280017ffa7fff",
    "0x400280027ffa7ffb",
    "0x402480017fff7ffb",
    "0xffffffffffffffffffffffffffffffff",
    "0x20680017fff7fff",
    "0x49",
    "0x402780017fff7fff",
    "0x1",
    "0x400280007ffa7ffc",
    "0x482480017ffc8000",
||||||| a1f2f2396
    "0x4844800180008002",
    "0x8000000000000110000000000000000",
    "0x4830800080017ffe",
    "0x480280007ffc7fff",
    "0x482480017ffe8000",
    "0xefffffffffffffde00000000ffffffff",
    "0x480280017ffc7fff",
    "0x400280027ffc7ffb",
    "0x402480017fff7ffb",
    "0xffffffffffffffffffffffffffffffff",
    "0x20680017fff7fff",
    "0x10",
    "0x402780017fff7fff",
    "0x1",
    "0x400380007ffc7ffd",
    "0x482680017ffd8000",
=======
    "0x400080007ff77fff",
    "0x10780017fff7fff",
    "0x2a",
    "0x48287ffd7ffe8001",
    "0x4824800180007fff",
>>>>>>> origin/main
    "0xffffffffffffffffffffffff00000000",
<<<<<<< HEAD
    "0x400280017ffa7fff",
    "0xa0680017fff8000",
    "0x8",
    "0x48287ffd7ffa8000",
    "0x4824800180007fff",
    "0x100000000",
    "0x400280027ffa7fff",
    "0x10780017fff7fff",
    "0x2a",
    "0x48287ffd7ffa8001",
    "0x4824800180007fff",
    "0xffffffffffffffffffffffff00000000",
    "0x400280027ffa7ffe",
    "0x480680017fff8000",
    "0x0",
    "0x480680017fff8000",
    "0x206f38f7e4f15e87567361213c28f235cccdaa1d7fd34c9db1dfe9489c6a091",
    "0x482680017ffa8000",
    "0x3",
    "0x480680017fff8000",
    "0x53746f726167655772697465",
    "0x400080007ff67fff",
    "0x400080017ff67ff5",
    "0x400080027ff67ffc",
    "0x400080037ff67ffd",
    "0x400080047ff67ffb",
    "0x480080067ff68000",
    "0x20680017fff7fff",
    "0xd",
    "0x48127ffd7fff8000",
    "0x480080057ff48000",
    "0x482480017ff38000",
    "0x7",
    "0x480680017fff8000",
    "0x0",
    "0x480680017fff8000",
    "0x0",
    "0x480680017fff8000",
    "0x0",
    "0x208b7fff7fff7ffe",
    "0x48127ffd7fff8000",
    "0x480080057ff48000",
    "0x482480017ff38000",
    "0x9",
    "0x480680017fff8000",
    "0x1",
    "0x480080077ff18000",
    "0x480080087ff08000",
    "0x208b7fff7fff7ffe",
    "0x40780017fff7fff",
    "0x3",
    "0x40780017fff7fff",
    "0x1",
    "0x480680017fff8000",
    "0x7533325f616464204f766572666c6f77",
    "0x400080007ffe7fff",
    "0x482680017ffa8000",
    "0x3",
    "0x48127ff37fff8000",
    "0x48127ff37fff8000",
    "0x480680017fff8000",
    "0x1",
    "0x48127ffa7fff8000",
    "0x482480017ff98000",
    "0x1",
    "0x208b7fff7fff7ffe",
    "0x40780017fff7fff",
    "0x1",
    "0x40780017fff7fff",
    "0x1",
    "0x480680017fff8000",
    "0x53746f7265553332202d206e6f6e20753332",
    "0x400080007ffe7fff",
    "0x482680017ffa8000",
    "0x3",
    "0x48127ff37fff8000",
    "0x48127ff37fff8000",
    "0x480680017fff8000",
    "0x1",
    "0x48127ffa7fff8000",
    "0x482480017ff98000",
    "0x1",
    "0x208b7fff7fff7ffe",
    "0x40780017fff7fff",
    "0xd",
    "0x480a7ffa7fff8000",
    "0x480280047ffc8000",
    "0x482680017ffc8000",
    "0x8",
    "0x480680017fff8000",
    "0x1",
    "0x480280067ffc8000",
    "0x480280077ffc8000",
||||||| a1f2f2396
    "0x400280017ffc7fff",
    "0x40780017fff7fff",
    "0x5",
    "0x482680017ffc8000",
    "0x2",
    "0x480680017fff8000",
    "0x0",
    "0x480a7ffd7fff8000",
    "0x208b7fff7fff7ffe",
    "0x482680017ffc8000",
    "0x3",
    "0x480680017fff8000",
    "0x1",
    "0x480680017fff8000",
    "0x0",
    "0x208b7fff7fff7ffe",
    "0x480a7ffa7fff8000",
    "0x480a7ffb7fff8000",
    "0x480a7ffc7fff8000",
    "0x1104800180018000",
    "0x3e",
    "0x20680017fff7ffd",
    "0x2c",
    "0x48127ffa7fff8000",
    "0x48127ffe7fff8000",
    "0x480a7ffd7fff8000",
    "0x1104800180018000",
    "0x7a",
    "0x20680017fff7ffd",
    "0x1b",
    "0x48127fe57fff8000",
    "0x48127fe57fff8000",
    "0x48127ffd7fff8000",
    "0x1104800180018000",
    "0x94",
    "0x20680017fff7ffd",
    "0xc",
    "0x48127fe47fff8000",
    "0x48127ffa7fff8000",
    "0x48127ffa7fff8000",
    "0x480680017fff8000",
    "0x0",
    "0x480680017fff8000",
    "0x0",
    "0x480680017fff8000",
    "0x0",
    "0x208b7fff7fff7ffe",
    "0x48127fe47fff8000",
    "0x48127ffa7fff8000",
    "0x48127ffa7fff8000",
    "0x480680017fff8000",
    "0x1",
    "0x48127ffa7fff8000",
    "0x48127ffa7fff8000",
    "0x208b7fff7fff7ffe",
    "0x40780017fff7fff",
    "0x18",
    "0x48127fe47fff8000",
    "0x48127fcc7fff8000",
    "0x48127fcc7fff8000",
    "0x480680017fff8000",
    "0x1",
    "0x48127fe27fff8000",
    "0x48127fe27fff8000",
    "0x208b7fff7fff7ffe",
    "0x40780017fff7fff",
    "0x2e",
    "0x48127fcc7fff8000",
    "0x48127fcc7fff8000",
    "0x48127fcc7fff8000",
    "0x480680017fff8000",
    "0x1",
    "0x48127fcc7fff8000",
    "0x48127fcc7fff8000",
    "0x208b7fff7fff7ffe",
    "0x480a7ffb7fff8000",
    "0x480a7ffc7fff8000",
    "0x480a7ffd7fff8000",
    "0x1104800180018000",
    "0x3",
    "0x208b7fff7fff7ffe",
    "0x480680017fff8000",
    "0x0",
    "0x480680017fff8000",
    "0x206f38f7e4f15e87567361213c28f235cccdaa1d7fd34c9db1dfe9489c6a091",
    "0x480680017fff8000",
    "0x53746f7261676552656164",
    "0x400280007ffd7fff",
    "0x400380017ffd7ffc",
    "0x400280027ffd7ffd",
    "0x400280037ffd7ffe",
    "0x480280057ffd8000",
    "0x20680017fff7fff",
    "0x25",
    "0x480a7ffb7fff8000",
    "0x480280067ffd8000",
    "0x1104800180018000",
    "0x800000000000010ffffffffffffffffffffffffffffffffffffffffffffff8c",
    "0x480280047ffd8000",
    "0x482680017ffd8000",
    "0x7",
    "0x20680017fff7ffc",
    "0xc",
    "0x48127ffb7fff8000",
    "0x48127ffd7fff8000",
    "0x48127ffd7fff8000",
    "0x480680017fff8000",
    "0x0",
    "0x480680017fff8000",
    "0x0",
    "0x48127ff87fff8000",
    "0x10780017fff7fff",
    "0x1c",
    "0x40780017fff7fff",
    "0x9",
    "0x40780017fff7fff",
    "0x1",
    "0x480680017fff8000",
    "0x53746f7265553332202d206e6f6e20753332",
    "0x400080007ffe7fff",
    "0x48127ff07fff8000",
    "0x48127ff27fff8000",
    "0x48127ff27fff8000",
    "0x480680017fff8000",
    "0x1",
    "0x48127ffa7fff8000",
    "0x482480017ff98000",
    "0x1",
    "0x208b7fff7fff7ffe",
    "0x40780017fff7fff",
    "0x10",
    "0x480a7ffb7fff8000",
    "0x480280047ffd8000",
    "0x482680017ffd8000",
    "0x8",
    "0x480680017fff8000",
    "0x1",
    "0x480280067ffd8000",
    "0x480280077ffd8000",
    "0x1104800180018000",
    "0x5e",
    "0x48127ff57fff8000",
    "0x48127ff57fff8000",
    "0x48127ff57fff8000",
    "0x48127ffa7fff8000",
    "0x48127ffa7fff8000",
    "0x48127ffa7fff8000",
    "0x208b7fff7fff7ffe",
    "0xa0680017fff8000",
    "0x8",
    "0x482a7ffd7ffc8000",
    "0x4824800180007fff",
    "0x100000000",
    "0x400280007ffb7fff",
    "0x10780017fff7fff",
    "0xd",
    "0x482a7ffd7ffc8001",
    "0x4824800180007fff",
    "0xffffffffffffffffffffffff00000000",
    "0x400280007ffb7ffe",
    "0x482680017ffb8000",
    "0x1",
    "0x480680017fff8000",
    "0x0",
    "0x48127ffd7fff8000",
    "0x10780017fff7fff",
    "0x7",
    "0x482680017ffb8000",
    "0x1",
    "0x480680017fff8000",
    "0x1",
    "0x48127ffd7fff8000",
    "0x480680017fff8000",
    "0x7533325f616464204f766572666c6f77",
    "0x1104800180018000",
    "0x48",
    "0x48127ff67fff8000",
    "0x48127ffc7fff8000",
    "0x48127ffc7fff8000",
    "0x48127ffc7fff8000",
    "0x208b7fff7fff7ffe",
    "0x480680017fff8000",
    "0x0",
    "0x480680017fff8000",
    "0x206f38f7e4f15e87567361213c28f235cccdaa1d7fd34c9db1dfe9489c6a091",
    "0x480680017fff8000",
    "0x53746f726167655772697465",
    "0x400280007ffc7fff",
    "0x400380017ffc7ffb",
    "0x400280027ffc7ffd",
    "0x400280037ffc7ffe",
    "0x400380047ffc7ffd",
    "0x480280067ffc8000",
    "0x20680017fff7fff",
    "0xd",
    "0x480280057ffc8000",
    "0x482680017ffc8000",
    "0x7",
    "0x480680017fff8000",
    "0x0",
    "0x480680017fff8000",
    "0x0",
    "0x480680017fff8000",
    "0x0",
    "0x10780017fff7fff",
    "0x9",
    "0x480280057ffc8000",
    "0x482680017ffc8000",
    "0x9",
    "0x480680017fff8000",
    "0x1",
    "0x480280077ffc8000",
    "0x480280087ffc8000",
    "0x1104800180018000",
    "0x34",
    "0x20680017fff7ffd",
    "0xb",
    "0x48127ff67fff8000",
    "0x48127ff67fff8000",
    "0x480680017fff8000",
    "0x0",
    "0x480680017fff8000",
    "0x0",
    "0x480680017fff8000",
    "0x0",
    "0x208b7fff7fff7ffe",
    "0x48127ff67fff8000",
    "0x48127ff67fff8000",
    "0x480680017fff8000",
    "0x1",
    "0x48127ffb7fff8000",
    "0x48127ffb7fff8000",
    "0x208b7fff7fff7ffe",
    "0x20780017fff7ffb",
    "0x8",
    "0x480680017fff8000",
    "0x0",
    "0x480680017fff8000",
    "0x0",
    "0x480a7ffd7fff8000",
    "0x208b7fff7fff7ffe",
    "0x480680017fff8000",
    "0x1",
    "0x480a7ffc7fff8000",
    "0x480a7ffd7fff8000",
    "0x208b7fff7fff7ffe",
    "0x20780017fff7ffb",
    "0xa",
    "0x40780017fff7fff",
    "0x1",
    "0x480680017fff8000",
    "0x0",
    "0x480680017fff8000",
    "0x0",
    "0x480a7ffc7fff8000",
    "0x208b7fff7fff7ffe",
    "0x40780017fff7fff",
    "0x1",
    "0x400180007fff7ffd",
    "0x480680017fff8000",
    "0x1",
    "0x48127ffe7fff8000",
    "0x482480017ffd8000",
    "0x1",
    "0x208b7fff7fff7ffe",
    "0x20780017fff7ffb",
    "0x9",
    "0x480680017fff8000",
    "0x0",
    "0x480680017fff8000",
    "0x0",
    "0x480680017fff8000",
    "0x0",
    "0x208b7fff7fff7ffe",
    "0x480680017fff8000",
    "0x1",
    "0x480a7ffc7fff8000",
    "0x480a7ffd7fff8000",
=======
    "0x400080007ff77ffe",
    "0x480680017fff8000",
    "0x0",
    "0x480680017fff8000",
    "0x206f38f7e4f15e87567361213c28f235cccdaa1d7fd34c9db1dfe9489c6a091",
    "0x482480017ff58000",
    "0x1",
    "0x480680017fff8000",
    "0x53746f726167655772697465",
    "0x400080007ff57fff",
    "0x400080017ff57ff4",
    "0x400080027ff57ffc",
    "0x400080037ff57ffd",
    "0x400080047ff57ffb",
    "0x480080067ff58000",
    "0x20680017fff7fff",
    "0xd",
    "0x48127ffd7fff8000",
    "0x480080057ff38000",
    "0x482480017ff28000",
    "0x7",
    "0x480680017fff8000",
    "0x0",
    "0x480680017fff8000",
    "0x0",
    "0x480680017fff8000",
    "0x0",
    "0x208b7fff7fff7ffe",
    "0x48127ffd7fff8000",
    "0x480080057ff38000",
    "0x482480017ff28000",
    "0x9",
    "0x480680017fff8000",
    "0x1",
    "0x480080077ff08000",
    "0x480080087fef8000",
    "0x208b7fff7fff7ffe",
    "0x40780017fff7fff",
    "0x3",
    "0x40780017fff7fff",
    "0x1",
    "0x480680017fff8000",
    "0x7533325f616464204f766572666c6f77",
    "0x400080007ffe7fff",
    "0x482480017ff28000",
    "0x1",
    "0x48127ff27fff8000",
    "0x48127ff27fff8000",
    "0x480680017fff8000",
    "0x1",
    "0x48127ffa7fff8000",
    "0x482480017ff98000",
    "0x1",
    "0x208b7fff7fff7ffe",
    "0x40780017fff7fff",
    "0x8",
    "0x48127ff27fff8000",
    "0x48127ff27fff8000",
    "0x48127ff27fff8000",
    "0x480680017fff8000",
    "0x1",
    "0x48127ff27fff8000",
    "0x48127ff27fff8000",
    "0x208b7fff7fff7ffe",
    "0x480680017fff8000",
    "0x0",
    "0x480680017fff8000",
    "0x206f38f7e4f15e87567361213c28f235cccdaa1d7fd34c9db1dfe9489c6a091",
    "0x480680017fff8000",
    "0x53746f7261676552656164",
    "0x400280007ffd7fff",
    "0x400380017ffd7ffc",
    "0x400280027ffd7ffd",
    "0x400280037ffd7ffe",
    "0x480280057ffd8000",
    "0x20680017fff7fff",
    "0x37",
    "0x480280067ffd8000",
    "0x480280047ffd8000",
    "0x482680017ffd8000",
    "0x7",
    "0xa0680017fff8000",
    "0x12",
    "0x4824800180007ffc",
    "0x100000000",
    "0x4844800180008002",
    "0x8000000000000110000000000000000",
    "0x4830800080017ffe",
    "0x480280007ffb7fff",
    "0x482480017ffe8000",
    "0xefffffffffffffde00000000ffffffff",
    "0x480280017ffb7fff",
    "0x400280027ffb7ffb",
    "0x402480017fff7ffb",
    "0xffffffffffffffffffffffffffffffff",
    "0x20680017fff7fff",
    "0x14",
    "0x402780017fff7fff",
    "0x1",
    "0x400280007ffb7ffc",
    "0x482480017ffc8000",
    "0xffffffffffffffffffffffff00000000",
    "0x400280017ffb7fff",
    "0x40780017fff7fff",
    "0x7",
    "0x482680017ffb8000",
    "0x2",
    "0x48127ff47fff8000",
    "0x48127ff47fff8000",
    "0x480680017fff8000",
    "0x0",
    "0x480680017fff8000",
    "0x0",
    "0x48127fef7fff8000",
    "0x208b7fff7fff7ffe",
    "0x40780017fff7fff",
    "0x1",
    "0x480680017fff8000",
    "0x53746f7265553332202d206e6f6e20753332",
    "0x400080007ffe7fff",
    "0x482680017ffb8000",
    "0x3",
    "0x48127ff47fff8000",
    "0x48127ff47fff8000",
    "0x480680017fff8000",
    "0x1",
    "0x48127ffa7fff8000",
    "0x482480017ff98000",
    "0x1",
    "0x208b7fff7fff7ffe",
    "0x40780017fff7fff",
    "0xc",
    "0x480a7ffb7fff8000",
    "0x480280047ffd8000",
    "0x482680017ffd8000",
    "0x8",
    "0x480680017fff8000",
    "0x1",
    "0x480280067ffd8000",
    "0x480280077ffd8000",
>>>>>>> origin/main
    "0x208b7fff7fff7ffe"
  ],
  "bytecode_segment_lengths": [
    172,
    156,
    132
  ],
  "hints": [
    [
      0,
      [
        {
          "TestLessThanOrEqual": {
            "lhs": {
              "Immediate": "0x0"
            },
            "rhs": {
              "Deref": {
                "register": "FP",
                "offset": -6
              }
            },
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      34,
      [
        {
          "TestLessThan": {
            "lhs": {
              "BinOp": {
                "op": "Add",
                "a": {
                  "register": "AP",
                  "offset": -1
                },
                "b": {
                  "Immediate": "0x0"
                }
              }
            },
            "rhs": {
              "Immediate": "0x100000000"
            },
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
<<<<<<< HEAD
      38,
||||||| a1f2f2396
      63,
=======
      38,
      [
        {
          "LinearSplit": {
            "value": {
              "Deref": {
                "register": "AP",
                "offset": -1
              }
            },
            "scalar": {
              "Immediate": "0x8000000000000110000000000000000"
            },
            "max_x": {
              "Immediate": "0xfffffffffffffffffffffffffffffffe"
            },
            "x": {
              "register": "AP",
              "offset": 0
            },
            "y": {
              "register": "AP",
              "offset": 1
            }
          }
        }
      ]
    ],
    [
      63,
>>>>>>> origin/main
      [
        {
<<<<<<< HEAD
          "LinearSplit": {
            "value": {
||||||| a1f2f2396
          "TestLessThanOrEqual": {
            "lhs": {
              "Immediate": "0x6de2"
            },
            "rhs": {
=======
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      82,
      [
        {
          "TestLessThanOrEqual": {
            "lhs": {
              "Immediate": "0x5050"
            },
            "rhs": {
>>>>>>> origin/main
              "Deref": {
                "register": "AP",
<<<<<<< HEAD
                "offset": -1
||||||| a1f2f2396
                "offset": -26
=======
                "offset": -16
>>>>>>> origin/main
              }
            },
            "scalar": {
              "Immediate": "0x8000000000000110000000000000000"
            },
            "max_x": {
              "Immediate": "0xfffffffffffffffffffffffffffffffe"
            },
            "x": {
              "register": "AP",
              "offset": 0
            },
            "y": {
              "register": "AP",
              "offset": 1
            }
          }
        }
      ]
    ],
    [
<<<<<<< HEAD
      63,
||||||| a1f2f2396
      84,
=======
      103,
>>>>>>> origin/main
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
<<<<<<< HEAD
      82,
||||||| a1f2f2396
      102,
=======
      121,
>>>>>>> origin/main
      [
        {
          "TestLessThanOrEqual": {
            "lhs": {
              "Immediate": "0x47d6"
            },
            "rhs": {
              "Deref": {
                "register": "AP",
                "offset": -16
              }
            },
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
<<<<<<< HEAD
      103,
||||||| a1f2f2396
      123,
=======
      143,
>>>>>>> origin/main
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
<<<<<<< HEAD
      121,
||||||| a1f2f2396
      137,
=======
      157,
>>>>>>> origin/main
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
<<<<<<< HEAD
      143,
||||||| a1f2f2396
      152,
=======
      172,
>>>>>>> origin/main
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
<<<<<<< HEAD
      157,
||||||| a1f2f2396
      169,
=======
      189,
>>>>>>> origin/main
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
<<<<<<< HEAD
      172,
||||||| a1f2f2396
      188,
=======
      208,
>>>>>>> origin/main
      [
        {
          "TestLessThanOrEqual": {
            "lhs": {
<<<<<<< HEAD
              "Immediate": "0x0"
||||||| a1f2f2396
              "Immediate": "0x2102"
=======
              "Immediate": "0x186a"
>>>>>>> origin/main
            },
            "rhs": {
              "Deref": {
                "register": "FP",
                "offset": -6
              }
            },
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
<<<<<<< HEAD
      189,
||||||| a1f2f2396
      208,
=======
      228,
>>>>>>> origin/main
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
<<<<<<< HEAD
      208,
||||||| a1f2f2396
      228,
=======
      248,
>>>>>>> origin/main
      [
        {
          "TestLessThanOrEqual": {
            "lhs": {
              "Immediate": "0x1356"
            },
            "rhs": {
              "Deref": {
                "register": "AP",
                "offset": -7
              }
            },
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
<<<<<<< HEAD
      232,
||||||| a1f2f2396
      243,
=======
      263,
>>>>>>> origin/main
      [
        {
          "SystemCall": {
            "system": {
              "Deref": {
                "register": "FP",
                "offset": -5
              }
            }
          }
        }
      ]
    ],
    [
<<<<<<< HEAD
      239,
||||||| a1f2f2396
      258,
=======
      285,
>>>>>>> origin/main
      [
        {
          "TestLessThan": {
            "lhs": {
              "BinOp": {
                "op": "Add",
                "a": {
<<<<<<< HEAD
                  "register": "AP",
                  "offset": -3
||||||| a1f2f2396
                  "register": "FP",
                  "offset": -3
=======
                  "register": "AP",
                  "offset": -1
>>>>>>> origin/main
                },
                "b": {
                  "Deref": {
                    "register": "FP",
                    "offset": -3
                  }
                }
              }
            },
            "rhs": {
              "Immediate": "0x100000000"
            },
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
<<<<<<< HEAD
      243,
||||||| a1f2f2396
      262,
=======
      310,
>>>>>>> origin/main
      [
        {
          "SystemCall": {
            "system": {
              "Deref": {
                "register": "AP",
                "offset": -11
              }
            }
          }
        }
      ]
    ],
    [
      335,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      261,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      274,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      298,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      313,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      338,
      [
        {
          "SystemCall": {
            "system": {
              "Deref": {
                "register": "FP",
                "offset": -4
              }
            }
          }
        }
      ]
    ],
    [
<<<<<<< HEAD
      345,
      [
        {
          "TestLessThan": {
            "lhs": {
              "BinOp": {
                "op": "Add",
                "a": {
                  "register": "AP",
                  "offset": -3
                },
                "b": {
                  "Immediate": "0x0"
                }
              }
            },
            "rhs": {
              "Immediate": "0x100000000"
            },
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      349,
      [
        {
          "LinearSplit": {
            "value": {
              "Deref": {
                "register": "AP",
                "offset": -1
              }
            },
            "scalar": {
              "Immediate": "0x8000000000000110000000000000000"
            },
            "max_x": {
              "Immediate": "0xfffffffffffffffffffffffffffffffe"
            },
            "x": {
              "register": "AP",
              "offset": 0
            },
            "y": {
              "register": "AP",
              "offset": 1
            }
          }
        }
      ]
    ],
    [
      367,
||||||| a1f2f2396
      394,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      427,
=======
      377,
>>>>>>> origin/main
      [
        {
          "TestLessThan": {
            "lhs": {
              "BinOp": {
                "op": "Add",
                "a": {
<<<<<<< HEAD
                  "register": "AP",
                  "offset": -5
||||||| a1f2f2396
                  "register": "FP",
                  "offset": -4
=======
                  "register": "AP",
                  "offset": -3
>>>>>>> origin/main
                },
                "b": {
                  "Immediate": "0x0"
                }
              }
            },
            "rhs": {
              "Immediate": "0x100000000"
            },
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
<<<<<<< HEAD
      392,
||||||| a1f2f2396
      471,
=======
      381,
>>>>>>> origin/main
      [
        {
          "LinearSplit": {
            "value": {
              "Deref": {
<<<<<<< HEAD
                "register": "AP",
                "offset": -10
||||||| a1f2f2396
                "register": "FP",
                "offset": -4
=======
                "register": "AP",
                "offset": -1
>>>>>>> origin/main
              }
            },
            "scalar": {
              "Immediate": "0x8000000000000110000000000000000"
            },
            "max_x": {
              "Immediate": "0xfffffffffffffffffffffffffffffffe"
            },
            "x": {
              "register": "AP",
              "offset": 0
            },
            "y": {
              "register": "AP",
              "offset": 1
            }
          }
        }
      ]
    ],
    [
<<<<<<< HEAD
      417,
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ],
    [
      434,
||||||| a1f2f2396
      535,
=======
      411,
>>>>>>> origin/main
      [
        {
          "AllocSegment": {
            "dst": {
              "register": "AP",
              "offset": 0
            }
          }
        }
      ]
    ]
  ],
  "pythonic_hints": [
    [
      0,
      [
        "memory[ap + 0] = 0 <= memory[fp + -6]"
      ]
    ],
    [
      34,
      [
        "memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296"
      ]
    ],
    [
      38,
      [
        "\n(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)\nx = min(value // scalar, 340282366920938463463374607431768211454)\ny = value - x * scalar\nmemory[ap + 0] = x\nmemory[ap + 1] = y\n"
      ]
    ],
    [
      63,
      [
<<<<<<< HEAD
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      82,
      [
        "memory[ap + 0] = 18390 <= memory[ap + -16]"
||||||| a1f2f2396
        "memory[ap + 0] = 28130 <= memory[ap + -26]"
=======
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      82,
      [
        "memory[ap + 0] = 20560 <= memory[ap + -16]"
>>>>>>> origin/main
      ]
    ],
    [
      103,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      121,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      143,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      157,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      172,
      [
        "memory[ap + 0] = 0 <= memory[fp + -6]"
      ]
    ],
    [
      189,
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
      208,
      [
<<<<<<< HEAD
        "memory[ap + 0] = 4950 <= memory[ap + -7]"
||||||| a1f2f2396
        "memory[ap + 0] = 8450 <= memory[ap + -7]"
=======
        "memory[ap + 0] = 6250 <= memory[ap + -7]"
>>>>>>> origin/main
      ]
    ],
    [
<<<<<<< HEAD
      232,
      [
        "syscall_handler.syscall(syscall_ptr=memory[fp + -5])"
      ]
    ],
    [
      239,
      [
        "memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296"
      ]
    ],
    [
      243,
      [
        "\n(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)\nx = min(value // scalar, 340282366920938463463374607431768211454)\ny = value - x * scalar\nmemory[ap + 0] = x\nmemory[ap + 1] = y\n"
      ]
    ],
    [
      261,
||||||| a1f2f2396
      208,
=======
      228,
>>>>>>> origin/main
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
<<<<<<< HEAD
      274,
||||||| a1f2f2396
      228,
=======
      248,
>>>>>>> origin/main
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
<<<<<<< HEAD
      298,
||||||| a1f2f2396
      243,
=======
      263,
>>>>>>> origin/main
      [
        "memory[ap + 0] = segments.add()"
      ]
    ],
    [
<<<<<<< HEAD
      313,
||||||| a1f2f2396
      258,
=======
      285,
>>>>>>> origin/main
      [
<<<<<<< HEAD
        "memory[ap + 0] = segments.add()"
||||||| a1f2f2396
        "memory[ap + 0] = (memory[fp + -3] + 0) % PRIME < 4294967296"
=======
        "memory[ap + 0] = (memory[ap + -1] + memory[fp + -3]) % PRIME < 4294967296"
>>>>>>> origin/main
      ]
    ],
    [
<<<<<<< HEAD
      338,
||||||| a1f2f2396
      262,
=======
      310,
>>>>>>> origin/main
      [
<<<<<<< HEAD
        "syscall_handler.syscall(syscall_ptr=memory[fp + -4])"
||||||| a1f2f2396
        "\n(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)\nx = min(value // scalar, 340282366920938463463374607431768211454)\ny = value - x * scalar\nmemory[ap + 0] = x\nmemory[ap + 1] = y\n"
=======
        "syscall_handler.syscall(syscall_ptr=memory[ap + -11])"
>>>>>>> origin/main
      ]
    ],
    [
<<<<<<< HEAD
      345,
||||||| a1f2f2396
      370,
=======
      335,
>>>>>>> origin/main
      [
<<<<<<< HEAD
        "memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296"
||||||| a1f2f2396
        "syscall_handler.syscall(syscall_ptr=memory[fp + -3])"
=======
        "memory[ap + 0] = segments.add()"
>>>>>>> origin/main
      ]
    ],
    [
<<<<<<< HEAD
      349,
||||||| a1f2f2396
      394,
=======
      370,
>>>>>>> origin/main
      [
<<<<<<< HEAD
        "\n(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)\nx = min(value // scalar, 340282366920938463463374607431768211454)\ny = value - x * scalar\nmemory[ap + 0] = x\nmemory[ap + 1] = y\n"
||||||| a1f2f2396
        "memory[ap + 0] = segments.add()"
=======
        "syscall_handler.syscall(syscall_ptr=memory[fp + -3])"
>>>>>>> origin/main
      ]
    ],
    [
<<<<<<< HEAD
      367,
||||||| a1f2f2396
      427,
=======
      377,
>>>>>>> origin/main
      [
<<<<<<< HEAD
        "memory[ap + 0] = (memory[ap + -5] + memory[fp + -3]) % PRIME < 4294967296"
||||||| a1f2f2396
        "memory[ap + 0] = (memory[fp + -4] + memory[fp + -3]) % PRIME < 4294967296"
=======
        "memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296"
>>>>>>> origin/main
      ]
    ],
    [
<<<<<<< HEAD
      392,
||||||| a1f2f2396
      471,
=======
      381,
>>>>>>> origin/main
      [
<<<<<<< HEAD
        "syscall_handler.syscall(syscall_ptr=memory[ap + -10])"
      ]
    ],
    [
      417,
      [
        "memory[ap + 0] = segments.add()"
||||||| a1f2f2396
        "syscall_handler.syscall(syscall_ptr=memory[fp + -4])"
=======
        "\n(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)\nx = min(value // scalar, 340282366920938463463374607431768211454)\ny = value - x * scalar\nmemory[ap + 0] = x\nmemory[ap + 1] = y\n"
>>>>>>> origin/main
      ]
    ],
    [
<<<<<<< HEAD
      434,
||||||| a1f2f2396
      535,
=======
      411,
>>>>>>> origin/main
      [
        "memory[ap + 0] = segments.add()"
      ]
    ]
  ],
  "entry_points_by_type": {
    "EXTERNAL": [
      {
        "selector": "0x362398bec32bc0ebb411203221a35a0301193a96f317ebe5e40be9f60d15320",
        "offset": 0,
        "builtins": [
          "range_check"
        ]
      },
      {
        "selector": "0x39e11d48192e4333233c7eb19d10ad67c362bb28580c604d67884c85da39695",
        "offset": 172,
        "builtins": [
          "range_check"
        ]
      }
    ],
    "L1_HANDLER": [],
    "CONSTRUCTOR": []
  }
}
