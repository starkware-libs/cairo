//! > Documentation submodules

//! > test_runner_name
documentation_test_runner

//! > cairo_project.toml
[crate_roots]
hello = "src"

//! > cairo_code
//! This is a testing crate file. It's for the tests purposes only.
//! ```
//!   let a = 5;
//! ```
//! This is also testing crate. After the code example.

//! We don't take responsibility for compiling this file.
//! So don't even try.

/// This one is just a prefix comment for a module.
/// ```rust
///   let a = String::from("This also works fine");
/// ```
/// As mentioned above.
mod cairo_submodule_code;

/// Main function.
fn main() {
    //! Empty code example.
    //! ```rust
    //! ```
    println!("Hello Cairo!");
}

//! > cairo_submodule_code
//! This is a submodule regarding the module_level_comments.

//! It's used to make sure crate / module level comments are parsed in a correct way.
//! Testing purposes only!

mod inner_sub_module {
    //! This comment just proves that it won't be considered as a file-module comment. It just
    //! refers to the inner_sub_module
    /// Hello function inside the inner module.
    fn hello() {
        println!("Hello!");
    }
}

//! > Item #1
This is a testing crate file. It's for the tests purposes only. 
```cairo
  let a = 5;
```
This is also testing crate. After the code example. We don't take responsibility for compiling this file. So don't even try.

//! > Item #2
This is a submodule regarding the module_level_comments. It's used to make sure crate / module level comments are parsed in a correct way. Testing purposes only! This one is just a prefix comment for a module. 
```rust
  let a = String::from("This also works fine");
```
As mentioned above.

//! > Item #3
This comment just proves that it won't be considered as a file-module comment. It just refers to the inner_sub_module

//! > Item #4
Hello function inside the inner module.

//! > Item #5
Main function. Empty code example. 
```rust
```
