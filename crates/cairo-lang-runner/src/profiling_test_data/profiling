//! > Test profiling info of enum_flow.sierra

//! > test_runner_name
test_profiling

//! > cairo_code
>>> file: ../../examples/enum_flow.cairo

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 1: 1 (store_temp<felt252>([0]) -> ([0]))
  statement 2: 1 (return([0]))
Weight by concrete libfunc:
  libfunc store_temp<felt252>: 1
  return: 1
Weight by generic libfunc:
  libfunc store_temp: 1
  return: 1
Weight by user function (inc. generated):
  function test::main: 2
Weight by original user function (exc. generated):
  function test::main: 2
Weight by Cairo function:
  function lib.cairo::main: 2
Weight by Sierra stack trace:
  test::main: 2
Weight by Cairo stack trace:
  test::main: 2

//! > ==========================================================================

//! > Test profiling info of match_or.sierra

//! > test_runner_name
test_profiling

//! > cairo_code
>>> file: ../../examples/match_or.cairo

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 10: 4 (store_temp<test::MyEnum>([10]) -> ([10]))
  statement 11: 4 (store_temp<test::MyEnum>([5]) -> ([5]))
  statement 31: 4 (u8_overflowing_add([0], [19], [20]) { fallthrough([24], [25]) 77([26], [27]) })
  statement 55: 4 (u8_overflowing_add([15], [37], [38]) { fallthrough([42], [43]) 65([44], [45]) })
  statement 63: 3 (store_temp<core::panics::PanicResult::<((),)>>([49]) -> ([49]))
  statement 12: 2 (enum_match<test::MyEnum>([10]) { fallthrough([11]) 16([12]) 20([13]) 26([14]) })
  statement 36: 2 (enum_match<test::MyEnum>([5]) { fallthrough([29]) 40([30]) 44([31]) 50([32]) })
  statement 23: 1 (store_temp<u8>([16]) -> ([19]))
  statement 24: 1 (store_temp<u8>([18]) -> ([20]))
  statement 25: 1 (jump() { 31() })
  statement 35: 1 (store_temp<RangeCheck>([24]) -> ([15]))
  statement 53: 1 (store_temp<u8>([39]) -> ([37]))
  statement 54: 1 (store_temp<u8>([41]) -> ([38]))
  statement 56: 1 (branch_align() -> ())
  statement 59: 1 (store_temp<RangeCheck>([42]) -> ([33]))
  statement 64: 1 (return([33], [49]))
Weight by concrete libfunc:
  libfunc store_temp<test::MyEnum>: 8
  libfunc u8_overflowing_add: 8
  libfunc enum_match<test::MyEnum>: 4
  libfunc store_temp<u8>: 4
  libfunc store_temp<core::panics::PanicResult::<((),)>>: 3
  libfunc store_temp<RangeCheck>: 2
  libfunc branch_align: 1
  libfunc jump: 1
  return: 1
Weight by generic libfunc:
  libfunc store_temp: 17
  libfunc u8_overflowing_add: 8
  libfunc enum_match: 4
  libfunc branch_align: 1
  libfunc jump: 1
  return: 1
Weight by user function (inc. generated):
  function test::main: 32
Weight by original user function (exc. generated):
  function test::main: 32
Weight by Cairo function:
  function lib.cairo::foo: 17
  function core::integer::U8Add::add: 11
  function lib.cairo::main: 4
Weight by Sierra stack trace:
  test::main: 32
Weight by Cairo stack trace:
  test::main: 32

//! > ==========================================================================

//! > Test profiling info of pedersen_test.sierra

//! > test_runner_name
test_profiling

//! > cairo_code
>>> file: ../../examples/pedersen_test.cairo

//! > function_name
test_pedersen

//! > expected_profiling_info
Weight by sierra statement:
  statement 4: 2 (pedersen([0], [1], [2]) -> ([3], [4]))
  statement 8: 2 (pedersen([3], [4], [5]) -> ([6], [7]))
  statement 12: 2 (pedersen([6], [7], [8]) -> ([9], [10]))
  statement 2: 1 (store_temp<felt252>([1]) -> ([1]))
  statement 3: 1 (store_temp<felt252>([2]) -> ([2]))
  statement 6: 1 (store_temp<felt252>([4]) -> ([4]))
  statement 7: 1 (store_temp<felt252>([5]) -> ([5]))
  statement 10: 1 (store_temp<felt252>([7]) -> ([7]))
  statement 11: 1 (store_temp<felt252>([8]) -> ([8]))
  statement 13: 1 (store_temp<Pedersen>([9]) -> ([9]))
  statement 14: 1 (store_temp<felt252>([10]) -> ([10]))
  statement 15: 1 (return([9], [10]))
Weight by concrete libfunc:
  libfunc store_temp<felt252>: 7
  libfunc pedersen: 6
  libfunc store_temp<Pedersen>: 1
  return: 1
Weight by generic libfunc:
  libfunc store_temp: 8
  libfunc pedersen: 6
  return: 1
Weight by user function (inc. generated):
  function test::test_pedersen: 15
Weight by original user function (exc. generated):
  function test::test_pedersen: 15
Weight by Cairo function:
  function lib.cairo::test_pedersen: 15
Weight by Sierra stack trace:
  test::test_pedersen: 15
Weight by Cairo stack trace:
  test::test_pedersen: 15

//! > ==========================================================================

//! > Test profiling info of a program with a simple loop

//! > test_runner_name
test_profiling

//! > cairo_code
fn main() {
    let mut n = 5;
    loop {
        if n == 0 {
            break;
        }
        n -= 1;
    }
}

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 23: 18 (withdraw_gas([0], [1]) { fallthrough([3], [4]) 45([5], [6]) })
  statement 26: 6 (store_temp<RangeCheck>([3]) -> ([3]))
  statement 27: 6 (felt252_is_zero([7]) { fallthrough() 36([8]) })
  statement 40: 5 (store_temp<RangeCheck>([3]) -> ([3]))
  statement 41: 5 (store_temp<GasBuiltin>([4]) -> ([4]))
  statement 42: 5 (store_temp<felt252>([13]) -> ([13]))
  statement 43: 5 (function_call<user@test::main[31-113]>([3], [4], [13]) -> ([14], [15], [16]))
  statement 44: 5 (return([14], [15], [16]))
  statement 14: 3 (store_temp<core::panics::PanicResult::<((),)>>([11]) -> ([11]))
  statement 34: 3 (store_temp<core::panics::PanicResult::<(core::felt252, ())>>([11]) -> ([11]))
  statement 2: 1 (store_temp<RangeCheck>([0]) -> ([0]))
  statement 3: 1 (store_temp<GasBuiltin>([1]) -> ([1]))
  statement 4: 1 (store_temp<felt252>([2]) -> ([2]))
  statement 5: 1 (function_call<user@test::main[31-113]>([0], [1], [2]) -> ([3], [4], [5]))
  statement 6: 1 (enum_match<core::panics::PanicResult::<(core::felt252, ())>>([5]) { fallthrough([6]) 16([7]) })
  statement 12: 1 (store_temp<RangeCheck>([3]) -> ([3]))
  statement 13: 1 (store_temp<GasBuiltin>([4]) -> ([4]))
  statement 15: 1 (return([3], [4], [11]))
  statement 32: 1 (store_temp<RangeCheck>([3]) -> ([3]))
  statement 33: 1 (store_temp<GasBuiltin>([4]) -> ([4]))
  statement 35: 1 (return([3], [4], [11]))
Weight by concrete libfunc:
  libfunc withdraw_gas: 18
  libfunc store_temp<RangeCheck>: 14
  libfunc store_temp<GasBuiltin>: 8
  libfunc felt252_is_zero: 6
  libfunc function_call<user@test::main[31-113]>: 6
  libfunc store_temp<felt252>: 6
  libfunc store_temp<core::panics::PanicResult::<((),)>>: 3
  libfunc store_temp<core::panics::PanicResult::<(core::felt252, ())>>: 3
  libfunc enum_match<core::panics::PanicResult::<(core::felt252, ())>>: 1
  return: 7
Weight by generic libfunc:
  libfunc store_temp: 34
  libfunc withdraw_gas: 18
  libfunc felt252_is_zero: 6
  libfunc function_call: 6
  libfunc enum_match: 1
  return: 7
Weight by user function (inc. generated):
  function test::main[31-113]: 61
  function test::main: 11
Weight by original user function (exc. generated):
  function test::main: 72
Weight by Cairo function:
  function lib.cairo::main: 60
  function core::Felt252PartialEq::eq: 12
Weight by Sierra stack trace:
  test::main: 72
  test::main -> test::main[31-113]: 61
  test::main -> test::main[31-113] -> test::main[31-113]: 51
  test::main -> test::main[31-113] -> test::main[31-113] -> test::main[31-113]: 41
  test::main -> test::main[31-113] -> test::main[31-113] -> test::main[31-113] -> test::main[31-113]: 31
  test::main -> test::main[31-113] -> test::main[31-113] -> test::main[31-113] -> test::main[31-113] -> test::main[31-113]: 21
  test::main -> test::main[31-113] -> test::main[31-113] -> test::main[31-113] -> test::main[31-113] -> test::main[31-113] -> test::main[31-113]: 11
Weight by Cairo stack trace:
  test::main: 72

//! > ==========================================================================

//! > Test max stack trace depth.

//! > test_runner_name
test_profiling

//! > cairo_code
fn main() {
    foo1();
}
fn foo1() {
    foo2();
    foo2();
}
fn foo2() {
    foo3();
}
fn foo3() {}

//! > max_stack_trace_depth
2

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 0: 1 (return())
Weight by concrete libfunc:
  return: 1
Weight by generic libfunc:
  return: 1
Weight by user function (inc. generated):
  function test::main: 1
Weight by original user function (exc. generated):
  function test::main: 1
Weight by Cairo function:
  function unknown: 1
Weight by Sierra stack trace:
  test::main: 1
Weight by Cairo stack trace:
  test::main: 1

//! > ==========================================================================

//! > Test max stack trace depth.2

//! > test_runner_name
test_profiling

//! > cairo_code
fn main() {
    foo1();
}
fn foo1() {
    foo2();
    foo2();
}
fn foo2() {
    foo3();
}
fn foo3() {}

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 0: 1 (return())
Weight by concrete libfunc:
  return: 1
Weight by generic libfunc:
  return: 1
Weight by user function (inc. generated):
  function test::main: 1
Weight by original user function (exc. generated):
  function test::main: 1
Weight by Cairo function:
  function unknown: 1
Weight by Sierra stack trace:
  test::main: 1
Weight by Cairo stack trace:
  test::main: 1

//! > ==========================================================================

//! > Test profiling with inlining.

//! > test_runner_name
test_profiling

//! > cairo_code
fn main() {
    foo1();
}
fn foo1() {
    foo2();
}
#[inline(always)]
fn foo2() {
    foo3();
}
fn foo3() {}

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 0: 1 (return())
Weight by concrete libfunc:
  return: 1
Weight by generic libfunc:
  return: 1
Weight by user function (inc. generated):
  function test::main: 1
Weight by original user function (exc. generated):
  function test::main: 1
Weight by Cairo function:
  function unknown: 1
Weight by Sierra stack trace:
  test::main: 1
Weight by Cairo stack trace:
  test::main: 1
