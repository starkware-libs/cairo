//! > Test profiling info of enum_flow.sierra

//! > test_runner_name
test_profiling

//! > cairo_code
>>> file: ../../examples/enum_flow.cairo

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 1: 1 (store_temp<felt252>([0]) -> ([0]))
  statement 2: 1 (return([0]))
Weight by concrete libfunc:
  libfunc store_temp<felt252>: 1
  return: 1
Weight by generic libfunc:
  libfunc store_temp: 1
  return: 1
Weight by user function (inc. generated):
  function test::main: 2
Weight by original user function (exc. generated):
  function test::main: 2
Weight by Cairo function:
  function lib.cairo::main: 2
Weight by Sierra stack trace:
  test::main: 2
Weight by Cairo stack trace:
  test::main: 2

//! > ==========================================================================

//! > Test profiling info of match_or.sierra

//! > test_runner_name
test_profiling

//! > cairo_code
>>> file: ../../examples/match_or.cairo

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 100: 12 (store_temp<core::panics::PanicResult::<(core::felt252,)>>([27]) -> ([27]))
  statement 92: 8 (u8_overflowing_add([0], [16], [17]) { fallthrough([21], [22]) 102([23], [24]) })
  statement 68: 7 (enum_match<test::MyEnum>([1]) { fallthrough([2]) 74([3]) 81([4]) 87([5]) })
  statement 5: 4 (store_temp<test::MyEnum>([4]) -> ([4]))
  statement 15: 4 (store_temp<test::MyEnum>([12]) -> ([12]))
  statement 26: 4 (store_temp<test::MyEnum>([21]) -> ([21]))
  statement 37: 4 (store_temp<test::MyEnum>([30]) -> ([30]))
  statement 99: 4 (store_temp<RangeCheck>([11]) -> ([11]))
  statement 101: 4 (return([11], [27]))
  statement 46: 3 (store_temp<core::panics::PanicResult::<((),)>>([37]) -> ([37]))
  statement 78: 2 (store_temp<RangeCheck>([0]) -> ([11]))
  statement 79: 2 (store_temp<felt252>([8]) -> ([12]))
  statement 80: 2 (jump() { 97() })
  statement 95: 2 (store_temp<RangeCheck>([21]) -> ([11]))
  statement 96: 2 (store_temp<felt252>([25]) -> ([12]))
  statement 4: 1 (store_temp<RangeCheck>([0]) -> ([0]))
  statement 6: 1 (function_call<user@test::foo>([0], [4]) -> ([5], [6]))
  statement 7: 1 (enum_match<core::panics::PanicResult::<(core::felt252,)>>([6]) { fallthrough([7]) 63([8]) })
  statement 14: 1 (store_temp<RangeCheck>([5]) -> ([5]))
  statement 16: 1 (function_call<user@test::foo>([5], [12]) -> ([13], [14]))
  statement 17: 1 (enum_match<core::panics::PanicResult::<(core::felt252,)>>([14]) { fallthrough([15]) 58([16]) })
  statement 25: 1 (store_temp<RangeCheck>([13]) -> ([13]))
  statement 27: 1 (function_call<user@test::foo>([13], [21]) -> ([22], [23]))
  statement 28: 1 (enum_match<core::panics::PanicResult::<(core::felt252,)>>([23]) { fallthrough([24]) 53([25]) })
  statement 36: 1 (store_temp<RangeCheck>([22]) -> ([22]))
  statement 38: 1 (function_call<user@test::foo>([22], [30]) -> ([31], [32]))
  statement 39: 1 (enum_match<core::panics::PanicResult::<(core::felt252,)>>([32]) { fallthrough([33]) 48([34]) })
  statement 45: 1 (store_temp<RangeCheck>([31]) -> ([31]))
  statement 47: 1 (return([31], [37]))
  statement 69: 1 (branch_align() -> ())
  statement 72: 1 (store_temp<felt252>([7]) -> ([8]))
  statement 73: 1 (jump() { 78() })
  statement 74: 1 (branch_align() -> ())
  statement 77: 1 (store_temp<felt252>([9]) -> ([8]))
  statement 84: 1 (store_temp<u8>([13]) -> ([16]))
  statement 85: 1 (store_temp<u8>([15]) -> ([17]))
  statement 86: 1 (jump() { 92() })
  statement 90: 1 (store_temp<u8>([18]) -> ([16]))
  statement 91: 1 (store_temp<u8>([20]) -> ([17]))
Weight by concrete libfunc:
  libfunc store_temp<test::MyEnum>: 16
  libfunc store_temp<RangeCheck>: 13
  libfunc store_temp<core::panics::PanicResult::<(core::felt252,)>>: 12
  libfunc u8_overflowing_add: 8
  libfunc enum_match<test::MyEnum>: 7
  libfunc store_temp<felt252>: 6
  libfunc enum_match<core::panics::PanicResult::<(core::felt252,)>>: 4
  libfunc function_call<user@test::foo>: 4
  libfunc jump: 4
  libfunc store_temp<u8>: 4
  libfunc store_temp<core::panics::PanicResult::<((),)>>: 3
  libfunc branch_align: 2
  return: 5
Weight by generic libfunc:
  libfunc store_temp: 54
  libfunc enum_match: 11
  libfunc u8_overflowing_add: 8
  libfunc function_call: 4
  libfunc jump: 4
  libfunc branch_align: 2
  return: 5
Weight by user function (inc. generated):
  function test::foo: 55
  function test::main: 33
Weight by original user function (exc. generated):
  function test::foo: 55
  function test::main: 33
Weight by Cairo function:
  function lib.cairo::foo: 47
  function lib.cairo::main: 33
  function integer.cairo::U8Add::add: 8
Weight by Sierra stack trace:
  test::main: 88
  test::main -> test::foo: 55
Weight by Cairo stack trace:
  test::main: 88
  test::main -> test::foo: 55

//! > ==========================================================================

//! > Test profiling info of pedersen_test.sierra

//! > test_runner_name
test_profiling

//! > cairo_code
>>> file: ../../examples/pedersen_test.cairo

//! > function_name
test_pedersen

//! > expected_profiling_info
Weight by sierra statement:
  statement 4: 2 (pedersen([0], [1], [2]) -> ([3], [4]))
  statement 8: 2 (pedersen([3], [4], [5]) -> ([6], [7]))
  statement 12: 2 (pedersen([6], [7], [8]) -> ([9], [10]))
  statement 2: 1 (store_temp<felt252>([1]) -> ([1]))
  statement 3: 1 (store_temp<felt252>([2]) -> ([2]))
  statement 6: 1 (store_temp<felt252>([4]) -> ([4]))
  statement 7: 1 (store_temp<felt252>([5]) -> ([5]))
  statement 10: 1 (store_temp<felt252>([7]) -> ([7]))
  statement 11: 1 (store_temp<felt252>([8]) -> ([8]))
  statement 13: 1 (store_temp<Pedersen>([9]) -> ([9]))
  statement 14: 1 (store_temp<felt252>([10]) -> ([10]))
  statement 15: 1 (return([9], [10]))
Weight by concrete libfunc:
  libfunc store_temp<felt252>: 7
  libfunc pedersen: 6
  libfunc store_temp<Pedersen>: 1
  return: 1
Weight by generic libfunc:
  libfunc store_temp: 8
  libfunc pedersen: 6
  return: 1
Weight by user function (inc. generated):
  function test::test_pedersen: 15
Weight by original user function (exc. generated):
  function test::test_pedersen: 15
Weight by Cairo function:
  function lib.cairo::test_pedersen: 15
Weight by Sierra stack trace:
  test::test_pedersen: 15
Weight by Cairo stack trace:
  test::test_pedersen: 15

//! > ==========================================================================

//! > Test profiling info of a program with a simple loop

//! > test_runner_name
test_profiling

//! > cairo_code
fn main() {
    let mut n = 5;
    loop {
        if n == 0 {
            break;
        }
        n -= 1;
    }

}

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 25: 18 (withdraw_gas_all([0], [1], [3]) { fallthrough([4], [5]) 47([6], [7]) })
  statement 23: 12 (get_builtin_costs() -> ([3]))
  statement 24: 6 (store_temp<BuiltinCosts>([3]) -> ([3]))
  statement 28: 6 (store_temp<RangeCheck>([4]) -> ([4]))
  statement 29: 6 (felt252_is_zero([8]) { fallthrough() 38([9]) })
  statement 42: 5 (store_temp<RangeCheck>([4]) -> ([4]))
  statement 43: 5 (store_temp<GasBuiltin>([5]) -> ([5]))
  statement 44: 5 (store_temp<felt252>([14]) -> ([14]))
  statement 45: 5 (function_call<user@test::main[expr12]>([4], [5], [14]) -> ([15], [16], [17]))
  statement 46: 5 (return([15], [16], [17]))
  statement 14: 3 (store_temp<core::panics::PanicResult::<((),)>>([11]) -> ([11]))
  statement 36: 3 (store_temp<core::panics::PanicResult::<(core::felt252, ())>>([12]) -> ([12]))
  statement 2: 1 (store_temp<RangeCheck>([0]) -> ([0]))
  statement 3: 1 (store_temp<GasBuiltin>([1]) -> ([1]))
  statement 4: 1 (store_temp<felt252>([2]) -> ([2]))
  statement 5: 1 (function_call<user@test::main[expr12]>([0], [1], [2]) -> ([3], [4], [5]))
  statement 6: 1 (enum_match<core::panics::PanicResult::<(core::felt252, ())>>([5]) { fallthrough([6]) 16([7]) })
  statement 12: 1 (store_temp<RangeCheck>([3]) -> ([3]))
  statement 13: 1 (store_temp<GasBuiltin>([4]) -> ([4]))
  statement 15: 1 (return([3], [4], [11]))
  statement 34: 1 (store_temp<RangeCheck>([4]) -> ([4]))
  statement 35: 1 (store_temp<GasBuiltin>([5]) -> ([5]))
  statement 37: 1 (return([4], [5], [12]))
Weight by concrete libfunc:
  libfunc withdraw_gas_all: 18
  libfunc store_temp<RangeCheck>: 14
  libfunc get_builtin_costs: 12
  libfunc store_temp<GasBuiltin>: 8
  libfunc felt252_is_zero: 6
  libfunc function_call<user@test::main[expr12]>: 6
  libfunc store_temp<BuiltinCosts>: 6
  libfunc store_temp<felt252>: 6
  libfunc store_temp<core::panics::PanicResult::<((),)>>: 3
  libfunc store_temp<core::panics::PanicResult::<(core::felt252, ())>>: 3
  libfunc enum_match<core::panics::PanicResult::<(core::felt252, ())>>: 1
  return: 7
Weight by generic libfunc:
  libfunc store_temp: 40
  libfunc withdraw_gas_all: 18
  libfunc get_builtin_costs: 12
  libfunc felt252_is_zero: 6
  libfunc function_call: 6
  libfunc enum_match: 1
  return: 7
Weight by user function (inc. generated):
  function test::main[expr12]: 79
  function test::main: 11
Weight by original user function (exc. generated):
  function test::main: 90
Weight by Cairo function:
  function lib.cairo::main: 90
Weight by Sierra stack trace:
  test::main: 90
  test::main -> test::main[expr12]: 79
  test::main -> test::main[expr12] -> test::main[expr12]: 66
  test::main -> test::main[expr12] -> test::main[expr12] -> test::main[expr12]: 53
  test::main -> test::main[expr12] -> test::main[expr12] -> test::main[expr12] -> test::main[expr12]: 40
  test::main -> test::main[expr12] -> test::main[expr12] -> test::main[expr12] -> test::main[expr12] -> test::main[expr12]: 27
  test::main -> test::main[expr12] -> test::main[expr12] -> test::main[expr12] -> test::main[expr12] -> test::main[expr12] -> test::main[expr12]: 14
Weight by Cairo stack trace:
  test::main: 90

//! > ==========================================================================

//! > Test max stack trace depth.

//! > test_runner_name
test_profiling

//! > cairo_code
fn main() {
    foo1();
}
fn foo1() {
  foo2();
  foo2();
}
fn foo2() {
  foo3();
}
fn foo3() {
}

//! > max_stack_trace_depth
2

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 1: 1 (return([0]))
Weight by concrete libfunc:
  return: 1
Weight by generic libfunc:
  return: 1
Weight by user function (inc. generated):
  function test::main: 1
Weight by original user function (exc. generated):
  function test::main: 1
Weight by Cairo function:
  function lib.cairo::main: 1
Weight by Sierra stack trace:
  test::main: 1
Weight by Cairo stack trace:
  test::main: 1

//! > ==========================================================================

//! > Test max stack trace depth.2

//! > test_runner_name
test_profiling

//! > cairo_code
fn main() {
    foo1();
}
fn foo1() {
  foo2();
  foo2();
}
fn foo2() {
  foo3();
}
fn foo3() {
}

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 1: 1 (return([0]))
Weight by concrete libfunc:
  return: 1
Weight by generic libfunc:
  return: 1
Weight by user function (inc. generated):
  function test::main: 1
Weight by original user function (exc. generated):
  function test::main: 1
Weight by Cairo function:
  function lib.cairo::main: 1
Weight by Sierra stack trace:
  test::main: 1
Weight by Cairo stack trace:
  test::main: 1

//! > ==========================================================================

//! > Test profiling with inlining.

//! > test_runner_name
test_profiling

//! > cairo_code
fn main() {
    foo1();
}
fn foo1() {
  foo2();
}
#[inline(always)]
fn foo2() {
  foo3();
}
fn foo3() {
}

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 1: 1 (return([0]))
Weight by concrete libfunc:
  return: 1
Weight by generic libfunc:
  return: 1
Weight by user function (inc. generated):
  function test::main: 1
Weight by original user function (exc. generated):
  function test::main: 1
Weight by Cairo function:
  function lib.cairo::main: 1
Weight by Sierra stack trace:
  test::main: 1
Weight by Cairo stack trace:
  test::main: 1
