//! > Test profiling info of enum_flow.sierra

//! > test_runner_name
test_profiling

//! > cairo_code
>>> file: ../../examples/enum_flow.cairo

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 1: 1 (store_temp<felt252>([0]) -> ([0]))
  statement 2: 1 (return([0]))
Weight by concrete libfunc:
  libfunc store_temp<felt252>: 1
  return: 1
Weight by generic libfunc:
  libfunc store_temp: 1
  return: 1
Weight by user function (inc. generated):
  function test::main: 2
Weight by original user function (exc. generated):
  function test::main: 2
Weight by Cairo function:
  function lib.cairo::main: 2
Weight by Sierra stack trace:
  test::main: 2
Weight by Cairo stack trace:
  test::main: 2

//! > Sierra Program
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type test::MyEnumLong = Enum<ut@test::MyEnumLong, felt252, felt252, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type test::MyEnumShort = Enum<ut@test::MyEnumShort, felt252, felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc felt252_const<300> = felt252_const<300>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc enum_match<test::MyEnumShort> = enum_match<test::MyEnumShort>;
libfunc branch_align = branch_align;
libfunc enum_match<test::MyEnumLong> = enum_match<test::MyEnumLong>;

felt252_const<300>() -> ([0]); // 0
store_temp<felt252>([0]) -> ([0]); // 1
return([0]); // 2
enum_match<test::MyEnumShort>([0]) { fallthrough([1]) 7([2]) }; // 3
branch_align() -> (); // 4
store_temp<felt252>([1]) -> ([1]); // 5
return([1]); // 6
branch_align() -> (); // 7
store_temp<felt252>([2]) -> ([2]); // 8
return([2]); // 9
enum_match<test::MyEnumLong>([0]) { fallthrough([1]) 14([2]) 17([3]) }; // 10
branch_align() -> (); // 11
store_temp<felt252>([1]) -> ([1]); // 12
return([1]); // 13
branch_align() -> (); // 14
store_temp<felt252>([2]) -> ([2]); // 15
return([2]); // 16
branch_align() -> (); // 17
store_temp<felt252>([3]) -> ([3]); // 18
return([3]); // 19

test::main@0() -> (felt252);
test::match_short@3([0]: test::MyEnumShort) -> (felt252);
test::match_long@10([0]: test::MyEnumLong) -> (felt252);

//! > Casms Program
[ap + 0] = 300, ap++;
ret;
jmp rel 4 if [fp + -4] != 0;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -3], ap++;
ret;
jmp rel [fp + -4];
jmp rel 8;
jmp rel 4;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -3], ap++;
ret;

//! > ==========================================================================

//! > Test profiling info of match_or.sierra

//! > test_runner_name
test_profiling

//! > cairo_code
>>> file: ../../examples/match_or.cairo

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 105: 12 (store_temp<core::panics::PanicResult::<(core::felt252,)>>([28]) -> ([28]))
  statement 112: 8 (u8_overflowing_add([0], [1], [2]) { fallthrough([3], [4]) 118([5], [6]) })
  statement 68: 7 (enum_match<test::MyEnum>([1]) { fallthrough([2]) 74([3]) 81([4]) 87([5]) })
  statement 126: 6 (store_temp<core::panics::PanicResult::<(core::integer::u8,)>>([12]) -> ([12]))
  statement 133: 6 (store_temp<core::panics::PanicResult::<(core::integer::u8,)>>([5]) -> ([5]))
  statement 5: 4 (store_temp<test::MyEnum>([4]) -> ([4]))
  statement 15: 4 (store_temp<test::MyEnum>([12]) -> ([12]))
  statement 26: 4 (store_temp<test::MyEnum>([21]) -> ([21]))
  statement 37: 4 (store_temp<test::MyEnum>([30]) -> ([30]))
  statement 104: 4 (store_temp<RangeCheck>([11]) -> ([11]))
  statement 106: 4 (return([11], [28]))
  statement 116: 4 (store_temp<core::result::Result::<core::integer::u8, core::integer::u8>>([7]) -> ([9]))
  statement 46: 3 (store_temp<core::panics::PanicResult::<((),)>>([37]) -> ([37]))
  statement 78: 2 (store_temp<RangeCheck>([0]) -> ([11]))
  statement 79: 2 (store_temp<felt252>([8]) -> ([12]))
  statement 80: 2 (jump() { 102() })
  statement 92: 2 (store_temp<RangeCheck>([0]) -> ([0]))
  statement 93: 2 (store_temp<u8>([16]) -> ([16]))
  statement 94: 2 (store_temp<u8>([17]) -> ([17]))
  statement 95: 2 (function_call<user@core::integer::U8Add::add>([0], [16], [17]) -> ([21], [22]))
  statement 96: 2 (enum_match<core::panics::PanicResult::<(core::integer::u8,)>>([22]) { fallthrough([23]) 107([24]) })
  statement 100: 2 (store_temp<RangeCheck>([21]) -> ([11]))
  statement 101: 2 (store_temp<felt252>([26]) -> ([12]))
  statement 115: 2 (store_temp<RangeCheck>([3]) -> ([8]))
  statement 117: 2 (jump() { 122() })
  statement 123: 2 (store_temp<felt252>([11]) -> ([11]))
  statement 124: 2 (function_call<user@core::result::ResultTraitImpl::<core::integer::u8, core::integer::u8>::expect::<core::integer::u8Drop>>([9], [11]) -> ([12]))
  statement 125: 2 (store_temp<RangeCheck>([8]) -> ([8]))
  statement 127: 2 (return([8], [12]))
  statement 128: 2 (enum_match<core::result::Result::<core::integer::u8, core::integer::u8>>([0]) { fallthrough([2]) 135([3]) })
  statement 129: 2 (branch_align() -> ())
  statement 134: 2 (return([5]))
  statement 4: 1 (store_temp<RangeCheck>([0]) -> ([0]))
  statement 6: 1 (function_call<user@test::foo>([0], [4]) -> ([5], [6]))
  statement 7: 1 (enum_match<core::panics::PanicResult::<(core::felt252,)>>([6]) { fallthrough([7]) 63([8]) })
  statement 14: 1 (store_temp<RangeCheck>([5]) -> ([5]))
  statement 16: 1 (function_call<user@test::foo>([5], [12]) -> ([13], [14]))
  statement 17: 1 (enum_match<core::panics::PanicResult::<(core::felt252,)>>([14]) { fallthrough([15]) 58([16]) })
  statement 25: 1 (store_temp<RangeCheck>([13]) -> ([13]))
  statement 27: 1 (function_call<user@test::foo>([13], [21]) -> ([22], [23]))
  statement 28: 1 (enum_match<core::panics::PanicResult::<(core::felt252,)>>([23]) { fallthrough([24]) 53([25]) })
  statement 36: 1 (store_temp<RangeCheck>([22]) -> ([22]))
  statement 38: 1 (function_call<user@test::foo>([22], [30]) -> ([31], [32]))
  statement 39: 1 (enum_match<core::panics::PanicResult::<(core::felt252,)>>([32]) { fallthrough([33]) 48([34]) })
  statement 45: 1 (store_temp<RangeCheck>([31]) -> ([31]))
  statement 47: 1 (return([31], [37]))
  statement 69: 1 (branch_align() -> ())
  statement 72: 1 (store_temp<felt252>([7]) -> ([8]))
  statement 73: 1 (jump() { 78() })
  statement 74: 1 (branch_align() -> ())
  statement 77: 1 (store_temp<felt252>([9]) -> ([8]))
  statement 84: 1 (store_temp<u8>([13]) -> ([16]))
  statement 85: 1 (store_temp<u8>([15]) -> ([17]))
  statement 86: 1 (jump() { 92() })
  statement 90: 1 (store_temp<u8>([18]) -> ([16]))
  statement 91: 1 (store_temp<u8>([20]) -> ([17]))
Weight by concrete libfunc:
  libfunc store_temp<RangeCheck>: 19
  libfunc store_temp<test::MyEnum>: 16
  libfunc store_temp<core::panics::PanicResult::<(core::felt252,)>>: 12
  libfunc store_temp<core::panics::PanicResult::<(core::integer::u8,)>>: 12
  libfunc store_temp<felt252>: 8
  libfunc store_temp<u8>: 8
  libfunc u8_overflowing_add: 8
  libfunc enum_match<test::MyEnum>: 7
  libfunc jump: 6
  libfunc branch_align: 4
  libfunc enum_match<core::panics::PanicResult::<(core::felt252,)>>: 4
  libfunc function_call<user@test::foo>: 4
  libfunc store_temp<core::result::Result::<core::integer::u8, core::integer::u8>>: 4
  libfunc store_temp<core::panics::PanicResult::<((),)>>: 3
  libfunc enum_match<core::panics::PanicResult::<(core::integer::u8,)>>: 2
  libfunc enum_match<core::result::Result::<core::integer::u8, core::integer::u8>>: 2
  libfunc function_call<user@core::integer::U8Add::add>: 2
  libfunc function_call<user@core::result::ResultTraitImpl::<core::integer::u8, core::integer::u8>::expect::<core::integer::u8Drop>>: 2
  return: 9
Weight by generic libfunc:
  libfunc store_temp: 82
  libfunc enum_match: 15
  libfunc function_call: 8
  libfunc u8_overflowing_add: 8
  libfunc jump: 6
  libfunc branch_align: 4
  return: 9
Weight by user function (inc. generated):
  function test::foo: 57
  function test::main: 33
  function core::integer::U8Add::add: 30
  function core::result::ResultTraitImpl::<core::integer::u8, core::integer::u8>::expect::<core::integer::u8Drop>: 12
Weight by original user function (exc. generated):
  function test::foo: 57
  function test::main: 33
  function core::integer::U8Add::add: 30
  function core::result::ResultTraitImpl::<core::integer::u8, core::integer::u8>::expect::<core::integer::u8Drop>: 12
Weight by Cairo function:
  function lib.cairo::foo: 57
  function lib.cairo::main: 33
  function integer.cairo::U8Add::add: 30
  function result.cairo::ResultTraitImpl::expect: 12
Weight by Sierra stack trace:
  test::main: 132
  test::main -> test::foo: 99
  test::main -> test::foo -> core::integer::U8Add::add: 42
  test::main -> test::foo -> core::integer::U8Add::add -> core::result::ResultTraitImpl::<core::integer::u8, core::integer::u8>::expect::<core::integer::u8Drop>: 12
Weight by Cairo stack trace:
  test::main: 132
  test::main -> test::foo: 99
  test::main -> test::foo -> core::integer::U8Add::add: 42
  test::main -> test::foo -> core::integer::U8Add::add -> core::result::ResultTraitImpl::<core::integer::u8, core::integer::u8>::expect::<core::integer::u8Drop>: 12

//! > Sierra Program
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::Panic = Struct<ut@core::panics::Panic> [storable: true, drop: true, dup: true, zero_sized: true];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type u8 = u8 [storable: true, drop: true, dup: true, zero_sized: false];
type core::result::Result::<core::integer::u8, core::integer::u8> = Enum<ut@core::result::Result::<core::integer::u8, core::integer::u8>, u8, u8> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<u8> = Struct<ut@Tuple, u8> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<core::panics::Panic, Array<felt252>> = Struct<ut@Tuple, core::panics::Panic, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type core::panics::PanicResult::<(core::integer::u8,)> = Enum<ut@core::panics::PanicResult::<(core::integer::u8,)>, Tuple<u8>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Tuple<Unit> = Struct<ut@Tuple, Unit> [storable: true, drop: true, dup: true, zero_sized: true];
type core::panics::PanicResult::<((),)> = Enum<ut@core::panics::PanicResult::<((),)>, Tuple<Unit>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type test::P = Struct<ut@test::P, u8, u8, u8> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<u8, u8, u8> = Struct<ut@Tuple, u8, u8, u8> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<felt252> = Struct<ut@Tuple, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::PanicResult::<(core::felt252,)> = Enum<ut@core::panics::PanicResult::<(core::felt252,)>, Tuple<felt252>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Tuple<felt252, felt252> = Struct<ut@Tuple, felt252, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type test::MyEnum = Enum<ut@test::MyEnum, Tuple<felt252, felt252>, Tuple<felt252, felt252>, Tuple<u8, u8, u8>, test::P> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc felt252_const<1> = felt252_const<1>;
libfunc felt252_const<2> = felt252_const<2>;
libfunc struct_construct<Tuple<felt252, felt252>> = struct_construct<Tuple<felt252, felt252>>;
libfunc enum_init<test::MyEnum, 0> = enum_init<test::MyEnum, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<test::MyEnum> = store_temp<test::MyEnum>;
libfunc function_call<user@test::foo> = function_call<user@test::foo>;
libfunc enum_match<core::panics::PanicResult::<(core::felt252,)>> = enum_match<core::panics::PanicResult::<(core::felt252,)>>;
libfunc branch_align = branch_align;
libfunc drop<Tuple<felt252>> = drop<Tuple<felt252>>;
libfunc enum_init<test::MyEnum, 1> = enum_init<test::MyEnum, 1>;
libfunc u8_const<1> = u8_const<1>;
libfunc u8_const<2> = u8_const<2>;
libfunc u8_const<3> = u8_const<3>;
libfunc struct_construct<Tuple<u8, u8, u8>> = struct_construct<Tuple<u8, u8, u8>>;
libfunc enum_init<test::MyEnum, 2> = enum_init<test::MyEnum, 2>;
libfunc u8_const<9> = u8_const<9>;
libfunc struct_construct<test::P> = struct_construct<test::P>;
libfunc enum_init<test::MyEnum, 3> = enum_init<test::MyEnum, 3>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc struct_construct<Tuple<Unit>> = struct_construct<Tuple<Unit>>;
libfunc enum_init<core::panics::PanicResult::<((),)>, 0> = enum_init<core::panics::PanicResult::<((),)>, 0>;
libfunc store_temp<core::panics::PanicResult::<((),)>> = store_temp<core::panics::PanicResult::<((),)>>;
libfunc enum_init<core::panics::PanicResult::<((),)>, 1> = enum_init<core::panics::PanicResult::<((),)>, 1>;
libfunc enum_match<test::MyEnum> = enum_match<test::MyEnum>;
libfunc struct_deconstruct<Tuple<felt252, felt252>> = struct_deconstruct<Tuple<felt252, felt252>>;
libfunc drop<felt252> = drop<felt252>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc jump = jump;
libfunc struct_deconstruct<Tuple<u8, u8, u8>> = struct_deconstruct<Tuple<u8, u8, u8>>;
libfunc drop<u8> = drop<u8>;
libfunc store_temp<u8> = store_temp<u8>;
libfunc struct_deconstruct<test::P> = struct_deconstruct<test::P>;
libfunc function_call<user@core::integer::U8Add::add> = function_call<user@core::integer::U8Add::add>;
libfunc enum_match<core::panics::PanicResult::<(core::integer::u8,)>> = enum_match<core::panics::PanicResult::<(core::integer::u8,)>>;
libfunc struct_deconstruct<Tuple<u8>> = struct_deconstruct<Tuple<u8>>;
libfunc u8_to_felt252 = u8_to_felt252;
libfunc struct_construct<Tuple<felt252>> = struct_construct<Tuple<felt252>>;
libfunc enum_init<core::panics::PanicResult::<(core::felt252,)>, 0> = enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>;
libfunc store_temp<core::panics::PanicResult::<(core::felt252,)>> = store_temp<core::panics::PanicResult::<(core::felt252,)>>;
libfunc enum_init<core::panics::PanicResult::<(core::felt252,)>, 1> = enum_init<core::panics::PanicResult::<(core::felt252,)>, 1>;
libfunc u8_overflowing_add = u8_overflowing_add;
libfunc enum_init<core::result::Result::<core::integer::u8, core::integer::u8>, 0> = enum_init<core::result::Result::<core::integer::u8, core::integer::u8>, 0>;
libfunc store_temp<core::result::Result::<core::integer::u8, core::integer::u8>> = store_temp<core::result::Result::<core::integer::u8, core::integer::u8>>;
libfunc enum_init<core::result::Result::<core::integer::u8, core::integer::u8>, 1> = enum_init<core::result::Result::<core::integer::u8, core::integer::u8>, 1>;
libfunc felt252_const<608642104203229548495787928534675319> = felt252_const<608642104203229548495787928534675319>;
libfunc function_call<user@core::result::ResultTraitImpl::<core::integer::u8, core::integer::u8>::expect::<core::integer::u8Drop>> = function_call<user@core::result::ResultTraitImpl::<core::integer::u8, core::integer::u8>::expect::<core::integer::u8Drop>>;
libfunc store_temp<core::panics::PanicResult::<(core::integer::u8,)>> = store_temp<core::panics::PanicResult::<(core::integer::u8,)>>;
libfunc enum_match<core::result::Result::<core::integer::u8, core::integer::u8>> = enum_match<core::result::Result::<core::integer::u8, core::integer::u8>>;
libfunc struct_construct<Tuple<u8>> = struct_construct<Tuple<u8>>;
libfunc enum_init<core::panics::PanicResult::<(core::integer::u8,)>, 0> = enum_init<core::panics::PanicResult::<(core::integer::u8,)>, 0>;
libfunc array_new<felt252> = array_new<felt252>;
libfunc array_append<felt252> = array_append<felt252>;
libfunc struct_construct<core::panics::Panic> = struct_construct<core::panics::Panic>;
libfunc struct_construct<Tuple<core::panics::Panic, Array<felt252>>> = struct_construct<Tuple<core::panics::Panic, Array<felt252>>>;
libfunc enum_init<core::panics::PanicResult::<(core::integer::u8,)>, 1> = enum_init<core::panics::PanicResult::<(core::integer::u8,)>, 1>;

felt252_const<1>() -> ([1]); // 0
felt252_const<2>() -> ([2]); // 1
struct_construct<Tuple<felt252, felt252>>([1], [2]) -> ([3]); // 2
enum_init<test::MyEnum, 0>([3]) -> ([4]); // 3
store_temp<RangeCheck>([0]) -> ([0]); // 4
store_temp<test::MyEnum>([4]) -> ([4]); // 5
function_call<user@test::foo>([0], [4]) -> ([5], [6]); // 6
enum_match<core::panics::PanicResult::<(core::felt252,)>>([6]) { fallthrough([7]) 63([8]) }; // 7
branch_align() -> (); // 8
drop<Tuple<felt252>>([7]) -> (); // 9
felt252_const<1>() -> ([9]); // 10
felt252_const<2>() -> ([10]); // 11
struct_construct<Tuple<felt252, felt252>>([9], [10]) -> ([11]); // 12
enum_init<test::MyEnum, 1>([11]) -> ([12]); // 13
store_temp<RangeCheck>([5]) -> ([5]); // 14
store_temp<test::MyEnum>([12]) -> ([12]); // 15
function_call<user@test::foo>([5], [12]) -> ([13], [14]); // 16
enum_match<core::panics::PanicResult::<(core::felt252,)>>([14]) { fallthrough([15]) 58([16]) }; // 17
branch_align() -> (); // 18
drop<Tuple<felt252>>([15]) -> (); // 19
u8_const<1>() -> ([17]); // 20
u8_const<2>() -> ([18]); // 21
u8_const<3>() -> ([19]); // 22
struct_construct<Tuple<u8, u8, u8>>([17], [18], [19]) -> ([20]); // 23
enum_init<test::MyEnum, 2>([20]) -> ([21]); // 24
store_temp<RangeCheck>([13]) -> ([13]); // 25
store_temp<test::MyEnum>([21]) -> ([21]); // 26
function_call<user@test::foo>([13], [21]) -> ([22], [23]); // 27
enum_match<core::panics::PanicResult::<(core::felt252,)>>([23]) { fallthrough([24]) 53([25]) }; // 28
branch_align() -> (); // 29
drop<Tuple<felt252>>([24]) -> (); // 30
u8_const<1>() -> ([26]); // 31
u8_const<2>() -> ([27]); // 32
u8_const<9>() -> ([28]); // 33
struct_construct<test::P>([26], [27], [28]) -> ([29]); // 34
enum_init<test::MyEnum, 3>([29]) -> ([30]); // 35
store_temp<RangeCheck>([22]) -> ([22]); // 36
store_temp<test::MyEnum>([30]) -> ([30]); // 37
function_call<user@test::foo>([22], [30]) -> ([31], [32]); // 38
enum_match<core::panics::PanicResult::<(core::felt252,)>>([32]) { fallthrough([33]) 48([34]) }; // 39
branch_align() -> (); // 40
drop<Tuple<felt252>>([33]) -> (); // 41
struct_construct<Unit>() -> ([35]); // 42
struct_construct<Tuple<Unit>>([35]) -> ([36]); // 43
enum_init<core::panics::PanicResult::<((),)>, 0>([36]) -> ([37]); // 44
store_temp<RangeCheck>([31]) -> ([31]); // 45
store_temp<core::panics::PanicResult::<((),)>>([37]) -> ([37]); // 46
return([31], [37]); // 47
branch_align() -> (); // 48
enum_init<core::panics::PanicResult::<((),)>, 1>([34]) -> ([38]); // 49
store_temp<RangeCheck>([31]) -> ([31]); // 50
store_temp<core::panics::PanicResult::<((),)>>([38]) -> ([38]); // 51
return([31], [38]); // 52
branch_align() -> (); // 53
enum_init<core::panics::PanicResult::<((),)>, 1>([25]) -> ([39]); // 54
store_temp<RangeCheck>([22]) -> ([22]); // 55
store_temp<core::panics::PanicResult::<((),)>>([39]) -> ([39]); // 56
return([22], [39]); // 57
branch_align() -> (); // 58
enum_init<core::panics::PanicResult::<((),)>, 1>([16]) -> ([40]); // 59
store_temp<RangeCheck>([13]) -> ([13]); // 60
store_temp<core::panics::PanicResult::<((),)>>([40]) -> ([40]); // 61
return([13], [40]); // 62
branch_align() -> (); // 63
enum_init<core::panics::PanicResult::<((),)>, 1>([8]) -> ([41]); // 64
store_temp<RangeCheck>([5]) -> ([5]); // 65
store_temp<core::panics::PanicResult::<((),)>>([41]) -> ([41]); // 66
return([5], [41]); // 67
enum_match<test::MyEnum>([1]) { fallthrough([2]) 74([3]) 81([4]) 87([5]) }; // 68
branch_align() -> (); // 69
struct_deconstruct<Tuple<felt252, felt252>>([2]) -> ([6], [7]); // 70
drop<felt252>([6]) -> (); // 71
store_temp<felt252>([7]) -> ([8]); // 72
jump() { 78() }; // 73
branch_align() -> (); // 74
struct_deconstruct<Tuple<felt252, felt252>>([3]) -> ([9], [10]); // 75
drop<felt252>([10]) -> (); // 76
store_temp<felt252>([9]) -> ([8]); // 77
store_temp<RangeCheck>([0]) -> ([11]); // 78
store_temp<felt252>([8]) -> ([12]); // 79
jump() { 102() }; // 80
branch_align() -> (); // 81
struct_deconstruct<Tuple<u8, u8, u8>>([4]) -> ([13], [14], [15]); // 82
drop<u8>([14]) -> (); // 83
store_temp<u8>([13]) -> ([16]); // 84
store_temp<u8>([15]) -> ([17]); // 85
jump() { 92() }; // 86
branch_align() -> (); // 87
struct_deconstruct<test::P>([5]) -> ([18], [19], [20]); // 88
drop<u8>([19]) -> (); // 89
store_temp<u8>([18]) -> ([16]); // 90
store_temp<u8>([20]) -> ([17]); // 91
store_temp<RangeCheck>([0]) -> ([0]); // 92
store_temp<u8>([16]) -> ([16]); // 93
store_temp<u8>([17]) -> ([17]); // 94
function_call<user@core::integer::U8Add::add>([0], [16], [17]) -> ([21], [22]); // 95
enum_match<core::panics::PanicResult::<(core::integer::u8,)>>([22]) { fallthrough([23]) 107([24]) }; // 96
branch_align() -> (); // 97
struct_deconstruct<Tuple<u8>>([23]) -> ([25]); // 98
u8_to_felt252([25]) -> ([26]); // 99
store_temp<RangeCheck>([21]) -> ([11]); // 100
store_temp<felt252>([26]) -> ([12]); // 101
struct_construct<Tuple<felt252>>([12]) -> ([27]); // 102
enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>([27]) -> ([28]); // 103
store_temp<RangeCheck>([11]) -> ([11]); // 104
store_temp<core::panics::PanicResult::<(core::felt252,)>>([28]) -> ([28]); // 105
return([11], [28]); // 106
branch_align() -> (); // 107
enum_init<core::panics::PanicResult::<(core::felt252,)>, 1>([24]) -> ([29]); // 108
store_temp<RangeCheck>([21]) -> ([21]); // 109
store_temp<core::panics::PanicResult::<(core::felt252,)>>([29]) -> ([29]); // 110
return([21], [29]); // 111
u8_overflowing_add([0], [1], [2]) { fallthrough([3], [4]) 118([5], [6]) }; // 112
branch_align() -> (); // 113
enum_init<core::result::Result::<core::integer::u8, core::integer::u8>, 0>([4]) -> ([7]); // 114
store_temp<RangeCheck>([3]) -> ([8]); // 115
store_temp<core::result::Result::<core::integer::u8, core::integer::u8>>([7]) -> ([9]); // 116
jump() { 122() }; // 117
branch_align() -> (); // 118
enum_init<core::result::Result::<core::integer::u8, core::integer::u8>, 1>([6]) -> ([10]); // 119
store_temp<RangeCheck>([5]) -> ([8]); // 120
store_temp<core::result::Result::<core::integer::u8, core::integer::u8>>([10]) -> ([9]); // 121
felt252_const<608642104203229548495787928534675319>() -> ([11]); // 122
store_temp<felt252>([11]) -> ([11]); // 123
function_call<user@core::result::ResultTraitImpl::<core::integer::u8, core::integer::u8>::expect::<core::integer::u8Drop>>([9], [11]) -> ([12]); // 124
store_temp<RangeCheck>([8]) -> ([8]); // 125
store_temp<core::panics::PanicResult::<(core::integer::u8,)>>([12]) -> ([12]); // 126
return([8], [12]); // 127
enum_match<core::result::Result::<core::integer::u8, core::integer::u8>>([0]) { fallthrough([2]) 135([3]) }; // 128
branch_align() -> (); // 129
drop<felt252>([1]) -> (); // 130
struct_construct<Tuple<u8>>([2]) -> ([4]); // 131
enum_init<core::panics::PanicResult::<(core::integer::u8,)>, 0>([4]) -> ([5]); // 132
store_temp<core::panics::PanicResult::<(core::integer::u8,)>>([5]) -> ([5]); // 133
return([5]); // 134
branch_align() -> (); // 135
drop<u8>([3]) -> (); // 136
array_new<felt252>() -> ([6]); // 137
array_append<felt252>([6], [1]) -> ([7]); // 138
struct_construct<core::panics::Panic>() -> ([8]); // 139
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([8], [7]) -> ([9]); // 140
enum_init<core::panics::PanicResult::<(core::integer::u8,)>, 1>([9]) -> ([10]); // 141
store_temp<core::panics::PanicResult::<(core::integer::u8,)>>([10]) -> ([10]); // 142
return([10]); // 143

test::main@0([0]: RangeCheck) -> (RangeCheck, core::panics::PanicResult::<((),)>);
test::foo@68([0]: RangeCheck, [1]: test::MyEnum) -> (RangeCheck, core::panics::PanicResult::<(core::felt252,)>);
core::integer::U8Add::add@112([0]: RangeCheck, [1]: u8, [2]: u8) -> (RangeCheck, core::panics::PanicResult::<(core::integer::u8,)>);
core::result::ResultTraitImpl::<core::integer::u8, core::integer::u8>::expect::<core::integer::u8Drop>@128([0]: core::result::Result::<core::integer::u8, core::integer::u8>, [1]: felt252) -> (core::panics::PanicResult::<(core::integer::u8,)>);

//! > Casms Program
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 2, ap++;
call rel 81;
jmp rel 71 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 2, ap++;
call rel 68;
jmp rel 50 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 3, ap++;
call rel 55;
jmp rel 29 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 9, ap++;
call rel 42;
jmp rel 10 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 37;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -41], ap++;
ret;
ap += 74;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = [ap + -78], ap++;
ret;
ap += 111;
[ap + 0] = [ap + -115], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -115], ap++;
[ap + 0] = [ap + -115], ap++;
ret;
jmp rel [fp + -6];
jmp rel 22;
jmp rel 16;
jmp rel 7;
ap += 23;
[ap + 0] = [fp + -3], ap++;
jmp rel 5;
ap += 23;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 17;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 4;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
call rel 21;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 2;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = (memory[fp + -4] + memory[fp + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 13;
[ap + 1] = [fp + -4] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 608642104203229548495787928534675319, ap++;
call rel 7;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
jmp rel 10 if [fp + -5] != 0;
ap += 1;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -3] = [[ap + -1] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;

//! > ==========================================================================

//! > Test profiling info of pedersen_test.sierra

//! > test_runner_name
test_profiling

//! > cairo_code
>>> file: ../../examples/pedersen_test.cairo

//! > function_name
test_pedersen

//! > expected_profiling_info
Weight by sierra statement:
  statement 4: 2 (pedersen([0], [1], [2]) -> ([3], [4]))
  statement 8: 2 (pedersen([3], [4], [5]) -> ([6], [7]))
  statement 12: 2 (pedersen([6], [7], [8]) -> ([9], [10]))
  statement 2: 1 (store_temp<felt252>([1]) -> ([1]))
  statement 3: 1 (store_temp<felt252>([2]) -> ([2]))
  statement 6: 1 (store_temp<felt252>([4]) -> ([4]))
  statement 7: 1 (store_temp<felt252>([5]) -> ([5]))
  statement 10: 1 (store_temp<felt252>([7]) -> ([7]))
  statement 11: 1 (store_temp<felt252>([8]) -> ([8]))
  statement 13: 1 (store_temp<Pedersen>([9]) -> ([9]))
  statement 14: 1 (store_temp<felt252>([10]) -> ([10]))
  statement 15: 1 (return([9], [10]))
Weight by concrete libfunc:
  libfunc store_temp<felt252>: 7
  libfunc pedersen: 6
  libfunc store_temp<Pedersen>: 1
  return: 1
Weight by generic libfunc:
  libfunc store_temp: 8
  libfunc pedersen: 6
  return: 1
Weight by user function (inc. generated):
  function test::test_pedersen: 15
Weight by original user function (exc. generated):
  function test::test_pedersen: 15
Weight by Cairo function:
  function lib.cairo::test_pedersen: 15
Weight by Sierra stack trace:
  test::test_pedersen: 15
Weight by Cairo stack trace:
  test::test_pedersen: 15

//! > Sierra Program
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Pedersen = Pedersen [storable: true, drop: false, dup: false, zero_sized: false];

libfunc felt252_const<1> = felt252_const<1>;
libfunc felt252_const<2> = felt252_const<2>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc pedersen = pedersen;
libfunc felt252_const<3> = felt252_const<3>;
libfunc felt252_const<4> = felt252_const<4>;
libfunc store_temp<Pedersen> = store_temp<Pedersen>;

felt252_const<1>() -> ([1]); // 0
felt252_const<2>() -> ([2]); // 1
store_temp<felt252>([1]) -> ([1]); // 2
store_temp<felt252>([2]) -> ([2]); // 3
pedersen([0], [1], [2]) -> ([3], [4]); // 4
felt252_const<3>() -> ([5]); // 5
store_temp<felt252>([4]) -> ([4]); // 6
store_temp<felt252>([5]) -> ([5]); // 7
pedersen([3], [4], [5]) -> ([6], [7]); // 8
felt252_const<4>() -> ([8]); // 9
store_temp<felt252>([7]) -> ([7]); // 10
store_temp<felt252>([8]) -> ([8]); // 11
pedersen([6], [7], [8]) -> ([9], [10]); // 12
store_temp<Pedersen>([9]) -> ([9]); // 13
store_temp<felt252>([10]) -> ([10]); // 14
return([9], [10]); // 15

test::test_pedersen@0([0]: Pedersen) -> (Pedersen, felt252);

//! > Casms Program
[ap + 0] = 1, ap++;
[ap + 0] = 2, ap++;
[ap + -2] = [[fp + -3] + 0];
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = 3, ap++;
[ap + -2] = [[fp + -3] + 3];
[ap + -1] = [[fp + -3] + 4];
[ap + 0] = [[fp + -3] + 5], ap++;
[ap + 0] = 4, ap++;
[ap + -2] = [[fp + -3] + 6];
[ap + -1] = [[fp + -3] + 7];
[ap + 0] = [fp + -3] + 9, ap++;
[ap + 0] = [[fp + -3] + 8], ap++;
ret;

//! > ==========================================================================

//! > Test profiling info of a program with a simple loop

//! > test_runner_name
test_profiling

//! > cairo_code
fn main() {
    let mut n = 5;
    loop {
        if n == 0 {
            break;
        }
        n -= 1;
    }

}

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 25: 18 (withdraw_gas_all([0], [1], [3]) { fallthrough([4], [5]) 47([6], [7]) })
  statement 23: 12 (get_builtin_costs() -> ([3]))
  statement 24: 6 (store_temp<BuiltinCosts>([3]) -> ([3]))
  statement 28: 6 (store_temp<RangeCheck>([4]) -> ([4]))
  statement 29: 6 (felt252_is_zero([8]) { fallthrough() 38([9]) })
  statement 42: 5 (store_temp<RangeCheck>([4]) -> ([4]))
  statement 43: 5 (store_temp<GasBuiltin>([5]) -> ([5]))
  statement 44: 5 (store_temp<felt252>([14]) -> ([14]))
  statement 45: 5 (function_call<user@test::main[expr12]>([4], [5], [14]) -> ([15], [16], [17]))
  statement 46: 5 (return([15], [16], [17]))
  statement 14: 3 (store_temp<core::panics::PanicResult::<((),)>>([11]) -> ([11]))
  statement 36: 3 (store_temp<core::panics::PanicResult::<(core::felt252, ())>>([12]) -> ([12]))
  statement 2: 1 (store_temp<RangeCheck>([0]) -> ([0]))
  statement 3: 1 (store_temp<GasBuiltin>([1]) -> ([1]))
  statement 4: 1 (store_temp<felt252>([2]) -> ([2]))
  statement 5: 1 (function_call<user@test::main[expr12]>([0], [1], [2]) -> ([3], [4], [5]))
  statement 6: 1 (enum_match<core::panics::PanicResult::<(core::felt252, ())>>([5]) { fallthrough([6]) 16([7]) })
  statement 12: 1 (store_temp<RangeCheck>([3]) -> ([3]))
  statement 13: 1 (store_temp<GasBuiltin>([4]) -> ([4]))
  statement 15: 1 (return([3], [4], [11]))
  statement 34: 1 (store_temp<RangeCheck>([4]) -> ([4]))
  statement 35: 1 (store_temp<GasBuiltin>([5]) -> ([5]))
  statement 37: 1 (return([4], [5], [12]))
Weight by concrete libfunc:
  libfunc withdraw_gas_all: 18
  libfunc store_temp<RangeCheck>: 14
  libfunc get_builtin_costs: 12
  libfunc store_temp<GasBuiltin>: 8
  libfunc felt252_is_zero: 6
  libfunc function_call<user@test::main[expr12]>: 6
  libfunc store_temp<BuiltinCosts>: 6
  libfunc store_temp<felt252>: 6
  libfunc store_temp<core::panics::PanicResult::<((),)>>: 3
  libfunc store_temp<core::panics::PanicResult::<(core::felt252, ())>>: 3
  libfunc enum_match<core::panics::PanicResult::<(core::felt252, ())>>: 1
  return: 7
Weight by generic libfunc:
  libfunc store_temp: 40
  libfunc withdraw_gas_all: 18
  libfunc get_builtin_costs: 12
  libfunc felt252_is_zero: 6
  libfunc function_call: 6
  libfunc enum_match: 1
  return: 7
Weight by user function (inc. generated):
  function test::main[expr12]: 79
  function test::main: 11
Weight by original user function (exc. generated):
  function test::main: 90
Weight by Cairo function:
  function lib.cairo::main: 90
Weight by Sierra stack trace:
  test::main: 90
  test::main -> test::main[expr12]: 79
  test::main -> test::main[expr12] -> test::main[expr12]: 66
  test::main -> test::main[expr12] -> test::main[expr12] -> test::main[expr12]: 53
  test::main -> test::main[expr12] -> test::main[expr12] -> test::main[expr12] -> test::main[expr12]: 40
  test::main -> test::main[expr12] -> test::main[expr12] -> test::main[expr12] -> test::main[expr12] -> test::main[expr12]: 27
  test::main -> test::main[expr12] -> test::main[expr12] -> test::main[expr12] -> test::main[expr12] -> test::main[expr12] -> test::main[expr12]: 14
Weight by Cairo stack trace:
  test::main: 90

//! > Sierra Program
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::Panic = Struct<ut@core::panics::Panic> [storable: true, drop: true, dup: true, zero_sized: true];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type NonZero<felt252> = NonZero<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type BuiltinCosts = BuiltinCosts [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Tuple<Unit> = Struct<ut@Tuple, Unit> [storable: true, drop: true, dup: true, zero_sized: true];
type Tuple<core::panics::Panic, Array<felt252>> = Struct<ut@Tuple, core::panics::Panic, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type core::panics::PanicResult::<((),)> = Enum<ut@core::panics::PanicResult::<((),)>, Tuple<Unit>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type Tuple<felt252, Unit> = Struct<ut@Tuple, felt252, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::PanicResult::<(core::felt252, ())> = Enum<ut@core::panics::PanicResult::<(core::felt252, ())>, Tuple<felt252, Unit>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type GasBuiltin = GasBuiltin [storable: true, drop: false, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];

libfunc disable_ap_tracking = disable_ap_tracking;
libfunc felt252_const<5> = felt252_const<5>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc function_call<user@test::main[expr12]> = function_call<user@test::main[expr12]>;
libfunc enum_match<core::panics::PanicResult::<(core::felt252, ())>> = enum_match<core::panics::PanicResult::<(core::felt252, ())>>;
libfunc branch_align = branch_align;
libfunc struct_deconstruct<Tuple<felt252, Unit>> = struct_deconstruct<Tuple<felt252, Unit>>;
libfunc drop<felt252> = drop<felt252>;
libfunc struct_construct<Tuple<Unit>> = struct_construct<Tuple<Unit>>;
libfunc enum_init<core::panics::PanicResult::<((),)>, 0> = enum_init<core::panics::PanicResult::<((),)>, 0>;
libfunc store_temp<core::panics::PanicResult::<((),)>> = store_temp<core::panics::PanicResult::<((),)>>;
libfunc enum_init<core::panics::PanicResult::<((),)>, 1> = enum_init<core::panics::PanicResult::<((),)>, 1>;
libfunc get_builtin_costs = get_builtin_costs;
libfunc store_temp<BuiltinCosts> = store_temp<BuiltinCosts>;
libfunc withdraw_gas_all = withdraw_gas_all;
libfunc dup<felt252> = dup<felt252>;
libfunc felt252_is_zero = felt252_is_zero;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc struct_construct<Tuple<felt252, Unit>> = struct_construct<Tuple<felt252, Unit>>;
libfunc enum_init<core::panics::PanicResult::<(core::felt252, ())>, 0> = enum_init<core::panics::PanicResult::<(core::felt252, ())>, 0>;
libfunc store_temp<core::panics::PanicResult::<(core::felt252, ())>> = store_temp<core::panics::PanicResult::<(core::felt252, ())>>;
libfunc drop<NonZero<felt252>> = drop<NonZero<felt252>>;
libfunc felt252_const<1> = felt252_const<1>;
libfunc felt252_sub = felt252_sub;
libfunc array_new<felt252> = array_new<felt252>;
libfunc felt252_const<375233589013918064796019> = felt252_const<375233589013918064796019>;
libfunc array_append<felt252> = array_append<felt252>;
libfunc struct_construct<core::panics::Panic> = struct_construct<core::panics::Panic>;
libfunc struct_construct<Tuple<core::panics::Panic, Array<felt252>>> = struct_construct<Tuple<core::panics::Panic, Array<felt252>>>;
libfunc enum_init<core::panics::PanicResult::<(core::felt252, ())>, 1> = enum_init<core::panics::PanicResult::<(core::felt252, ())>, 1>;

disable_ap_tracking() -> (); // 0
felt252_const<5>() -> ([2]); // 1
store_temp<RangeCheck>([0]) -> ([0]); // 2
store_temp<GasBuiltin>([1]) -> ([1]); // 3
store_temp<felt252>([2]) -> ([2]); // 4
function_call<user@test::main[expr12]>([0], [1], [2]) -> ([3], [4], [5]); // 5
enum_match<core::panics::PanicResult::<(core::felt252, ())>>([5]) { fallthrough([6]) 16([7]) }; // 6
branch_align() -> (); // 7
struct_deconstruct<Tuple<felt252, Unit>>([6]) -> ([8], [9]); // 8
drop<felt252>([8]) -> (); // 9
struct_construct<Tuple<Unit>>([9]) -> ([10]); // 10
enum_init<core::panics::PanicResult::<((),)>, 0>([10]) -> ([11]); // 11
store_temp<RangeCheck>([3]) -> ([3]); // 12
store_temp<GasBuiltin>([4]) -> ([4]); // 13
store_temp<core::panics::PanicResult::<((),)>>([11]) -> ([11]); // 14
return([3], [4], [11]); // 15
branch_align() -> (); // 16
enum_init<core::panics::PanicResult::<((),)>, 1>([7]) -> ([12]); // 17
store_temp<RangeCheck>([3]) -> ([3]); // 18
store_temp<GasBuiltin>([4]) -> ([4]); // 19
store_temp<core::panics::PanicResult::<((),)>>([12]) -> ([12]); // 20
return([3], [4], [12]); // 21
disable_ap_tracking() -> (); // 22
get_builtin_costs() -> ([3]); // 23
store_temp<BuiltinCosts>([3]) -> ([3]); // 24
withdraw_gas_all([0], [1], [3]) { fallthrough([4], [5]) 47([6], [7]) }; // 25
branch_align() -> (); // 26
dup<felt252>([2]) -> ([2], [8]); // 27
store_temp<RangeCheck>([4]) -> ([4]); // 28
felt252_is_zero([8]) { fallthrough() 38([9]) }; // 29
branch_align() -> (); // 30
struct_construct<Unit>() -> ([10]); // 31
struct_construct<Tuple<felt252, Unit>>([2], [10]) -> ([11]); // 32
enum_init<core::panics::PanicResult::<(core::felt252, ())>, 0>([11]) -> ([12]); // 33
store_temp<RangeCheck>([4]) -> ([4]); // 34
store_temp<GasBuiltin>([5]) -> ([5]); // 35
store_temp<core::panics::PanicResult::<(core::felt252, ())>>([12]) -> ([12]); // 36
return([4], [5], [12]); // 37
branch_align() -> (); // 38
drop<NonZero<felt252>>([9]) -> (); // 39
felt252_const<1>() -> ([13]); // 40
felt252_sub([2], [13]) -> ([14]); // 41
store_temp<RangeCheck>([4]) -> ([4]); // 42
store_temp<GasBuiltin>([5]) -> ([5]); // 43
store_temp<felt252>([14]) -> ([14]); // 44
function_call<user@test::main[expr12]>([4], [5], [14]) -> ([15], [16], [17]); // 45
return([15], [16], [17]); // 46
branch_align() -> (); // 47
drop<felt252>([2]) -> (); // 48
array_new<felt252>() -> ([18]); // 49
felt252_const<375233589013918064796019>() -> ([19]); // 50
store_temp<felt252>([19]) -> ([19]); // 51
array_append<felt252>([18], [19]) -> ([20]); // 52
struct_construct<core::panics::Panic>() -> ([21]); // 53
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([21], [20]) -> ([22]); // 54
enum_init<core::panics::PanicResult::<(core::felt252, ())>, 1>([22]) -> ([23]); // 55
store_temp<RangeCheck>([6]) -> ([6]); // 56
store_temp<GasBuiltin>([7]) -> ([7]); // 57
store_temp<core::panics::PanicResult::<(core::felt252, ())>>([23]) -> ([23]); // 58
return([6], [7], [23]); // 59

test::main@0([0]: RangeCheck, [1]: GasBuiltin) -> (RangeCheck, GasBuiltin, core::panics::PanicResult::<((),)>);
test::main[expr12]@22([0]: RangeCheck, [1]: GasBuiltin, [2]: felt252) -> (RangeCheck, GasBuiltin, core::panics::PanicResult::<(core::felt252, ())>);

//! > Casms Program
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 5, ap++;
call rel 20;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
call rel 50;
[ap + 0] = [ap + -1] + 49, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = 1470 <= memory[fp + -4] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[fp + -4] = [ap + 0] + 1470, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 24;
[fp + -4] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
jmp rel 10 if [fp + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -3], ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -33;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;

//! > ==========================================================================

//! > Test max stack trace depth.

//! > test_runner_name
test_profiling

//! > cairo_code
fn main() {
    foo1();
}
fn foo1() {
  foo2();
  foo2();
}
fn foo2() {
  foo3();
}
fn foo3() {
}

//! > max_stack_trace_depth
2

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 1: 1 (return([0]))
Weight by concrete libfunc:
  return: 1
Weight by generic libfunc:
  return: 1
Weight by user function (inc. generated):
  function test::main: 1
Weight by original user function (exc. generated):
  function test::main: 1
Weight by Cairo function:
  function lib.cairo::main: 1
Weight by Sierra stack trace:
  test::main: 1
Weight by Cairo stack trace:
  test::main: 1

//! > Sierra Program
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];

libfunc struct_construct<Unit> = struct_construct<Unit>;

struct_construct<Unit>() -> ([0]); // 0
return([0]); // 1
struct_construct<Unit>() -> ([0]); // 2
return([0]); // 3
struct_construct<Unit>() -> ([0]); // 4
return([0]); // 5
struct_construct<Unit>() -> ([0]); // 6
return([0]); // 7

test::main@0() -> (Unit);
test::foo1@2() -> (Unit);
test::foo2@4() -> (Unit);
test::foo3@6() -> (Unit);

//! > Casms Program
ret;
ret;
ret;
ret;

//! > ==========================================================================

//! > Test max stack trace depth.2

//! > test_runner_name
test_profiling

//! > cairo_code
fn main() {
    foo1();
}
fn foo1() {
  foo2();
  foo2();
}
fn foo2() {
  foo3();
}
fn foo3() {
}

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 1: 1 (return([0]))
Weight by concrete libfunc:
  return: 1
Weight by generic libfunc:
  return: 1
Weight by user function (inc. generated):
  function test::main: 1
Weight by original user function (exc. generated):
  function test::main: 1
Weight by Cairo function:
  function lib.cairo::main: 1
Weight by Sierra stack trace:
  test::main: 1
Weight by Cairo stack trace:
  test::main: 1

//! > Sierra Program
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];

libfunc struct_construct<Unit> = struct_construct<Unit>;

struct_construct<Unit>() -> ([0]); // 0
return([0]); // 1
struct_construct<Unit>() -> ([0]); // 2
return([0]); // 3
struct_construct<Unit>() -> ([0]); // 4
return([0]); // 5
struct_construct<Unit>() -> ([0]); // 6
return([0]); // 7

test::main@0() -> (Unit);
test::foo1@2() -> (Unit);
test::foo2@4() -> (Unit);
test::foo3@6() -> (Unit);

//! > Casms Program
ret;
ret;
ret;
ret;

//! > ==========================================================================

//! > Test profiling with inlining.

//! > test_runner_name
test_profiling

//! > cairo_code
fn main() {
    foo1();
}
fn foo1() {
  foo2();
}
#[inline(always)]
fn foo2() {
  foo3();
}
fn foo3() {
}

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 1: 1 (return([0]))
Weight by concrete libfunc:
  return: 1
Weight by generic libfunc:
  return: 1
Weight by user function (inc. generated):
  function test::main: 1
Weight by original user function (exc. generated):
  function test::main: 1
Weight by Cairo function:
  function lib.cairo::main: 1
Weight by Sierra stack trace:
  test::main: 1
Weight by Cairo stack trace:
  test::main: 1

//! > Sierra Program
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];

libfunc struct_construct<Unit> = struct_construct<Unit>;

struct_construct<Unit>() -> ([0]); // 0
return([0]); // 1
struct_construct<Unit>() -> ([0]); // 2
return([0]); // 3
struct_construct<Unit>() -> ([0]); // 4
return([0]); // 5
struct_construct<Unit>() -> ([0]); // 6
return([0]); // 7

test::main@0() -> (Unit);
test::foo1@2() -> (Unit);
test::foo2@4() -> (Unit);
test::foo3@6() -> (Unit);

//! > Casms Program
ret;
ret;
ret;
ret;
