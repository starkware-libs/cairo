//! > Test profiling info of enum_flow.sierra

//! > test_runner_name
test_profiling

//! > cairo_code
>>> file: ../../examples/enum_flow.cairo

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 1: 2 (store_temp<test::MyEnumShort>([0]) -> ([0]))
  statement 9: 2 (store_temp<test::MyEnumShort>([3]) -> ([3]))
  statement 17: 2 (store_temp<test::MyEnumLong>([6]) -> ([6]))
  statement 28: 2 (store_temp<test::MyEnumLong>([10]) -> ([10]))
  statement 29: 2 (enum_match<test::MyEnumLong>([10]) { fallthrough([11]) 33([12]) 36([13]) })
  statement 39: 2 (store_temp<test::MyEnumLong>([14]) -> ([14]))
  statement 40: 2 (enum_match<test::MyEnumLong>([14]) { fallthrough([15]) 44([16]) 47([17]) })
  statement 2: 1 (enum_match<test::MyEnumShort>([0]) { fallthrough([1]) 6([2]) })
  statement 5: 1 (jump() { 8() })
  statement 10: 1 (enum_match<test::MyEnumShort>([3]) { fallthrough([4]) 14([5]) })
  statement 18: 1 (enum_match<test::MyEnumLong>([6]) { fallthrough([7]) 22([8]) 25([9]) })
  statement 21: 1 (jump() { 27() })
  statement 35: 1 (jump() { 38() })
  statement 50: 1 (store_temp<felt252>([18]) -> ([18]))
  statement 51: 1 (return([18]))
Weight by concrete libfunc:
  libfunc store_temp<test::MyEnumLong>: 6
  libfunc enum_match<test::MyEnumLong>: 5
  libfunc store_temp<test::MyEnumShort>: 4
  libfunc jump: 3
  libfunc enum_match<test::MyEnumShort>: 2
  libfunc store_temp<felt252>: 1
  return: 1
Weight by generic libfunc:
  libfunc store_temp: 11
  libfunc enum_match: 7
  libfunc jump: 3
  return: 1
Weight by user function (inc. generated):
  function test::main: 22
Weight by original user function (exc. generated):
  function test::main: 22
Weight by Cairo function:
  function lib.cairo::match_long: 13
  function lib.cairo::match_short: 7
  function lib.cairo::main: 2
Weight by Sierra stack trace:
  test::main: 22
Weight by Cairo stack trace:
  test::main: 22

//! > ==========================================================================

//! > Test profiling info of match_or.sierra

//! > test_runner_name
test_profiling

//! > cairo_code
>>> file: ../../examples/match_or.cairo

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 1: 4 (store_temp<test::MyEnum>([1]) -> ([1]))
  statement 28: 4 (store_temp<test::MyEnum>([20]) -> ([20]))
  statement 55: 4 (store_temp<test::MyEnum>([39]) -> ([39]))
  statement 76: 4 (u8_overflowing_add([25], [48], [49]) { fallthrough([53], [54]) 117([55], [56]) })
  statement 82: 4 (store_temp<test::MyEnum>([58]) -> ([58]))
  statement 103: 4 (u8_overflowing_add([44], [67], [68]) { fallthrough([72], [73]) 113([74], [75]) })
  statement 111: 3 (store_temp<core::panics::PanicResult::<((),)>>([79]) -> ([79]))
  statement 29: 2 (enum_match<test::MyEnum>([20]) { fallthrough([21]) 34([22]) 38([23]) 44([24]) })
  statement 56: 2 (enum_match<test::MyEnum>([39]) { fallthrough([40]) 61([41]) 65([42]) 71([43]) })
  statement 83: 2 (enum_match<test::MyEnum>([58]) { fallthrough([59]) 88([60]) 92([61]) 98([62]) })
  statement 2: 1 (enum_match<test::MyEnum>([1]) { fallthrough([2]) 7([3]) 11([4]) 17([5]) })
  statement 3: 1 (branch_align() -> ())
  statement 5: 1 (store_temp<RangeCheck>([0]) -> ([6]))
  statement 6: 1 (jump() { 27() })
  statement 34: 1 (branch_align() -> ())
  statement 36: 1 (store_temp<RangeCheck>([6]) -> ([25]))
  statement 37: 1 (jump() { 54() })
  statement 68: 1 (store_temp<u8>([45]) -> ([48]))
  statement 69: 1 (store_temp<u8>([47]) -> ([49]))
  statement 70: 1 (jump() { 76() })
  statement 80: 1 (store_temp<RangeCheck>([53]) -> ([44]))
  statement 101: 1 (store_temp<u8>([69]) -> ([67]))
  statement 102: 1 (store_temp<u8>([71]) -> ([68]))
  statement 104: 1 (branch_align() -> ())
  statement 107: 1 (store_temp<RangeCheck>([72]) -> ([63]))
  statement 112: 1 (return([63], [79]))
Weight by concrete libfunc:
  libfunc store_temp<test::MyEnum>: 16
  libfunc u8_overflowing_add: 8
  libfunc enum_match<test::MyEnum>: 7
  libfunc store_temp<RangeCheck>: 4
  libfunc store_temp<u8>: 4
  libfunc branch_align: 3
  libfunc jump: 3
  libfunc store_temp<core::panics::PanicResult::<((),)>>: 3
  return: 1
Weight by generic libfunc:
  libfunc store_temp: 27
  libfunc u8_overflowing_add: 8
  libfunc enum_match: 7
  libfunc branch_align: 3
  libfunc jump: 3
  return: 1
Weight by user function (inc. generated):
  function test::main: 49
Weight by original user function (exc. generated):
  function test::main: 49
Weight by Cairo function:
  function lib.cairo::foo: 30
  function core::integer::U8Add::add: 11
  function lib.cairo::main: 8
Weight by Sierra stack trace:
  test::main: 49
Weight by Cairo stack trace:
  test::main: 49

//! > ==========================================================================

//! > Test profiling info of pedersen_test.sierra

//! > test_runner_name
test_profiling

//! > cairo_code
>>> file: ../../examples/pedersen_test.cairo

//! > function_name
test_pedersen

//! > expected_profiling_info
Weight by sierra statement:
  statement 4: 2 (pedersen([0], [1], [2]) -> ([3], [4]))
  statement 8: 2 (pedersen([3], [4], [5]) -> ([6], [7]))
  statement 12: 2 (pedersen([6], [7], [8]) -> ([9], [10]))
  statement 2: 1 (store_temp<felt252>([1]) -> ([1]))
  statement 3: 1 (store_temp<felt252>([2]) -> ([2]))
  statement 6: 1 (store_temp<felt252>([4]) -> ([4]))
  statement 7: 1 (store_temp<felt252>([5]) -> ([5]))
  statement 10: 1 (store_temp<felt252>([7]) -> ([7]))
  statement 11: 1 (store_temp<felt252>([8]) -> ([8]))
  statement 13: 1 (store_temp<Pedersen>([9]) -> ([9]))
  statement 14: 1 (store_temp<felt252>([10]) -> ([10]))
  statement 15: 1 (return([9], [10]))
Weight by concrete libfunc:
  libfunc store_temp<felt252>: 7
  libfunc pedersen: 6
  libfunc store_temp<Pedersen>: 1
  return: 1
Weight by generic libfunc:
  libfunc store_temp: 8
  libfunc pedersen: 6
  return: 1
Weight by user function (inc. generated):
  function test::test_pedersen: 15
Weight by original user function (exc. generated):
  function test::test_pedersen: 15
Weight by Cairo function:
  function lib.cairo::test_pedersen: 15
Weight by Sierra stack trace:
  test::test_pedersen: 15
Weight by Cairo stack trace:
  test::test_pedersen: 15

//! > ==========================================================================

//! > Test profiling info of a program with a simple loop

//! > test_runner_name
test_profiling

//! > cairo_code
fn main() {
    let mut n = 5;
    loop {
        if n == 0 {
            break;
        }
        n -= 1;
    }
}

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 29: 18 (withdraw_gas([0], [1]) { fallthrough([3], [4]) 53([5], [6]) })
  statement 32: 6 (store_temp<RangeCheck>([3]) -> ([3]))
  statement 33: 6 (felt252_is_zero([7]) { fallthrough() 43([8]) })
  statement 48: 5 (store_temp<RangeCheck>([3]) -> ([3]))
  statement 49: 5 (store_temp<GasBuiltin>([13]) -> ([13]))
  statement 50: 5 (store_temp<felt252>([15]) -> ([15]))
  statement 51: 5 (function_call<user@test::main[31-113]>([3], [13], [15]) -> ([16], [17], [18]))
  statement 52: 5 (return([16], [17], [18]))
  statement 13: 3 (store_temp<core::panics::PanicResult::<((),)>>([11]) -> ([11]))
  statement 41: 3 (store_temp<core::panics::PanicResult::<(core::felt252, ())>>([12]) -> ([12]))
  statement 1: 1 (store_temp<RangeCheck>([0]) -> ([0]))
  statement 2: 1 (store_temp<GasBuiltin>([1]) -> ([1]))
  statement 3: 1 (function_call<user@[0]>([0], [1]) -> ([2], [3], [4]))
  statement 4: 1 (enum_match<core::panics::PanicResult::<(core::felt252, ())>>([4]) { fallthrough([5]) 15([6]) })
  statement 11: 1 (store_temp<RangeCheck>([2]) -> ([2]))
  statement 12: 1 (store_temp<GasBuiltin>([7]) -> ([7]))
  statement 14: 1 (return([2], [7], [11]))
  statement 23: 1 (store_temp<RangeCheck>([0]) -> ([0]))
  statement 24: 1 (store_temp<GasBuiltin>([1]) -> ([1]))
  statement 25: 1 (store_temp<felt252>([2]) -> ([2]))
  statement 26: 1 (function_call<user@test::main[31-113]>([0], [1], [2]) -> ([3], [4], [5]))
  statement 27: 1 (return([3], [4], [5]))
  statement 39: 1 (store_temp<RangeCheck>([3]) -> ([3]))
  statement 40: 1 (store_temp<GasBuiltin>([9]) -> ([9]))
  statement 42: 1 (return([3], [9], [12]))
Weight by concrete libfunc:
  libfunc withdraw_gas: 18
  libfunc store_temp<RangeCheck>: 15
  libfunc store_temp<GasBuiltin>: 9
  libfunc felt252_is_zero: 6
  libfunc function_call<user@test::main[31-113]>: 6
  libfunc store_temp<felt252>: 6
  libfunc store_temp<core::panics::PanicResult::<((),)>>: 3
  libfunc store_temp<core::panics::PanicResult::<(core::felt252, ())>>: 3
  libfunc enum_match<core::panics::PanicResult::<(core::felt252, ())>>: 1
  libfunc function_call<user@[0]>: 1
  return: 8
Weight by generic libfunc:
  libfunc store_temp: 36
  libfunc withdraw_gas: 18
  libfunc function_call: 7
  libfunc felt252_is_zero: 6
  libfunc enum_match: 1
  return: 8
Weight by user function (inc. generated):
  function test::main[31-113]: 61
  function test::main: 10
  function [0]: 5
Weight by original user function (exc. generated):
  function test::main: 71
  function test::main[31-113][5, : 5
Weight by Cairo function:
  function lib.cairo::main: 64
  function core::Felt252PartialEq::eq: 12
Weight by Sierra stack trace:
  test::main: 76
  test::main -> [0]: 66
  test::main -> [0] -> test::main[31-113]: 61
  test::main -> [0] -> test::main[31-113] -> test::main[31-113]: 51
  test::main -> [0] -> test::main[31-113] -> test::main[31-113] -> test::main[31-113]: 41
  test::main -> [0] -> test::main[31-113] -> test::main[31-113] -> test::main[31-113] -> test::main[31-113]: 31
  test::main -> [0] -> test::main[31-113] -> test::main[31-113] -> test::main[31-113] -> test::main[31-113] -> test::main[31-113]: 21
  test::main -> [0] -> test::main[31-113] -> test::main[31-113] -> test::main[31-113] -> test::main[31-113] -> test::main[31-113] -> test::main[31-113]: 11
Weight by Cairo stack trace:
  test::main: 76

//! > ==========================================================================

//! > Test max stack trace depth.

//! > test_runner_name
test_profiling

//! > cairo_code
fn main() {
    foo1();
}
fn foo1() {
    foo2();
    foo2();
}
fn foo2() {
    foo3();
}
fn foo3() {}

//! > max_stack_trace_depth
2

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 0: 1 (return())
Weight by concrete libfunc:
  return: 1
Weight by generic libfunc:
  return: 1
Weight by user function (inc. generated):
  function test::main: 1
Weight by original user function (exc. generated):
  function test::main: 1
Weight by Cairo function:
  function unknown: 1
Weight by Sierra stack trace:
  test::main: 1
Weight by Cairo stack trace:
  test::main: 1

//! > ==========================================================================

//! > Test max stack trace depth.2

//! > test_runner_name
test_profiling

//! > cairo_code
fn main() {
    foo1();
}
fn foo1() {
    foo2();
    foo2();
}
fn foo2() {
    foo3();
}
fn foo3() {}

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 0: 1 (return())
Weight by concrete libfunc:
  return: 1
Weight by generic libfunc:
  return: 1
Weight by user function (inc. generated):
  function test::main: 1
Weight by original user function (exc. generated):
  function test::main: 1
Weight by Cairo function:
  function unknown: 1
Weight by Sierra stack trace:
  test::main: 1
Weight by Cairo stack trace:
  test::main: 1

//! > ==========================================================================

//! > Test profiling with inlining.

//! > test_runner_name
test_profiling

//! > cairo_code
fn main() {
    foo1();
}
fn foo1() {
    foo2();
}
#[inline(always)]
fn foo2() {
    foo3();
}
fn foo3() {}

//! > function_name
main

//! > expected_profiling_info
Weight by sierra statement:
  statement 0: 1 (return())
Weight by concrete libfunc:
  return: 1
Weight by generic libfunc:
  return: 1
Weight by user function (inc. generated):
  function test::main: 1
Weight by original user function (exc. generated):
  function test::main: 1
Weight by Cairo function:
  function unknown: 1
Weight by Sierra stack trace:
  test::main: 1
Weight by Cairo stack trace:
  test::main: 1
