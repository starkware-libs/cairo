type felt = felt;
type System = System;
type GasBuiltin = GasBuiltin;
type Unit = Struct<ut@Tuple>;
type core::result::Result::<(), core::felt> = Enum<ut@core::result::Result::<(), core::felt>, Unit, felt>;
type Uninitialized<felt> = Uninitialized<felt>;
type Array<felt> = Array<felt>;
type uint128 = uint128;
type core::bool = Enum<ut@core::bool, Unit, Unit>;
type core::PanicResult::<core::array::Array::<core::felt>> = Enum<ut@core::PanicResult::<core::array::Array::<core::felt>>, Array<felt>, Array<felt>>;
type RangeCheck = RangeCheck;
type core::option::Option::<core::felt> = Enum<ut@core::option::Option::<core::felt>, felt, Unit>;
type StorageAddress = StorageAddress;

libfunc drop<felt> = drop<felt>;
libfunc store_temp<System> = store_temp<System>;
libfunc function_call<user@test_contract::test_contract::my_storage_var::read> = function_call<user@test_contract::test_contract::my_storage_var::read>;
libfunc felt_const<1> = felt_const<1>;
libfunc dup<felt> = dup<felt>;
libfunc felt_add = felt_add;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc rename<felt> = rename<felt>;
libfunc function_call<user@test_contract::test_contract::my_storage_var::write> = function_call<user@test_contract::test_contract::my_storage_var::write>;
libfunc drop<core::result::Result::<(), core::felt>> = drop<core::result::Result::<(), core::felt>>;
libfunc alloc_local<felt> = alloc_local<felt>;
libfunc finalize_locals = finalize_locals;
libfunc array_len<felt> = array_len<felt>;
libfunc uint128_const<3> = uint128_const<3>;
libfunc store_temp<uint128> = store_temp<uint128>;
libfunc rename<uint128> = rename<uint128>;
libfunc function_call<user@core::integer::uint128_ne> = function_call<user@core::integer::uint128_ne>;
libfunc enum_match<core::bool> = enum_match<core::bool>;
libfunc drop<Unit> = drop<Unit>;
libfunc branch_align = branch_align;
libfunc jump = jump;
libfunc drop<Array<felt>> = drop<Array<felt>>;
libfunc drop<Uninitialized<felt>> = drop<Uninitialized<felt>>;
libfunc array_new<felt> = array_new<felt>;
libfunc enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1> = enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::PanicResult::<core::array::Array::<core::felt>>> = store_temp<core::PanicResult::<core::array::Array::<core::felt>>>;
libfunc rename<core::PanicResult::<core::array::Array::<core::felt>>> = rename<core::PanicResult::<core::array::Array::<core::felt>>>;
libfunc uint128_const<0> = uint128_const<0>;
libfunc array_at<felt> = array_at<felt>;
libfunc enum_init<core::option::Option::<core::felt>, 0> = enum_init<core::option::Option::<core::felt>, 0>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc store_temp<Array<felt>> = store_temp<Array<felt>>;
libfunc store_temp<core::option::Option::<core::felt>> = store_temp<core::option::Option::<core::felt>>;
libfunc rename<core::option::Option::<core::felt>> = rename<core::option::Option::<core::felt>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::felt>, 1> = enum_init<core::option::Option::<core::felt>, 1>;
libfunc enum_match<core::option::Option::<core::felt>> = enum_match<core::option::Option::<core::felt>>;
libfunc struct_deconstruct<Unit> = struct_deconstruct<Unit>;
libfunc uint128_const<1> = uint128_const<1>;
libfunc store_local<felt> = store_local<felt>;
libfunc function_call<user@test_contract::test_contract::test> = function_call<user@test_contract::test_contract::test>;
libfunc array_append<felt> = array_append<felt>;
libfunc enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 0> = enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 0>;
libfunc storage_address_const<521780245902522698637863835114646400086704280925471510886115468919502353704> = storage_address_const<521780245902522698637863835114646400086704280925471510886115468919502353704>;
libfunc store_temp<StorageAddress> = store_temp<StorageAddress>;
libfunc storage_read_syscall = storage_read_syscall;
libfunc rename<System> = rename<System>;
libfunc storage_write_syscall = storage_write_syscall;
libfunc enum_init<core::result::Result::<(), core::felt>, 0> = enum_init<core::result::Result::<(), core::felt>, 0>;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc store_temp<core::result::Result::<(), core::felt>> = store_temp<core::result::Result::<(), core::felt>>;
libfunc rename<core::result::Result::<(), core::felt>> = rename<core::result::Result::<(), core::felt>>;
libfunc enum_init<core::result::Result::<(), core::felt>, 1> = enum_init<core::result::Result::<(), core::felt>, 1>;
libfunc uint128_eq = uint128_eq;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc rename<core::bool> = rename<core::bool>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc function_call<user@core::bool_not> = function_call<user@core::bool_not>;
libfunc bool_not_impl = bool_not_impl;

drop<felt>([2]) -> ();
drop<felt>([3]) -> ();
store_temp<System>([1]) -> ([6]);
function_call<user@test_contract::test_contract::my_storage_var::read>([6]) -> ([4], [5]);
felt_const<1>() -> ([7]);
dup<felt>([5]) -> ([5], [18]);
felt_add([18], [7]) -> ([8]);
store_temp<GasBuiltin>([0]) -> ([12]);
store_temp<System>([4]) -> ([13]);
store_temp<felt>([8]) -> ([8]);
rename<felt>([8]) -> ([14]);
function_call<user@test_contract::test_contract::my_storage_var::write>([12], [13], [14]) -> ([9], [10], [11]);
drop<core::result::Result::<(), core::felt>>([11]) -> ();
store_temp<GasBuiltin>([9]) -> ([15]);
store_temp<System>([10]) -> ([16]);
store_temp<felt>([5]) -> ([17]);
return([15], [16], [17]);
alloc_local<felt>() -> ([5]);
finalize_locals() -> ();
array_len<felt>([3]) -> ([6], [7]);
uint128_const<3>() -> ([8]);
store_temp<uint128>([7]) -> ([7]);
rename<uint128>([7]) -> ([10]);
store_temp<uint128>([8]) -> ([11]);
function_call<user@core::integer::uint128_ne>([10], [11]) -> ([9]);
enum_match<core::bool>([9]) { 26([12]) 29([13]) };
drop<Unit>([12]) -> ();
branch_align() -> ();
jump() { 41() };
drop<Array<felt>>([6]) -> ();
drop<Uninitialized<felt>>([5]) -> ();
drop<Unit>([13]) -> ();
branch_align() -> ();
array_new<felt>() -> ([14]);
enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1>([14]) -> ([15]);
store_temp<RangeCheck>([0]) -> ([16]);
store_temp<GasBuiltin>([1]) -> ([17]);
store_temp<System>([2]) -> ([18]);
store_temp<core::PanicResult::<core::array::Array::<core::felt>>>([15]) -> ([15]);
rename<core::PanicResult::<core::array::Array::<core::felt>>>([15]) -> ([19]);
return([16], [17], [18], [19]);
uint128_const<0>() -> ([20]);
store_temp<uint128>([20]) -> ([20]);
array_at<felt>([0], [6], [20]) { fallthrough([21], [22], [23]) 52([24], [25]) };
branch_align() -> ();
enum_init<core::option::Option::<core::felt>, 0>([23]) -> ([26]);
store_temp<RangeCheck>([21]) -> ([21]);
rename<RangeCheck>([21]) -> ([27]);
store_temp<Array<felt>>([22]) -> ([28]);
store_temp<core::option::Option::<core::felt>>([26]) -> ([26]);
rename<core::option::Option::<core::felt>>([26]) -> ([29]);
jump() { 60() };
branch_align() -> ();
struct_construct<Unit>() -> ([30]);
enum_init<core::option::Option::<core::felt>, 1>([30]) -> ([31]);
store_temp<RangeCheck>([24]) -> ([24]);
rename<RangeCheck>([24]) -> ([27]);
store_temp<Array<felt>>([25]) -> ([28]);
store_temp<core::option::Option::<core::felt>>([31]) -> ([31]);
rename<core::option::Option::<core::felt>>([31]) -> ([29]);
enum_match<core::option::Option::<core::felt>>([29]) { 61([32]) 64([33]) };
branch_align() -> ();
store_temp<felt>([32]) -> ([4]);
jump() { 76() };
drop<Uninitialized<felt>>([5]) -> ();
drop<Array<felt>>([28]) -> ();
branch_align() -> ();
struct_deconstruct<Unit>([33]) -> ();
array_new<felt>() -> ([34]);
enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1>([34]) -> ([35]);
store_temp<RangeCheck>([27]) -> ([36]);
store_temp<GasBuiltin>([1]) -> ([37]);
store_temp<System>([2]) -> ([38]);
store_temp<core::PanicResult::<core::array::Array::<core::felt>>>([35]) -> ([35]);
rename<core::PanicResult::<core::array::Array::<core::felt>>>([35]) -> ([39]);
return([36], [37], [38], [39]);
uint128_const<1>() -> ([40]);
store_temp<uint128>([40]) -> ([40]);
store_local<felt>([5], [4]) -> ([4]);
array_at<felt>([27], [28], [40]) { fallthrough([41], [42], [43]) 89([44], [45]) };
branch_align() -> ();
enum_init<core::option::Option::<core::felt>, 0>([43]) -> ([46]);
store_temp<RangeCheck>([41]) -> ([41]);
rename<RangeCheck>([41]) -> ([47]);
store_temp<Array<felt>>([42]) -> ([48]);
drop<Array<felt>>([48]) -> ();
store_temp<core::option::Option::<core::felt>>([46]) -> ([46]);
rename<core::option::Option::<core::felt>>([46]) -> ([49]);
jump() { 98() };
branch_align() -> ();
struct_construct<Unit>() -> ([50]);
enum_init<core::option::Option::<core::felt>, 1>([50]) -> ([51]);
store_temp<RangeCheck>([44]) -> ([44]);
rename<RangeCheck>([44]) -> ([47]);
store_temp<Array<felt>>([45]) -> ([48]);
drop<Array<felt>>([48]) -> ();
store_temp<core::option::Option::<core::felt>>([51]) -> ([51]);
rename<core::option::Option::<core::felt>>([51]) -> ([49]);
enum_match<core::option::Option::<core::felt>>([49]) { 99([52]) 102([53]) };
branch_align() -> ();
store_temp<felt>([52]) -> ([54]);
jump() { 113() };
drop<felt>([4]) -> ();
branch_align() -> ();
struct_deconstruct<Unit>([53]) -> ();
array_new<felt>() -> ([55]);
enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1>([55]) -> ([56]);
store_temp<RangeCheck>([47]) -> ([57]);
store_temp<GasBuiltin>([1]) -> ([58]);
store_temp<System>([2]) -> ([59]);
store_temp<core::PanicResult::<core::array::Array::<core::felt>>>([56]) -> ([56]);
rename<core::PanicResult::<core::array::Array::<core::felt>>>([56]) -> ([60]);
return([57], [58], [59], [60]);
store_temp<GasBuiltin>([1]) -> ([64]);
store_temp<System>([2]) -> ([65]);
store_temp<felt>([4]) -> ([66]);
store_temp<felt>([54]) -> ([67]);
function_call<user@test_contract::test_contract::test>([64], [65], [66], [67]) -> ([61], [62], [63]);
array_new<felt>() -> ([68]);
array_append<felt>([68], [63]) -> ([69]);
enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 0>([69]) -> ([70]);
store_temp<RangeCheck>([47]) -> ([71]);
store_temp<GasBuiltin>([61]) -> ([72]);
store_temp<System>([62]) -> ([73]);
store_temp<core::PanicResult::<core::array::Array::<core::felt>>>([70]) -> ([70]);
rename<core::PanicResult::<core::array::Array::<core::felt>>>([70]) -> ([74]);
return([71], [72], [73], [74]);
storage_address_const<521780245902522698637863835114646400086704280925471510886115468919502353704>() -> ([1]);
store_temp<StorageAddress>([1]) -> ([1]);
storage_read_syscall([0], [1]) -> ([2], [3]);
store_temp<System>([2]) -> ([2]);
rename<System>([2]) -> ([4]);
store_temp<felt>([3]) -> ([5]);
return([4], [5]);
storage_address_const<521780245902522698637863835114646400086704280925471510886115468919502353704>() -> ([3]);
store_temp<StorageAddress>([3]) -> ([3]);
storage_write_syscall([0], [1], [3], [2]) { fallthrough([4], [5]) 147([6], [7], [8]) };
branch_align() -> ();
struct_construct<Unit>() -> ([9]);
enum_init<core::result::Result::<(), core::felt>, 0>([9]) -> ([10]);
store_temp<GasBuiltin>([4]) -> ([4]);
rename<GasBuiltin>([4]) -> ([11]);
store_temp<System>([5]) -> ([5]);
rename<System>([5]) -> ([12]);
store_temp<core::result::Result::<(), core::felt>>([10]) -> ([10]);
rename<core::result::Result::<(), core::felt>>([10]) -> ([13]);
jump() { 155() };
branch_align() -> ();
enum_init<core::result::Result::<(), core::felt>, 1>([8]) -> ([14]);
store_temp<GasBuiltin>([6]) -> ([6]);
rename<GasBuiltin>([6]) -> ([11]);
store_temp<System>([7]) -> ([7]);
rename<System>([7]) -> ([12]);
store_temp<core::result::Result::<(), core::felt>>([14]) -> ([14]);
rename<core::result::Result::<(), core::felt>>([14]) -> ([13]);
rename<GasBuiltin>([11]) -> ([15]);
rename<System>([12]) -> ([16]);
rename<core::result::Result::<(), core::felt>>([13]) -> ([17]);
return([15], [16], [17]);
uint128_eq([0], [1]) { fallthrough() 166() };
branch_align() -> ();
struct_construct<Unit>() -> ([2]);
enum_init<core::bool, 0>([2]) -> ([3]);
store_temp<core::bool>([3]) -> ([3]);
rename<core::bool>([3]) -> ([4]);
jump() { 171() };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 1>([5]) -> ([6]);
store_temp<core::bool>([6]) -> ([6]);
rename<core::bool>([6]) -> ([4]);
rename<core::bool>([4]) -> ([8]);
function_call<user@core::bool_not>([8]) -> ([7]);
rename<core::bool>([7]) -> ([9]);
return([9]);
bool_not_impl([0]) -> ([1]);
store_temp<core::bool>([1]) -> ([1]);
rename<core::bool>([1]) -> ([2]);
return([2]);

test_contract::test_contract::test@0([0]: GasBuiltin, [1]: System, [2]: felt, [3]: felt) -> (GasBuiltin, System, felt);
test_contract::test_contract::__wrapper_test@17([0]: RangeCheck, [1]: GasBuiltin, [2]: System, [3]: Array<felt>) -> (RangeCheck, GasBuiltin, System, core::PanicResult::<core::array::Array::<core::felt>>);
test_contract::test_contract::my_storage_var::read@127([0]: System) -> (System, felt);
test_contract::test_contract::my_storage_var::write@134([0]: GasBuiltin, [1]: System, [2]: felt) -> (GasBuiltin, System, core::result::Result::<(), core::felt>);
core::integer::uint128_ne@159([0]: uint128, [1]: uint128) -> (core::bool);
core::bool_not@175([0]: core::bool) -> (core::bool);
