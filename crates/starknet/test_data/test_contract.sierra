type felt = felt;
type SyscallPtr = SyscallPtr;
type Array<felt> = Array<felt>;
type uint128 = uint128;
type RangeCheck = RangeCheck;
type core::PanicResult::<core::integer::uint128> = Enum<ut@core::PanicResult::<core::integer::uint128>, uint128, Array<felt>>;
type core::PanicResult::<core::array::Array::<core::felt>> = Enum<ut@core::PanicResult::<core::array::Array::<core::felt>>, Array<felt>, Array<felt>>;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;
type core::option::Option::<core::integer::uint128> = Enum<ut@core::option::Option::<core::integer::uint128>, uint128, Unit>;
type Tuple<uint128, uint128> = Struct<ut@Tuple, uint128, uint128>;
type NonZero<felt> = NonZero<felt>;

libfunc felt_const<1> = felt_const<1>;
libfunc store_temp<SyscallPtr> = store_temp<SyscallPtr>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc array_len<felt> = array_len<felt>;
libfunc drop<Array<felt>> = drop<Array<felt>>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc function_call<user@core::integer::uint128_from_felt> = function_call<user@core::integer::uint128_from_felt>;
libfunc store_temp<uint128> = store_temp<uint128>;
libfunc enum_match<core::PanicResult::<core::integer::uint128>> = enum_match<core::PanicResult::<core::integer::uint128>>;
libfunc branch_align = branch_align;
libfunc jump = jump;
libfunc drop<uint128> = drop<uint128>;
libfunc enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1> = enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1>;
libfunc store_temp<core::PanicResult::<core::array::Array::<core::felt>>> = store_temp<core::PanicResult::<core::array::Array::<core::felt>>>;
libfunc rename<core::PanicResult::<core::array::Array::<core::felt>>> = rename<core::PanicResult::<core::array::Array::<core::felt>>>;
libfunc function_call<user@core::integer::uint128_ne> = function_call<user@core::integer::uint128_ne>;
libfunc enum_match<core::bool> = enum_match<core::bool>;
libfunc drop<Unit> = drop<Unit>;
libfunc array_new<felt> = array_new<felt>;
libfunc function_call<user@test_contract::test_contract::test> = function_call<user@test_contract::test_contract::test>;
libfunc store_temp<Array<felt>> = store_temp<Array<felt>>;
libfunc array_append<felt> = array_append<felt>;
libfunc enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 0> = enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 0>;
libfunc function_call<user@core::integer::uint128_try_from_felt> = function_call<user@core::integer::uint128_try_from_felt>;
libfunc enum_match<core::option::Option::<core::integer::uint128>> = enum_match<core::option::Option::<core::integer::uint128>>;
libfunc rename<uint128> = rename<uint128>;
libfunc enum_init<core::PanicResult::<core::integer::uint128>, 1> = enum_init<core::PanicResult::<core::integer::uint128>, 1>;
libfunc store_temp<core::PanicResult::<core::integer::uint128>> = store_temp<core::PanicResult::<core::integer::uint128>>;
libfunc rename<core::PanicResult::<core::integer::uint128>> = rename<core::PanicResult::<core::integer::uint128>>;
libfunc enum_init<core::PanicResult::<core::integer::uint128>, 0> = enum_init<core::PanicResult::<core::integer::uint128>, 0>;
libfunc function_call<user@core::integer::uint128_eq> = function_call<user@core::integer::uint128_eq>;
libfunc rename<core::bool> = rename<core::bool>;
libfunc function_call<user@core::bool_not> = function_call<user@core::bool_not>;
libfunc uint128s_from_felt = uint128s_from_felt;
libfunc enum_init<core::option::Option::<core::integer::uint128>, 0> = enum_init<core::option::Option::<core::integer::uint128>, 0>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc store_temp<core::option::Option::<core::integer::uint128>> = store_temp<core::option::Option::<core::integer::uint128>>;
libfunc rename<core::option::Option::<core::integer::uint128>> = rename<core::option::Option::<core::integer::uint128>>;
libfunc struct_construct<Tuple<uint128, uint128>> = struct_construct<Tuple<uint128, uint128>>;
libfunc drop<Tuple<uint128, uint128>> = drop<Tuple<uint128, uint128>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::integer::uint128>, 1> = enum_init<core::option::Option::<core::integer::uint128>, 1>;
libfunc uint128_to_felt = uint128_to_felt;
libfunc function_call<user@core::felt_eq> = function_call<user@core::felt_eq>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc felt_sub = felt_sub;
libfunc felt_jump_nz = felt_jump_nz;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;

felt_const<1>() -> ([1]);
store_temp<SyscallPtr>([0]) -> ([2]);
store_temp<felt>([1]) -> ([3]);
return([2], [3]);
array_len<felt>([2]) -> ([3], [4]);
drop<Array<felt>>([3]) -> ();
felt_const<1>() -> ([5]);
store_temp<RangeCheck>([0]) -> ([8]);
store_temp<felt>([5]) -> ([9]);
function_call<user@core::integer::uint128_from_felt>([8], [9]) -> ([6], [7]);
store_temp<uint128>([4]) -> ([4]);
enum_match<core::PanicResult::<core::integer::uint128>>([7]) { 12([10]) 15([11]) };
branch_align() -> ();
store_temp<uint128>([10]) -> ([12]);
jump() { 23() };
drop<uint128>([4]) -> ();
branch_align() -> ();
enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1>([11]) -> ([13]);
store_temp<RangeCheck>([6]) -> ([14]);
store_temp<SyscallPtr>([1]) -> ([15]);
store_temp<core::PanicResult::<core::array::Array::<core::felt>>>([13]) -> ([13]);
rename<core::PanicResult::<core::array::Array::<core::felt>>>([13]) -> ([16]);
return([14], [15], [16]);
store_temp<uint128>([4]) -> ([18]);
store_temp<uint128>([12]) -> ([19]);
function_call<user@core::integer::uint128_ne>([18], [19]) -> ([17]);
enum_match<core::bool>([17]) { 27([20]) 30([21]) };
drop<Unit>([20]) -> ();
branch_align() -> ();
jump() { 39() };
drop<Unit>([21]) -> ();
branch_align() -> ();
array_new<felt>() -> ([22]);
enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1>([22]) -> ([23]);
store_temp<RangeCheck>([6]) -> ([24]);
store_temp<SyscallPtr>([1]) -> ([25]);
store_temp<core::PanicResult::<core::array::Array::<core::felt>>>([23]) -> ([23]);
rename<core::PanicResult::<core::array::Array::<core::felt>>>([23]) -> ([26]);
return([24], [25], [26]);
store_temp<SyscallPtr>([1]) -> ([29]);
function_call<user@test_contract::test_contract::test>([29]) -> ([27], [28]);
array_new<felt>() -> ([30]);
store_temp<Array<felt>>([30]) -> ([30]);
array_append<felt>([30], [28]) -> ([31]);
enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 0>([31]) -> ([32]);
store_temp<RangeCheck>([6]) -> ([33]);
store_temp<SyscallPtr>([27]) -> ([34]);
store_temp<core::PanicResult::<core::array::Array::<core::felt>>>([32]) -> ([32]);
rename<core::PanicResult::<core::array::Array::<core::felt>>>([32]) -> ([35]);
return([33], [34], [35]);
store_temp<RangeCheck>([0]) -> ([4]);
store_temp<felt>([1]) -> ([5]);
function_call<user@core::integer::uint128_try_from_felt>([4], [5]) -> ([2], [3]);
enum_match<core::option::Option::<core::integer::uint128>>([3]) { 54([6]) 58([7]) };
branch_align() -> ();
store_temp<uint128>([6]) -> ([8]);
rename<uint128>([8]) -> ([9]);
jump() { 70() };
drop<Unit>([7]) -> ();
branch_align() -> ();
array_new<felt>() -> ([10]);
felt_const<1>() -> ([11]);
store_temp<Array<felt>>([10]) -> ([10]);
store_temp<felt>([11]) -> ([11]);
array_append<felt>([10], [11]) -> ([12]);
enum_init<core::PanicResult::<core::integer::uint128>, 1>([12]) -> ([13]);
store_temp<RangeCheck>([2]) -> ([14]);
store_temp<core::PanicResult::<core::integer::uint128>>([13]) -> ([13]);
rename<core::PanicResult::<core::integer::uint128>>([13]) -> ([15]);
return([14], [15]);
enum_init<core::PanicResult::<core::integer::uint128>, 0>([9]) -> ([16]);
store_temp<RangeCheck>([2]) -> ([17]);
store_temp<core::PanicResult::<core::integer::uint128>>([16]) -> ([16]);
rename<core::PanicResult::<core::integer::uint128>>([16]) -> ([18]);
return([17], [18]);
store_temp<uint128>([0]) -> ([3]);
store_temp<uint128>([1]) -> ([4]);
function_call<user@core::integer::uint128_eq>([3], [4]) -> ([2]);
rename<core::bool>([2]) -> ([6]);
function_call<user@core::bool_not>([6]) -> ([5]);
rename<core::bool>([5]) -> ([7]);
return([7]);
uint128s_from_felt([0], [1]) { fallthrough([2], [3]) 90([4], [5], [6]) };
branch_align() -> ();
enum_init<core::option::Option::<core::integer::uint128>, 0>([3]) -> ([7]);
store_temp<RangeCheck>([2]) -> ([2]);
rename<RangeCheck>([2]) -> ([8]);
store_temp<core::option::Option::<core::integer::uint128>>([7]) -> ([7]);
rename<core::option::Option::<core::integer::uint128>>([7]) -> ([9]);
jump() { 99() };
branch_align() -> ();
struct_construct<Tuple<uint128, uint128>>([5], [6]) -> ([10]);
drop<Tuple<uint128, uint128>>([10]) -> ();
struct_construct<Unit>() -> ([11]);
enum_init<core::option::Option::<core::integer::uint128>, 1>([11]) -> ([12]);
store_temp<RangeCheck>([4]) -> ([4]);
rename<RangeCheck>([4]) -> ([8]);
store_temp<core::option::Option::<core::integer::uint128>>([12]) -> ([12]);
rename<core::option::Option::<core::integer::uint128>>([12]) -> ([9]);
rename<RangeCheck>([8]) -> ([13]);
rename<core::option::Option::<core::integer::uint128>>([9]) -> ([14]);
return([13], [14]);
uint128_to_felt([0]) -> ([2]);
uint128_to_felt([1]) -> ([3]);
store_temp<felt>([2]) -> ([5]);
store_temp<felt>([3]) -> ([6]);
function_call<user@core::felt_eq>([5], [6]) -> ([4]);
rename<core::bool>([4]) -> ([7]);
return([7]);
enum_match<core::bool>([0]) { 110([1]) 117([2]) };
drop<Unit>([1]) -> ();
branch_align() -> ();
struct_construct<Unit>() -> ([3]);
enum_init<core::bool, 1>([3]) -> ([4]);
store_temp<core::bool>([4]) -> ([4]);
rename<core::bool>([4]) -> ([5]);
jump() { 123() };
drop<Unit>([2]) -> ();
branch_align() -> ();
struct_construct<Unit>() -> ([6]);
enum_init<core::bool, 0>([6]) -> ([7]);
store_temp<core::bool>([7]) -> ([7]);
rename<core::bool>([7]) -> ([5]);
rename<core::bool>([5]) -> ([8]);
return([8]);
felt_sub([0], [1]) -> ([2]);
store_temp<felt>([2]) -> ([2]);
felt_jump_nz([2]) { fallthrough() 134([3]) };
branch_align() -> ();
struct_construct<Unit>() -> ([4]);
enum_init<core::bool, 1>([4]) -> ([5]);
store_temp<core::bool>([5]) -> ([5]);
rename<core::bool>([5]) -> ([6]);
jump() { 140() };
drop<NonZero<felt>>([3]) -> ();
branch_align() -> ();
struct_construct<Unit>() -> ([7]);
enum_init<core::bool, 0>([7]) -> ([8]);
store_temp<core::bool>([8]) -> ([8]);
rename<core::bool>([8]) -> ([6]);
rename<core::bool>([6]) -> ([9]);
return([9]);

test_contract::test_contract::test@0([0]: SyscallPtr) -> (SyscallPtr, felt);
test_contract::test_contract::__wrapper_test@4([0]: RangeCheck, [1]: SyscallPtr, [2]: Array<felt>) -> (RangeCheck, SyscallPtr, core::PanicResult::<core::array::Array::<core::felt>>);
core::integer::uint128_from_felt@50([0]: RangeCheck, [1]: felt) -> (RangeCheck, core::PanicResult::<core::integer::uint128>);
core::integer::uint128_ne@75([0]: uint128, [1]: uint128) -> (core::bool);
core::integer::uint128_try_from_felt@82([0]: RangeCheck, [1]: felt) -> (RangeCheck, core::option::Option::<core::integer::uint128>);
core::integer::uint128_eq@102([0]: uint128, [1]: uint128) -> (core::bool);
core::bool_not@109([0]: core::bool) -> (core::bool);
core::felt_eq@125([0]: felt, [1]: felt) -> (core::bool);
