type felt = felt;
type System = System;
type Uninitialized<felt> = Uninitialized<felt>;
type Array<felt> = Array<felt>;
type uint128 = uint128;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;
type core::PanicResult::<core::array::Array::<core::felt>> = Enum<ut@core::PanicResult::<core::array::Array::<core::felt>>, Array<felt>, Array<felt>>;
type RangeCheck = RangeCheck;
type core::option::Option::<core::felt> = Enum<ut@core::option::Option::<core::felt>, felt, Unit>;
type StorageAddress = StorageAddress;
type NonZero<felt> = NonZero<felt>;

libfunc drop<felt> = drop<felt>;
libfunc store_temp<System> = store_temp<System>;
libfunc function_call<user@test_contract::test_contract::my_storage_var::read> = function_call<user@test_contract::test_contract::my_storage_var::read>;
libfunc rename<System> = rename<System>;
libfunc rename<felt> = rename<felt>;
libfunc alloc_local<felt> = alloc_local<felt>;
libfunc finalize_locals = finalize_locals;
libfunc array_len<felt> = array_len<felt>;
libfunc uint128_const<3> = uint128_const<3>;
libfunc store_temp<uint128> = store_temp<uint128>;
libfunc rename<uint128> = rename<uint128>;
libfunc function_call<user@core::integer::uint128_ne> = function_call<user@core::integer::uint128_ne>;
libfunc enum_match<core::bool> = enum_match<core::bool>;
libfunc drop<Unit> = drop<Unit>;
libfunc branch_align = branch_align;
libfunc jump = jump;
libfunc drop<Array<felt>> = drop<Array<felt>>;
libfunc drop<Uninitialized<felt>> = drop<Uninitialized<felt>>;
libfunc array_new<felt> = array_new<felt>;
libfunc enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1> = enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::PanicResult::<core::array::Array::<core::felt>>> = store_temp<core::PanicResult::<core::array::Array::<core::felt>>>;
libfunc rename<core::PanicResult::<core::array::Array::<core::felt>>> = rename<core::PanicResult::<core::array::Array::<core::felt>>>;
libfunc uint128_const<0> = uint128_const<0>;
libfunc array_at<felt> = array_at<felt>;
libfunc enum_init<core::option::Option::<core::felt>, 0> = enum_init<core::option::Option::<core::felt>, 0>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc store_temp<Array<felt>> = store_temp<Array<felt>>;
libfunc store_temp<core::option::Option::<core::felt>> = store_temp<core::option::Option::<core::felt>>;
libfunc rename<core::option::Option::<core::felt>> = rename<core::option::Option::<core::felt>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::felt>, 1> = enum_init<core::option::Option::<core::felt>, 1>;
libfunc enum_match<core::option::Option::<core::felt>> = enum_match<core::option::Option::<core::felt>>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc struct_deconstruct<Unit> = struct_deconstruct<Unit>;
libfunc uint128_const<1> = uint128_const<1>;
libfunc store_local<felt> = store_local<felt>;
libfunc function_call<user@test_contract::test_contract::test> = function_call<user@test_contract::test_contract::test>;
libfunc array_append<felt> = array_append<felt>;
libfunc enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 0> = enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 0>;
libfunc storage_address_const<521780245902522698637863835114646400086704280925471510886115468919502353704> = storage_address_const<521780245902522698637863835114646400086704280925471510886115468919502353704>;
libfunc store_temp<StorageAddress> = store_temp<StorageAddress>;
libfunc storage_read_syscall = storage_read_syscall;
libfunc function_call<user@core::integer::uint128_eq> = function_call<user@core::integer::uint128_eq>;
libfunc rename<core::bool> = rename<core::bool>;
libfunc function_call<user@core::bool_not> = function_call<user@core::bool_not>;
libfunc uint128_to_felt = uint128_to_felt;
libfunc function_call<user@core::felt_eq> = function_call<user@core::felt_eq>;
libfunc bool_not_impl = bool_not_impl;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc felt_sub = felt_sub;
libfunc felt_jump_nz = felt_jump_nz;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;

drop<felt>([1]) -> ();
drop<felt>([2]) -> ();
store_temp<System>([0]) -> ([5]);
function_call<user@test_contract::test_contract::my_storage_var::read>([5]) -> ([3], [4]);
rename<System>([3]) -> ([6]);
rename<felt>([4]) -> ([7]);
return([6], [7]);
alloc_local<felt>() -> ([4]);
finalize_locals() -> ();
array_len<felt>([2]) -> ([5], [6]);
uint128_const<3>() -> ([7]);
store_temp<uint128>([6]) -> ([6]);
rename<uint128>([6]) -> ([9]);
store_temp<uint128>([7]) -> ([10]);
function_call<user@core::integer::uint128_ne>([9], [10]) -> ([8]);
enum_match<core::bool>([8]) { 16([11]) 19([12]) };
drop<Unit>([11]) -> ();
branch_align() -> ();
jump() { 30() };
drop<Array<felt>>([5]) -> ();
drop<Uninitialized<felt>>([4]) -> ();
drop<Unit>([12]) -> ();
branch_align() -> ();
array_new<felt>() -> ([13]);
enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1>([13]) -> ([14]);
store_temp<RangeCheck>([0]) -> ([15]);
store_temp<System>([1]) -> ([16]);
store_temp<core::PanicResult::<core::array::Array::<core::felt>>>([14]) -> ([14]);
rename<core::PanicResult::<core::array::Array::<core::felt>>>([14]) -> ([17]);
return([15], [16], [17]);
uint128_const<0>() -> ([18]);
store_temp<uint128>([18]) -> ([18]);
array_at<felt>([0], [5], [18]) { fallthrough([19], [20], [21]) 41([22], [23]) };
branch_align() -> ();
enum_init<core::option::Option::<core::felt>, 0>([21]) -> ([24]);
store_temp<RangeCheck>([19]) -> ([19]);
rename<RangeCheck>([19]) -> ([25]);
store_temp<Array<felt>>([20]) -> ([26]);
store_temp<core::option::Option::<core::felt>>([24]) -> ([24]);
rename<core::option::Option::<core::felt>>([24]) -> ([27]);
jump() { 49() };
branch_align() -> ();
struct_construct<Unit>() -> ([28]);
enum_init<core::option::Option::<core::felt>, 1>([28]) -> ([29]);
store_temp<RangeCheck>([22]) -> ([22]);
rename<RangeCheck>([22]) -> ([25]);
store_temp<Array<felt>>([23]) -> ([26]);
store_temp<core::option::Option::<core::felt>>([29]) -> ([29]);
rename<core::option::Option::<core::felt>>([29]) -> ([27]);
enum_match<core::option::Option::<core::felt>>([27]) { 50([30]) 53([31]) };
branch_align() -> ();
store_temp<felt>([30]) -> ([3]);
jump() { 64() };
drop<Uninitialized<felt>>([4]) -> ();
drop<Array<felt>>([26]) -> ();
branch_align() -> ();
struct_deconstruct<Unit>([31]) -> ();
array_new<felt>() -> ([32]);
enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1>([32]) -> ([33]);
store_temp<RangeCheck>([25]) -> ([34]);
store_temp<System>([1]) -> ([35]);
store_temp<core::PanicResult::<core::array::Array::<core::felt>>>([33]) -> ([33]);
rename<core::PanicResult::<core::array::Array::<core::felt>>>([33]) -> ([36]);
return([34], [35], [36]);
uint128_const<1>() -> ([37]);
store_temp<uint128>([37]) -> ([37]);
store_local<felt>([4], [3]) -> ([3]);
array_at<felt>([25], [26], [37]) { fallthrough([38], [39], [40]) 77([41], [42]) };
branch_align() -> ();
enum_init<core::option::Option::<core::felt>, 0>([40]) -> ([43]);
store_temp<RangeCheck>([38]) -> ([38]);
rename<RangeCheck>([38]) -> ([44]);
store_temp<Array<felt>>([39]) -> ([45]);
drop<Array<felt>>([45]) -> ();
store_temp<core::option::Option::<core::felt>>([43]) -> ([43]);
rename<core::option::Option::<core::felt>>([43]) -> ([46]);
jump() { 86() };
branch_align() -> ();
struct_construct<Unit>() -> ([47]);
enum_init<core::option::Option::<core::felt>, 1>([47]) -> ([48]);
store_temp<RangeCheck>([41]) -> ([41]);
rename<RangeCheck>([41]) -> ([44]);
store_temp<Array<felt>>([42]) -> ([45]);
drop<Array<felt>>([45]) -> ();
store_temp<core::option::Option::<core::felt>>([48]) -> ([48]);
rename<core::option::Option::<core::felt>>([48]) -> ([46]);
enum_match<core::option::Option::<core::felt>>([46]) { 87([49]) 90([50]) };
branch_align() -> ();
store_temp<felt>([49]) -> ([51]);
jump() { 100() };
drop<felt>([3]) -> ();
branch_align() -> ();
struct_deconstruct<Unit>([50]) -> ();
array_new<felt>() -> ([52]);
enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1>([52]) -> ([53]);
store_temp<RangeCheck>([44]) -> ([54]);
store_temp<System>([1]) -> ([55]);
store_temp<core::PanicResult::<core::array::Array::<core::felt>>>([53]) -> ([53]);
rename<core::PanicResult::<core::array::Array::<core::felt>>>([53]) -> ([56]);
return([54], [55], [56]);
store_temp<System>([1]) -> ([59]);
store_temp<felt>([3]) -> ([60]);
store_temp<felt>([51]) -> ([61]);
function_call<user@test_contract::test_contract::test>([59], [60], [61]) -> ([57], [58]);
array_new<felt>() -> ([62]);
store_temp<Array<felt>>([62]) -> ([62]);
array_append<felt>([62], [58]) -> ([63]);
enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 0>([63]) -> ([64]);
store_temp<RangeCheck>([44]) -> ([65]);
store_temp<System>([57]) -> ([66]);
store_temp<core::PanicResult::<core::array::Array::<core::felt>>>([64]) -> ([64]);
rename<core::PanicResult::<core::array::Array::<core::felt>>>([64]) -> ([67]);
return([65], [66], [67]);
storage_address_const<521780245902522698637863835114646400086704280925471510886115468919502353704>() -> ([1]);
store_temp<StorageAddress>([1]) -> ([1]);
storage_read_syscall([0], [1]) -> ([2], [3]);
store_temp<System>([2]) -> ([2]);
rename<System>([2]) -> ([4]);
store_temp<felt>([3]) -> ([5]);
return([4], [5]);
store_temp<uint128>([0]) -> ([3]);
store_temp<uint128>([1]) -> ([4]);
function_call<user@core::integer::uint128_eq>([3], [4]) -> ([2]);
rename<core::bool>([2]) -> ([6]);
function_call<user@core::bool_not>([6]) -> ([5]);
rename<core::bool>([5]) -> ([7]);
return([7]);
uint128_to_felt([0]) -> ([2]);
uint128_to_felt([1]) -> ([3]);
store_temp<felt>([2]) -> ([5]);
store_temp<felt>([3]) -> ([6]);
function_call<user@core::felt_eq>([5], [6]) -> ([4]);
rename<core::bool>([4]) -> ([7]);
return([7]);
bool_not_impl([0]) -> ([1]);
store_temp<core::bool>([1]) -> ([1]);
rename<core::bool>([1]) -> ([2]);
return([2]);
felt_sub([0], [1]) -> ([2]);
store_temp<felt>([2]) -> ([2]);
felt_jump_nz([2]) { fallthrough() 147([3]) };
branch_align() -> ();
struct_construct<Unit>() -> ([4]);
enum_init<core::bool, 1>([4]) -> ([5]);
store_temp<core::bool>([5]) -> ([5]);
rename<core::bool>([5]) -> ([6]);
jump() { 153() };
drop<NonZero<felt>>([3]) -> ();
branch_align() -> ();
struct_construct<Unit>() -> ([7]);
enum_init<core::bool, 0>([7]) -> ([8]);
store_temp<core::bool>([8]) -> ([8]);
rename<core::bool>([8]) -> ([6]);
rename<core::bool>([6]) -> ([9]);
return([9]);

test_contract::test_contract::test@0([0]: System, [1]: felt, [2]: felt) -> (System, felt);
test_contract::test_contract::__wrapper_test@7([0]: RangeCheck, [1]: System, [2]: Array<felt>) -> (RangeCheck, System, core::PanicResult::<core::array::Array::<core::felt>>);
test_contract::test_contract::my_storage_var::read@113([0]: System) -> (System, felt);
core::integer::uint128_ne@120([0]: uint128, [1]: uint128) -> (core::bool);
core::integer::uint128_eq@127([0]: uint128, [1]: uint128) -> (core::bool);
core::bool_not@134([0]: core::bool) -> (core::bool);
core::felt_eq@138([0]: felt, [1]: felt) -> (core::bool);
