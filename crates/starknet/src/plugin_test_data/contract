//! > Test expansion of a simple starknet contract.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[contract]
mod TestContract {
    fn internal_func() -> felt {
        1
    }

    #[view]
    fn get_something(ref arg: felt, num: felt) -> felt {
        1
    }
    #[external]
    fn set_something(ref arg: felt, num: felt) {
    }
}

//! > generated_cairo_code
mod __generated__TestContract {
    fn internal_func() -> felt {
        1
    }

    #[view]
    fn get_something(ref arg: felt, num: felt) -> felt {
        1
    }
    #[external]
    fn set_something(ref arg: felt, num: felt) {
    }
    trait __abi {
    fn get_something(
        ref arg: felt, num: felt
        ) -> felt; fn set_something(
        ref arg: felt, num: felt
    ); }
    mod __external {
        fn get_something(mut data: Array::<felt>) -> Array::<felt> {
            match get_gas() {
                Option::Some(_) => {
                },
                Option::None(_) => {
                    let mut err_data = array_new::<felt>();
                    array_append::<felt>(err_data, 'Out of gas');
                    panic(err_data);
                },
            }
            if array_len::<felt>(data) != 2_u128 {
                let mut err_data = array_new::<felt>();
                array_append::<felt>(err_data, 'Wrong number of arguments');
                panic(err_data);
            }
            let mut __arg_arg: felt = match array_at::<felt>(data, 0_u128) {
                Option::Some(x) => x,
                Option::None(()) => panic(array_new::<felt>()),
            };
            let __arg_num: felt = match array_at::<felt>(data, 1_u128) {
                Option::Some(x) => x,
                Option::None(()) => panic(array_new::<felt>()),
            };
            let res = super::get_something(__arg_arg, __arg_num);
            let mut arr = array_new::<felt>();
            array_append::<felt>(arr, __arg_arg);
            array_append::<felt>(arr, res);
            arr
        }
        fn set_something(mut data: Array::<felt>) -> Array::<felt> {
            match get_gas() {
                Option::Some(_) => {
                },
                Option::None(_) => {
                    let mut err_data = array_new::<felt>();
                    array_append::<felt>(err_data, 'Out of gas');
                    panic(err_data);
                },
            }
            if array_len::<felt>(data) != 2_u128 {
                let mut err_data = array_new::<felt>();
                array_append::<felt>(err_data, 'Wrong number of arguments');
                panic(err_data);
            }
            let mut __arg_arg: felt = match array_at::<felt>(data, 0_u128) {
                Option::Some(x) => x,
                Option::None(()) => panic(array_new::<felt>()),
            };
            let __arg_num: felt = match array_at::<felt>(data, 1_u128) {
                Option::Some(x) => x,
                Option::None(()) => panic(array_new::<felt>()),
            };
            super::set_something(__arg_arg, __arg_num);
            let mut arr = array_new::<felt>();
            array_append::<felt>(arr, __arg_arg);
            arr
        }
    }
}

//! > expected_diagnostics
