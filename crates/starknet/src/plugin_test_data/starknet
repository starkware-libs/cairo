//! > Test expansion of a simple starknet contract.

//! > test_function_name
test_expand_contract

//! > cairo_code
trait ITestContract { func test(ref syscall_ptr: SyscallPtr, ref arg: felt, ref num: felt) -> felt; }

#[ContractImpl]
impl TestContractImpl of ITestContract {
    func test(ref syscall_ptr: SyscallPtr, ref arg: felt, num: felt) -> felt {
        1
    }
}

#[contract(TestContractImpl)]
struct TestContract {
    storage_var: felt,
}

//! > generated_cairo_code
func test(ref syscall_ptr: SyscallPtr, ref arg: felt, num: felt) -> felt {
    1
}
func __wrapper_test(ref syscall_ptr: SyscallPtr, mut data: Array::<felt>) -> Array::<felt> {
    if array::array_len::<felt>(data) != integer::uint128_from_felt(3) {
        panic(array::array_new::<felt>());
    }
    let mut __arg_arg: felt = match array::array_at::<felt>(data, 0) {
        Some(x) => x,
        None(()) => panic(array::array_new::<felt>()),
    };
    let __arg_num: felt = match array::array_at::<felt>(data, 1) {
        Some(x) => x,
        None(()) => panic(array::array_new::<felt>()),
    };
    let res = test(syscall_ptr, __arg_arg, __arg_num);
    let mut arr = array::array_new::<felt>();
    array::array_append::<felt>(arr, __arg_arg);
    array::array_append::<felt>(arr, res);
    arr
}

func get_storage_var(ref syscall_ptr: SyscallPtr) -> felt {
    starknet::storage_read_syscall(
        syscall_ptr,
        starknet::storage_address_const::<0x37fe6583f0b27bf0827d87f21c448b20f8709dfc8e4efbdddb75a0b443df714>()
    )
}
