//! > Test expansion of the hello_starknet contract.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[contract]
mod HelloStarknet {
    struct Storage { balance: felt, }

    // Increases the balance by the given amount.
    #[external]
    fn increase_balance(ref system: System, amount: felt) {
        let res = super::balance::read(system);
        super::balance::write(system, res + amount);
    }

    // Returns the current balance.
    #[view]
    fn get_balance(ref system: System) -> felt {
        super::balance::read(system)
    }
}

//! > generated_cairo_code
mod balance {
    fn read(ref system: System) -> felt {
        starknet::storage_read_syscall(
            system,
            starknet::storage_address_const::<0x206f38f7e4f15e87567361213c28f235cccdaa1d7fd34c9db1dfe9489c6a091>()
        )
    }
    fn write(ref system: System, value: felt) -> Result::<(), felt> {
        starknet::storage_write_syscall(
            system,
            starknet::storage_address_const::<0x206f38f7e4f15e87567361213c28f235cccdaa1d7fd34c9db1dfe9489c6a091>(),
            value
        )
    }
}
mod __generated__HelloStarknet {
    struct Storage { balance: felt, }

    // Increases the balance by the given amount.
    #[external]
    fn increase_balance(ref system: System, amount: felt) {
        let res = super::balance::read(system);
        super::balance::write(system, res + amount);
    }

    // Returns the current balance.
    #[view]
    fn get_balance(ref system: System) -> felt {
        super::balance::read(system)
    }
    mod __external {
        fn increase_balance(ref system: System, mut data: Array::<felt>) -> Array::<felt> {
            match get_gas() {
                Option::Some(_) => {
                },
                Option::None(_) => {
                    let mut err_data = array_new::<felt>();
                    array_append::<felt>(err_data, 'OOG');
                    panic(err_data);
                },
            }
            if array_len::<felt>(data) != 2_u128 {
                let mut err_data = array_new::<felt>();
                array_append::<felt>(err_data, 'Wrong number of arguments');
                panic(err_data);
            }
            let __arg_amount: felt = match array_at::<felt>(data, 0_u128) {
                Option::Some(x) => x,
                Option::None(()) => panic(array_new::<felt>()),
            };
            super::increase_balance(system, __arg_amount);
            let mut arr = array_new::<felt>();
            arr
        }
        fn get_balance(ref system: System, mut data: Array::<felt>) -> Array::<felt> {
            match get_gas() {
                Option::Some(_) => {
                },
                Option::None(_) => {
                    let mut err_data = array_new::<felt>();
                    array_append::<felt>(err_data, 'OOG');
                    panic(err_data);
                },
            }
            if array_len::<felt>(data) != 1_u128 {
                let mut err_data = array_new::<felt>();
                array_append::<felt>(err_data, 'Wrong number of arguments');
                panic(err_data);
            }
            let res = super::get_balance(system,);
            let mut arr = array_new::<felt>();
            array_append::<felt>(arr, res);
            arr
        }
    }
}

//! > expected_diagnostics
