//! > Test ignoring of test config in the test config.

//! > test_runner_name
test_expand_plugin(allow_diagnostics: false)

//! > cfg
["a", "b", ["k", "a"], ["k", "b"]]

//! > cairo_code
fn f0() -> felt252 { 0 }

#[cfg(a)]
fn f1() -> felt252 { 0 }

#[cfg(X)]
fn f2() -> felt252 { 0 }

#[cfg(k: 'a')]
fn f3() -> felt252 { 0 }

#[cfg(k: 'X')]
fn f4() -> felt252 { 0 }

#[cfg(a, b)]
fn f5() -> felt252 { 0 }

#[cfg(a, b, c)]
fn f6() -> felt252 { 0 }

#[cfg(k: 'a', k: 'b')]
fn f7() -> felt252 { 0 }

#[cfg(k: 'a', k: 'b', k: 'c')]
fn f8() -> felt252 { 0 }

#[cfg(a)]
#[cfg(b)]
fn f9() -> felt252 { 0 }

#[cfg(a)]
#[cfg(c)]
#[cfg(b)]
fn f10() -> felt252 { 0 }

trait RemoveTraitItem {
    fn f0();
    #[cfg(a)]
    fn f1();
    #[cfg(X)]
    fn f2();
    #[cfg(k: 'a')]
    fn f3();
    #[cfg(k: 'X')]
    fn f4();
    #[cfg(a, b)]
    fn f5();
    #[cfg(a, b, c)]
    fn f6();
    #[cfg(k: 'a', k: 'b')]
    fn f7();
    #[cfg(k: 'a', k: 'b', k: 'c')]
    fn f8();
    #[cfg(a)]
    #[cfg(b)]
    fn f9();
    #[cfg(a)]
    #[cfg(c)]
    #[cfg(b)]
    fn f10();
}

impl RemoveTraitItem of SomeTrait {
    fn f0() {}
    #[cfg(a)]
    fn f1() {}
    #[cfg(X)]
    fn f2() {}
    #[cfg(k: 'a')]
    fn f3() {}
    #[cfg(k: 'X')]
    fn f4() {}
    #[cfg(a, b)]
    fn f5() {}
    #[cfg(a, b, c)]
    fn f6() {}
    #[cfg(k: 'a', k: 'b')]
    fn f7() {}
    #[cfg(k: 'a', k: 'b', k: 'c')]
    fn f8() {}
    #[cfg(a)]
    #[cfg(b)]
    fn f9() {}
    #[cfg(a)]
    #[cfg(c)]
    #[cfg(b)]
    fn f10() {}
}

mod remove_module_item {
    fn f0() -> felt252 { 0 }
    #[cfg(a)]
    fn f1() -> felt252 { 0 }
    #[cfg(X)]
    fn f2() -> felt252 { 0 }
    #[cfg(k: 'a')]
    fn f3() -> felt252 { 0 }
    #[cfg(k: 'X')]
    fn f4() -> felt252 { 0 }
    #[cfg(a, b)]
    fn f5() -> felt252 { 0 }
    #[cfg(a, b, c)]
    fn f6() -> felt252 { 0 }
    #[cfg(k: 'a', k: 'b')]
    fn f7() -> felt252 { 0 }
    #[cfg(k: 'a', k: 'b', k: 'c')]
    fn f8() -> felt252 { 0 }
    #[cfg(a)]
    #[cfg(b)]
    fn f9() -> felt252 { 0 }
    #[cfg(a)]
    #[cfg(c)]
    #[cfg(b)]
    fn f10() -> felt252 { 0 }
}

//! > generated_cairo_code
fn f0() -> felt252 { 0 }


#[cfg(a)]
fn f1() -> felt252 { 0 }


#[cfg(k: 'a')]
fn f3() -> felt252 { 0 }


#[cfg(a, b)]
fn f5() -> felt252 { 0 }


#[cfg(k: 'a', k: 'b')]
fn f7() -> felt252 { 0 }


#[cfg(a)]
#[cfg(b)]
fn f9() -> felt252 { 0 }


trait RemoveTraitItem {
    fn f0();
    #[cfg(a)]
    fn f1();
    #[cfg(k: 'a')]
    fn f3();
    #[cfg(a, b)]
    fn f5();
    #[cfg(k: 'a', k: 'b')]
    fn f7();
    #[cfg(a)]
    #[cfg(b)]
    fn f9();
}


impl RemoveTraitItem of SomeTrait {
    fn f0() {}
    #[cfg(a)]
    fn f1() {}
    #[cfg(k: 'a')]
    fn f3() {}
    #[cfg(a, b)]
    fn f5() {}
    #[cfg(k: 'a', k: 'b')]
    fn f7() {}
    #[cfg(a)]
    #[cfg(b)]
    fn f9() {}
}


mod remove_module_item {
    fn f0() -> felt252 { 0 }
    #[cfg(a)]
    fn f1() -> felt252 { 0 }
    #[cfg(k: 'a')]
    fn f3() -> felt252 { 0 }
    #[cfg(a, b)]
    fn f5() -> felt252 { 0 }
    #[cfg(k: 'a', k: 'b')]
    fn f7() -> felt252 { 0 }
    #[cfg(a)]
    #[cfg(b)]
    fn f9() -> felt252 { 0 }
}

//! > expected_diagnostics
