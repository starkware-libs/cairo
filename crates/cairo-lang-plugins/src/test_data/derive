//! > Test expansion of derive.

//! > test_runner_name
test_expand_plugin

//! > cairo_code
#[derive(Copy, Drop)]
struct A{}

#[derive(Copy, Drop)]
struct B{}

#[derive(Clone, PartialEq)]
struct TwoMemberStruct {
    a: A,
    b: B,
}

#[derive(Clone, PartialEq)]
enum TwoVariantEnum {
    First: A,
    Second: B,
}

#[derive(Copy, Drop)]
extern type ExternType;

//! > generated_cairo_code
#[derive(Copy, Drop)]
struct A{}

impl ACopy of Copy::<A>;
impl ADrop of Drop::<A>;


#[derive(Copy, Drop)]
struct B{}

impl BCopy of Copy::<B>;
impl BDrop of Drop::<B>;


#[derive(Clone, PartialEq)]
struct TwoMemberStruct {
    a: A,
    b: B,
}

impl TwoMemberStructClone of Clone::<TwoMemberStruct> {
    fn clone(self: @TwoMemberStruct) -> TwoMemberStruct {
        TwoMemberStruct {
            a: self.a.clone(),
            b: self.b.clone(),
        }
    }
}
impl TwoMemberStructPartialEq of PartialEq::<TwoMemberStruct> {
    #[inline(always)]
    fn eq(lhs: TwoMemberStruct, rhs: TwoMemberStruct) -> bool {
        if lhs.a != rhs.a { return false; }
        if lhs.b != rhs.b { return false; }
        true
    }
    #[inline(always)]
    fn ne(lhs: TwoMemberStruct, rhs: TwoMemberStruct) -> bool {
        !(lhs == rhs)
    }
}


#[derive(Clone, PartialEq)]
enum TwoVariantEnum {
    First: A,
    Second: B,
}

impl TwoVariantEnumClone of Clone::<TwoVariantEnum> {
    fn clone(self: @TwoVariantEnum) -> TwoVariantEnum {
        match self {
            TwoVariantEnum::First(x) => TwoVariantEnum::First(x.clone()),
            TwoVariantEnum::Second(x) => TwoVariantEnum::Second(x.clone()),
        }
    }
}
impl TwoVariantEnumPartialEq of PartialEq::<TwoVariantEnum> {
    fn eq(lhs: TwoVariantEnum, rhs: TwoVariantEnum) -> bool {
        match lhs {
            TwoVariantEnum::First(x) => match rhs {
                TwoVariantEnum::First(y) => x == y,
                TwoVariantEnum::Second(y) => false,
            },
            TwoVariantEnum::Second(x) => match rhs {
                TwoVariantEnum::First(y) => false,
                TwoVariantEnum::Second(y) => x == y,
            },
        }
    }
    #[inline(always)]
    fn ne(lhs: TwoVariantEnum, rhs: TwoVariantEnum) -> bool {
        !(lhs == rhs)
    }
}


#[derive(Copy, Drop)]
extern type ExternType;
impl ExternTypeCopy of Copy::<ExternType>;
impl ExternTypeDrop of Drop::<ExternType>;

//! > expected_diagnostics

//! > ==========================================================================

//! > Test diagnostics of derive.

//! > test_runner_name
test_expand_plugin

//! > cairo_code
#[derive()]
struct EmptyArgs{}

#[derive(1)]
struct NotPath{}

#[derive(Unsupported)]
struct UnsupportedTrait{}

#[derive(long::path)]
struct NonSimplePath{}

#[derive(Clone)]
extern type NotClonable;

//! > generated_cairo_code

//! > expected_diagnostics
error: Expected path.
 --> dummy_file.cairo:4:10
#[derive(1)]
         ^

error: Unsupported trait for derive.
 --> dummy_file.cairo:7:10
#[derive(Unsupported)]
         ^*********^

error: Expected a single segment.
 --> dummy_file.cairo:10:10
#[derive(long::path)]
         ^********^

error: Unsupported trait for derive for extern types.
 --> dummy_file.cairo:13:10
#[derive(Clone)]
         ^***^
