//! > Test expansion of derive.

//! > test_runner_name
test_expand_plugin(allow_diagnostics: false)

//! > cairo_code
#[derive(Copy, Default, Drop, Hash)]
struct A{}

#[derive(Copy, Default, Drop, Hash)]
struct B{}

#[derive(Clone, Default, Destruct, Hash, PanicDestruct, PartialEq, Serde)]
struct TwoMemberStruct {
    a: A,
    b: B,
}

#[derive(Copy, Destruct, PanicDestruct, Default, Hash)]
struct GenericStruct<T> {
    a: T,
}


trait SomeTrait<T, U> {}

#[derive(Drop, Clone, PartialEq, Serde, Hash)]
struct TwoMemberGenericStruct<T, U, impl USomeTrait: SomeTrait<U, T>> {
    a: T,
    b: U,
}

#[derive(Clone, Default, Destruct, Hash, PanicDestruct, PartialEq, Serde)]
enum TwoVariantEnum {
    First: A,
    #[default]
    Second: B,
}

#[derive(Copy, Drop)]
extern type ExternType;

//! > generated_cairo_code
#[derive(Copy, Default, Drop, Hash)]
struct A{}

impl ACopy of Copy::<A>;
impl ADefault of Default::<A> {
    fn default() -> A {
        A {
            
        }
    }
}
impl ADrop of Drop::<A>;
impl AHash<
    __State,
    impl __SHashState: hash::HashStateTrait<__State>,
    impl SDrop: Drop<__State>
> of hash::Hash<A, __State, __SHashState> {
    #[inline(always)]
    fn update_state(state: __State, value: A) -> __State {
        
        state
    }
}


#[derive(Copy, Default, Drop, Hash)]
struct B{}

impl BCopy of Copy::<B>;
impl BDefault of Default::<B> {
    fn default() -> B {
        B {
            
        }
    }
}
impl BDrop of Drop::<B>;
impl BHash<
    __State,
    impl __SHashState: hash::HashStateTrait<__State>,
    impl SDrop: Drop<__State>
> of hash::Hash<B, __State, __SHashState> {
    #[inline(always)]
    fn update_state(state: __State, value: B) -> __State {
        
        state
    }
}


#[derive(Clone, Default, Destruct, Hash, PanicDestruct, PartialEq, Serde)]
struct TwoMemberStruct {
    a: A,
    b: B,
}

impl TwoMemberStructClone of Clone::<TwoMemberStruct> {
    fn clone(self: @TwoMemberStruct) -> TwoMemberStruct {
        TwoMemberStruct {
            a: Clone::clone(self.a),
            b: Clone::clone(self.b),
        }
    }
}
impl TwoMemberStructDefault of Default::<TwoMemberStruct> {
    fn default() -> TwoMemberStruct {
        TwoMemberStruct {
            a: traits::Default::default(),
            b: traits::Default::default(),
        }
    }
}
impl TwoMemberStructDestruct of Destruct::<TwoMemberStruct> {
    fn destruct(self: TwoMemberStruct) nopanic {
        let TwoMemberStruct { a, b } = self;
        traits::Destruct::destruct(a);
        traits::Destruct::destruct(b);
    }
}
impl TwoMemberStructHash<
    __State,
    impl __SHashState: hash::HashStateTrait<__State>,
    impl SDrop: Drop<__State>
> of hash::Hash<TwoMemberStruct, __State, __SHashState> {
    #[inline(always)]
    fn update_state(state: __State, value: TwoMemberStruct) -> __State {
        let state = hash::Hash::update_state(state, value.a);
        let state = hash::Hash::update_state(state, value.b);
        state
    }
}
impl TwoMemberStructPanicDestruct of PanicDestruct::<TwoMemberStruct> {
    fn panic_destruct(self: TwoMemberStruct, ref panic: Panic) nopanic {
        let TwoMemberStruct { a, b } = self;
        traits::PanicDestruct::panic_destruct(a, ref panic);
        traits::PanicDestruct::panic_destruct(b, ref panic);
    }
}
impl TwoMemberStructPartialEq of PartialEq::<TwoMemberStruct> {
    fn eq(lhs: @TwoMemberStruct, rhs: @TwoMemberStruct) -> bool {
        lhs.a == rhs.a && lhs.b == rhs.b
    }
    #[inline(always)]
    fn ne(lhs: @TwoMemberStruct, rhs: @TwoMemberStruct) -> bool {
        !(lhs == rhs)
    }
}
impl TwoMemberStructSerde of Serde::<TwoMemberStruct> {
    fn serialize(self: @TwoMemberStruct, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.a, ref output);
        serde::Serde::serialize(self.b, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<TwoMemberStruct> {
        Option::Some(TwoMemberStruct {
            a: serde::Serde::deserialize(ref serialized)?,
            b: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


#[derive(Copy, Destruct, PanicDestruct, Default, Hash)]
struct GenericStruct<T> {
    a: T,
}

impl GenericStructCopy<T, impl TCopy: Copy<T>> of Copy::<GenericStruct<T>>;
impl GenericStructDestruct<T, impl TDestruct: Destruct<T>> of Destruct::<GenericStruct<T>> {
    fn destruct(self: GenericStruct<T>) nopanic {
        let GenericStruct { a } = self;
        traits::Destruct::destruct(a);
    }
}
impl GenericStructPanicDestruct<T, impl TPanicDestruct: PanicDestruct<T>> of PanicDestruct::<GenericStruct<T>> {
    fn panic_destruct(self: GenericStruct<T>, ref panic: Panic) nopanic {
        let GenericStruct { a } = self;
        traits::PanicDestruct::panic_destruct(a, ref panic);
    }
}
impl GenericStructDefault<T, impl TDefault: Default<T>, impl TDestruct: Destruct<T>> of Default::<GenericStruct<T>> {
    fn default() -> GenericStruct<T> {
        GenericStruct {
            a: traits::Default::default(),
        }
    }
}
impl GenericStructHash<
    __State,
    impl __SHashState: hash::HashStateTrait<__State>,
    impl SDrop: Drop<__State>T, impl THash: Hash<T>, impl TDrop: Drop<T>
> of hash::Hash<GenericStruct<T>, __State, __SHashState> {
    #[inline(always)]
    fn update_state(state: __State, value: GenericStruct<T>) -> __State {
        let state = hash::Hash::update_state(state, value.a);
        state
    }
}



trait SomeTrait<T, U> {}


#[derive(Drop, Clone, PartialEq, Serde, Hash)]
struct TwoMemberGenericStruct<T, U, impl USomeTrait: SomeTrait<U, T>> {
    a: T,
    b: U,
}

impl TwoMemberGenericStructDrop<T, U, impl USomeTrait: SomeTrait<U, T>, impl TDrop: Drop<T>, impl UDrop: Drop<U>> of Drop::<TwoMemberGenericStruct<T, U, USomeTrait>>;
impl TwoMemberGenericStructClone<T, U, impl USomeTrait: SomeTrait<U, T>, impl TClone: Clone<T>, impl TDestruct: Destruct<T>, impl UClone: Clone<U>, impl UDestruct: Destruct<U>> of Clone::<TwoMemberGenericStruct<T, U, USomeTrait>> {
    fn clone(self: @TwoMemberGenericStruct<T, U, USomeTrait>) -> TwoMemberGenericStruct<T, U, USomeTrait> {
        TwoMemberGenericStruct {
            a: Clone::clone(self.a),
            b: Clone::clone(self.b),
        }
    }
}
impl TwoMemberGenericStructPartialEq<T, U, impl USomeTrait: SomeTrait<U, T>, impl TPartialEq: PartialEq<T>, impl UPartialEq: PartialEq<U>> of PartialEq::<TwoMemberGenericStruct<T, U, USomeTrait>> {
    fn eq(lhs: @TwoMemberGenericStruct<T, U, USomeTrait>, rhs: @TwoMemberGenericStruct<T, U, USomeTrait>) -> bool {
        lhs.a == rhs.a && lhs.b == rhs.b
    }
    #[inline(always)]
    fn ne(lhs: @TwoMemberGenericStruct<T, U, USomeTrait>, rhs: @TwoMemberGenericStruct<T, U, USomeTrait>) -> bool {
        !(lhs == rhs)
    }
}
impl TwoMemberGenericStructSerde<T, U, impl USomeTrait: SomeTrait<U, T>, impl TSerde: Serde<T>, impl TDestruct: Destruct<T>, impl USerde: Serde<U>, impl UDestruct: Destruct<U>> of Serde::<TwoMemberGenericStruct<T, U, USomeTrait>> {
    fn serialize(self: @TwoMemberGenericStruct<T, U, USomeTrait>, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.a, ref output);
        serde::Serde::serialize(self.b, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<TwoMemberGenericStruct<T, U, USomeTrait>> {
        Option::Some(TwoMemberGenericStruct {
            a: serde::Serde::deserialize(ref serialized)?,
            b: serde::Serde::deserialize(ref serialized)?,
        })
    }
}
impl TwoMemberGenericStructHash<
    __State,
    impl __SHashState: hash::HashStateTrait<__State>,
    impl SDrop: Drop<__State>T, U, impl USomeTrait: SomeTrait<U, T>, impl THash: Hash<T>, impl TDrop: Drop<T>, impl UHash: Hash<U>, impl UDrop: Drop<U>
> of hash::Hash<TwoMemberGenericStruct<T, U, USomeTrait>, __State, __SHashState> {
    #[inline(always)]
    fn update_state(state: __State, value: TwoMemberGenericStruct<T, U, USomeTrait>) -> __State {
        let state = hash::Hash::update_state(state, value.a);
        let state = hash::Hash::update_state(state, value.b);
        state
    }
}


#[derive(Clone, Default, Destruct, Hash, PanicDestruct, PartialEq, Serde)]
enum TwoVariantEnum {
    First: A,
    #[default]
    Second: B,
}

impl TwoVariantEnumClone of Clone::<TwoVariantEnum> {
    fn clone(self: @TwoVariantEnum) -> TwoVariantEnum {
        match self {
            TwoVariantEnum::First(x) => TwoVariantEnum::First(Clone::clone(x)),
            TwoVariantEnum::Second(x) => TwoVariantEnum::Second(Clone::clone(x)),
        }
    }
}
impl TwoVariantEnumDefault of Default::<TwoVariantEnum> {
    fn default() -> TwoVariantEnum {
        TwoVariantEnum::Second(traits::Default::default())
    }
}
impl TwoVariantEnumDestruct of Destruct::<TwoVariantEnum> {
    fn destruct(self: TwoVariantEnum) nopanic {
        match self {
            TwoVariantEnum::First(x) => traits::Destruct::destruct(x),
            TwoVariantEnum::Second(x) => traits::Destruct::destruct(x),
        }
    }
}
impl TwoVariantEnumHash<
    __State,
    impl __SHashState: hash::HashStateTrait<__State>,
    impl SDrop: Drop<__State>
> of hash::Hash<TwoVariantEnum, __State, __SHashState> {
    #[inline(always)]
    fn update_state(state: __State, value: TwoVariantEnum) -> __State {
        match value {
            TwoVariantEnum::First(x) => {
                let state = hash::Hash::update_state(state, @0);
                hash::Hash::update_state(state, x)
            },
            TwoVariantEnum::Second(x) => {
                let state = hash::Hash::update_state(state, @1);
                hash::Hash::update_state(state, x)
            },
        }
    }
}
impl TwoVariantEnumPanicDestruct of PanicDestruct::<TwoVariantEnum> {
    fn panic_destruct(self: TwoVariantEnum, ref panic: Panic) nopanic {
        match self {
            TwoVariantEnum::First(x) => traits::PanicDestruct::panic_destruct(x, ref panic),
            TwoVariantEnum::Second(x) => traits::PanicDestruct::panic_destruct(x, ref panic),
        }
    }
}
impl TwoVariantEnumPartialEq of PartialEq::<TwoVariantEnum> {
    fn eq(lhs: @TwoVariantEnum, rhs: @TwoVariantEnum) -> bool {
        match lhs {
            TwoVariantEnum::First(x) => match rhs {
                TwoVariantEnum::First(y) => x == y,
                TwoVariantEnum::Second(y) => false,
            },
            TwoVariantEnum::Second(x) => match rhs {
                TwoVariantEnum::First(y) => false,
                TwoVariantEnum::Second(y) => x == y,
            },
        }
    }
    #[inline(always)]
    fn ne(lhs: @TwoVariantEnum, rhs: @TwoVariantEnum) -> bool {
        !(lhs == rhs)
    }
}
impl TwoVariantEnumSerde of Serde::<TwoVariantEnum> {
    fn serialize(self: @TwoVariantEnum, ref output: array::Array<felt252>) {
        match self {
            TwoVariantEnum::First(x) => { serde::Serde::serialize(@0, ref output); serde::Serde::serialize(x, ref output); },
            TwoVariantEnum::Second(x) => { serde::Serde::serialize(@1, ref output); serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<TwoVariantEnum> {
        let idx: felt252 = serde::Serde::deserialize(ref serialized)?;
        Option::Some(
            if idx == 0 { TwoVariantEnum::First(serde::Serde::deserialize(ref serialized)?) }
            else if idx == 1 { TwoVariantEnum::Second(serde::Serde::deserialize(ref serialized)?) }
            else { return Option::None; }
        )
    }
}


#[derive(Copy, Drop)]
extern type ExternType;
impl ExternTypeCopy of Copy::<ExternType>;
impl ExternTypeDrop of Drop::<ExternType>;

//! > expected_diagnostics

//! > ==========================================================================

//! > Test diagnostics of derive.

//! > test_runner_name
test_expand_plugin(allow_diagnostics: true)

//! > cairo_code
#[derive()]
struct EmptyArgs{}

#[derive(1)]
struct NotPath{}

#[derive(Unsupported)]
struct UnsupportedTrait{}

#[derive(long::path)]
struct NonSimplePath{}

#[derive(Clone)]
extern type NotClonable;

#[derive(Default)]
enum NoDefaultValue {
    First,
    Second,
}

#[derive(Default)]
enum TooManyDefaultValues {
    #[default]
    First,
    #[default]
    Second,
}

//! > generated_cairo_code
#[derive()]
struct EmptyArgs{}


#[derive(1)]
struct NotPath{}


#[derive(Unsupported)]
struct UnsupportedTrait{}


#[derive(long::path)]
struct NonSimplePath{}


#[derive(Clone)]
extern type NotClonable;


#[derive(Default)]
enum NoDefaultValue {
    First,
    Second,
}


#[derive(Default)]
enum TooManyDefaultValues {
    #[default]
    First,
    #[default]
    Second,
}
impl TooManyDefaultValuesDefault of Default::<TooManyDefaultValues> {
    fn default() -> TooManyDefaultValues {
        TooManyDefaultValues::First(traits::Default::default())
    }
}

//! > expected_diagnostics
error: Expected args.
 --> dummy_file.cairo:1:9
#[derive()]
        ^^

error: Expected path.
 --> dummy_file.cairo:4:10
#[derive(1)]
         ^

error: Unsupported trait for derive for extern types.
 --> dummy_file.cairo:13:10
#[derive(Clone)]
         ^***^

error: derive `Default` for enum only supported with a default variant.
 --> dummy_file.cairo:16:10
#[derive(Default)]
         ^*****^

error: Multiple variants annotated with `#[default]`
 --> dummy_file.cairo:26:5
    #[default]
    ^********^
