//! > Test trait.

//! > test_function_name
test_function_diagnostics

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
struct A {}
trait MyTrait<T> {
    fn param_test(ref a: u128) -> bad_type nopanic;

    fn no_ret_ty(a: u128) -> felt;
}
impl MyImpl of MyTrait::<A>;
impl MyImpl2<T> of MyTrait::<T> {
    mod a;
    use b;
    extern fn extern_func() nopanic;
    extern type DummyType;

    trait DummyTrait;
    impl DummyImpl of MyTrait::<T>;

    struct DummyStruct {}

    enum DummyEnum {}

    fn my_bar() {

    }

    fn param_test(a: felt, b: felt, c: felt) -> u128 {

    }

    fn no_ret_ty(ref a: u128) {

    }
}

//! > expected_diagnostics
error: Type not found.
 --> lib.cairo:3:35
    fn param_test(ref a: u128) -> bad_type nopanic;
                                  ^******^

error: impl body is not supported yet.
 --> lib.cairo:8:33
impl MyImpl2<T> of MyTrait::<T> {
                                ^

//! > ==========================================================================

//! > Test enum generics failures.

//! > test_function_name
test_function_diagnostics

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
struct A {}
trait MyTrait<T>;
impl MyImpl3 of NonExistingTrait;
impl MyImpl4 of foo;

//! > expected_diagnostics
error: Trait not found.
 --> lib.cairo:3:17
impl MyImpl3 of NonExistingTrait;
                ^**************^

error: Not a trait.
 --> lib.cairo:4:17
impl MyImpl4 of foo;
                ^*^

//! > ==========================================================================

//! > Test copy and dup impls.

//! > test_function_name
test_function_diagnostics

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
struct Linear {}

struct A {}
enum B {}
struct C { x: felt, y: Linear }
enum D { X: felt, Y: Linear }
extern type E;

impl ACopy of Copy::<A>;
impl ADrop of Drop::<A>;
impl BCopy of Copy::<B>;
impl BDrop of Drop::<B>;
impl CCopy of Copy::<C>;
impl CDrop of Drop::<C>;
impl DCopy of Copy::<D>;
impl DDrop of Drop::<D>;
impl ECopy of Copy::<E>;
impl EDrop of Drop::<E>;
impl TCopy of Copy::<()>;
impl TDrop of Drop::<()>;
impl T2Copy of Copy::<(felt, Linear)>;
impl T2Drop of Drop::<(felt, Linear)>;

//! > expected_diagnostics
error: Invalid copy trait implementation.
 --> lib.cairo:13:1
impl CCopy of Copy::<C>;
^**********************^

error: Invalid drop trait implementation.
 --> lib.cairo:14:1
impl CDrop of Drop::<C>;
^**********************^

error: Invalid copy trait implementation.
 --> lib.cairo:15:1
impl DCopy of Copy::<D>;
^**********************^

error: Invalid drop trait implementation.
 --> lib.cairo:16:1
impl DDrop of Drop::<D>;
^**********************^

error: Invalid copy trait implementation.
 --> lib.cairo:21:1
impl T2Copy of Copy::<(felt, Linear)>;
^************************************^

error: Invalid drop trait implementation.
 --> lib.cairo:22:1
impl T2Drop of Drop::<(felt, Linear)>;
^************************************^

//! > ==========================================================================

//! > Mutable param is no allowed in trait functions.

//! > test_function_name
test_function_diagnostics

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
trait MyTrait<T> {
    fn f(mut a: felt);
}

//! > expected_diagnostics
error: Parameter of trait function `MyTrait::f` can't be defined as mutable.
 --> lib.cairo:2:10
    fn f(mut a: felt);
         ^*^

//! > ==========================================================================

//! > Impl function param can be mutable or immutable.

//! > test_function_name
test_function_diagnostics

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
trait MyTrait<T> {
   fn f(a: felt);
}
impl MyImpl<T> of MyTrait::<T> {
   fn f(a: felt) {}
}
impl MyImpl2<T> of MyTrait::<T> {
   fn f(mut a: felt) {}
}

//! > expected_diagnostics
error: impl body is not supported yet.
 --> lib.cairo:4:32
impl MyImpl<T> of MyTrait::<T> {
                               ^

error: impl body is not supported yet.
 --> lib.cairo:7:33
impl MyImpl2<T> of MyTrait::<T> {
                                ^

//! > ==========================================================================

//! > Test trait function with body.

//! > test_function_name
test_function_diagnostics

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
trait MyTrait {
   fn foo() {}
}

//! > expected_diagnostics
error: Trait function `MyTrait::foo` has a body. Trait functions with body are not supported.
 --> lib.cairo:2:13
   fn foo() {}
            ^^
