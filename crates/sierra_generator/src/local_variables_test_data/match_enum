//! > Match enum

//! > test_function_name
check_find_local_variables

//! > function_name
foo

//! > function_code
func foo(x: MyEnum) -> felt {
  let w1 = 2;
  let y = match x {
    MyEnum::A(a) => {
      revoke_ap()
      a + a
    },
    MyEnum::B(b) => {
      // 'b' is not revoked.
      b + b + b
    }
  };
  // 'w1' is revoked because of the revoke_ap() inside the match.
  let w2 = w1 + w1;
  revoke_ap();
  // 'y' is revoked.
  y
}

//! > module_code
// Revokes ap since this function is recursive.
func revoke_ap() -> felt {
    revoke_ap()
}

enum MyEnum {
  A: felt,
  B: felt,
}

//! > lowering_format
blk0:
Inputs: v4: core::felt
Statements:
Drops:
End:
  Callsite(v4)

blk1:
Inputs: v5: core::felt
Statements:
  (v6: core::PanicResult::<core::felt>) <- PanicResult::Ok(v5)
Drops: v5, v3, v2, v0, v1
End:
  Return(v6)

blk2:
Inputs:
Statements:
  (v3: core::PanicResult::<core::felt>) <- test_crate::revoke_ap()
  (v7: core::felt) <- match_enum(v3) {
    PanicResult::Ok => blk0,
    PanicResult::Ok => blk1,
  }
  (v8: core::felt) <- core::felt_add(v2, v2)
  (v9: core::PanicResult::<core::felt>) <- PanicResult::Ok(v8)
Drops: v7, v8
End:
  Callsite(v9)

blk3:
Inputs:
Statements:
  (v13: core::felt) <- core::felt_add(v12, v12)
  (v14: core::felt) <- core::felt_add(v13, v12)
  (v15: core::PanicResult::<core::felt>) <- PanicResult::Ok(v14)
Drops: v14, v13
End:
  Callsite(v15)

blk4:
Inputs: v2: core::felt
Statements:
  (v10: core::PanicResult::<core::felt>) <- blk2()
  (v11: core::PanicResult::<core::felt>) <- PanicResult::Ok(v10)
Drops: v2
End:
  Callsite(v11)

blk5:
Inputs: v12: core::felt
Statements:
  (v16: core::PanicResult::<core::felt>) <- blk3()
  (v17: core::PanicResult::<core::felt>) <- PanicResult::Ok(v16)
Drops: v12
End:
  Callsite(v17)

blk6:
Inputs: v21: core::felt
Statements:
Drops:
End:
  Callsite(v21)

blk7:
Inputs: v22: core::felt
Statements:
  (v23: core::PanicResult::<core::felt>) <- PanicResult::Ok(v22)
Drops: v22, v1, v18, v19, v20
End:
  Return(v23)

blk8:
Inputs: v0: test_crate::MyEnum
Statements:
  (v1: core::felt) <- 2u
  (v18: core::PanicResult::<core::felt>) <- match_enum(v0) {
    MyEnum::A => blk4,
    MyEnum::B => blk5,
  }
  (v19: core::felt) <- core::felt_add(v1, v1)
  (v20: core::PanicResult::<core::felt>) <- test_crate::revoke_ap()
  (v24: core::felt) <- match_enum(v20) {
    PanicResult::Ok => blk6,
    PanicResult::Ok => blk7,
  }
  (v25: core::PanicResult::<core::felt>) <- PanicResult::Ok(v18)
Drops: v1, v24, v19
End:
  Callsite(v25)

//! > local_variables
v2, v1, v18

//! > ==========================================================================

//! > Match enum early return

//! > test_function_name
check_find_local_variables

//! > function_name
foo

//! > function_code
func foo(x: MyEnum, z: felt) -> felt {
    let w1 = z + z;
    match x {
        MyEnum::A(a) => {
            revoke_ap()
            return 0;
        },
        MyEnum::B(b) => {
            b + b + b
        }
    };

    // w1 is not revoked.
    let w2 = w1 + z;

    match x {
        MyEnum::A(a) => {
            // Same as above, without revoke_ap() and without an early return.
            a
        },
        MyEnum::B(b) => {
            b + b + b
        }
    };

    // w2 is revoked.
    w2 + z
}

//! > module_code
// Revokes ap since this function is recursive.
func revoke_ap() -> felt {
    revoke_ap()
}

enum MyEnum {
  A: felt,
  B: felt,
}
impl MyEnumCopy of Copy::<MyEnum>;

//! > lowering_format
blk0:
Inputs: v5: core::felt
Statements:
Drops:
End:
  Callsite(v5)

blk1:
Inputs: v6: core::felt
Statements:
  (v7: core::PanicResult::<core::felt>) <- PanicResult::Ok(v6)
Drops: v6, v4, v3, v0, v1, v2
End:
  Return(v7)

blk2:
Inputs:
Statements:
  (v4: core::PanicResult::<core::felt>) <- test_crate::revoke_ap()
  (v8: core::felt) <- match_enum(v4) {
    PanicResult::Ok => blk0,
    PanicResult::Ok => blk1,
  }
  (v9: core::felt) <- 0u
  (v10: core::PanicResult::<core::felt>) <- PanicResult::Ok(v9)
Drops: v8, v9, v3, v0, v1, v2
End:
  Return(v10)

blk3:
Inputs:
Statements:
  (v12: core::felt) <- core::felt_add(v11, v11)
  (v13: core::felt) <- core::felt_add(v12, v11)
  (v14: core::PanicResult::<core::felt>) <- PanicResult::Ok(v13)
Drops: v13, v12
End:
  Callsite(v14)

blk4:
Inputs: v3: core::felt
Statements:
  () <- blk2()
Drops:
End:
  Unreachable

blk5:
Inputs: v11: core::felt
Statements:
  (v15: core::PanicResult::<core::felt>) <- blk3()
  (v16: core::PanicResult::<core::felt>) <- PanicResult::Ok(v15)
Drops: v11
End:
  Callsite(v16)

blk6:
Inputs:
Statements:
  (v20: core::PanicResult::<core::felt>) <- PanicResult::Ok(v19)
Drops:
End:
  Callsite(v20)

blk7:
Inputs:
Statements:
  (v24: core::felt) <- core::felt_add(v23, v23)
  (v25: core::felt) <- core::felt_add(v24, v23)
  (v26: core::PanicResult::<core::felt>) <- PanicResult::Ok(v25)
Drops: v25, v24
End:
  Callsite(v26)

blk8:
Inputs: v19: core::felt
Statements:
  (v21: core::PanicResult::<core::felt>) <- blk6()
  (v22: core::PanicResult::<core::felt>) <- PanicResult::Ok(v21)
Drops: v19
End:
  Callsite(v22)

blk9:
Inputs: v23: core::felt
Statements:
  (v27: core::PanicResult::<core::felt>) <- blk7()
  (v28: core::PanicResult::<core::felt>) <- PanicResult::Ok(v27)
Drops: v23
End:
  Callsite(v28)

blk10:
Inputs: v0: test_crate::MyEnum, v1: core::felt
Statements:
  (v2: core::felt) <- core::felt_add(v1, v1)
  (v17: core::PanicResult::<core::felt>) <- match_enum(v0) {
    MyEnum::A => blk4,
    MyEnum::B => blk5,
  }
  (v18: core::felt) <- core::felt_add(v2, v1)
  (v29: core::PanicResult::<core::felt>) <- match_enum(v0) {
    MyEnum::A => blk8,
    MyEnum::B => blk9,
  }
  (v30: core::felt) <- core::felt_add(v18, v1)
  (v31: core::PanicResult::<core::felt>) <- PanicResult::Ok(v30)
Drops: v0, v1, v2, v17, v18, v29, v30
End:
  Callsite(v31)

//! > local_variables
v18
