//! > No cycles.

//! > test_function_name
contains_cycles_test

//! > module_code
func non_cyclic() -> felt {
    non_cyclic2()
}

func non_cyclic2() -> felt {
    0
}

//! > result
non_cyclic: ap_change=Ok(Known { new_vars_only: false }), has_cycles=Ok(false)
non_cyclic2: ap_change=Ok(Known { new_vars_only: false }), has_cycles=Ok(false)

//! > ==========================================================================

//! > Simple cycle.

//! > test_function_name
contains_cycles_test

//! > module_code
func simple_cycle(x: felt) -> felt {
    if x == 0 {
        {
            return simple_cycle(x);
        }
    }
    0
}

func calls_simple_cycle(x: felt) -> felt {
    simple_cycle(x)
}

//! > result
simple_cycle: ap_change=Ok(Unknown), has_cycles=Ok(true)
calls_simple_cycle: ap_change=Ok(Unknown), has_cycles=Ok(true)

//! > ==========================================================================

//! > Longer cycle.

//! > test_function_name
contains_cycles_test

//! > module_code
// a calls b, which then calls a.
func cycle_of_len2_a(x: felt) -> felt {
    cycle_of_len2_b(x)
}

func cycle_of_len2_b(x: felt) -> felt {
    cycle_of_len2_a(x)
}

func call_cycle_of_len2(x: felt) -> felt {
    cycle_of_len2_a(x)
}

//! > result
cycle_of_len2_a: ap_change=Ok(Unknown), has_cycles=Ok(true)
cycle_of_len2_b: ap_change=Ok(Unknown), has_cycles=Ok(true)
call_cycle_of_len2: ap_change=Ok(Unknown), has_cycles=Ok(true)
