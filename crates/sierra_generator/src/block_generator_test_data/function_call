//! > Test function call.

//! > test_function_name
block_generator_test

//! > function
func foo(mut z: MyStruct) -> () {
    let x = bar(1, 2, z);
    bar(x, x + x, z);
}

func bar(a: felt, b: felt, ref z: MyStruct) -> felt {
    0
}

//! > function_name
foo

//! > module_code
extern type MyStruct;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
felt_const<1>() -> ([0])
felt_const<2>() -> ([1])
PushValues([2]: MyStruct, [0]: felt, [1]: felt) -> ([5], [6], [7])
function_call<user@test::bar>([5], [6], [7]) -> ([3], [4])
felt_add([4], [4]) -> ([8])
PushValues([3]: MyStruct, [4]: felt, [8]: felt) -> ([11], [12], [13])
function_call<user@test::bar>([11], [12], [13]) -> ([9], [10])
struct_construct<Unit>() -> ([14])

//! > ==========================================================================

//! > Test function call 2.

//! > test_function_name
block_generator_test

//! > function
func foo() -> felt {
    let x = 7;
    bar(x, 7);
    bar2(bar(x, 7), bar(x, 7))
}

//! > function_name
foo

//! > module_code
func bar(a: felt, b: felt) -> felt {
    0
}
func bar2(a: felt, b: felt) -> felt {
    0
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
felt_const<7>() -> ([0])
felt_const<7>() -> ([1])
PushValues([0]: felt, [1]: felt) -> ([3], [4])
function_call<user@test::bar>([3], [4]) -> ([2])
felt_const<7>() -> ([5])
PushValues([0]: felt, [5]: felt) -> ([7], [8])
function_call<user@test::bar>([7], [8]) -> ([6])
felt_const<7>() -> ([9])
PushValues([0]: felt, [9]: felt) -> ([11], [12])
function_call<user@test::bar>([11], [12]) -> ([10])
PushValues([6]: felt, [10]: felt) -> ([14], [15])
function_call<user@test::bar2>([14], [15]) -> ([13])

//! > ==========================================================================

//! > Call libfunc explicitly

//! > test_function_name
block_generator_test

//! > function
func foo() -> felt {
    my_libfunc(3, 6)
}

//! > function_name
foo

//! > module_code
extern func my_libfunc(a: felt, b: felt) -> felt;

//! > semantic_diagnostics
error: An extern function must be marked as nopanic.
 --> lib.cairo:1:1
extern func my_libfunc(a: felt, b: felt) -> felt;
^***********************************************^

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
felt_const<3>() -> ([0])
felt_const<6>() -> ([1])
my_libfunc([0], [1]) -> ([2])
enum_match<core::PanicResult::<core::felt>>([2]) { label0([3]) label1([4]) }
label0:
branch_align() -> ()
PushValues([3]: felt) -> ([5])
jump() { label2() }
label1:
branch_align() -> ()
enum_init<core::PanicResult::<core::felt>, 1>([4]) -> ([6])
PushValues([6]: core::PanicResult::<core::felt>) -> ([7])
return([7])
label2:
enum_init<core::PanicResult::<core::felt>, 0>([5]) -> ([8])
